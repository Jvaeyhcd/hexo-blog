{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/dexo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/dexo/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/dexo/source/css/dexo.css","path":"css/dexo.css","modified":1,"renderable":1},{"_id":"themes/dexo/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/dexo/source/css/layout.css","path":"css/layout.css","modified":1,"renderable":1},{"_id":"themes/dexo/source/css/page.css","path":"css/page.css","modified":1,"renderable":1},{"_id":"themes/dexo/source/css/post.css","path":"css/post.css","modified":1,"renderable":1},{"_id":"themes/dexo/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/dexo/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/dexo/source/js/back-top.js","path":"js/back-top.js","modified":1,"renderable":1},{"_id":"themes/dexo/source/js/dexo.js","path":"js/dexo.js","modified":1,"renderable":1},{"_id":"themes/dexo/source/js/helper.js","path":"js/helper.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"themes/dexo/languages/en.yml","hash":"bb1a08d3339a7ee6bc508fd77223488d74d8878f","modified":1652929991740},{"_id":"themes/dexo/.DS_Store","hash":"20c164c2a0f814075998904c41028650b795fa5e","modified":1652934589139},{"_id":"themes/dexo/_config.yml","hash":"ee341d10e863575a6e4541649f51eb8d24962c43","modified":1652929991740},{"_id":"themes/dexo/layout/archive.ejs","hash":"2ae2c7510aeaa4ddbc91ec01180936ff964e9cea","modified":1652929991741},{"_id":"themes/dexo/layout/about.ejs","hash":"78fdfacdaa176c34899c2dbf95d32b00d1c8631f","modified":1652929991741},{"_id":"themes/dexo/.editorconfig","hash":"3036325288c2bdf484691e761250264acdf9916c","modified":1652929991740},{"_id":"themes/dexo/layout/layout.ejs","hash":"a428f86c9f5fe0525c0103e98251c614ae934b67","modified":1652929991741},{"_id":"themes/dexo/layout/category.ejs","hash":"daaa7d227ca289a4ffa2bddb904076dea5ce0521","modified":1652929991741},{"_id":"themes/dexo/package.json","hash":"88ddfde9d60556fdd8146d2c244a21d4e4dcb5ef","modified":1652929991742},{"_id":"themes/dexo/languages/zh-cn.yml","hash":"e9d7f5bc6ec0c0260cbedd033add63851ed6b384","modified":1652929991740},{"_id":"themes/dexo/layout/tag.ejs","hash":"0e2485c644e1d454b351c429696603278654b828","modified":1652929991742},{"_id":"themes/dexo/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1652929991744},{"_id":"themes/dexo/layout/page.ejs","hash":"633e4597e5f62fd8ede9425220d78347823c0867","modified":1652929991741},{"_id":"themes/dexo/layout/post.ejs","hash":"bad31711d28834f32dbeeb3ecd18bc75f02fb310","modified":1652929991742},{"_id":"themes/dexo/layout/index.ejs","hash":"a2f66af94cb7688b747794fffa7c63733952bac9","modified":1652929991741},{"_id":"themes/dexo/scripts/js/md5.js","hash":"c6feb6e118ae5191bf3ada7a10715aeb4db4c549","modified":1652929991743},{"_id":"themes/dexo/layout/partials/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1652929991741},{"_id":"themes/dexo/layout/partials/back-top.ejs","hash":"519ecb49fcc1c96a5a4db392bc19c5465f02668f","modified":1652929991741},{"_id":"themes/dexo/layout/partials/footer.ejs","hash":"fbe0834fb8fc306122ff7364e4294aaac6e33107","modified":1652929991742},{"_id":"themes/dexo/layout/partials/comment.ejs","hash":"9c8857b6f849480629812278d4729d9a25fcf0c6","modified":1652929991741},{"_id":"themes/dexo/layout/partials/google-analytics.ejs","hash":"78823298e9e47d8e6556fc2bb4598fc2814f2d52","modified":1652929991742},{"_id":"themes/dexo/layout/partials/header.ejs","hash":"36077a1f4225407b46d5b655f87b935863f9f220","modified":1652929991742},{"_id":"themes/dexo/layout/partials/item-timeline-post.ejs","hash":"68dadc22e2242ce62df062844349653324a563ee","modified":1652929991742},{"_id":"themes/dexo/layout/partials/item-timeline-title.ejs","hash":"a8a6c5e8c9d79c4e83e6adb0cb357aef548b579d","modified":1652929991742},{"_id":"themes/dexo/layout/partials/item-year.ejs","hash":"57295746a16c8f1dcfb128f8b92b555c126d1655","modified":1652929991742},{"_id":"themes/dexo/layout/partials/recent-posts.ejs","hash":"b69abb7a36ee398ba7608c12d1ace91db383fa28","modified":1652929991742},{"_id":"themes/dexo/source/css/custom.css","hash":"25b60293cac3b7052dca991e1e95efca5c727335","modified":1652929991743},{"_id":"themes/dexo/source/css/page.css","hash":"08d36cf1a90d9e1386ee069a321d8c4462e476f4","modified":1652929991744},{"_id":"themes/dexo/source/css/layout.css","hash":"e090217f1aaa93d435acb2e12d7defc9d0833284","modified":1652929991744},{"_id":"themes/dexo/source/img/favicon.ico","hash":"bbf83346a4cc71f8dc883a1dbc00aacd8b08bb06","modified":1652929991744},{"_id":"themes/dexo/source/img/favicon.png","hash":"214aa1893a0cebe24612a658523d998166811844","modified":1652929991744},{"_id":"themes/dexo/source/js/back-top.js","hash":"f96ce358ccf1504e7ccd9da200568d9ce6dfc854","modified":1652929991745},{"_id":"themes/dexo/source/js/dexo.js","hash":"f548e73c8697d7c9b7922aaa966ff4fd5744e024","modified":1652929991745},{"_id":"themes/dexo/source/js/helper.js","hash":"d646a8726b2be821e9089995277da68830062551","modified":1652929991745},{"_id":"themes/dexo/source/css/font-awesome.min.css","hash":"ce433680d044ba1aedd6a650d5adcf098aeab388","modified":1652929991744},{"_id":"themes/dexo/layout/partials/item-post.ejs","hash":"5602769ecb9ebe189abe98f4968cf0f941d408be","modified":1652940560940},{"_id":"source/CNAME","hash":"51900fe1f9f9ceb55cdc9601186b51bf09074186","modified":1652932034589},{"_id":"source/google5c27410f12a1e5a9.html","hash":"74522dfb66851c93f4f1322ee71117a3932a9702","modified":1652929991739},{"_id":"themes/dexo/source/css/post.css","hash":"fdb708ad466214ba771f1b7165d771345290ba4c","modified":1652940636372},{"_id":"source/googlec25480101521e91f.html","hash":"6694f79e4a1addbf4f77e7513a72ff29e6e65947","modified":1652929991739},{"_id":"source/baidu_verify_wFUlZEYgwT.html","hash":"8cf3cc068f7cff1361b5fe37230acab5b99db628","modified":1652929991739},{"_id":"source/about/index.md","hash":"bc1e33abe97db8273e6b12f35bb578534dde20a2","modified":1652929991739},{"_id":"source/categories/index.md","hash":"d3606803cd57e4f26ec59197c0255e9e459c8c4f","modified":1652929991739},{"_id":"source/category/index.md","hash":"7f7244fded59157de316a6b1ba4dbb6fc08a2a5c","modified":1652929991739},{"_id":"source/_posts/App-Store上线完整流程.md","hash":"78606b2cffd5222df73b5cdb0cbc658908a37365","modified":1652929991643},{"_id":"source/_posts/AES-CBC-128-PKCS5Padding加密解密算法（iOS、Android、JavaScript、PHP）.md","hash":"36113bf2306588dfc346e1431edb58c263c8d2db","modified":1652929991643},{"_id":"source/_posts/AppShot-带壳截图屏幕截图制作工具.md","hash":"c167976ad2052400e4ad7bbba75de5812983ab17","modified":1652929991666},{"_id":"source/_posts/Block正确使用避免Cycle-Retain和Crash.md","hash":"e57472cab711cbd4cc3352c66dc1b289c32969ca","modified":1652929991668},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解.md","hash":"98a1fa3c3664e5c6b3a5e511299fc77bc3bf2e8d","modified":1652929991668},{"_id":"source/_posts/CocoaPods安装和使用教程.md","hash":"95a8af0df6d39c8db4c9df8bcbf7dfd4d2ad4f31","modified":1652929991673},{"_id":"source/_posts/CocoaPods的制作过程.md","hash":"6c60f335e13bf814b5b6771c52b37bb0417b5f69","modified":1652929991673},{"_id":"source/_posts/Cocoapods无法search到库的解决办法.md","hash":"63f6af180025d1ba6bc7e58ace8b058c3c5b3567","modified":1652929991673},{"_id":"source/_posts/CocosPods使用过程中遇到的一些问题，以及解决办法.md","hash":"8bdb6297964f0200e733f5fa549045d96ece8742","modified":1652929991673},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets.md","hash":"751f3e7a1655511d1e156e61304a4523e490cff5","modified":1652929991673},{"_id":"source/_posts/Github上优秀的Objective-C项目简介.md","hash":"4a3441ed19b672d76c6ec61fe97d77110a2fd8b4","modified":1652929991675},{"_id":"source/_posts/Jenkins-gradle-coding-Android持续集成.md","hash":"69435fb584db3b9907e62fcd5b324484009b638c","modified":1652929991678},{"_id":"source/_posts/Hexo在github上构建免费的博客.md","hash":"8d68a9940596e68eba4c537f42eb336b2c47f45a","modified":1652929991675},{"_id":"source/_posts/Hexo安装新主题apollo.md","hash":"ef2a078e1e14cdbbee2ca4a77016cd3bb3cc5969","modified":1652929991677},{"_id":"source/_posts/Jenkins-iOS集成常见错误及解决办法.md","hash":"dc757286930ae7e0d4e4d98ceaaeab8f350c7a5e","modified":1652929991678},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹.md","hash":"c0429d5804f0a143bbf6f2609a7a04e4f24b1b1e","modified":1652929991680},{"_id":"source/_posts/Mac环境中Jenkins停止和启动命令.md","hash":"2b6cf49f830d5bf7c571d5819dc8a1609841c487","modified":1652929991682},{"_id":"source/_posts/NSURLErrorDomain-Code-1002-“unsupported-URL”.md","hash":"bf2d85d5bdadbd523679f4a11519a529087d2b3b","modified":1652929991682},{"_id":"source/_posts/Objective-C身份证验证实现.md","hash":"d118290d6cb552bb08a1c2a767f187cc53875571","modified":1652929991683},{"_id":"source/_posts/Objective-C过滤NSString中的HTML标签.md","hash":"5a36fffdd1d2a957b2a56f136aa82abfc4d83c78","modified":1652929991683},{"_id":"source/_posts/Objective-C常用关键字的使用与区别.md","hash":"0a029b5ce3561164c10997c329db0d5fedf5ebb4","modified":1652929991682},{"_id":"source/_posts/RXSwift基础.md","hash":"2a9cf699a75fb269bfdbf4da7f3040630c57d3d8","modified":1652929991683},{"_id":"source/_posts/React-Native报错-config-h-file-not-found.md","hash":"8a15820cd46e1c3b68dda99fcfeeb7cb264d35df","modified":1652929991702},{"_id":"source/_posts/Swift学习笔记之函数.md","hash":"6753988b9035f1292b744e248043e40fce4f9ec0","modified":1652929991703},{"_id":"source/_posts/Swift学习笔记之闭包.md","hash":"321ecc25180cb92b510cab4643770e4a68e34f57","modified":1652929991704},{"_id":"source/_posts/Swift学习笔记之基础部分.md","hash":"0ee4504938a22df1bf557f4e15b2504953fc4586","modified":1652929991704},{"_id":"source/_posts/Swift开源项目汇总.md","hash":"cc0f2f9a8647b5aa8173908aae5997e4d082896d","modified":1652929991704},{"_id":"source/_posts/RESideMenu在所有界面都会侧滑的问题解决办法.md","hash":"12b6343b6b470b6535525d56dd891ab0bb2ebe95","modified":1652929991683},{"_id":"source/_posts/Vue-IE报错SCRIPT1006：缺少‘-’解决办法.md","hash":"179cae22c6346c700b332d251caf7d2c85f05626","modified":1652929991704},{"_id":"source/_posts/Swift学习笔记之高级运算符.md","hash":"80b44bf49f426dc8d90418e95bc9ccd9c56505fb","modified":1652929991704},{"_id":"source/_posts/hPlayer-功能强大的本地视频播放器.md","hash":"4f6bed0771791bd6f8d78e5ce31c4b6b1d3056bb","modified":1652929991704},{"_id":"source/_posts/iOS-UIWebView简单使用.md","hash":"6a24bc702646a8b57b63e67f55433c83f6ddcaca","modified":1652929991713},{"_id":"source/_posts/iOS几种不同传值方式.md","hash":"726a919df8ab7c620b664cea46deee2171164d66","modified":1652929991714},{"_id":"source/_posts/iOS中造成dealloc不调用的原因.md","hash":"fd944f5dee798270c47b81b306cd0811a20c34bc","modified":1652929991714},{"_id":"source/_posts/iOS上完美编译FFmpeg.md","hash":"3b3b9471e6a09901fe8f780fee6fa5e77cd27f2a","modified":1652929991713},{"_id":"source/_posts/iOS高级开发面试题.md","hash":"0a35e84004d6113ad00affaf93d7d5e3e5bf1fcb","modified":1652929991715},{"_id":"source/_posts/iOS打包上传常见错误以及解决办法.md","hash":"6bb958cde9e928c1e06d871ac5637c16b6cf4974","modified":1652929991714},{"_id":"source/_posts/iOS高级开发面试题（下）.md","hash":"7a90162703d092ccedacc5afcf16998c7f2839fd","modified":1652929991716},{"_id":"source/_posts/pd-recurrence.md","hash":"5db197836df88c7a15648db3d4fb1d385ff7637e","modified":1652929991716},{"_id":"source/_posts/iOS高级开发面试题（中）.md","hash":"6fada70eb14c2e3973a78b29dd2615e0af7419b4","modified":1652929991716},{"_id":"source/_posts/【iOS】Objective-C关键知识点汇总.md","hash":"92b8a5aab956cbcd73b76b842328da8ac26c2e8c","modified":1652929991722},{"_id":"source/_posts/【iOS】Runtime详解.md","hash":"bf868ab570013db3e1d82b0a20bd8e46650b0d48","modified":1652929991722},{"_id":"source/_posts/【iOS】Runtime应用.md","hash":"656648922281202c47d58e0890f57b0fd9ccf722","modified":1652929991722},{"_id":"source/_posts/【iOS】Swift关键知识点汇总.md","hash":"aaf911e15fcc77179e31ad0ad540437b4033488e","modified":1652929991722},{"_id":"source/_posts/修改Mysql数据库支持emoji.md","hash":"fb650a0a55546d7a5f5c52ddec90dde6ede2783c","modified":1652929991737},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法.md","hash":"60accd9d4a841a947615872f521973ddd89e1219","modified":1652929991722},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包.md","hash":"f0f7f215da8e544b92de809e3395c28dbff1c1ed","modified":1652929991726},{"_id":"source/_posts/关于UItableView的复用.md","hash":"2fc5d61a8952b595d8a044d038a393c2911022c3","modified":1652929991737},{"_id":"source/_posts/关于iOS多线程小记.md","hash":"207d00711046e540f3943090fc1c71b51c2c1318","modified":1652929991737},{"_id":"source/_posts/在-React-Native-中使用-ART-绘制波浪动画.md","hash":"e73415ec6777d5739514ac844620d1ec2b2c8ff6","modified":1652929991738},{"_id":"source/_posts/初识ReactiveCocoa响应式编程.md","hash":"d32c6a779a54f1539dffadb7aedce7d953449e01","modified":1652929991738},{"_id":"source/_posts/生成永久链接-permalink-hexo.md","hash":"f61939d009bdb151a09cc702891ba59e72f92a32","modified":1652929991738},{"_id":"source/_posts/全屏设置setStatusBarOrientation-未生效的解决办法.md","hash":"9a852aa5cafdbdf98925d8da7094d82b33825032","modified":1652929991737},{"_id":"source/hplayer-copyright/index.md","hash":"ff7b54863d5633df52d89f7631c8544a4ac8ef4e","modified":1652929991739},{"_id":"source/link/index.md","hash":"357e194d549590b0ff8dcf404137578b10530196","modified":1652929991739},{"_id":"source/_posts/关闭iOS系统自动更新提示的方法.md","hash":"7c6eb66559669c3f32d384a1ec986ece7406cfa3","modified":1652929991737},{"_id":"source/tag/index.md","hash":"34c7b76f347ad9f82a1b085bc6691d24c8fb126b","modified":1652929991740},{"_id":"source/project/index.md","hash":"fdf7ecc245ccfc593aa5b10cfb58ca003f600420","modified":1652929991740},{"_id":"source/search/index.md","hash":"50c12c2a6300c2d6355834fda046593a02bd9be0","modified":1652929991740},{"_id":"source/tags/index.md","hash":"69f667180dd94c42f6f0db79011b5ab7a449f1c5","modified":1652929991740},{"_id":"source/_posts/AppShot-带壳截图屏幕截图制作工具/905614-8ac7cd86e21116b5.webp","hash":"20645a5d6f3a66508f6f515c6ab785c725698a1f","modified":1652929991668},{"_id":"source/_posts/App-Store上线完整流程/application_loader_login.png","hash":"d3b0b44aeffa191e54f304c1b283fe9378f453aa","modified":1652929991646},{"_id":"themes/dexo/source/.DS_Store","hash":"7bdd2b372889d4883dcbc3d88fef1ff322e79cf9","modified":1652934586627},{"_id":"source/_posts/App-Store上线完整流程/create_certSigningRequest_step2.png","hash":"45aeb702688a46534eab4e7dcfb91def330a990b","modified":1652929991652},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step1.png","hash":"0ec0b597d74e46e186c2cf9a4192b3fd850b561c","modified":1652929991662},{"_id":"source/.DS_Store","hash":"8e4554932a7fc2b8e7681d8f8c654cf41db5e8c9","modified":1652934586631},{"_id":"source/_posts/Hexo在github上构建免费的博客/hexo-dict.png","hash":"255bc2cb12d9033eb1b7a94308aa6d91273e62f2","modified":1652929991676},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/dSYMs.png","hash":"75de545e626b87d4b2ad2a5455fc9cb00a19b755","modified":1652929991674},{"_id":"source/_posts/Hexo在github上构建免费的博客/hexo-new.png","hash":"127b749713d588614589b7f3640626361454b26e","modified":1652929991677},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/export.png","hash":"0316935caacd625cf2e75f075cae793ef9b80da5","modified":1652929991674},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/problem.png","hash":"f98c771d6c5abd3a804fb24129e358e38b3db5d4","modified":1652929991674},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/zip.png","hash":"e231f5e15647a6a0cb7fbb0399d8de1726228f52","modified":1652929991675},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/product.png","hash":"f214e4bd524ed22ea92ad9a9eb0c5b9e4661bc86","modified":1652929991674},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-11de31e505d895a1.png","hash":"3915d880f9d79e7531d71b0e4507ac264eb85c37","modified":1652929991669},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-6d980e01c0a78df8.png","hash":"14aae6ffe7aec7c89d313739c4b1d7091b721575","modified":1652929991670},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/bash.png","hash":"987274dd448834be65c83327d93ea03bbf7be606","modified":1652929991680},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/show_in_finder.png","hash":"8dca97194fb9d9e4062ed4833410f4c8796e4d9a","modified":1652929991675},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/show.png","hash":"ca666286a21a28b7985babe9698ba0a82d9b894b","modified":1652929991682},{"_id":"source/_posts/RXSwift基础/empty.png","hash":"6c37fedfec79f8089968362a449c770d0cd40b45","modified":1652929991689},{"_id":"source/_posts/RXSwift基础/never.png","hash":"77fdebc9b39a8664d5268b07d4745c5662a069fe","modified":1652929991691},{"_id":"source/_posts/iOS高级开发面试题（中）/method_swizzling.png","hash":"597c0e0efeee344fdcd5f39c784a57fa0c7cd3c0","modified":1652929991716},{"_id":"source/_posts/iOS上完美编译FFmpeg/1.png","hash":"ffa855d4a047ebcaf89efafe2b2572dd36b343ec","modified":1652929991713},{"_id":"source/_posts/iOS高级开发面试题/responder_chain.webp","hash":"d81940209362ad10c748616c1f26aad3b14e6a46","modified":1652929991715},{"_id":"source/_posts/【iOS】Runtime详解/1628088a3e4f0167.png","hash":"2787799a3585cc8381300d8842d393a38f0b9f8f","modified":1652929991722},{"_id":"source/_posts/【iOS】Runtime详解/runtime_msg_send.svg","hash":"67e526c2513932a4c5c6ac3e17bc5b9163e6cb25","modified":1652929991722},{"_id":"source/_posts/pd-recurrence/donggui_1.png","hash":"13f760cf960ac4ccddb2a605777fd1952f3566ff","modified":1652929991716},{"_id":"source/_posts/iOS打包上传常见错误以及解决办法/QQ201610180.png","hash":"eeed7fb77ec93af280f5cdf327d393a6cc20036b","modified":1652929991714},{"_id":"source/_posts/pd-recurrence/donggui_5.png","hash":"21ded00d702b81be442db736acaf6db14ab15792","modified":1652929991717},{"_id":"source/_posts/pd-recurrence/donggui_3.png","hash":"ba69464fd3f2eb6b83e22f9368b2bdd09755a92b","modified":1652929991716},{"_id":"source/_posts/pd-recurrence/donggui_2.png","hash":"c514eb0ef728a8d6a1c45cd1940363d030da4572","modified":1652929991716},{"_id":"source/_posts/pd-recurrence/donggui_4.png","hash":"1a6171138f61e3fb962bd80b72146687fd3d1a50","modified":1652929991716},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-9df0785347c9212e.png","hash":"39755974811c7e48fb93b9b1375ec4debfbd2344","modified":1652929991726},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-c52750828b24f91e.png","hash":"38f21d0b7ffdb59783e8fefba698246eb8d22dd7","modified":1652929991726},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/execute_shell.png","hash":"84c704b47c7050694ed0f27cb228b80ec8f811f3","modified":1652929991729},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/execte_config.png","hash":"c20e2fd2053fc65f7588330b50098f4e84f10105","modified":1652929991729},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/coding.png","hash":"bb3007f5543733cb367100aa23f9d6d4622de9da","modified":1652929991729},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/set_upload_fir.png","hash":"e6c01dd77c909a9f787bf6d806db96659bda83da","modified":1652929991733},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/upload_fir.png","hash":"7d8e63da80e4768ecf630a7bed6ff72703d7c775","modified":1652929991735},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/zidong_goujian.png","hash":"7338bac06b6edfcbb31e7d1159806923187c0dc9","modified":1652929991737},{"_id":"source/_posts/生成永久链接-permalink-hexo/4249636-95dccafbae3fbf64.png","hash":"66f1968aa1ec756e46db49be1ca5dafd3cd6e4c1","modified":1652929991739},{"_id":"source/_posts/关闭iOS系统自动更新提示的方法/thumb_IMG_0889_1024.jpg","hash":"55ecebf0786c44c56fed91c52f946d38d6ec9b97","modified":1652929991738},{"_id":"source/_posts/生成永久链接-permalink-hexo/4249636-95dccafbae3fbf64.webp","hash":"56832faf7dc0682c9cc8cec4e1a55fd80dd8a1de","modified":1652929991739},{"_id":"source/_posts/关闭iOS系统自动更新提示的方法/thumb_IMG_0890_1024.jpg","hash":"e5a5f667e73c8cb9db355317089edf1d96d362e6","modified":1652929991738},{"_id":"themes/dexo/source/css/dexo.css","hash":"1d15cf1a38652dd1592f216f6b3a711633f087a5","modified":1652929991743},{"_id":"source/_posts/.DS_Store","hash":"81ca500c8b9caa96b61ab4c81b23537f6c6c110f","modified":1652934410858},{"_id":"source/_posts/App-Store上线完整流程/application_loader_step2.png","hash":"d750221918bb444e5e620848f1e5d7bc62cfc50a","modified":1652929991647},{"_id":"source/_posts/App-Store上线完整流程/build_setting.png","hash":"a1b8c73575cc5b8e340d386ed9e1763579bf3798","modified":1652929991650},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step5.png","hash":"a1c8c465ece29a3d151a74bb3692977854aefb43","modified":1652929991660},{"_id":"source/_posts/App-Store上线完整流程/developer_center.png","hash":"2f77e6d0e6a50ae50452236fbe0befcc57c52eb1","modified":1652929991661},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step4.png","hash":"6c123c017fad7bbe83fc1505cd01337c7555c418","modified":1652929991664},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step2.png","hash":"2ed06cf54889786ab490abe7d11b4bc2f11bfb4a","modified":1652929991663},{"_id":"source/_posts/App-Store上线完整流程/upload_itunes_connect.png","hash":"1a0227ef9f954e77d862d5dd0cd3d737146e4064","modified":1652929991666},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step3.png","hash":"96934124b29270ced80c24adf06502e97fd7fb12","modified":1652929991663},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step5.png","hash":"04e76730436605d533e21512892523205c54e335","modified":1652929991665},{"_id":"source/_posts/Hexo安装新主题apollo/apollo.png","hash":"76e84d50b93d48566d74a77947f35430e21a9596","modified":1652929991678},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-cb9896a7ba570a22.png","hash":"27d33d360610f3d27f728a9456361f15c4a39b8d","modified":1652929991672},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-e85a60e792a0c99d.png","hash":"6997de205ff0af38ae57d42cf701d12e8f6189c3","modified":1652929991673},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-282356612ba9f28c.png","hash":"c41d6de6c7c5d41ed7abaf6e9b2ae33f5d092316","modified":1652929991669},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/finder.png","hash":"8eaf45417254832271290d1043ea2768152f29cf","modified":1652929991681},{"_id":"source/_posts/RXSwift基础/create.png","hash":"5a48878fab58c5e594126a43c721f8edae008440","modified":1652929991686},{"_id":"source/_posts/RXSwift基础/just.png","hash":"fe83de234d6a1e6fe3a04102a3e059d5fba67bcb","modified":1652929991691},{"_id":"source/_posts/iOS打包上传常见错误以及解决办法/QQ201610181.png","hash":"be9b5f8028449a41f528361beb01b6d85b68cb1d","modified":1652929991715},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/code_signing_OS_X_keychain_options.png","hash":"0ea9c6f2686de376af0484c6e125d8399267d85f","modified":1652929991728},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/set_code_source.png","hash":"bb6a06cf7a204d67eb78d2675fafb6226af73a85","modified":1652929991732},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/shoudong_goujian.png","hash":"0ec03e936a29c0e609c671041fe980cf9a46b5b3","modified":1652929991733},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/xcode_build_options.png","hash":"c142b6e3769a4ba4486b3478d84e20f19a822ba3","modified":1652929991736},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/xcode_general_build_settings.png","hash":"6f5d401eba87cc713a8a91757a4d36461bcb3ac3","modified":1652929991737},{"_id":"source/_posts/App-Store上线完整流程/archive_step_1.png","hash":"ad46be33ca981b89a8c530acf934e66237fd0e1c","modified":1652929991649},{"_id":"source/_posts/App-Store上线完整流程/archive.png","hash":"b7fe83694a65966da3a60bd35e6c7d6d868dc65c","modified":1652929991648},{"_id":"source/_posts/App-Store上线完整流程/create_certificates_step3.png","hash":"d851186b031d65f54564bf5a30c52964da74b551","modified":1652929991655},{"_id":"source/_posts/App-Store上线完整流程/create_certificates_step2.png","hash":"be6a4a84a58080396a3d2dbe1a2e5ec8c2f5fa36","modified":1652929991654},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step3.png","hash":"8ce566147802de1de8729c00e0dd1c41a5d023c0","modified":1652929991659},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step2.png","hash":"d4b489d58d42af637ef3746e710cb1a085d3eb4f","modified":1652929991658},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step4.png","hash":"2749c823a187291ae06e35bd1e2f76be3bb701ad","modified":1652929991659},{"_id":"source/_posts/Hexo在github上构建免费的博客/github.png","hash":"4fd74baa712d3e0035f61fd420152a1836f767f0","modified":1652929991676},{"_id":"source/_posts/App-Store上线完整流程/create_app_id.png","hash":"ee610f0fc8744d4a21a4e234524b5717c170183e","modified":1652929991651},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/hidefinder.png","hash":"42d73f1de8cf1a391f740a56ecc71d833a561b7d","modified":1652929991682},{"_id":"source/_posts/RXSwift基础/deferred.png","hash":"cc1f2dcfdcfbe6dbcb0f59807ad58c4700bd0b6a","modified":1652929991687},{"_id":"source/_posts/RXSwift基础/catch.png","hash":"7811d29c918f14b41b30dcfd9486a50ed617bb38","modified":1652929991685},{"_id":"source/_posts/RXSwift基础/doOn.png","hash":"0dbf4a98a697044dad595dea7f76e1f6a073ca76","modified":1652929991689},{"_id":"source/_posts/RXSwift基础/flatMap.png","hash":"bf2d87b70176a76895f1ba0be768f3aea7ec31b4","modified":1652929991690},{"_id":"source/_posts/RXSwift基础/retry.png","hash":"7b4f934a032d35168975dec06c121dab4a2400b2","modified":1652929991695},{"_id":"source/_posts/RXSwift基础/takeWhile.png","hash":"403b7a67053608f490edd0dec3785db731c2da6d","modified":1652929991701},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/build_message.png","hash":"6640b7eab8e4b64eac90a70450318b2c8e9bca18","modified":1652929991727},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/keychain.png","hash":"bd197612c93d0e86620dcdb1a2a9d488fecf6346","modified":1652929991731},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/new_job.png","hash":"3e0b8855a5ceac3f2508bdb2aa25477717de0c8a","modified":1652929991732},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/ssh_username_private_key.png","hash":"3360f557764ee40203a1669b10357fae79902d2b","modified":1652929991734},{"_id":"source/_posts/App-Store上线完整流程/Identifiers.png","hash":"f01faa2e96fb54c3bc7efb53f913b5fa3efbf952","modified":1652929991645},{"_id":"source/_posts/App-Store上线完整流程/create_certificates_step1.png","hash":"c2bea8c43d3c46193607557f7339e0d4113a3c37","modified":1652929991653},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step1.png","hash":"bdf170a53cf97efe7684274cfca647e4cb0c1c5f","modified":1652929991657},{"_id":"source/_posts/App-Store上线完整流程/create_certSigningRequest_step1.png","hash":"ae9b055b0af55449b3a5eae168f8ef9a874b1dc5","modified":1652929991651},{"_id":"source/_posts/Jenkins-iOS集成常见错误及解决办法/error_example_1.png","hash":"5069b886f0b936bccdd2c9ad74628062f108371e","modified":1652929991679},{"_id":"source/_posts/RXSwift基础/replay.png","hash":"eb6031705757cd891198df219b1ed88da3f3e007","modified":1652929991694},{"_id":"source/_posts/RXSwift基础/publish.png","hash":"2cbcf233af3133222b26812ca4aec3367a386d33","modified":1652929991693},{"_id":"source/_posts/RXSwift基础/skipWhile.png","hash":"bfd9212b8ecb8bc0c756d46a55783358d0e43463","modified":1652929991697},{"_id":"source/_posts/RXSwift基础/switch.png","hash":"b855c53e603cc2414c568213f13c2d5a3079f1b9","modified":1652929991698},{"_id":"source/_posts/React-Native报错-config-h-file-not-found/20171205145336037.jpeg","hash":"6b27b2d697ca9c33ee47fef295238be8934335fe","modified":1652929991703},{"_id":"source/_posts/RXSwift基础/toArray.png","hash":"662d3ee4b06cfd3869e993c698ef16829a8cbcfc","modified":1652929991702},{"_id":"source/_posts/AppShot-带壳截图屏幕截图制作工具/905614-8ac7cd86e21116b5.png","hash":"da91e6d24dc231a51ecccf332b51b46809145e1a","modified":1652929991667},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-aad2c9e81a2873c7.gif","hash":"90e7e6fdf7d888d5b4d8f9b258d744aedbb4db83","modified":1652929991671},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-7e346e4ec6a37fa2.png","hash":"7fa7a5802a47871e62ee1ce821046ab4a52c0c9e","modified":1652929991725},{"_id":"source/_posts/App-Store上线完整流程/application_loader_1.png","hash":"e070fbddd0894334e9ce56743a4c5391c055060e","modified":1652929991646},{"_id":"source/_posts/pd-recurrence/donggui_6.png","hash":"16c1ccdb4be5242d08f38e458b835e05a9fae17f","modified":1652929991721},{"_id":"source/_posts/hPlayer-功能强大的本地视频播放器/app_store.png","hash":"b019195e68b4687c590d4f4e9299645342f98c52","modified":1652929991713},{"_id":"public/googlec25480101521e91f.html","hash":"92613a3cab0d998a78e93f0d71ddc58cc181dc7f","modified":1652940917397},{"_id":"public/baidu_verify_wFUlZEYgwT.html","hash":"63b7c52192047dfd46c196829bdf8cf5dc2ddd86","modified":1652940917397},{"_id":"public/about/index.html","hash":"828121c96cc6ae36f75d727ec8db8218b78fc68f","modified":1652940917397},{"_id":"public/category/index.html","hash":"bba7eacfb4073fe794d046ada44154d92852b23b","modified":1652940917397},{"_id":"public/google5c27410f12a1e5a9.html","hash":"f3ccbde3de3207a78a948bd19a7993572a060bb8","modified":1652940917397},{"_id":"public/categories/index.html","hash":"3d6afc93a98eb9c11b044404a9e913331a386087","modified":1652940917397},{"_id":"public/tag/index.html","hash":"73f5b3df2a3525617de475f352277722047abea4","modified":1652940917397},{"_id":"public/project/index.html","hash":"6db69aa78377f67b97a4b14e7461d73acfda9588","modified":1652940917397},{"_id":"public/search/index.html","hash":"cbc294780122580f04f9acae9720cfd597ee3861","modified":1652940917397},{"_id":"public/posts/05c9df7e0c47bd64.html","hash":"6edfb1e105a4ff4bf745f0b591f7fcbb6cc61d44","modified":1652940917397},{"_id":"public/hplayer-copyright/index.html","hash":"8e00b82282b144c42c0de8d6f1aa1872ecd6c74b","modified":1652940917397},{"_id":"public/posts/f4da7ecc465746ee.html","hash":"a73a02c23991c15960a5c58dd8b2f030689ea64e","modified":1652940917397},{"_id":"public/posts/6d9355527852d1c6.html","hash":"40ed537ec962565f12a1f6de41ad7fc72d55cf2a","modified":1652940917397},{"_id":"public/tags/index.html","hash":"efd8d80c2519bb6ff1edf705aab047e15b8bfaf9","modified":1652940917397},{"_id":"public/link/index.html","hash":"9999f47caa2e9fd43b19f94ba3335b6d8039686f","modified":1652940917397},{"_id":"public/posts/82d2bd95f1e3557d.html","hash":"b699e6a6c7395fdcb3124e41a5e46d209a6d5727","modified":1652940917397},{"_id":"public/posts/6ddb868bf0c9539b.html","hash":"b5e6aac2cc0111bc53419451160b156894b6f716","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841.html","hash":"3143205794fb2178e8beffbb59c5108bfca8962d","modified":1652940917397},{"_id":"public/posts/6c8932d6101bb275.html","hash":"276e0afa5e543e1d1a1ae142f808c7a66a2d2786","modified":1652940917397},{"_id":"public/posts/020c6c996c128861.html","hash":"1d9142e79a0a333afcdb5cea207830cd1cb56894","modified":1652940917397},{"_id":"public/posts/fc9f6ee587f12a0d.html","hash":"1e7dc40c996cca7c9670c757a684343bdf9c5827","modified":1652940917397},{"_id":"public/posts/e2434ea71cfbfc1f.html","hash":"204d58ad2d5570b078aa1bd4bc3ced514e05e7f2","modified":1652940917397},{"_id":"public/posts/c0f2c0ac4dc26ecc.html","hash":"56629a64d6c90ce601fd669951e9af0580da6b04","modified":1652940917397},{"_id":"public/posts/44b8d78d98445413.html","hash":"886bd99558fa57f11e2aa889bb6caff52c7e473d","modified":1652940917397},{"_id":"public/posts/f705d18d988770f0.html","hash":"af989d55e1609a7546959da4d29eb484ad19f373","modified":1652940917397},{"_id":"public/posts/dffc5afb10488f2f.html","hash":"157174590f984e160331b3c4b3650136e2460239","modified":1652940917397},{"_id":"public/posts/0324c45dc635e1ed.html","hash":"ff6f3a15bfda14c00cda11b56c457772f18cbc18","modified":1652940917397},{"_id":"public/posts/e4250f7a7414ce80.html","hash":"649604acf79a4b0edd06874e9886dffe94f2fc0f","modified":1652940917397},{"_id":"public/posts/8ab809de7f3aefd3.html","hash":"3c6aff4dd58e4c37d55001c7be8e9799753eeb98","modified":1652940917397},{"_id":"public/posts/11fd5d6a13a7f99e.html","hash":"401edd28f9d6509c7c6100efbf1e02411fd6c535","modified":1652940917397},{"_id":"public/posts/47287f287faf96e1.html","hash":"e6d0e042aa66684c208681b3cfd94a82e22bdf1b","modified":1652940917397},{"_id":"public/posts/f3708cd2fbea5c86.html","hash":"aa9e11d3e223360d82cb7a0a5e7b46f56969dc17","modified":1652940917397},{"_id":"public/posts/08dad03c8474c031.html","hash":"ec24c07873dd05985ad65679092cce85eff40b40","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046.html","hash":"c893480c5f7aa4d59917a6893d1ba384f342201c","modified":1652940917397},{"_id":"public/posts/e5a0477099f91071.html","hash":"1247b8d2d407706d71265c51e56b8c889ec9786e","modified":1652940917397},{"_id":"public/posts/cba4703cb24c0232.html","hash":"b69be5c5f341cccb9190129f88a5748aeb2d1185","modified":1652940917397},{"_id":"public/posts/348ede5553fda841.html","hash":"be1856f8750aa336153aa70fb4c8816e6e267092","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a.html","hash":"2e4a6695006d19aeb0e8b3217d769a3206ea3425","modified":1652940917397},{"_id":"public/posts/e312d27d3094f3c7.html","hash":"cf27b69d924d243109659d5e5281e4b2952720f8","modified":1652940917397},{"_id":"public/posts/298b929a6d4a3530.html","hash":"51d810fab72de7873e8414e8f4dca610eed05e80","modified":1652940917397},{"_id":"public/posts/b0943f086f49644d.html","hash":"ee29f4e680122a1383fef0cccbafe89ab99696c1","modified":1652940917397},{"_id":"public/posts/c1dd23096e510f74.html","hash":"41e770e27967afa32a690baa456a03f77d063c83","modified":1652940917397},{"_id":"public/posts/6678c8d5e984a2bf.html","hash":"c404be6bdea4b53dfd987db732eb800b087f2f32","modified":1652940917397},{"_id":"public/posts/a92ecaf9bd4054ca.html","hash":"2bb05e74bddaf58b4baf8b8460779bb8356af7f0","modified":1652940917397},{"_id":"public/posts/3931c38f78b5e094.html","hash":"62269b36f6a7267c395a6ea3220b01fc07effadb","modified":1652940917397},{"_id":"public/posts/0bbcfa1b5067319a.html","hash":"fe2049a4473f2f889a3bd0b15bc8e131eb4bc99b","modified":1652940917397},{"_id":"public/categories/作品/index.html","hash":"0407d94e20bfc735ba94e07cb425b3766af0c160","modified":1652940917397},{"_id":"public/categories/iOS学习笔记/index.html","hash":"d562a5afa1660fa4ce445be8d697555bad616167","modified":1652940917397},{"_id":"public/categories/技术杂谈/index.html","hash":"9588f2391a4eda2b83915310d3bb9a2d14c1bd75","modified":1652940917397},{"_id":"public/categories/经验积累/index.html","hash":"cd9b1bd98d6569c44bd2965146fa5aefe10265a9","modified":1652940917397},{"_id":"public/categories/经验积累/page/2/index.html","hash":"3c809cc2638a6ba8dfa32b03ce68906de87f9094","modified":1652940917397},{"_id":"public/categories/知识积累/index.html","hash":"b29f1bd0ed634391d3cf3fad79c25de933e967bd","modified":1652940917397},{"_id":"public/categories/Mac基础/index.html","hash":"7da9661f4df98073d29ad99dc86676100ebca41c","modified":1652940917397},{"_id":"public/categories/常见错误/index.html","hash":"987da52f853b16eae3b85d6fa686bb9c6ad2eb3c","modified":1652940917397},{"_id":"public/categories/Swift学习笔记/index.html","hash":"04fbd72b2efcccc2818a0711bfe8f7b9961bef0d","modified":1652940917397},{"_id":"public/categories/知识汇总/index.html","hash":"791e84db797ce983f7f35e487faca14c3f237dea","modified":1652940917397},{"_id":"public/categories/动态规划/index.html","hash":"313d2df46919058e4bfddf53ebdf9ca89c7aa416","modified":1652940917397},{"_id":"public/categories/其他/index.html","hash":"f51bd27a25503428122a02dbb490360275128c88","modified":1652940917397},{"_id":"public/categories/常见问题/index.html","hash":"9d8c371b54a9f1f44eb506a7c10f9fb5c2354b67","modified":1652940917397},{"_id":"public/categories/hexo/index.html","hash":"2c62db5bb42816302470a83aa4876304eaa0453b","modified":1652940917397},{"_id":"public/archives/index.html","hash":"b4ca98f5c5b70fa4c27e63404b56bf11e12123ed","modified":1652940917397},{"_id":"public/archives/page/2/index.html","hash":"0ad8fdaea480d8486d873acd32646abef039d934","modified":1652940917397},{"_id":"public/archives/page/3/index.html","hash":"42eccae8ef2f2041def273bad1b9581e353b3f88","modified":1652940917397},{"_id":"public/archives/page/4/index.html","hash":"c979f6a6d4b29609e0884527ed3183a3551b0061","modified":1652940917397},{"_id":"public/archives/page/5/index.html","hash":"c73137d10a75526dd1cd2ccffaf185f676c9ec2a","modified":1652940917397},{"_id":"public/archives/page/6/index.html","hash":"be95c0dde41297cc60fa732bd83ddefbd5560011","modified":1652940917397},{"_id":"public/archives/2016/index.html","hash":"c699911178717c91062411a129bd379407c072cc","modified":1652940917397},{"_id":"public/archives/2016/page/2/index.html","hash":"02dbd05e0ad65989cc40ff547e8c203780bf0ddf","modified":1652940917397},{"_id":"public/archives/2016/page/3/index.html","hash":"0f1cadc3ccb82e3256e4db5e2453cd31d7d36f27","modified":1652940917397},{"_id":"public/archives/2016/page/4/index.html","hash":"a82f48e255fd41fad2f6e19539cde2a41a9fce68","modified":1652940917397},{"_id":"public/archives/2016/02/index.html","hash":"bd93bf23c791a4ed18967bf3f62892379611d143","modified":1652940917397},{"_id":"public/archives/2016/03/index.html","hash":"de305c6ba608adcf00d0933949c6bac09cf5f026","modified":1652940917397},{"_id":"public/archives/2016/04/index.html","hash":"f4911fdbe25c4709143d2a4dbe1ec0ee44ebb82d","modified":1652940917397},{"_id":"public/archives/2016/05/index.html","hash":"c2188f6b3b6dd16848d64900649ceba28019de9c","modified":1652940917397},{"_id":"public/archives/2016/06/index.html","hash":"4d9e75e6512b707675b8548280a69e31a32e3975","modified":1652940917397},{"_id":"public/archives/2016/07/index.html","hash":"e256d445db93c743f0e66e7519056484be5c4a7b","modified":1652940917397},{"_id":"public/archives/2016/08/index.html","hash":"43445d4d35f5f645fb4a2225de62af03ac138799","modified":1652940917397},{"_id":"public/archives/2016/09/index.html","hash":"bc81917f1579adeb39fa725c2d8435252fa7eb46","modified":1652940917397},{"_id":"public/archives/2017/08/index.html","hash":"99b35ea11be7e3487d73c27cc1186afc088b683b","modified":1652940917397},{"_id":"public/archives/2017/10/index.html","hash":"f40f7eac68e0040dddf8eb259f2d1d2901b25d4b","modified":1652940917397},{"_id":"public/archives/2018/index.html","hash":"aca3cd5b0ec74c8bc6a029f5c175c54cb272dd84","modified":1652940917397},{"_id":"public/archives/2016/10/index.html","hash":"d862bfab019eab584ad01c6f250647400ac25edf","modified":1652940917397},{"_id":"public/archives/2017/index.html","hash":"498f4475a3e20cd5adb16b50d9a9e8d2c1a151a5","modified":1652940917397},{"_id":"public/archives/2018/03/index.html","hash":"de2e1a9645fc132c8f59875e654f55fb4be72d0e","modified":1652940917397},{"_id":"public/archives/2018/08/index.html","hash":"afe9432b044924003298e69e99e8357763835b0b","modified":1652940917397},{"_id":"public/archives/2018/11/index.html","hash":"4014c9f2e2a275171be1d8bc9771efa351ba3f6a","modified":1652940917397},{"_id":"public/archives/2018/12/index.html","hash":"d897ad2de3c663a13a17ff081c52c30f69222b4d","modified":1652940917397},{"_id":"public/archives/2018/07/index.html","hash":"b2fc4f89f310e0713eb2f389bb9c8163bba588d7","modified":1652940917397},{"_id":"public/archives/2019/01/index.html","hash":"608f95fba80dad666a086ae3bc1b48e3ea3de0f0","modified":1652940917397},{"_id":"public/archives/2019/02/index.html","hash":"215fd57738e951dafbb3de936815d835f9b2722d","modified":1652940917397},{"_id":"public/archives/2019/index.html","hash":"abec5ef932c032231f32e551a1ca008112d6376c","modified":1652940917397},{"_id":"public/archives/2019/07/index.html","hash":"07fce6791992606159683364b2ee913557e01d1f","modified":1652940917397},{"_id":"public/archives/2019/11/index.html","hash":"1591f72baf6498e6dff443684ccfd2e1030e48b2","modified":1652940917397},{"_id":"public/archives/2019/12/index.html","hash":"34563bf99f2988e70af2b8e8789b3a680b81f70e","modified":1652940917397},{"_id":"public/index.html","hash":"268001c59c537e847f6db0d2a38d38251a0a1792","modified":1652940917397},{"_id":"public/page/2/index.html","hash":"8400f9d205346130eee65a52623640398411eb06","modified":1652940917397},{"_id":"public/page/3/index.html","hash":"d049ff55a2a4cb817733a27f8d73a361fc985738","modified":1652940917397},{"_id":"public/page/4/index.html","hash":"67306e8607f716199e4495e039072be675f3fa19","modified":1652940917397},{"_id":"public/page/6/index.html","hash":"4118f651bc0d932a6462cce1aaf4804f680d444a","modified":1652940917397},{"_id":"public/tags/App-Store/index.html","hash":"e951e9ef0b2b80a54293e13609733186ea833b29","modified":1652940917397},{"_id":"public/page/5/index.html","hash":"289148098a2051630c92808e181017f9db7527a1","modified":1652940917397},{"_id":"public/tags/iOS/index.html","hash":"2bc08e6236543a0be9def861507619dfdcdee125","modified":1652940917397},{"_id":"public/tags/iOS/page/2/index.html","hash":"44c3462554e0f9a5a5f9d55a27505610f6a8090d","modified":1652940917397},{"_id":"public/tags/iOS/page/3/index.html","hash":"3612481b96916567e8e509596dce341ac310f0b7","modified":1652940917397},{"_id":"public/tags/Cocoapods/index.html","hash":"7c518f8ca881a44bfdbacf11eadce6a172210e03","modified":1652940917397},{"_id":"public/tags/AES/index.html","hash":"277a7aba10107a8dfb5a6f7669c8913514f3d5c3","modified":1652940917397},{"_id":"public/tags/Hexo/index.html","hash":"4dca7583d064dd03553a6c839c1c8351939ed2ab","modified":1652940917397},{"_id":"public/tags/Mac/index.html","hash":"b2a3e791b9f64a53ecc70d17fe287c88d455c5dd","modified":1652940917397},{"_id":"public/tags/算法/index.html","hash":"b79c46201d5939742cb000ac450e9fd2aeb81dc8","modified":1652940917397},{"_id":"public/tags/Jenkins/index.html","hash":"587f009daa2dea7eb90ec0e7bb8d468388fdd8c7","modified":1652940917397},{"_id":"public/tags/Android/index.html","hash":"066c591d6be6e222900ff6f04d361e7f489f1efb","modified":1652940917397},{"_id":"public/tags/常见错误/index.html","hash":"82eb9c80e69c1ef2d7936bb6853f90e66201db50","modified":1652940917397},{"_id":"public/tags/objc/index.html","hash":"e9f603ecffe50bf716e98279e413b4faf1e428e8","modified":1652940917397},{"_id":"public/tags/RXSwift/index.html","hash":"5311f6a1e6ac62a348f6ca713ecd24338e3fcc55","modified":1652940917397},{"_id":"public/tags/React-Native/index.html","hash":"7798fa8e49071cf3ec3c284d01f76e2f8a12753c","modified":1652940917397},{"_id":"public/tags/Swift/index.html","hash":"2070ae033de9f9b29702041aa75bcfe85a37808d","modified":1652940917397},{"_id":"public/tags/Vue/index.html","hash":"84d2c6a2cbc36d1aa3624c47f276ffb7e2841679","modified":1652940917397},{"_id":"public/tags/闭包/index.html","hash":"f1b0a485c4fabc32edd9b40fa8d3c13ab59f2a56","modified":1652940917397},{"_id":"public/tags/动态规划/index.html","hash":"f0f6d09bc05135dbf2dab967fde132b82f06e113","modified":1652940917397},{"_id":"public/tags/Runtime/index.html","hash":"e680ee8e740a7ebe6825ad37c70c9649fa1cac4a","modified":1652940917397},{"_id":"public/tags/Mysql/index.html","hash":"4106a76f3c84208e71f04a2521fb978c54ed09c1","modified":1652940917397},{"_id":"public/tags/笔记/index.html","hash":"fe465747928dd93e2d307ad33b8c259d3e1f8e4d","modified":1652940917397},{"_id":"public/tags/iOS系统/index.html","hash":"dd7c9abc74c87868ec71895022dce38f2c5343e0","modified":1652940917397},{"_id":"public/tags/StatusBar/index.html","hash":"b6f095889d71edaa4b93a59a9ea9f1066b8ea074","modified":1652940917397},{"_id":"public/tags/ReactiveCocoa/index.html","hash":"c3f1b27637ef1d06ea2ff2dd886e45b207d428a6","modified":1652940917397},{"_id":"public/tags/hexo/index.html","hash":"e5e4858ecfbbe0d5c448f15242d953d5c3ce2342","modified":1652940917397},{"_id":"public/posts/187e06540a0329db.html","hash":"036771f6438af6b0e892e2b18b8acb4552c480d3","modified":1652940917397},{"_id":"public/posts/0e77c12e40f681c2.html","hash":"8897baa7f8ed7a0286e58eb2bfecd6f4e1f41976","modified":1652940917397},{"_id":"public/posts/c7d47655acbdf40d.html","hash":"d63266d28a5c14345d0b613b3cebaad87cdbd5fe","modified":1652940917397},{"_id":"public/posts/5f644c17f993a457.html","hash":"57e9e98baf93be0c5c3a7dd344b7759229bea4b7","modified":1652940917397},{"_id":"public/posts/e3ebefa6dc5acc4e.html","hash":"0b739d136d4093cc0deceffa5ef76cb788a49030","modified":1652940917397},{"_id":"public/posts/4ea43a8072083e39.html","hash":"a306f752b524eaade302a887154a0f7b81c4b124","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5.html","hash":"1608a247ecb7c6381bdaaa1c866d83de69981ef5","modified":1652940917397},{"_id":"public/posts/ee3b5e2f81886be1.html","hash":"b37123ab5cf34edc711cbf8cad3ba2bd65a04917","modified":1652940917397},{"_id":"public/posts/f0d17f38ce3c6038.html","hash":"4797b33333db32dd2732763933ba5f39bc459f04","modified":1652940917397},{"_id":"public/posts/2d244d693a41ec5f.html","hash":"442e71ac9483d4de6f4f8bd2a77176272d2537b8","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09.html","hash":"9bd67246c21d9073bbf8ab94af74f90451e1d39f","modified":1652940917397},{"_id":"public/posts/43b7e269337d814b.html","hash":"acf43c545ad5d0ea3654297e3b43ac077103febf","modified":1652940917397},{"_id":"public/posts/93ae863d100e0fb4.html","hash":"e02ed2d994312c85556790088a729aa0919a3b4e","modified":1652940917397},{"_id":"public/posts/3e1fbb3521ce224a.html","hash":"2ec7e7d8db11ccc12b8a4ae20df32fc03a14c1c5","modified":1652940917397},{"_id":"public/posts/f5934f826f15c52f.html","hash":"feec7cfb0b5cd367782de0585c9029236ac85fd5","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24.html","hash":"fc23abe77d47f00fad36e9eee73cac9db8201d6f","modified":1652940917397},{"_id":"public/posts/55ca4aace52ac6d0.html","hash":"0cb069d9e06496e4a4733af475ee7031201766aa","modified":1652940917397},{"_id":"public/posts/2418260e3b67c299.html","hash":"a0a19e408052cedf5dd2e9902cafc0db1df9525b","modified":1652940917397},{"_id":"public/posts/2d92c93946db5207.html","hash":"69e1941fdf6fa3c727028ad5828a16022f11262c","modified":1652940917397},{"_id":"public/posts/cb862b3c407bcbf2.html","hash":"aea2a6be465885638f35bdef47ca3c996ad7237b","modified":1652940917397},{"_id":"public/CNAME","hash":"51900fe1f9f9ceb55cdc9601186b51bf09074186","modified":1652940917397},{"_id":"public/img/favicon.png","hash":"214aa1893a0cebe24612a658523d998166811844","modified":1652940917397},{"_id":"public/img/favicon.ico","hash":"bbf83346a4cc71f8dc883a1dbc00aacd8b08bb06","modified":1652940917397},{"_id":"public/posts/6d9355527852d1c6/905614-8ac7cd86e21116b5.webp","hash":"20645a5d6f3a66508f6f515c6ab785c725698a1f","modified":1652940917397},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/application_loader_login.png","hash":"d3b0b44aeffa191e54f304c1b283fe9378f453aa","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_certSigningRequest_step2.png","hash":"45aeb702688a46534eab4e7dcfb91def330a990b","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/itunes_connect_step1.png","hash":"0ec0b597d74e46e186c2cf9a4192b3fd850b561c","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5/905614-11de31e505d895a1.png","hash":"3915d880f9d79e7531d71b0e4507ac264eb85c37","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5/905614-6d980e01c0a78df8.png","hash":"14aae6ffe7aec7c89d313739c4b1d7091b721575","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a/problem.png","hash":"f98c771d6c5abd3a804fb24129e358e38b3db5d4","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a/export.png","hash":"0316935caacd625cf2e75f075cae793ef9b80da5","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a/show_in_finder.png","hash":"8dca97194fb9d9e4062ed4833410f4c8796e4d9a","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a/product.png","hash":"f214e4bd524ed22ea92ad9a9eb0c5b9e4661bc86","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a/zip.png","hash":"e231f5e15647a6a0cb7fbb0399d8de1726228f52","modified":1652940917397},{"_id":"public/posts/91aa6383db86461a/dSYMs.png","hash":"75de545e626b87d4b2ad2a5455fc9cb00a19b755","modified":1652940917397},{"_id":"public/posts/cb862b3c407bcbf2/hexo-dict.png","hash":"255bc2cb12d9033eb1b7a94308aa6d91273e62f2","modified":1652940917397},{"_id":"public/posts/348ede5553fda841/bash.png","hash":"987274dd448834be65c83327d93ea03bbf7be606","modified":1652940917397},{"_id":"public/posts/cb862b3c407bcbf2/hexo-new.png","hash":"127b749713d588614589b7f3640626361454b26e","modified":1652940917397},{"_id":"public/posts/348ede5553fda841/show.png","hash":"ca666286a21a28b7985babe9698ba0a82d9b894b","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/empty.png","hash":"6c37fedfec79f8089968362a449c770d0cd40b45","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/never.png","hash":"77fdebc9b39a8664d5268b07d4745c5662a069fe","modified":1652940917397},{"_id":"public/posts/6678c8d5e984a2bf/1.png","hash":"ffa855d4a047ebcaf89efafe2b2572dd36b343ec","modified":1652940917397},{"_id":"public/posts/44b8d78d98445413/QQ201610180.png","hash":"eeed7fb77ec93af280f5cdf327d393a6cc20036b","modified":1652940917397},{"_id":"public/posts/4ea43a8072083e39/responder_chain.webp","hash":"d81940209362ad10c748616c1f26aad3b14e6a46","modified":1652940917397},{"_id":"public/posts/e3ebefa6dc5acc4e/method_swizzling.png","hash":"597c0e0efeee344fdcd5f39c784a57fa0c7cd3c0","modified":1652940917397},{"_id":"public/posts/f705d18d988770f0/905614-9df0785347c9212e.png","hash":"39755974811c7e48fb93b9b1375ec4debfbd2344","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/execte_config.png","hash":"c20e2fd2053fc65f7588330b50098f4e84f10105","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/coding.png","hash":"bb3007f5543733cb367100aa23f9d6d4622de9da","modified":1652940917397},{"_id":"public/posts/f705d18d988770f0/905614-c52750828b24f91e.png","hash":"38f21d0b7ffdb59783e8fefba698246eb8d22dd7","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/execute_shell.png","hash":"84c704b47c7050694ed0f27cb228b80ec8f811f3","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/upload_fir.png","hash":"7d8e63da80e4768ecf630a7bed6ff72703d7c775","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/set_upload_fir.png","hash":"e6c01dd77c909a9f787bf6d806db96659bda83da","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/zidong_goujian.png","hash":"7338bac06b6edfcbb31e7d1159806923187c0dc9","modified":1652940917397},{"_id":"public/posts/e5a0477099f91071/thumb_IMG_0890_1024.jpg","hash":"e5a5f667e73c8cb9db355317089edf1d96d362e6","modified":1652940917397},{"_id":"public/posts/187e06540a0329db/1628088a3e4f0167.png","hash":"2787799a3585cc8381300d8842d393a38f0b9f8f","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841/donggui_1.png","hash":"13f760cf960ac4ccddb2a605777fd1952f3566ff","modified":1652940917397},{"_id":"public/posts/187e06540a0329db/runtime_msg_send.svg","hash":"67e526c2513932a4c5c6ac3e17bc5b9163e6cb25","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841/donggui_4.png","hash":"1a6171138f61e3fb962bd80b72146687fd3d1a50","modified":1652940917397},{"_id":"public/posts/e5a0477099f91071/thumb_IMG_0889_1024.jpg","hash":"55ecebf0786c44c56fed91c52f946d38d6ec9b97","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841/donggui_3.png","hash":"ba69464fd3f2eb6b83e22f9368b2bdd09755a92b","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841/donggui_5.png","hash":"21ded00d702b81be442db736acaf6db14ab15792","modified":1652940917397},{"_id":"public/posts/05c9df7e0c47bd64/4249636-95dccafbae3fbf64.png","hash":"66f1968aa1ec756e46db49be1ca5dafd3cd6e4c1","modified":1652940917397},{"_id":"public/posts/05c9df7e0c47bd64/4249636-95dccafbae3fbf64.webp","hash":"56832faf7dc0682c9cc8cec4e1a55fd80dd8a1de","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841/donggui_2.png","hash":"c514eb0ef728a8d6a1c45cd1940363d030da4572","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/build_setting.png","hash":"a1b8c73575cc5b8e340d386ed9e1763579bf3798","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/application_loader_step2.png","hash":"d750221918bb444e5e620848f1e5d7bc62cfc50a","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_pp_step5.png","hash":"a1c8c465ece29a3d151a74bb3692977854aefb43","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/developer_center.png","hash":"2f77e6d0e6a50ae50452236fbe0befcc57c52eb1","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/itunes_connect_step2.png","hash":"2ed06cf54889786ab490abe7d11b4bc2f11bfb4a","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/itunes_connect_step4.png","hash":"6c123c017fad7bbe83fc1505cd01337c7555c418","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/itunes_connect_step3.png","hash":"96934124b29270ced80c24adf06502e97fd7fb12","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/itunes_connect_step5.png","hash":"04e76730436605d533e21512892523205c54e335","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/upload_itunes_connect.png","hash":"1a0227ef9f954e77d862d5dd0cd3d737146e4064","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5/905614-cb9896a7ba570a22.png","hash":"27d33d360610f3d27f728a9456361f15c4a39b8d","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5/905614-e85a60e792a0c99d.png","hash":"6997de205ff0af38ae57d42cf701d12e8f6189c3","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5/905614-282356612ba9f28c.png","hash":"c41d6de6c7c5d41ed7abaf6e9b2ae33f5d092316","modified":1652940917397},{"_id":"public/posts/3931c38f78b5e094/apollo.png","hash":"76e84d50b93d48566d74a77947f35430e21a9596","modified":1652940917397},{"_id":"public/posts/348ede5553fda841/finder.png","hash":"8eaf45417254832271290d1043ea2768152f29cf","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/create.png","hash":"5a48878fab58c5e594126a43c721f8edae008440","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/just.png","hash":"fe83de234d6a1e6fe3a04102a3e059d5fba67bcb","modified":1652940917397},{"_id":"public/posts/44b8d78d98445413/QQ201610181.png","hash":"be9b5f8028449a41f528361beb01b6d85b68cb1d","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/code_signing_OS_X_keychain_options.png","hash":"0ea9c6f2686de376af0484c6e125d8399267d85f","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/set_code_source.png","hash":"bb6a06cf7a204d67eb78d2675fafb6226af73a85","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/shoudong_goujian.png","hash":"0ec03e936a29c0e609c671041fe980cf9a46b5b3","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/xcode_build_options.png","hash":"c142b6e3769a4ba4486b3478d84e20f19a822ba3","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/xcode_general_build_settings.png","hash":"6f5d401eba87cc713a8a91757a4d36461bcb3ac3","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/archive.png","hash":"b7fe83694a65966da3a60bd35e6c7d6d868dc65c","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/archive_step_1.png","hash":"ad46be33ca981b89a8c530acf934e66237fd0e1c","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_app_id.png","hash":"ee610f0fc8744d4a21a4e234524b5717c170183e","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_certificates_step3.png","hash":"d851186b031d65f54564bf5a30c52964da74b551","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_pp_step3.png","hash":"8ce566147802de1de8729c00e0dd1c41a5d023c0","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_certificates_step2.png","hash":"be6a4a84a58080396a3d2dbe1a2e5ec8c2f5fa36","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_pp_step4.png","hash":"2749c823a187291ae06e35bd1e2f76be3bb701ad","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_pp_step2.png","hash":"d4b489d58d42af637ef3746e710cb1a085d3eb4f","modified":1652940917397},{"_id":"public/posts/cb862b3c407bcbf2/github.png","hash":"4fd74baa712d3e0035f61fd420152a1836f767f0","modified":1652940917397},{"_id":"public/posts/348ede5553fda841/hidefinder.png","hash":"42d73f1de8cf1a391f740a56ecc71d833a561b7d","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/catch.png","hash":"7811d29c918f14b41b30dcfd9486a50ed617bb38","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/deferred.png","hash":"cc1f2dcfdcfbe6dbcb0f59807ad58c4700bd0b6a","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/flatMap.png","hash":"bf2d87b70176a76895f1ba0be768f3aea7ec31b4","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/doOn.png","hash":"0dbf4a98a697044dad595dea7f76e1f6a073ca76","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/retry.png","hash":"7b4f934a032d35168975dec06c121dab4a2400b2","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/takeWhile.png","hash":"403b7a67053608f490edd0dec3785db731c2da6d","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/build_message.png","hash":"6640b7eab8e4b64eac90a70450318b2c8e9bca18","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/new_job.png","hash":"3e0b8855a5ceac3f2508bdb2aa25477717de0c8a","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/keychain.png","hash":"bd197612c93d0e86620dcdb1a2a9d488fecf6346","modified":1652940917397},{"_id":"public/posts/f3698aa6c24ae046/ssh_username_private_key.png","hash":"3360f557764ee40203a1669b10357fae79902d2b","modified":1652940917397},{"_id":"public/css/custom.css","hash":"25b60293cac3b7052dca991e1e95efca5c727335","modified":1652940917397},{"_id":"public/css/layout.css","hash":"e090217f1aaa93d435acb2e12d7defc9d0833284","modified":1652940917397},{"_id":"public/css/post.css","hash":"fdb708ad466214ba771f1b7165d771345290ba4c","modified":1652940917397},{"_id":"public/css/page.css","hash":"08d36cf1a90d9e1386ee069a321d8c4462e476f4","modified":1652940917397},{"_id":"public/js/back-top.js","hash":"f96ce358ccf1504e7ccd9da200568d9ce6dfc854","modified":1652940917397},{"_id":"public/js/dexo.js","hash":"f548e73c8697d7c9b7922aaa966ff4fd5744e024","modified":1652940917397},{"_id":"public/js/helper.js","hash":"d646a8726b2be821e9089995277da68830062551","modified":1652940917397},{"_id":"public/css/dexo.css","hash":"1d15cf1a38652dd1592f216f6b3a711633f087a5","modified":1652940917397},{"_id":"public/css/font-awesome.min.css","hash":"ce433680d044ba1aedd6a650d5adcf098aeab388","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/Identifiers.png","hash":"f01faa2e96fb54c3bc7efb53f913b5fa3efbf952","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_certSigningRequest_step1.png","hash":"ae9b055b0af55449b3a5eae168f8ef9a874b1dc5","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_certificates_step1.png","hash":"c2bea8c43d3c46193607557f7339e0d4113a3c37","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/create_pp_step1.png","hash":"bdf170a53cf97efe7684274cfca647e4cb0c1c5f","modified":1652940917397},{"_id":"public/posts/0324c45dc635e1ed/error_example_1.png","hash":"5069b886f0b936bccdd2c9ad74628062f108371e","modified":1652940917397},{"_id":"public/posts/6c8932d6101bb275/20171205145336037.jpeg","hash":"6b27b2d697ca9c33ee47fef295238be8934335fe","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/replay.png","hash":"eb6031705757cd891198df219b1ed88da3f3e007","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/publish.png","hash":"2cbcf233af3133222b26812ca4aec3367a386d33","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/switch.png","hash":"b855c53e603cc2414c568213f13c2d5a3079f1b9","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/toArray.png","hash":"662d3ee4b06cfd3869e993c698ef16829a8cbcfc","modified":1652940917397},{"_id":"public/posts/1cdda3c06a430c09/skipWhile.png","hash":"bfd9212b8ecb8bc0c756d46a55783358d0e43463","modified":1652940917397},{"_id":"public/posts/6d9355527852d1c6/905614-8ac7cd86e21116b5.png","hash":"da91e6d24dc231a51ecccf332b51b46809145e1a","modified":1652940917397},{"_id":"public/posts/720308c7cbe4e8d5/905614-aad2c9e81a2873c7.gif","hash":"90e7e6fdf7d888d5b4d8f9b258d744aedbb4db83","modified":1652940917397},{"_id":"public/posts/f705d18d988770f0/905614-7e346e4ec6a37fa2.png","hash":"7fa7a5802a47871e62ee1ce821046ab4a52c0c9e","modified":1652940917397},{"_id":"public/posts/b7e0fb67d76f8e24/application_loader_1.png","hash":"e070fbddd0894334e9ce56743a4c5391c055060e","modified":1652940917397},{"_id":"public/posts/b4ed6af76fb62841/donggui_6.png","hash":"16c1ccdb4be5242d08f38e458b835e05a9fae17f","modified":1652940917397},{"_id":"public/posts/f4da7ecc465746ee/app_store.png","hash":"b019195e68b4687c590d4f4e9299645342f98c52","modified":1652940917397}],"Category":[{"name":"作品","_id":"cl3cmceng0004l1l310ui9azk"},{"name":"iOS学习笔记","_id":"cl3cmcenj000cl1l37mh3gg92"},{"name":"技术杂谈","_id":"cl3cmcenl000ll1l34ias5yfr"},{"name":"经验积累","_id":"cl3cmcenn000tl1l30lbldccu"},{"name":"知识积累","_id":"cl3cmcenu0023l1l34smf8c05"},{"name":"Mac基础","_id":"cl3cmcenv002dl1l3bisla4bb"},{"name":"常见错误","_id":"cl3cmcenw002ll1l3ermhdku9"},{"name":"Swift学习笔记","_id":"cl3cmceny0030l1l35q1yexhm"},{"name":"知识汇总","_id":"cl3cmceo0003gl1l3bt2s7811"},{"name":"动态规划","_id":"cl3cmceo30046l1l3cbj28k60"},{"name":"其他","_id":"cl3cmceo70054l1l33uh5esv8"},{"name":"常见问题","_id":"cl3cmceo7005bl1l36s4ha0xw"},{"name":"hexo","_id":"cl3cmceod006cl1l3e0qletwt"}],"Data":[],"Page":[{"_content":"google-site-verification: google5c27410f12a1e5a9.html","source":"google5c27410f12a1e5a9.html","raw":"google-site-verification: google5c27410f12a1e5a9.html","date":"2022-05-19T04:32:53.244Z","updated":"2022-05-19T03:13:11.739Z","path":"google5c27410f12a1e5a9.html","title":"","comments":1,"layout":"page","_id":"cl3cmcenc0000l1l3dn206vss","content":"google-site-verification: google5c27410f12a1e5a9.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google5c27410f12a1e5a9.html"},{"layout":"false","_content":"wFUlZEYgwT\n","source":"baidu_verify_wFUlZEYgwT.html","raw":"layout: false\n---\nwFUlZEYgwT\n","date":"2022-05-19T04:32:53.228Z","updated":"2022-05-19T03:13:11.739Z","path":"baidu_verify_wFUlZEYgwT.html","title":"","comments":1,"_id":"cl3cmcenf0002l1l394t8aczt","content":"wFUlZEYgwT\n","site":{"data":{}},"excerpt":"","more":"wFUlZEYgwT\n"},{"title":"About","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ncomments: false\n---\n","date":"2022-05-19T04:36:22.486Z","updated":"2022-05-19T03:13:11.739Z","path":"about/index.html","_id":"cl3cmcenh0006l1l31dbo4qla","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Category","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\n---\n","date":"2022-05-19T04:36:22.447Z","updated":"2022-05-19T03:13:11.739Z","path":"category/index.html","_id":"cl3cmceni0008l1l35bxxas1b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","date":"2016-04-27T07:03:22.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-04-27 15:03:22\ntype: \"categories\"\ncomments: false\n---\n","updated":"2022-05-19T03:13:11.739Z","path":"categories/index.html","layout":"page","_id":"cl3cmceni000al1l36ihz6280","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"false","_content":"google-site-verification: googlec25480101521e91f.html\n","source":"googlec25480101521e91f.html","raw":"layout: false\n---\ngoogle-site-verification: googlec25480101521e91f.html\n","date":"2022-05-19T04:32:53.177Z","updated":"2022-05-19T03:13:11.739Z","path":"googlec25480101521e91f.html","title":"","comments":1,"_id":"cl3cmcenj000fl1l34mu80mzb","content":"google-site-verification: googlec25480101521e91f.html\n","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlec25480101521e91f.html\n"},{"title":"Tag","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---\n","date":"2022-05-19T04:36:22.756Z","updated":"2022-05-19T03:13:11.740Z","path":"tag/index.html","_id":"cl3cmcenk000hl1l32wgxfn0b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","comments":0,"_content":"","source":"project/index.md","raw":"---\ntitle: project\nlayout: project\ncomments: false\n---\n","date":"2022-05-19T04:36:22.630Z","updated":"2022-05-19T03:13:11.740Z","path":"project/index.html","_id":"cl3cmcenl000nl1l37t979bxh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Link","layout":"link","comments":0,"_content":"","source":"link/index.md","raw":"---\ntitle: link\nlayout: link\ncomments: false\n---\n","date":"2022-05-19T04:36:22.670Z","updated":"2022-05-19T03:13:11.739Z","path":"link/index.html","_id":"cl3cmcenm000pl1l3gxzj91pb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2018-12-27T02:20:42.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-27 10:20:42\n---\n","updated":"2022-05-19T03:13:11.740Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl3cmcenn000ul1l32ol15ysv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Search","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ncomments: false\n---\n","date":"2022-05-19T04:36:22.586Z","updated":"2022-05-19T03:13:11.740Z","path":"search/index.html","_id":"cl3cmcenn000xl1l34v2jbftd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hplayer_copyright","date":"2019-05-12T01:44:59.000Z","_content":"","source":"hplayer-copyright/index.md","raw":"---\ntitle: hplayer_copyright\ndate: 2019-05-12 09:44:59\n---\n","updated":"2022-05-19T03:13:11.739Z","path":"hplayer-copyright/index.html","comments":1,"layout":"page","_id":"cl3cmceno0013l1l3h2hc9sn7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AppShot-带壳截图屏幕截图制作工具","date":"2019-07-07T13:51:35.000Z","abbrlink":"6d9355527852d1c6","_content":"\n对于一位iOS开发者来说，上线iOS应用到App Store的流程应该是相当熟悉的，在填写App Store应用信息的时候往往需要上传几张App的截图，大多数开发者会直接使用App的截图上传上去。虽然这样是符合要求的，但是在美观度上来说可能有些欠缺。如果想要制作一些稍微你加工后漂亮点的截图，那么可能就需要麻烦UI小姐姐来给你制作几张图片。在不麻烦UI小姐姐的情况下，你想要制作几张加工后的漂亮的截图该怎么办呢？\n\n<!-- more -->\n\n接下来，就要为大家介绍一款App，用它可以快速制作精美的带壳截图，并可以添加相关描述文字。\n\nApp Store下载地址：[https://apps.apple.com/cn/app/appshot/id1464669254](https://apps.apple.com/cn/app/appshot/id1464669254)\n\n## AppShot\n「全机型」App Store应用截图制作工具\n\nAppShot是一款纯粹，易用的App Store应用截图制作工具。\n\n您可以制作精美的应用截图，用于App Store应用截图，也可以用于推广分享App。\n\n目前AppShot已经支持全部iPhone手机机型，你不用为此担心。\n\n### 截图\n\n{% asset_img 905614-8ac7cd86e21116b5.png Appshot展示图%}\n\n","source":"_posts/AppShot-带壳截图屏幕截图制作工具.md","raw":"---\ntitle: AppShot-带壳截图屏幕截图制作工具\ndate: 2019-07-07 21:51:35\ntags:\n  - App Store\ncategories: 作品\nabbrlink: 6d9355527852d1c6\n---\n\n对于一位iOS开发者来说，上线iOS应用到App Store的流程应该是相当熟悉的，在填写App Store应用信息的时候往往需要上传几张App的截图，大多数开发者会直接使用App的截图上传上去。虽然这样是符合要求的，但是在美观度上来说可能有些欠缺。如果想要制作一些稍微你加工后漂亮点的截图，那么可能就需要麻烦UI小姐姐来给你制作几张图片。在不麻烦UI小姐姐的情况下，你想要制作几张加工后的漂亮的截图该怎么办呢？\n\n<!-- more -->\n\n接下来，就要为大家介绍一款App，用它可以快速制作精美的带壳截图，并可以添加相关描述文字。\n\nApp Store下载地址：[https://apps.apple.com/cn/app/appshot/id1464669254](https://apps.apple.com/cn/app/appshot/id1464669254)\n\n## AppShot\n「全机型」App Store应用截图制作工具\n\nAppShot是一款纯粹，易用的App Store应用截图制作工具。\n\n您可以制作精美的应用截图，用于App Store应用截图，也可以用于推广分享App。\n\n目前AppShot已经支持全部iPhone手机机型，你不用为此担心。\n\n### 截图\n\n{% asset_img 905614-8ac7cd86e21116b5.png Appshot展示图%}\n\n","slug":"AppShot-带壳截图屏幕截图制作工具","published":1,"updated":"2022-05-19T03:13:11.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcene0001l1l31qbmdvi7","content":"<p>对于一位iOS开发者来说，上线iOS应用到App Store的流程应该是相当熟悉的，在填写App Store应用信息的时候往往需要上传几张App的截图，大多数开发者会直接使用App的截图上传上去。虽然这样是符合要求的，但是在美观度上来说可能有些欠缺。如果想要制作一些稍微你加工后漂亮点的截图，那么可能就需要麻烦UI小姐姐来给你制作几张图片。在不麻烦UI小姐姐的情况下，你想要制作几张加工后的漂亮的截图该怎么办呢？</p>\n<span id=\"more\"></span>\n\n<p>接下来，就要为大家介绍一款App，用它可以快速制作精美的带壳截图，并可以添加相关描述文字。</p>\n<p>App Store下载地址：<a href=\"https://apps.apple.com/cn/app/appshot/id1464669254\">https://apps.apple.com/cn/app/appshot/id1464669254</a></p>\n<h2 id=\"AppShot\"><a href=\"#AppShot\" class=\"headerlink\" title=\"AppShot\"></a>AppShot</h2><p>「全机型」App Store应用截图制作工具</p>\n<p>AppShot是一款纯粹，易用的App Store应用截图制作工具。</p>\n<p>您可以制作精美的应用截图，用于App Store应用截图，也可以用于推广分享App。</p>\n<p>目前AppShot已经支持全部iPhone手机机型，你不用为此担心。</p>\n<h3 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h3><img src=\"/posts/6d9355527852d1c6/905614-8ac7cd86e21116b5.png\" class=\"\" title=\"Appshot展示图\">\n\n","site":{"data":{}},"excerpt":"<p>对于一位iOS开发者来说，上线iOS应用到App Store的流程应该是相当熟悉的，在填写App Store应用信息的时候往往需要上传几张App的截图，大多数开发者会直接使用App的截图上传上去。虽然这样是符合要求的，但是在美观度上来说可能有些欠缺。如果想要制作一些稍微你加工后漂亮点的截图，那么可能就需要麻烦UI小姐姐来给你制作几张图片。在不麻烦UI小姐姐的情况下，你想要制作几张加工后的漂亮的截图该怎么办呢？</p>","more":"<p>接下来，就要为大家介绍一款App，用它可以快速制作精美的带壳截图，并可以添加相关描述文字。</p>\n<p>App Store下载地址：<a href=\"https://apps.apple.com/cn/app/appshot/id1464669254\">https://apps.apple.com/cn/app/appshot/id1464669254</a></p>\n<h2 id=\"AppShot\"><a href=\"#AppShot\" class=\"headerlink\" title=\"AppShot\"></a>AppShot</h2><p>「全机型」App Store应用截图制作工具</p>\n<p>AppShot是一款纯粹，易用的App Store应用截图制作工具。</p>\n<p>您可以制作精美的应用截图，用于App Store应用截图，也可以用于推广分享App。</p>\n<p>目前AppShot已经支持全部iPhone手机机型，你不用为此担心。</p>\n<h3 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h3><img src=\"/posts/6d9355527852d1c6/905614-8ac7cd86e21116b5.png\" class=\"\" title=\"Appshot展示图\">"},{"title":"App Store上线完整流程","date":"2016-03-05T09:25:33.000Z","abbrlink":"b7e0fb67d76f8e24","_content":"\n经过一年的iOS开发，到现在一共上线了6款App到App Store。从iOS6到iOS9，每一次苹果系统的更新，App Store的上线流程都会有点相应的改变。对于上线App到App Store的这个流程现在已经是得心应手，现在利用周末这个闲暇的时间纪录一下完整的上传App到App Store的流程。\n\n## 预先准备\n\n在你开始将程序提交到App Store之前，您需要有一个开发者帐号、一个App ID、一个有效的证书以及一个有效的Provisioning Profiles。\n\n<!-- more -->\n\n### Step 1:申请开发者帐号\n\n如果您现在已有开发者帐号，那么恭喜您，您可以直接跳过此步骤直接进入下一步骤。苹果开发者帐号分为三种：个人开发者帐号、公司帐号、企业帐号。\n\n**个人帐号（Individual）:**\n* 费用：99美元一年\n* App Store上架：是\n* 最大uuid支持数：100\n* 协作人数：1人（开发者自己）\n\n说明：“个人”开发者可以申请升级“公司”，可以通过拨打苹果公司客服电话（400 6701 855）来咨询和办理。\n\n** 公司帐号（Company）: **\n* 费用：99美元一年\n* App Store上架：是\n* 最大uuid支持数：100\n* 协作人数：多人\n\n说明：允许多个开发者进行协作开发，比个人多一些帐号管理的设置，可设置多个Apple ID，分4种管理级别的权限。申请时需要填写公司的邓白氏编码（DUNS Number）。\n\n** 企业帐号（Enterprise）: **\n* 费用：299美元一年\n* App Store上架：否\n* 最大uuid支持数：不限制\n* 协作人数：多人\n\n说明：需要注意的是，企业账号开发的应用不能上线App Store，适合那些不希望公开发布应用的企业。同样，申请时也需要公司的邓白氏编码（DUNS Number）。\n\n### Step 2:App ID（应用ID）\nApp ID是识别不同应用程序的唯一标示符。每个app都需要一个App ID或者app标识。目前有两种类型的App标识：一个是精确的App ID（explicit App ID），一个是通配符App ID（wildcard App ID）。使用通配符的App ID可以用来构建和安装多个程序。尽管通配符App ID非常方便，但是一个精确的App ID也是需要的，尤其是当App使用iCloud 或者使用其他iOS功能的时候，比如Game Center、Push Notifications或者IAP。如果你已经申请开发者帐号，接下你需要登录https://developer.apple.com/membercenter/。\n登录成功后界面如下：\n{% asset_img developer_center.png Developer页面 %}\n点击“Certificates,Identifiers&Profiles”进入到\n{% asset_img Identifiers.png Identifiers%}\n选择Identifiers，然后点击“＋”注册你自己的应用的App Id\n{% asset_img create_app_id.png 创建App ID%}\n以上两项设置好后，点击下一步，然后注册即可，这样一个App Id就创建好了。接下来需要设置开发证书。\n\n### Step 3:Distribution Certificate(发布证书)\niOS应用都有一个安全证书用于验证开发者身份和签名。为了可以向App Store提交app，你需要创建一个iOS provisioning profile 。首先需要创建一个distribution certificate（发布证书），过程类似于创建一个development certificate（开发证书）。如果你已经在实体设备上测试你的App，那么你对创建development certificate就已经很熟悉了。\n\n首先选择Certificate,然后点击“＋”\n\n{% asset_img create_certificates_step1.png 创建Certificate证书第一步%}\n{% asset_img create_certificates_step2.png 创建Certificate证书第二步%}\n\n然后点击“下一步”来到如下界面：\n{% asset_img create_certificates_step3.png 创建Certificate证书第三步%}\n\n这里需要上传一个.certSigningRequest文件来生成相应的证书。下面简单讲一下.certSigningRequest文件的生成方法：\n首先打开“钥匙串访问”，在菜单中选择“钥匙串访问”->“证书助理”->“从证书颁发机构请求证书...”。\n{% asset_img create_certSigningRequest_step1.png 创建.certSigningRequest文件%}\n然后填写好相应的信息，注意：选择保存到磁盘。\n{% asset_img create_certSigningRequest_step2.png 填写.certSigningRequest文件信息%}\n点击继续，然后会生成一个.certSigningRequest文件。\n然后选择生成的.certSigningRequest文件，点击下一步即可生成相应的证书。\n\n### Step 4:Provisioning Profile(配置文件)\n一旦你创建了App ID和distribution certificate，你可以创建一个iOS provisioning profile以方便在App Store中销售你的App。Provisioning Profile主要分为开发配置文件和发布配置文件，发布配置文件中又分App Store配置文件和Ad Hoc配置文件。App Store类型的Provisioning Profile顾名思义是用于发布到App Store的配置文件。Ad Hoc的Provisioning Profile配置文件是用于发布应用内的测试包的，在应用还没有上线的时候需要发ipa给客户安装的时候需要用到，只需要获取到客户手机的UDID然后生成相应的Ad Hoc类型的Provisioning Profile文件然后打包发布即可。\n同样Provisioning Profile的创建方式如下：\n选择“Provisioning Profiles”，然后点击“➕”创建Provisioning Profiles文件\n\n{% asset_img create_pp_step1.png 创建Provisioning Profiles文件%}\n\n选择相应的Provisioning Profiles文件类型\n{% asset_img create_pp_step2.png 选择Provisioning Profiles文件类型%}\n\n选择您需要生成Provisioning Profiles文件的App ID\n{% asset_img create_pp_step3.png 选择Provisioning Profiles文件的App ID%}\n选择相应的证书\n{% asset_img create_pp_step4.png 选择相应的证书%}\n选择已注册的设备\n{% asset_img create_pp_step5.png 选择已注册的设备%}\n然后点击下一步即可生成Provisioning Profiles文件，点击下载，然后双击打开。\n\n### Step 5:Build Settings(生成设置)\n配置App ID、distribution certificate 和provisioning profile已经完成，是时候配置Xcode中target的build settings了。在Xcode Project  Navigator的targets列表中选择一个target，打开顶部的Build Settings选项，然后更新一下Code Signing来跟之前创建的distribution provisioning profile相匹配。最近添加的provisioning profiles有时候不会立马就在build settings的Code Signing中看到，重启一下Xcode就可以解决这个问题。\n{% asset_img build_setting.png Build Setting配置%}\n\n### Step 6:Deployment Target(部署目标)\n所有配置都已配好后，就可以开始打包了生成ipa了。\n{% asset_img archive.png 开始打包%}\n\n## iTunes Connect相关配置\n\n### Step 1:创建“我的App”\n\n首先用你自己的开发者帐号登录到[iTunes Connect](https://itunesconnect.apple.com/)。\n\n{% asset_img itunes_connect_step1.png iTunes Connect%}\n登录成功后点击“我的App”，然后点击“＋”->“新建App”\n{% asset_img itunes_connect_step2.png 在iTunes Connect上新建App%}\n其中平台选择iOS，名称为你的app的名词，主要语言为你的app的主要语言，套装ID为之前创建的App ID，也就是Xcode工程中的Bundle ID。\n点击下一步，创建成功后，选择你刚创建成功的应用，进行相关的设置。\n{% asset_img itunes_connect_step3.png 填写相关信息%}\n\n相关设置比较简单就不再多说。\n\n### Step 2:打包上传到iTunes Connect\n\n配置好了iTunes Connect的相关配置后，就可以将我们生成的ipa包上传到iTunes Connect上了。Xcode中配置完成后archive成功后Xcode会弹出如下界面：\n{% asset_img upload_itunes_connect.png 上传到iTunes Connect%}\n 上传到iTunes Connect有两种方法：\n\n** 方法一 **\n直接点击上图的“Upload to App Store”按钮直接上传到App Store。\n\n** 方法二 **\n先导出ipa，然后使用Application Loader上传到App Store。\n点击“Export”，会弹出如下界面，选择导出的类型，这里要上传App Store，所以选择第一种。\n{% asset_img archive_step_1.png 导出ipa文件%}\n点击“下一步”，默认回去检查你的证书，如果没有什么问题一直下一步，最后会在桌面生成一个ipa的包。然后在Xcode中打开Application Loader。\n{% asset_img application_loader_1.png Application Loader%}\n用你自己的开发者帐号登录Application Loader，\n{% asset_img application_loader_login.png Application Loader登录%}\n登录成功后选取你刚刚生成的ipa\n{% asset_img application_loader_step2.png Application Loader上传%}\n然后上传提交到App Store。\n\n### Step 3:提交给苹果审核\n完成上面的步骤后，返回到iTunes Connect界面，选择你先前创建的App，在它的活动页面下可以看到所有已上传过的ipa版本。\n{% asset_img itunes_connect_step4.png 上传成功后%}\n选择App信息配置界面，找到“构建版本”，然后选择你刚刚上传的构建版本，然后提交审核即可\n{% asset_img itunes_connect_step5.png 提交审核%}","source":"_posts/App-Store上线完整流程.md","raw":"---\ntitle: App Store上线完整流程\ndate: 2016-03-05 17:25:33\ntags:\n  - App Store\ncategories: iOS学习笔记\nabbrlink: b7e0fb67d76f8e24\n---\n\n经过一年的iOS开发，到现在一共上线了6款App到App Store。从iOS6到iOS9，每一次苹果系统的更新，App Store的上线流程都会有点相应的改变。对于上线App到App Store的这个流程现在已经是得心应手，现在利用周末这个闲暇的时间纪录一下完整的上传App到App Store的流程。\n\n## 预先准备\n\n在你开始将程序提交到App Store之前，您需要有一个开发者帐号、一个App ID、一个有效的证书以及一个有效的Provisioning Profiles。\n\n<!-- more -->\n\n### Step 1:申请开发者帐号\n\n如果您现在已有开发者帐号，那么恭喜您，您可以直接跳过此步骤直接进入下一步骤。苹果开发者帐号分为三种：个人开发者帐号、公司帐号、企业帐号。\n\n**个人帐号（Individual）:**\n* 费用：99美元一年\n* App Store上架：是\n* 最大uuid支持数：100\n* 协作人数：1人（开发者自己）\n\n说明：“个人”开发者可以申请升级“公司”，可以通过拨打苹果公司客服电话（400 6701 855）来咨询和办理。\n\n** 公司帐号（Company）: **\n* 费用：99美元一年\n* App Store上架：是\n* 最大uuid支持数：100\n* 协作人数：多人\n\n说明：允许多个开发者进行协作开发，比个人多一些帐号管理的设置，可设置多个Apple ID，分4种管理级别的权限。申请时需要填写公司的邓白氏编码（DUNS Number）。\n\n** 企业帐号（Enterprise）: **\n* 费用：299美元一年\n* App Store上架：否\n* 最大uuid支持数：不限制\n* 协作人数：多人\n\n说明：需要注意的是，企业账号开发的应用不能上线App Store，适合那些不希望公开发布应用的企业。同样，申请时也需要公司的邓白氏编码（DUNS Number）。\n\n### Step 2:App ID（应用ID）\nApp ID是识别不同应用程序的唯一标示符。每个app都需要一个App ID或者app标识。目前有两种类型的App标识：一个是精确的App ID（explicit App ID），一个是通配符App ID（wildcard App ID）。使用通配符的App ID可以用来构建和安装多个程序。尽管通配符App ID非常方便，但是一个精确的App ID也是需要的，尤其是当App使用iCloud 或者使用其他iOS功能的时候，比如Game Center、Push Notifications或者IAP。如果你已经申请开发者帐号，接下你需要登录https://developer.apple.com/membercenter/。\n登录成功后界面如下：\n{% asset_img developer_center.png Developer页面 %}\n点击“Certificates,Identifiers&Profiles”进入到\n{% asset_img Identifiers.png Identifiers%}\n选择Identifiers，然后点击“＋”注册你自己的应用的App Id\n{% asset_img create_app_id.png 创建App ID%}\n以上两项设置好后，点击下一步，然后注册即可，这样一个App Id就创建好了。接下来需要设置开发证书。\n\n### Step 3:Distribution Certificate(发布证书)\niOS应用都有一个安全证书用于验证开发者身份和签名。为了可以向App Store提交app，你需要创建一个iOS provisioning profile 。首先需要创建一个distribution certificate（发布证书），过程类似于创建一个development certificate（开发证书）。如果你已经在实体设备上测试你的App，那么你对创建development certificate就已经很熟悉了。\n\n首先选择Certificate,然后点击“＋”\n\n{% asset_img create_certificates_step1.png 创建Certificate证书第一步%}\n{% asset_img create_certificates_step2.png 创建Certificate证书第二步%}\n\n然后点击“下一步”来到如下界面：\n{% asset_img create_certificates_step3.png 创建Certificate证书第三步%}\n\n这里需要上传一个.certSigningRequest文件来生成相应的证书。下面简单讲一下.certSigningRequest文件的生成方法：\n首先打开“钥匙串访问”，在菜单中选择“钥匙串访问”->“证书助理”->“从证书颁发机构请求证书...”。\n{% asset_img create_certSigningRequest_step1.png 创建.certSigningRequest文件%}\n然后填写好相应的信息，注意：选择保存到磁盘。\n{% asset_img create_certSigningRequest_step2.png 填写.certSigningRequest文件信息%}\n点击继续，然后会生成一个.certSigningRequest文件。\n然后选择生成的.certSigningRequest文件，点击下一步即可生成相应的证书。\n\n### Step 4:Provisioning Profile(配置文件)\n一旦你创建了App ID和distribution certificate，你可以创建一个iOS provisioning profile以方便在App Store中销售你的App。Provisioning Profile主要分为开发配置文件和发布配置文件，发布配置文件中又分App Store配置文件和Ad Hoc配置文件。App Store类型的Provisioning Profile顾名思义是用于发布到App Store的配置文件。Ad Hoc的Provisioning Profile配置文件是用于发布应用内的测试包的，在应用还没有上线的时候需要发ipa给客户安装的时候需要用到，只需要获取到客户手机的UDID然后生成相应的Ad Hoc类型的Provisioning Profile文件然后打包发布即可。\n同样Provisioning Profile的创建方式如下：\n选择“Provisioning Profiles”，然后点击“➕”创建Provisioning Profiles文件\n\n{% asset_img create_pp_step1.png 创建Provisioning Profiles文件%}\n\n选择相应的Provisioning Profiles文件类型\n{% asset_img create_pp_step2.png 选择Provisioning Profiles文件类型%}\n\n选择您需要生成Provisioning Profiles文件的App ID\n{% asset_img create_pp_step3.png 选择Provisioning Profiles文件的App ID%}\n选择相应的证书\n{% asset_img create_pp_step4.png 选择相应的证书%}\n选择已注册的设备\n{% asset_img create_pp_step5.png 选择已注册的设备%}\n然后点击下一步即可生成Provisioning Profiles文件，点击下载，然后双击打开。\n\n### Step 5:Build Settings(生成设置)\n配置App ID、distribution certificate 和provisioning profile已经完成，是时候配置Xcode中target的build settings了。在Xcode Project  Navigator的targets列表中选择一个target，打开顶部的Build Settings选项，然后更新一下Code Signing来跟之前创建的distribution provisioning profile相匹配。最近添加的provisioning profiles有时候不会立马就在build settings的Code Signing中看到，重启一下Xcode就可以解决这个问题。\n{% asset_img build_setting.png Build Setting配置%}\n\n### Step 6:Deployment Target(部署目标)\n所有配置都已配好后，就可以开始打包了生成ipa了。\n{% asset_img archive.png 开始打包%}\n\n## iTunes Connect相关配置\n\n### Step 1:创建“我的App”\n\n首先用你自己的开发者帐号登录到[iTunes Connect](https://itunesconnect.apple.com/)。\n\n{% asset_img itunes_connect_step1.png iTunes Connect%}\n登录成功后点击“我的App”，然后点击“＋”->“新建App”\n{% asset_img itunes_connect_step2.png 在iTunes Connect上新建App%}\n其中平台选择iOS，名称为你的app的名词，主要语言为你的app的主要语言，套装ID为之前创建的App ID，也就是Xcode工程中的Bundle ID。\n点击下一步，创建成功后，选择你刚创建成功的应用，进行相关的设置。\n{% asset_img itunes_connect_step3.png 填写相关信息%}\n\n相关设置比较简单就不再多说。\n\n### Step 2:打包上传到iTunes Connect\n\n配置好了iTunes Connect的相关配置后，就可以将我们生成的ipa包上传到iTunes Connect上了。Xcode中配置完成后archive成功后Xcode会弹出如下界面：\n{% asset_img upload_itunes_connect.png 上传到iTunes Connect%}\n 上传到iTunes Connect有两种方法：\n\n** 方法一 **\n直接点击上图的“Upload to App Store”按钮直接上传到App Store。\n\n** 方法二 **\n先导出ipa，然后使用Application Loader上传到App Store。\n点击“Export”，会弹出如下界面，选择导出的类型，这里要上传App Store，所以选择第一种。\n{% asset_img archive_step_1.png 导出ipa文件%}\n点击“下一步”，默认回去检查你的证书，如果没有什么问题一直下一步，最后会在桌面生成一个ipa的包。然后在Xcode中打开Application Loader。\n{% asset_img application_loader_1.png Application Loader%}\n用你自己的开发者帐号登录Application Loader，\n{% asset_img application_loader_login.png Application Loader登录%}\n登录成功后选取你刚刚生成的ipa\n{% asset_img application_loader_step2.png Application Loader上传%}\n然后上传提交到App Store。\n\n### Step 3:提交给苹果审核\n完成上面的步骤后，返回到iTunes Connect界面，选择你先前创建的App，在它的活动页面下可以看到所有已上传过的ipa版本。\n{% asset_img itunes_connect_step4.png 上传成功后%}\n选择App信息配置界面，找到“构建版本”，然后选择你刚刚上传的构建版本，然后提交审核即可\n{% asset_img itunes_connect_step5.png 提交审核%}","slug":"App-Store上线完整流程","published":1,"updated":"2022-05-19T03:13:11.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceng0003l1l3bf4p9hel","content":"<p>经过一年的iOS开发，到现在一共上线了6款App到App Store。从iOS6到iOS9，每一次苹果系统的更新，App Store的上线流程都会有点相应的改变。对于上线App到App Store的这个流程现在已经是得心应手，现在利用周末这个闲暇的时间纪录一下完整的上传App到App Store的流程。</p>\n<h2 id=\"预先准备\"><a href=\"#预先准备\" class=\"headerlink\" title=\"预先准备\"></a>预先准备</h2><p>在你开始将程序提交到App Store之前，您需要有一个开发者帐号、一个App ID、一个有效的证书以及一个有效的Provisioning Profiles。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Step-1-申请开发者帐号\"><a href=\"#Step-1-申请开发者帐号\" class=\"headerlink\" title=\"Step 1:申请开发者帐号\"></a>Step 1:申请开发者帐号</h3><p>如果您现在已有开发者帐号，那么恭喜您，您可以直接跳过此步骤直接进入下一步骤。苹果开发者帐号分为三种：个人开发者帐号、公司帐号、企业帐号。</p>\n<p><strong>个人帐号（Individual）:</strong></p>\n<ul>\n<li>费用：99美元一年</li>\n<li>App Store上架：是</li>\n<li>最大uuid支持数：100</li>\n<li>协作人数：1人（开发者自己）</li>\n</ul>\n<p>说明：“个人”开发者可以申请升级“公司”，可以通过拨打苹果公司客服电话（400 6701 855）来咨询和办理。</p>\n<p>** 公司帐号（Company）: **</p>\n<ul>\n<li>费用：99美元一年</li>\n<li>App Store上架：是</li>\n<li>最大uuid支持数：100</li>\n<li>协作人数：多人</li>\n</ul>\n<p>说明：允许多个开发者进行协作开发，比个人多一些帐号管理的设置，可设置多个Apple ID，分4种管理级别的权限。申请时需要填写公司的邓白氏编码（DUNS Number）。</p>\n<p>** 企业帐号（Enterprise）: **</p>\n<ul>\n<li>费用：299美元一年</li>\n<li>App Store上架：否</li>\n<li>最大uuid支持数：不限制</li>\n<li>协作人数：多人</li>\n</ul>\n<p>说明：需要注意的是，企业账号开发的应用不能上线App Store，适合那些不希望公开发布应用的企业。同样，申请时也需要公司的邓白氏编码（DUNS Number）。</p>\n<h3 id=\"Step-2-App-ID（应用ID）\"><a href=\"#Step-2-App-ID（应用ID）\" class=\"headerlink\" title=\"Step 2:App ID（应用ID）\"></a>Step 2:App ID（应用ID）</h3><p>App ID是识别不同应用程序的唯一标示符。每个app都需要一个App ID或者app标识。目前有两种类型的App标识：一个是精确的App ID（explicit App ID），一个是通配符App ID（wildcard App ID）。使用通配符的App ID可以用来构建和安装多个程序。尽管通配符App ID非常方便，但是一个精确的App ID也是需要的，尤其是当App使用iCloud 或者使用其他iOS功能的时候，比如Game Center、Push Notifications或者IAP。如果你已经申请开发者帐号，接下你需要登录<a href=\"https://developer.apple.com/membercenter/%E3%80%82\">https://developer.apple.com/membercenter/。</a><br>登录成功后界面如下：</p>\n<img src=\"/posts/b7e0fb67d76f8e24/developer_center.png\" class=\"\" title=\"Developer页面\">\n<p>点击“Certificates,Identifiers&amp;Profiles”进入到</p>\n<img src=\"/posts/b7e0fb67d76f8e24/Identifiers.png\" class=\"\" title=\"Identifiers\">\n<p>选择Identifiers，然后点击“＋”注册你自己的应用的App Id</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_app_id.png\" class=\"\" title=\"创建App ID\">\n<p>以上两项设置好后，点击下一步，然后注册即可，这样一个App Id就创建好了。接下来需要设置开发证书。</p>\n<h3 id=\"Step-3-Distribution-Certificate-发布证书\"><a href=\"#Step-3-Distribution-Certificate-发布证书\" class=\"headerlink\" title=\"Step 3:Distribution Certificate(发布证书)\"></a>Step 3:Distribution Certificate(发布证书)</h3><p>iOS应用都有一个安全证书用于验证开发者身份和签名。为了可以向App Store提交app，你需要创建一个iOS provisioning profile 。首先需要创建一个distribution certificate（发布证书），过程类似于创建一个development certificate（开发证书）。如果你已经在实体设备上测试你的App，那么你对创建development certificate就已经很熟悉了。</p>\n<p>首先选择Certificate,然后点击“＋”</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certificates_step1.png\" class=\"\" title=\"创建Certificate证书第一步\">\n<img src=\"/posts/b7e0fb67d76f8e24/create_certificates_step2.png\" class=\"\" title=\"创建Certificate证书第二步\">\n\n<p>然后点击“下一步”来到如下界面：</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certificates_step3.png\" class=\"\" title=\"创建Certificate证书第三步\">\n\n<p>这里需要上传一个.certSigningRequest文件来生成相应的证书。下面简单讲一下.certSigningRequest文件的生成方法：<br>首先打开“钥匙串访问”，在菜单中选择“钥匙串访问”-&gt;“证书助理”-&gt;“从证书颁发机构请求证书…”。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certSigningRequest_step1.png\" class=\"\" title=\"创建.certSigningRequest文件\">\n<p>然后填写好相应的信息，注意：选择保存到磁盘。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certSigningRequest_step2.png\" class=\"\" title=\"填写.certSigningRequest文件信息\">\n<p>点击继续，然后会生成一个.certSigningRequest文件。<br>然后选择生成的.certSigningRequest文件，点击下一步即可生成相应的证书。</p>\n<h3 id=\"Step-4-Provisioning-Profile-配置文件\"><a href=\"#Step-4-Provisioning-Profile-配置文件\" class=\"headerlink\" title=\"Step 4:Provisioning Profile(配置文件)\"></a>Step 4:Provisioning Profile(配置文件)</h3><p>一旦你创建了App ID和distribution certificate，你可以创建一个iOS provisioning profile以方便在App Store中销售你的App。Provisioning Profile主要分为开发配置文件和发布配置文件，发布配置文件中又分App Store配置文件和Ad Hoc配置文件。App Store类型的Provisioning Profile顾名思义是用于发布到App Store的配置文件。Ad Hoc的Provisioning Profile配置文件是用于发布应用内的测试包的，在应用还没有上线的时候需要发ipa给客户安装的时候需要用到，只需要获取到客户手机的UDID然后生成相应的Ad Hoc类型的Provisioning Profile文件然后打包发布即可。<br>同样Provisioning Profile的创建方式如下：<br>选择“Provisioning Profiles”，然后点击“➕”创建Provisioning Profiles文件</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step1.png\" class=\"\" title=\"创建Provisioning Profiles文件\">\n\n<p>选择相应的Provisioning Profiles文件类型</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step2.png\" class=\"\" title=\"选择Provisioning Profiles文件类型\">\n\n<p>选择您需要生成Provisioning Profiles文件的App ID</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step3.png\" class=\"\" title=\"选择Provisioning Profiles文件的App ID\">\n<p>选择相应的证书</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step4.png\" class=\"\" title=\"选择相应的证书\">\n<p>选择已注册的设备</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step5.png\" class=\"\" title=\"选择已注册的设备\">\n<p>然后点击下一步即可生成Provisioning Profiles文件，点击下载，然后双击打开。</p>\n<h3 id=\"Step-5-Build-Settings-生成设置\"><a href=\"#Step-5-Build-Settings-生成设置\" class=\"headerlink\" title=\"Step 5:Build Settings(生成设置)\"></a>Step 5:Build Settings(生成设置)</h3><p>配置App ID、distribution certificate 和provisioning profile已经完成，是时候配置Xcode中target的build settings了。在Xcode Project  Navigator的targets列表中选择一个target，打开顶部的Build Settings选项，然后更新一下Code Signing来跟之前创建的distribution provisioning profile相匹配。最近添加的provisioning profiles有时候不会立马就在build settings的Code Signing中看到，重启一下Xcode就可以解决这个问题。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/build_setting.png\" class=\"\" title=\"Build Setting配置\">\n\n<h3 id=\"Step-6-Deployment-Target-部署目标\"><a href=\"#Step-6-Deployment-Target-部署目标\" class=\"headerlink\" title=\"Step 6:Deployment Target(部署目标)\"></a>Step 6:Deployment Target(部署目标)</h3><p>所有配置都已配好后，就可以开始打包了生成ipa了。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/archive.png\" class=\"\" title=\"开始打包\">\n\n<h2 id=\"iTunes-Connect相关配置\"><a href=\"#iTunes-Connect相关配置\" class=\"headerlink\" title=\"iTunes Connect相关配置\"></a>iTunes Connect相关配置</h2><h3 id=\"Step-1-创建“我的App”\"><a href=\"#Step-1-创建“我的App”\" class=\"headerlink\" title=\"Step 1:创建“我的App”\"></a>Step 1:创建“我的App”</h3><p>首先用你自己的开发者帐号登录到<a href=\"https://itunesconnect.apple.com/\">iTunes Connect</a>。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step1.png\" class=\"\" title=\"iTunes Connect\">\n<p>登录成功后点击“我的App”，然后点击“＋”-&gt;“新建App”</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step2.png\" class=\"\" title=\"在iTunes Connect上新建App\">\n<p>其中平台选择iOS，名称为你的app的名词，主要语言为你的app的主要语言，套装ID为之前创建的App ID，也就是Xcode工程中的Bundle ID。<br>点击下一步，创建成功后，选择你刚创建成功的应用，进行相关的设置。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step3.png\" class=\"\" title=\"填写相关信息\">\n\n<p>相关设置比较简单就不再多说。</p>\n<h3 id=\"Step-2-打包上传到iTunes-Connect\"><a href=\"#Step-2-打包上传到iTunes-Connect\" class=\"headerlink\" title=\"Step 2:打包上传到iTunes Connect\"></a>Step 2:打包上传到iTunes Connect</h3><p>配置好了iTunes Connect的相关配置后，就可以将我们生成的ipa包上传到iTunes Connect上了。Xcode中配置完成后archive成功后Xcode会弹出如下界面：</p>\n<img src=\"/posts/b7e0fb67d76f8e24/upload_itunes_connect.png\" class=\"\" title=\"上传到iTunes Connect\">\n<p> 上传到iTunes Connect有两种方法：</p>\n<p>** 方法一 **<br>直接点击上图的“Upload to App Store”按钮直接上传到App Store。</p>\n<p>** 方法二 **<br>先导出ipa，然后使用Application Loader上传到App Store。<br>点击“Export”，会弹出如下界面，选择导出的类型，这里要上传App Store，所以选择第一种。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/archive_step_1.png\" class=\"\" title=\"导出ipa文件\">\n<p>点击“下一步”，默认回去检查你的证书，如果没有什么问题一直下一步，最后会在桌面生成一个ipa的包。然后在Xcode中打开Application Loader。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/application_loader_1.png\" class=\"\" title=\"Application Loader\">\n<p>用你自己的开发者帐号登录Application Loader，</p>\n<img src=\"/posts/b7e0fb67d76f8e24/application_loader_login.png\" class=\"\" title=\"Application Loader登录\">\n<p>登录成功后选取你刚刚生成的ipa</p>\n<img src=\"/posts/b7e0fb67d76f8e24/application_loader_step2.png\" class=\"\" title=\"Application Loader上传\">\n<p>然后上传提交到App Store。</p>\n<h3 id=\"Step-3-提交给苹果审核\"><a href=\"#Step-3-提交给苹果审核\" class=\"headerlink\" title=\"Step 3:提交给苹果审核\"></a>Step 3:提交给苹果审核</h3><p>完成上面的步骤后，返回到iTunes Connect界面，选择你先前创建的App，在它的活动页面下可以看到所有已上传过的ipa版本。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step4.png\" class=\"\" title=\"上传成功后\">\n<p>选择App信息配置界面，找到“构建版本”，然后选择你刚刚上传的构建版本，然后提交审核即可</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step5.png\" class=\"\" title=\"提交审核\">","site":{"data":{}},"excerpt":"<p>经过一年的iOS开发，到现在一共上线了6款App到App Store。从iOS6到iOS9，每一次苹果系统的更新，App Store的上线流程都会有点相应的改变。对于上线App到App Store的这个流程现在已经是得心应手，现在利用周末这个闲暇的时间纪录一下完整的上传App到App Store的流程。</p>\n<h2 id=\"预先准备\"><a href=\"#预先准备\" class=\"headerlink\" title=\"预先准备\"></a>预先准备</h2><p>在你开始将程序提交到App Store之前，您需要有一个开发者帐号、一个App ID、一个有效的证书以及一个有效的Provisioning Profiles。</p>","more":"<h3 id=\"Step-1-申请开发者帐号\"><a href=\"#Step-1-申请开发者帐号\" class=\"headerlink\" title=\"Step 1:申请开发者帐号\"></a>Step 1:申请开发者帐号</h3><p>如果您现在已有开发者帐号，那么恭喜您，您可以直接跳过此步骤直接进入下一步骤。苹果开发者帐号分为三种：个人开发者帐号、公司帐号、企业帐号。</p>\n<p><strong>个人帐号（Individual）:</strong></p>\n<ul>\n<li>费用：99美元一年</li>\n<li>App Store上架：是</li>\n<li>最大uuid支持数：100</li>\n<li>协作人数：1人（开发者自己）</li>\n</ul>\n<p>说明：“个人”开发者可以申请升级“公司”，可以通过拨打苹果公司客服电话（400 6701 855）来咨询和办理。</p>\n<p>** 公司帐号（Company）: **</p>\n<ul>\n<li>费用：99美元一年</li>\n<li>App Store上架：是</li>\n<li>最大uuid支持数：100</li>\n<li>协作人数：多人</li>\n</ul>\n<p>说明：允许多个开发者进行协作开发，比个人多一些帐号管理的设置，可设置多个Apple ID，分4种管理级别的权限。申请时需要填写公司的邓白氏编码（DUNS Number）。</p>\n<p>** 企业帐号（Enterprise）: **</p>\n<ul>\n<li>费用：299美元一年</li>\n<li>App Store上架：否</li>\n<li>最大uuid支持数：不限制</li>\n<li>协作人数：多人</li>\n</ul>\n<p>说明：需要注意的是，企业账号开发的应用不能上线App Store，适合那些不希望公开发布应用的企业。同样，申请时也需要公司的邓白氏编码（DUNS Number）。</p>\n<h3 id=\"Step-2-App-ID（应用ID）\"><a href=\"#Step-2-App-ID（应用ID）\" class=\"headerlink\" title=\"Step 2:App ID（应用ID）\"></a>Step 2:App ID（应用ID）</h3><p>App ID是识别不同应用程序的唯一标示符。每个app都需要一个App ID或者app标识。目前有两种类型的App标识：一个是精确的App ID（explicit App ID），一个是通配符App ID（wildcard App ID）。使用通配符的App ID可以用来构建和安装多个程序。尽管通配符App ID非常方便，但是一个精确的App ID也是需要的，尤其是当App使用iCloud 或者使用其他iOS功能的时候，比如Game Center、Push Notifications或者IAP。如果你已经申请开发者帐号，接下你需要登录<a href=\"https://developer.apple.com/membercenter/%E3%80%82\">https://developer.apple.com/membercenter/。</a><br>登录成功后界面如下：</p>\n<img src=\"/posts/b7e0fb67d76f8e24/developer_center.png\" class=\"\" title=\"Developer页面\">\n<p>点击“Certificates,Identifiers&amp;Profiles”进入到</p>\n<img src=\"/posts/b7e0fb67d76f8e24/Identifiers.png\" class=\"\" title=\"Identifiers\">\n<p>选择Identifiers，然后点击“＋”注册你自己的应用的App Id</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_app_id.png\" class=\"\" title=\"创建App ID\">\n<p>以上两项设置好后，点击下一步，然后注册即可，这样一个App Id就创建好了。接下来需要设置开发证书。</p>\n<h3 id=\"Step-3-Distribution-Certificate-发布证书\"><a href=\"#Step-3-Distribution-Certificate-发布证书\" class=\"headerlink\" title=\"Step 3:Distribution Certificate(发布证书)\"></a>Step 3:Distribution Certificate(发布证书)</h3><p>iOS应用都有一个安全证书用于验证开发者身份和签名。为了可以向App Store提交app，你需要创建一个iOS provisioning profile 。首先需要创建一个distribution certificate（发布证书），过程类似于创建一个development certificate（开发证书）。如果你已经在实体设备上测试你的App，那么你对创建development certificate就已经很熟悉了。</p>\n<p>首先选择Certificate,然后点击“＋”</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certificates_step1.png\" class=\"\" title=\"创建Certificate证书第一步\">\n<img src=\"/posts/b7e0fb67d76f8e24/create_certificates_step2.png\" class=\"\" title=\"创建Certificate证书第二步\">\n\n<p>然后点击“下一步”来到如下界面：</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certificates_step3.png\" class=\"\" title=\"创建Certificate证书第三步\">\n\n<p>这里需要上传一个.certSigningRequest文件来生成相应的证书。下面简单讲一下.certSigningRequest文件的生成方法：<br>首先打开“钥匙串访问”，在菜单中选择“钥匙串访问”-&gt;“证书助理”-&gt;“从证书颁发机构请求证书…”。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certSigningRequest_step1.png\" class=\"\" title=\"创建.certSigningRequest文件\">\n<p>然后填写好相应的信息，注意：选择保存到磁盘。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_certSigningRequest_step2.png\" class=\"\" title=\"填写.certSigningRequest文件信息\">\n<p>点击继续，然后会生成一个.certSigningRequest文件。<br>然后选择生成的.certSigningRequest文件，点击下一步即可生成相应的证书。</p>\n<h3 id=\"Step-4-Provisioning-Profile-配置文件\"><a href=\"#Step-4-Provisioning-Profile-配置文件\" class=\"headerlink\" title=\"Step 4:Provisioning Profile(配置文件)\"></a>Step 4:Provisioning Profile(配置文件)</h3><p>一旦你创建了App ID和distribution certificate，你可以创建一个iOS provisioning profile以方便在App Store中销售你的App。Provisioning Profile主要分为开发配置文件和发布配置文件，发布配置文件中又分App Store配置文件和Ad Hoc配置文件。App Store类型的Provisioning Profile顾名思义是用于发布到App Store的配置文件。Ad Hoc的Provisioning Profile配置文件是用于发布应用内的测试包的，在应用还没有上线的时候需要发ipa给客户安装的时候需要用到，只需要获取到客户手机的UDID然后生成相应的Ad Hoc类型的Provisioning Profile文件然后打包发布即可。<br>同样Provisioning Profile的创建方式如下：<br>选择“Provisioning Profiles”，然后点击“➕”创建Provisioning Profiles文件</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step1.png\" class=\"\" title=\"创建Provisioning Profiles文件\">\n\n<p>选择相应的Provisioning Profiles文件类型</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step2.png\" class=\"\" title=\"选择Provisioning Profiles文件类型\">\n\n<p>选择您需要生成Provisioning Profiles文件的App ID</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step3.png\" class=\"\" title=\"选择Provisioning Profiles文件的App ID\">\n<p>选择相应的证书</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step4.png\" class=\"\" title=\"选择相应的证书\">\n<p>选择已注册的设备</p>\n<img src=\"/posts/b7e0fb67d76f8e24/create_pp_step5.png\" class=\"\" title=\"选择已注册的设备\">\n<p>然后点击下一步即可生成Provisioning Profiles文件，点击下载，然后双击打开。</p>\n<h3 id=\"Step-5-Build-Settings-生成设置\"><a href=\"#Step-5-Build-Settings-生成设置\" class=\"headerlink\" title=\"Step 5:Build Settings(生成设置)\"></a>Step 5:Build Settings(生成设置)</h3><p>配置App ID、distribution certificate 和provisioning profile已经完成，是时候配置Xcode中target的build settings了。在Xcode Project  Navigator的targets列表中选择一个target，打开顶部的Build Settings选项，然后更新一下Code Signing来跟之前创建的distribution provisioning profile相匹配。最近添加的provisioning profiles有时候不会立马就在build settings的Code Signing中看到，重启一下Xcode就可以解决这个问题。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/build_setting.png\" class=\"\" title=\"Build Setting配置\">\n\n<h3 id=\"Step-6-Deployment-Target-部署目标\"><a href=\"#Step-6-Deployment-Target-部署目标\" class=\"headerlink\" title=\"Step 6:Deployment Target(部署目标)\"></a>Step 6:Deployment Target(部署目标)</h3><p>所有配置都已配好后，就可以开始打包了生成ipa了。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/archive.png\" class=\"\" title=\"开始打包\">\n\n<h2 id=\"iTunes-Connect相关配置\"><a href=\"#iTunes-Connect相关配置\" class=\"headerlink\" title=\"iTunes Connect相关配置\"></a>iTunes Connect相关配置</h2><h3 id=\"Step-1-创建“我的App”\"><a href=\"#Step-1-创建“我的App”\" class=\"headerlink\" title=\"Step 1:创建“我的App”\"></a>Step 1:创建“我的App”</h3><p>首先用你自己的开发者帐号登录到<a href=\"https://itunesconnect.apple.com/\">iTunes Connect</a>。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step1.png\" class=\"\" title=\"iTunes Connect\">\n<p>登录成功后点击“我的App”，然后点击“＋”-&gt;“新建App”</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step2.png\" class=\"\" title=\"在iTunes Connect上新建App\">\n<p>其中平台选择iOS，名称为你的app的名词，主要语言为你的app的主要语言，套装ID为之前创建的App ID，也就是Xcode工程中的Bundle ID。<br>点击下一步，创建成功后，选择你刚创建成功的应用，进行相关的设置。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step3.png\" class=\"\" title=\"填写相关信息\">\n\n<p>相关设置比较简单就不再多说。</p>\n<h3 id=\"Step-2-打包上传到iTunes-Connect\"><a href=\"#Step-2-打包上传到iTunes-Connect\" class=\"headerlink\" title=\"Step 2:打包上传到iTunes Connect\"></a>Step 2:打包上传到iTunes Connect</h3><p>配置好了iTunes Connect的相关配置后，就可以将我们生成的ipa包上传到iTunes Connect上了。Xcode中配置完成后archive成功后Xcode会弹出如下界面：</p>\n<img src=\"/posts/b7e0fb67d76f8e24/upload_itunes_connect.png\" class=\"\" title=\"上传到iTunes Connect\">\n<p> 上传到iTunes Connect有两种方法：</p>\n<p>** 方法一 **<br>直接点击上图的“Upload to App Store”按钮直接上传到App Store。</p>\n<p>** 方法二 **<br>先导出ipa，然后使用Application Loader上传到App Store。<br>点击“Export”，会弹出如下界面，选择导出的类型，这里要上传App Store，所以选择第一种。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/archive_step_1.png\" class=\"\" title=\"导出ipa文件\">\n<p>点击“下一步”，默认回去检查你的证书，如果没有什么问题一直下一步，最后会在桌面生成一个ipa的包。然后在Xcode中打开Application Loader。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/application_loader_1.png\" class=\"\" title=\"Application Loader\">\n<p>用你自己的开发者帐号登录Application Loader，</p>\n<img src=\"/posts/b7e0fb67d76f8e24/application_loader_login.png\" class=\"\" title=\"Application Loader登录\">\n<p>登录成功后选取你刚刚生成的ipa</p>\n<img src=\"/posts/b7e0fb67d76f8e24/application_loader_step2.png\" class=\"\" title=\"Application Loader上传\">\n<p>然后上传提交到App Store。</p>\n<h3 id=\"Step-3-提交给苹果审核\"><a href=\"#Step-3-提交给苹果审核\" class=\"headerlink\" title=\"Step 3:提交给苹果审核\"></a>Step 3:提交给苹果审核</h3><p>完成上面的步骤后，返回到iTunes Connect界面，选择你先前创建的App，在它的活动页面下可以看到所有已上传过的ipa版本。</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step4.png\" class=\"\" title=\"上传成功后\">\n<p>选择App信息配置界面，找到“构建版本”，然后选择你刚刚上传的构建版本，然后提交审核即可</p>\n<img src=\"/posts/b7e0fb67d76f8e24/itunes_connect_step5.png\" class=\"\" title=\"提交审核\">"},{"title":"Block正确使用避免Cycle Retain和Crash","date":"2016-02-24T01:28:26.000Z","abbrlink":"2418260e3b67c299","_content":"\n>本文只介绍了MRC时的情况，有些细节不适用于ARC。比如MRC下__block不会增加引用计数，但ARC会，ARC下必须用__weak指明不增加引用计数；ARC下block内存分配机制也与MRC不一样，所以文中的一些例子在ARC下测试结果可能与文中描述的不一样\n\n## Block简介\n\nBlock作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于objc在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理 要么导致return cycle内存泄漏要么内存被提前释放导致crash。 Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅 实现函数的功能，还能携带函数的执行环境。\n\n可以这样理解，Block其实包含两个部分内容\n\n* Block执行的代码，这是在编译的时候已经生成好的；\n* 一个包含Block执行时需要的所有外部变量值的数据结构。 Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。\n\nBlock与函数另一个不同是，Block类似ObjC的对象，可以使用自动释放池管理内存（但Block并不完全等同于ObjC对象，后面将详细说明）。\n\n<!-- more -->\n\n## Block基本语法\n\n``` objc\n// 声明一个Block变量\nlong (^sum) (int, int) = nil;\n// sum是个Block变量，该Block类型有两个int型参数，返回类型是long。\n\n// 定义Block并赋给变量sum\nsum = ^ long (int a, int b) {\n  return a + b;\n};\n\n// 调用Block：\nlong s = sum(1, 2);\n```\n定义一个实例函数，该函数返回Block：\n``` objc\n- (long (^)(int, int)) sumBlock {\n    int base = 100;\n    return [[ ^ long (int a, int b) {\n      return base + a + b;\n    } copy] autorelease];\n  }\n\n// 调用Block\n[self sumBlock](1,2);\n```\n是不是感觉很怪？为了看的舒服，我们把Block类型typedef一下\n``` objc\ntypedef long (^BlkSum)(int, int);\n\n- (BlkSum) sumBlock {\n    int base = 100;\n    BlkSum blk = ^ long (int a, int b) {\n      return base + a + b;\n    }\n    return [[blk copy] autorelease];\n}\n\n```\n## Block在内存中的位置\n\n根据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。\n* NSGlobalBlock：类似函数，位于text段；\n* NSStackBlock：位于栈内存，函数返回后Block将无效；\n* NSMallocBlock：位于堆内存。\n\n来看下面一段代码\n``` objc\nBlkSum blk1 = ^ long (int a, int b) {\n  return a + b;\n};\nNSLog(@\"blk1 = %@\", blk1);// blk1 = <__NSGlobalBlock__: 0x47d0>\n\n\nint base = 100;\nBlkSum blk2 = ^ long (int a, int b) {\n  return base + a + b;\n};\nNSLog(@\"blk2 = %@\", blk2); // blk2 = <__NSStackBlock__: 0xbfffddf8>\n\nBlkSum blk3 = [[blk2 copy] autorelease];\nNSLog(@\"blk3 = %@\", blk3); // blk3 = <__NSMallocBlock__: 0x902fda0>\n```\n为什么blk1类型是NSGlobalBlock，而blk2类型是NSStackBlock？blk1和blk2的区别在于，blk1没有使用Block以外的任何外部变量，Block不需要建立局部变量值的快照，这使blk1与函数没有任何区别，从blk1所在内存地址0x47d0猜测编译器把blk1放到了text代码段。blk2与blk1唯一不同是的使用了局部变量base，在定义（注意是定义，不是运行）blk2时，局部变量base当前值被copy到栈上，作为常量供Block使用。执行下面代码，结果是203，而不是204。\n``` objc\nint base = 100;\nbase += 100;\nBlkSum sum = ^ long (int a, int b) {\n    return base + a + b;\n};\nbase++;\nprintf(\"%ld\",sum(1,2));\n```\n\n>在Block内变量base是只读的，如果想在Block内改变base的值，在定义base时要用 __block修饰：__block int base = 100;\n\n``` objc\n__block int base = 100;\nbase += 100;\nBlkSum sum = ^ long (int a, int b) {\n    base += 10;\n    return base + a + b;\n};\nbase++;\nprintf(\"%ld\\n\",sum(1,2));\nprintf(\"%d\\n\",base);\n```\n上方的代码输出将是214,211。Block中使用__block修饰的变量时，将取变量此刻运行时的值，而不是定义时的快照。这个例子中，执行sum(1,2)时，base将取base++之后的值，也就是201，再执行Blockbase+=10; base+a+b，运行结果是214。执行完Block时，base已经变成211了。\n\n## Block的copy、retain、release操作\n\n不同于NSObjec的copy、retain、release操作：\n* Block_copy与copy等效，Block_release与release等效；\n* 对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；\n* NSGlobalBlock：retain、copy、release操作都无效；\n* NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。支持copy，copy之后生成新的NSMallocBlock类型对象。\n* NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；\n* 尽量不要对Block使用retain操作。\n\n## Block对不同类型的变量的存取\n\n** 基本类型 **\n* 局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。\n``` objc\nint base = 100;\nBlkSum sum = ^ long (int a, int b) {\n  // base++; 编译错误，只读\n  return base + a + b;\n};\nbase = 0;\nprintf(\"%ld\\n\",sum(1,2)); // 这里输出是103，而不是3\n```\n* static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。\n如下所示的一段代码输出结果是0 3 1，表明Block外部对base的更新会影响Block中的base的取值，同样Block对base的更新也会影响Block外部的base值。\n``` objc\nstatic int base = 100;\nBlkSum sum = ^ long (int a, int b) {\n  base++;\n  return base + a + b;\n};\nbase = 0;\nprintf(\"%d\\n\", base);\nprintf(\"%ld\\n\",sum(1,2)); // 这里输出是3，而不是103\nprintf(\"%d\\n\", base);\n```\n\n* Block变量，被__block修饰的变量称作Block变量。 基本类型的Block变量等效于全局变量、或静态变量。Block被另一个Block使用时，另一个Block被copy到堆上时，被使用的Block也会被copy。但作为参数的Block是不会发生copy的。\n``` objc\nvoid foo() {\n  int base = 100;\n  BlkSum blk = ^ long (int a, int b) {\n    return  base + a + b;\n  };\n  NSLog(@\"%@\", blk); // <__NSStackBlock__: 0xbfffdb40>\n  bar(blk);\n}\n\nvoid bar(BlkSum sum_blk) {\n  NSLog(@\"%@\",sum_blk); // 与上面一样，说明作为参数传递时，并不会发生copy\n\n  void (^blk) (BlkSum) = ^ (BlkSum sum) {\n    NSLog(@\"%@\",sum);     // 无论blk在堆上还是栈上，作为参数的Block不会发生copy。\n    NSLog(@\"%@\",sum_blk); // 当blk copy到堆上时，sum_blk也被copy了一分到堆上上。\n  };\n  blk(sum_blk); // blk在栈上\n\n  blk = [[blk copy] autorelease];\n  blk(sum_blk); // blk在堆上\n}\n```\n\n* ObjC对象，不同于基本类型，Block会引起对象的引用计数变化。\n先看下面代码\n执行结果为1 1 1 2 1。\n__globalObj和__staticObj在内存中的位置是确定的，所以Block copy时不会retain对象。\n_instanceObj在Block copy时也没有直接retain _instanceObj对象本身，但会retain self。所以在Block中可以直接读写_instanceObj变量。\nlocalObj在Block copy时，系统自动retain对象，增加其引用计数。\nblockObj在Block copy时也不会retain。\n``` objc\n@interface MyClass : NSObject {\n    NSObject* _instanceObj;\n}\n@end\n\n@implementation MyClass\n\nNSObject* __globalObj = nil;\n\n- (id) init {\n    if (self = [super init]) {\n        _instanceObj = [[NSObject alloc] init];\n    }\n    return self;\n}\n\n- (void) test {\n    static NSObject* __staticObj = nil;\n    __globalObj = [[NSObject alloc] init];\n    __staticObj = [[NSObject alloc] init];\n\n    NSObject* localObj = [[NSObject alloc] init];\n    __block NSObject* blockObj = [[NSObject alloc] init];\n\n    typedef void (^MyBlock)(void) ;\n    MyBlock aBlock = ^{\n        NSLog(@\"%@\", __globalObj);\n        NSLog(@\"%@\", __staticObj);\n        NSLog(@\"%@\", _instanceObj);\n        NSLog(@\"%@\", localObj);\n        NSLog(@\"%@\", blockObj);\n    };\n    aBlock = [[aBlock copy] autorelease];\n    aBlock();\n\n    NSLog(@\"%d\", [__globalObj retainCount]);\n    NSLog(@\"%d\", [__staticObj retainCount]);\n    NSLog(@\"%d\", [_instanceObj retainCount]);\n    NSLog(@\"%d\", [localObj retainCount]);\n    NSLog(@\"%d\", [blockObj retainCount]);\n}\n@end\n\nint main(int argc, char *argv[]) {\n    @autoreleasepool {\n        MyClass* obj = [[[MyClass alloc] init] autorelease];\n        [obj test];\n        return 0;\n    }\n}\n```\n* 非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数，这点要非常小心。\n\n## Block中使用的ObjC对象的行为\n\n``` objc\n@property (nonatomic, copy) void(^myBlock)(void);\n\nMyClass* obj = [[[MyClass alloc] init] autorelease];\nself.myBlock = ^ {\n  [obj doSomething];\n};\n```\n对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。\n\n## retain cycle\n\nretain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：\n``` objc\nASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];\n[request setCompletionBlock:^{\n  NSString* string = [request responseString];\n}];\n```\n``` bash\n       +-----------+           +-----------+\n       | request   |           |   Block   |\n  ---> |           | --------> |           |\n       | retain 2  | <-------- | retain 1  |\n       |           |           |           |\n       +-----------+           +-----------+\n```\n解决这个问题的办法是使用弱引用打断retain cycle：\n``` objc\n__block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];\n[request setCompletionBlock:^{\n  NSString* string = [request responseString];\n}];\n```\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |\n ---->|           | --------> |           |\n      | retain 1  | < - - - - | retain 1  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\nrequest被持有者释放后。request 的retainCount变成0,request被dealloc，request释放持有的Block，导致Block的retainCount变成0，也被销毁。这样这两个对象内存都被回收。\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |\n --X->|           | ----X---> |           |\n      | retain 0  | < - - - - | retain 0  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\n与上面情况类似的陷阱：\n``` objc\nself.myBlock = ^ {\n  [self doSomething];\n};\n```\n这里self和myBlock循环引用，解决办法同上：\n``` objc\n__block MyClass* weakSelf = self;\nself.myBlock = ^ {\n  [weakSelf doSomething];\n};\n```\n``` objc\n@property (nonatomic, retain) NSString* someVar;\n\nself.myBlock = ^ {\n  NSLog(@\"%@\", _someVer);\n};\n```\n这里在Block中虽然没直接使用self，但使用了成员变量。在Block中使用成员变量，retain的不是这个变量，而会retain self。解决办法也和上面一样。\n``` objc\n@property (nonatomic, retain) NSString* someVar;\n\n__block MyClass* weakSelf = self;\nself.myBlock = ^ {\n  NSLog(@\"%@\", self.someVer);\n};\n```\n或者\n``` objc\nNSString* str = _someVer;\nself.myBlock = ^ {\n  NSLog(@\"%@\", str);\n};\n```\nretain cycle不只发生在两个对象之间，也可能发生在多个对象之间，这样问题更复杂，更难发现\n``` objc\nClassA* objA = [[[ClassA alloc] init] autorelease];\nobjA.myBlock = ^{\n    [self doSomething];\n};\nself.objA = objA;\n```\n``` bash\n  +-----------+           +-----------+           +-----------+\n  |   self    |           |   objA    |           |   Block   |\n  |           | --------> |           | --------> |           |\n  | retain 1  |           | retain 1  |           | retain 1  |\n  |           |           |           |           |           |\n  +-----------+           +-----------+           +-----------+\n       ^                                                |\n       |                                                |\n       +------------------------------------------------+\n```\n解决办法同样是用__block打破循环引用\n``` objc\nClassA* objA = [[[ClassA alloc] init] autorelease];\n\nMyClass* weakSelf = self;\nobjA.myBlock = ^{\n  [weakSelf doSomething];\n};\nself.objA = objA;\n```\n>注意：MRC中__block是不会引起retain；但在ARC中__block则会引起retain。ARC中应该使用__weak或__unsafe_unretained弱引用。__weak只能在iOS5以后使用。\n\n## Block使用对象被提前释放\n看下面例子，有这种情况，如果不只是request持有了Block，另一个对象也持有了Block。\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |   objA\n ---->|           | --------> |           |<--------\n      | retain 1  | < - - - - | retain 2  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\n这时如果request 被持有者释放。\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |   objA\n --X->|           | --------> |           |<--------\n      | retain 0  | < - - - - | retain 1  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\n这时request已被完全释放，但Block仍被objA持有，没有释放，如果这时触发了Block，在Block中将访问已经销毁的request，这将导致程序crash。为了避免这种情况，开发者必须要注意对象和Block的生命周期。\n\n另一个常见错误使用是，开发者担心retain cycle错误的使用__block。比如\n``` objc\n__block kkProducView* weakSelf = self;\ndispatch_async(dispatch_get_main_queue(), ^{\n  weakSelf.xx = xx;\n});\n```\n将Block作为参数传给dispatch_async时，系统会将Block拷贝到堆上，如果Block中使用了实例变量，还将retain self，因为dispatch_async并不知道self会在什么时候被释放，为了确保系统调度执行Block中的任务时self没有被意外释放掉，dispatch_async必须自己retain一次self，任务完成后再release self。但这里使用__block，使dispatch_async没有增加self的引用计数，这使得在系统在调度执行Block之前，self可能已被销毁，但系统并不知道这个情况，导致Block被调度执行时self已经被释放导致crash。\n``` objc\n// MyClass.m\n- (void) test {\n  __block MyClass* weakSelf = self;\n  double delayInSeconds = 10.0;\n  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));\n  dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n    NSLog(@\"%@\", weakSelf);\n});\n\n// other.m\nMyClass* obj = [[[MyClass alloc] init] autorelease];\n[obj test];\n```\n这里用dispatch_after模拟了一个异步任务，10秒后执行Block。但执行Block的时候MyClass* obj已经被释放了，导致crash。解决办法是不要使用__block。","source":"_posts/Block正确使用避免Cycle-Retain和Crash.md","raw":"---\ntitle: Block正确使用避免Cycle Retain和Crash\ndate: 2016-02-24 09:28:26\ntags:\n  - iOS\ncategories: 技术杂谈\nabbrlink: 2418260e3b67c299\n---\n\n>本文只介绍了MRC时的情况，有些细节不适用于ARC。比如MRC下__block不会增加引用计数，但ARC会，ARC下必须用__weak指明不增加引用计数；ARC下block内存分配机制也与MRC不一样，所以文中的一些例子在ARC下测试结果可能与文中描述的不一样\n\n## Block简介\n\nBlock作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于objc在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理 要么导致return cycle内存泄漏要么内存被提前释放导致crash。 Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅 实现函数的功能，还能携带函数的执行环境。\n\n可以这样理解，Block其实包含两个部分内容\n\n* Block执行的代码，这是在编译的时候已经生成好的；\n* 一个包含Block执行时需要的所有外部变量值的数据结构。 Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。\n\nBlock与函数另一个不同是，Block类似ObjC的对象，可以使用自动释放池管理内存（但Block并不完全等同于ObjC对象，后面将详细说明）。\n\n<!-- more -->\n\n## Block基本语法\n\n``` objc\n// 声明一个Block变量\nlong (^sum) (int, int) = nil;\n// sum是个Block变量，该Block类型有两个int型参数，返回类型是long。\n\n// 定义Block并赋给变量sum\nsum = ^ long (int a, int b) {\n  return a + b;\n};\n\n// 调用Block：\nlong s = sum(1, 2);\n```\n定义一个实例函数，该函数返回Block：\n``` objc\n- (long (^)(int, int)) sumBlock {\n    int base = 100;\n    return [[ ^ long (int a, int b) {\n      return base + a + b;\n    } copy] autorelease];\n  }\n\n// 调用Block\n[self sumBlock](1,2);\n```\n是不是感觉很怪？为了看的舒服，我们把Block类型typedef一下\n``` objc\ntypedef long (^BlkSum)(int, int);\n\n- (BlkSum) sumBlock {\n    int base = 100;\n    BlkSum blk = ^ long (int a, int b) {\n      return base + a + b;\n    }\n    return [[blk copy] autorelease];\n}\n\n```\n## Block在内存中的位置\n\n根据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。\n* NSGlobalBlock：类似函数，位于text段；\n* NSStackBlock：位于栈内存，函数返回后Block将无效；\n* NSMallocBlock：位于堆内存。\n\n来看下面一段代码\n``` objc\nBlkSum blk1 = ^ long (int a, int b) {\n  return a + b;\n};\nNSLog(@\"blk1 = %@\", blk1);// blk1 = <__NSGlobalBlock__: 0x47d0>\n\n\nint base = 100;\nBlkSum blk2 = ^ long (int a, int b) {\n  return base + a + b;\n};\nNSLog(@\"blk2 = %@\", blk2); // blk2 = <__NSStackBlock__: 0xbfffddf8>\n\nBlkSum blk3 = [[blk2 copy] autorelease];\nNSLog(@\"blk3 = %@\", blk3); // blk3 = <__NSMallocBlock__: 0x902fda0>\n```\n为什么blk1类型是NSGlobalBlock，而blk2类型是NSStackBlock？blk1和blk2的区别在于，blk1没有使用Block以外的任何外部变量，Block不需要建立局部变量值的快照，这使blk1与函数没有任何区别，从blk1所在内存地址0x47d0猜测编译器把blk1放到了text代码段。blk2与blk1唯一不同是的使用了局部变量base，在定义（注意是定义，不是运行）blk2时，局部变量base当前值被copy到栈上，作为常量供Block使用。执行下面代码，结果是203，而不是204。\n``` objc\nint base = 100;\nbase += 100;\nBlkSum sum = ^ long (int a, int b) {\n    return base + a + b;\n};\nbase++;\nprintf(\"%ld\",sum(1,2));\n```\n\n>在Block内变量base是只读的，如果想在Block内改变base的值，在定义base时要用 __block修饰：__block int base = 100;\n\n``` objc\n__block int base = 100;\nbase += 100;\nBlkSum sum = ^ long (int a, int b) {\n    base += 10;\n    return base + a + b;\n};\nbase++;\nprintf(\"%ld\\n\",sum(1,2));\nprintf(\"%d\\n\",base);\n```\n上方的代码输出将是214,211。Block中使用__block修饰的变量时，将取变量此刻运行时的值，而不是定义时的快照。这个例子中，执行sum(1,2)时，base将取base++之后的值，也就是201，再执行Blockbase+=10; base+a+b，运行结果是214。执行完Block时，base已经变成211了。\n\n## Block的copy、retain、release操作\n\n不同于NSObjec的copy、retain、release操作：\n* Block_copy与copy等效，Block_release与release等效；\n* 对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；\n* NSGlobalBlock：retain、copy、release操作都无效；\n* NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。支持copy，copy之后生成新的NSMallocBlock类型对象。\n* NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；\n* 尽量不要对Block使用retain操作。\n\n## Block对不同类型的变量的存取\n\n** 基本类型 **\n* 局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。\n``` objc\nint base = 100;\nBlkSum sum = ^ long (int a, int b) {\n  // base++; 编译错误，只读\n  return base + a + b;\n};\nbase = 0;\nprintf(\"%ld\\n\",sum(1,2)); // 这里输出是103，而不是3\n```\n* static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。\n如下所示的一段代码输出结果是0 3 1，表明Block外部对base的更新会影响Block中的base的取值，同样Block对base的更新也会影响Block外部的base值。\n``` objc\nstatic int base = 100;\nBlkSum sum = ^ long (int a, int b) {\n  base++;\n  return base + a + b;\n};\nbase = 0;\nprintf(\"%d\\n\", base);\nprintf(\"%ld\\n\",sum(1,2)); // 这里输出是3，而不是103\nprintf(\"%d\\n\", base);\n```\n\n* Block变量，被__block修饰的变量称作Block变量。 基本类型的Block变量等效于全局变量、或静态变量。Block被另一个Block使用时，另一个Block被copy到堆上时，被使用的Block也会被copy。但作为参数的Block是不会发生copy的。\n``` objc\nvoid foo() {\n  int base = 100;\n  BlkSum blk = ^ long (int a, int b) {\n    return  base + a + b;\n  };\n  NSLog(@\"%@\", blk); // <__NSStackBlock__: 0xbfffdb40>\n  bar(blk);\n}\n\nvoid bar(BlkSum sum_blk) {\n  NSLog(@\"%@\",sum_blk); // 与上面一样，说明作为参数传递时，并不会发生copy\n\n  void (^blk) (BlkSum) = ^ (BlkSum sum) {\n    NSLog(@\"%@\",sum);     // 无论blk在堆上还是栈上，作为参数的Block不会发生copy。\n    NSLog(@\"%@\",sum_blk); // 当blk copy到堆上时，sum_blk也被copy了一分到堆上上。\n  };\n  blk(sum_blk); // blk在栈上\n\n  blk = [[blk copy] autorelease];\n  blk(sum_blk); // blk在堆上\n}\n```\n\n* ObjC对象，不同于基本类型，Block会引起对象的引用计数变化。\n先看下面代码\n执行结果为1 1 1 2 1。\n__globalObj和__staticObj在内存中的位置是确定的，所以Block copy时不会retain对象。\n_instanceObj在Block copy时也没有直接retain _instanceObj对象本身，但会retain self。所以在Block中可以直接读写_instanceObj变量。\nlocalObj在Block copy时，系统自动retain对象，增加其引用计数。\nblockObj在Block copy时也不会retain。\n``` objc\n@interface MyClass : NSObject {\n    NSObject* _instanceObj;\n}\n@end\n\n@implementation MyClass\n\nNSObject* __globalObj = nil;\n\n- (id) init {\n    if (self = [super init]) {\n        _instanceObj = [[NSObject alloc] init];\n    }\n    return self;\n}\n\n- (void) test {\n    static NSObject* __staticObj = nil;\n    __globalObj = [[NSObject alloc] init];\n    __staticObj = [[NSObject alloc] init];\n\n    NSObject* localObj = [[NSObject alloc] init];\n    __block NSObject* blockObj = [[NSObject alloc] init];\n\n    typedef void (^MyBlock)(void) ;\n    MyBlock aBlock = ^{\n        NSLog(@\"%@\", __globalObj);\n        NSLog(@\"%@\", __staticObj);\n        NSLog(@\"%@\", _instanceObj);\n        NSLog(@\"%@\", localObj);\n        NSLog(@\"%@\", blockObj);\n    };\n    aBlock = [[aBlock copy] autorelease];\n    aBlock();\n\n    NSLog(@\"%d\", [__globalObj retainCount]);\n    NSLog(@\"%d\", [__staticObj retainCount]);\n    NSLog(@\"%d\", [_instanceObj retainCount]);\n    NSLog(@\"%d\", [localObj retainCount]);\n    NSLog(@\"%d\", [blockObj retainCount]);\n}\n@end\n\nint main(int argc, char *argv[]) {\n    @autoreleasepool {\n        MyClass* obj = [[[MyClass alloc] init] autorelease];\n        [obj test];\n        return 0;\n    }\n}\n```\n* 非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数，这点要非常小心。\n\n## Block中使用的ObjC对象的行为\n\n``` objc\n@property (nonatomic, copy) void(^myBlock)(void);\n\nMyClass* obj = [[[MyClass alloc] init] autorelease];\nself.myBlock = ^ {\n  [obj doSomething];\n};\n```\n对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。\n\n## retain cycle\n\nretain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：\n``` objc\nASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];\n[request setCompletionBlock:^{\n  NSString* string = [request responseString];\n}];\n```\n``` bash\n       +-----------+           +-----------+\n       | request   |           |   Block   |\n  ---> |           | --------> |           |\n       | retain 2  | <-------- | retain 1  |\n       |           |           |           |\n       +-----------+           +-----------+\n```\n解决这个问题的办法是使用弱引用打断retain cycle：\n``` objc\n__block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];\n[request setCompletionBlock:^{\n  NSString* string = [request responseString];\n}];\n```\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |\n ---->|           | --------> |           |\n      | retain 1  | < - - - - | retain 1  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\nrequest被持有者释放后。request 的retainCount变成0,request被dealloc，request释放持有的Block，导致Block的retainCount变成0，也被销毁。这样这两个对象内存都被回收。\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |\n --X->|           | ----X---> |           |\n      | retain 0  | < - - - - | retain 0  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\n与上面情况类似的陷阱：\n``` objc\nself.myBlock = ^ {\n  [self doSomething];\n};\n```\n这里self和myBlock循环引用，解决办法同上：\n``` objc\n__block MyClass* weakSelf = self;\nself.myBlock = ^ {\n  [weakSelf doSomething];\n};\n```\n``` objc\n@property (nonatomic, retain) NSString* someVar;\n\nself.myBlock = ^ {\n  NSLog(@\"%@\", _someVer);\n};\n```\n这里在Block中虽然没直接使用self，但使用了成员变量。在Block中使用成员变量，retain的不是这个变量，而会retain self。解决办法也和上面一样。\n``` objc\n@property (nonatomic, retain) NSString* someVar;\n\n__block MyClass* weakSelf = self;\nself.myBlock = ^ {\n  NSLog(@\"%@\", self.someVer);\n};\n```\n或者\n``` objc\nNSString* str = _someVer;\nself.myBlock = ^ {\n  NSLog(@\"%@\", str);\n};\n```\nretain cycle不只发生在两个对象之间，也可能发生在多个对象之间，这样问题更复杂，更难发现\n``` objc\nClassA* objA = [[[ClassA alloc] init] autorelease];\nobjA.myBlock = ^{\n    [self doSomething];\n};\nself.objA = objA;\n```\n``` bash\n  +-----------+           +-----------+           +-----------+\n  |   self    |           |   objA    |           |   Block   |\n  |           | --------> |           | --------> |           |\n  | retain 1  |           | retain 1  |           | retain 1  |\n  |           |           |           |           |           |\n  +-----------+           +-----------+           +-----------+\n       ^                                                |\n       |                                                |\n       +------------------------------------------------+\n```\n解决办法同样是用__block打破循环引用\n``` objc\nClassA* objA = [[[ClassA alloc] init] autorelease];\n\nMyClass* weakSelf = self;\nobjA.myBlock = ^{\n  [weakSelf doSomething];\n};\nself.objA = objA;\n```\n>注意：MRC中__block是不会引起retain；但在ARC中__block则会引起retain。ARC中应该使用__weak或__unsafe_unretained弱引用。__weak只能在iOS5以后使用。\n\n## Block使用对象被提前释放\n看下面例子，有这种情况，如果不只是request持有了Block，另一个对象也持有了Block。\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |   objA\n ---->|           | --------> |           |<--------\n      | retain 1  | < - - - - | retain 2  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\n这时如果request 被持有者释放。\n``` bash\n      +-----------+           +-----------+\n      | request   |           |   Block   |   objA\n --X->|           | --------> |           |<--------\n      | retain 0  | < - - - - | retain 1  |\n      |           |   weak    |           |\n      +-----------+           +-----------+\n```\n这时request已被完全释放，但Block仍被objA持有，没有释放，如果这时触发了Block，在Block中将访问已经销毁的request，这将导致程序crash。为了避免这种情况，开发者必须要注意对象和Block的生命周期。\n\n另一个常见错误使用是，开发者担心retain cycle错误的使用__block。比如\n``` objc\n__block kkProducView* weakSelf = self;\ndispatch_async(dispatch_get_main_queue(), ^{\n  weakSelf.xx = xx;\n});\n```\n将Block作为参数传给dispatch_async时，系统会将Block拷贝到堆上，如果Block中使用了实例变量，还将retain self，因为dispatch_async并不知道self会在什么时候被释放，为了确保系统调度执行Block中的任务时self没有被意外释放掉，dispatch_async必须自己retain一次self，任务完成后再release self。但这里使用__block，使dispatch_async没有增加self的引用计数，这使得在系统在调度执行Block之前，self可能已被销毁，但系统并不知道这个情况，导致Block被调度执行时self已经被释放导致crash。\n``` objc\n// MyClass.m\n- (void) test {\n  __block MyClass* weakSelf = self;\n  double delayInSeconds = 10.0;\n  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));\n  dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n    NSLog(@\"%@\", weakSelf);\n});\n\n// other.m\nMyClass* obj = [[[MyClass alloc] init] autorelease];\n[obj test];\n```\n这里用dispatch_after模拟了一个异步任务，10秒后执行Block。但执行Block的时候MyClass* obj已经被释放了，导致crash。解决办法是不要使用__block。","slug":"Block正确使用避免Cycle-Retain和Crash","published":1,"updated":"2022-05-19T03:13:11.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenh0007l1l37mtc0ks1","content":"<blockquote>\n<p>本文只介绍了MRC时的情况，有些细节不适用于ARC。比如MRC下__block不会增加引用计数，但ARC会，ARC下必须用__weak指明不增加引用计数；ARC下block内存分配机制也与MRC不一样，所以文中的一些例子在ARC下测试结果可能与文中描述的不一样</p>\n</blockquote>\n<h2 id=\"Block简介\"><a href=\"#Block简介\" class=\"headerlink\" title=\"Block简介\"></a>Block简介</h2><p>Block作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于objc在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理 要么导致return cycle内存泄漏要么内存被提前释放导致crash。 Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅 实现函数的功能，还能携带函数的执行环境。</p>\n<p>可以这样理解，Block其实包含两个部分内容</p>\n<ul>\n<li>Block执行的代码，这是在编译的时候已经生成好的；</li>\n<li>一个包含Block执行时需要的所有外部变量值的数据结构。 Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。</li>\n</ul>\n<p>Block与函数另一个不同是，Block类似ObjC的对象，可以使用自动释放池管理内存（但Block并不完全等同于ObjC对象，后面将详细说明）。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Block基本语法\"><a href=\"#Block基本语法\" class=\"headerlink\" title=\"Block基本语法\"></a>Block基本语法</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个Block变量</span></span><br><span class=\"line\"><span class=\"type\">long</span> (^sum) (<span class=\"type\">int</span>, <span class=\"type\">int</span>) = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"comment\">// sum是个Block变量，该Block类型有两个int型参数，返回类型是long。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义Block并赋给变量sum</span></span><br><span class=\"line\">sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用Block：</span></span><br><span class=\"line\"><span class=\"type\">long</span> s = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>定义一个实例函数，该函数返回Block：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">long</span> (^)(<span class=\"type\">int</span>, <span class=\"type\">int</span>)) sumBlock &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[ ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用Block</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> sumBlock](<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>是不是感觉很怪？为了看的舒服，我们把Block类型typedef一下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> (^BlkSum)(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">- (BlkSum) sumBlock &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">    BlkSum blk = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[blk <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Block在内存中的位置\"><a href=\"#Block在内存中的位置\" class=\"headerlink\" title=\"Block在内存中的位置\"></a>Block在内存中的位置</h2><p>根据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。</p>\n<ul>\n<li>NSGlobalBlock：类似函数，位于text段；</li>\n<li>NSStackBlock：位于栈内存，函数返回后Block将无效；</li>\n<li>NSMallocBlock：位于堆内存。</li>\n</ul>\n<p>来看下面一段代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BlkSum blk1 = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;blk1 = %@&quot;</span>, blk1);<span class=\"comment\">// blk1 = &lt;__NSGlobalBlock__: 0x47d0&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum blk2 = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;blk2 = %@&quot;</span>, blk2); <span class=\"comment\">// blk2 = &lt;__NSStackBlock__: 0xbfffddf8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlkSum blk3 = [[blk2 <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;blk3 = %@&quot;</span>, blk3); <span class=\"comment\">// blk3 = &lt;__NSMallocBlock__: 0x902fda0&gt;</span></span><br></pre></td></tr></table></figure>\n<p>为什么blk1类型是NSGlobalBlock，而blk2类型是NSStackBlock？blk1和blk2的区别在于，blk1没有使用Block以外的任何外部变量，Block不需要建立局部变量值的快照，这使blk1与函数没有任何区别，从blk1所在内存地址0x47d0猜测编译器把blk1放到了text代码段。blk2与blk1唯一不同是的使用了局部变量base，在定义（注意是定义，不是运行）blk2时，局部变量base当前值被copy到栈上，作为常量供Block使用。执行下面代码，结果是203，而不是204。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">base += <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base++;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在Block内变量base是只读的，如果想在Block内改变base的值，在定义base时要用 __block修饰：__block int base = 100;</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">base += <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    base += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base++;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld\\n&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>,base);</span><br></pre></td></tr></table></figure>\n<p>上方的代码输出将是214,211。Block中使用__block修饰的变量时，将取变量此刻运行时的值，而不是定义时的快照。这个例子中，执行sum(1,2)时，base将取base++之后的值，也就是201，再执行Blockbase+=10; base+a+b，运行结果是214。执行完Block时，base已经变成211了。</p>\n<h2 id=\"Block的copy、retain、release操作\"><a href=\"#Block的copy、retain、release操作\" class=\"headerlink\" title=\"Block的copy、retain、release操作\"></a>Block的copy、retain、release操作</h2><p>不同于NSObjec的copy、retain、release操作：</p>\n<ul>\n<li>Block_copy与copy等效，Block_release与release等效；</li>\n<li>对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；</li>\n<li>NSGlobalBlock：retain、copy、release操作都无效；</li>\n<li>NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。支持copy，copy之后生成新的NSMallocBlock类型对象。</li>\n<li>NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；</li>\n<li>尽量不要对Block使用retain操作。</li>\n</ul>\n<h2 id=\"Block对不同类型的变量的存取\"><a href=\"#Block对不同类型的变量的存取\" class=\"headerlink\" title=\"Block对不同类型的变量的存取\"></a>Block对不同类型的变量的存取</h2><p>** 基本类型 **</p>\n<ul>\n<li><p>局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// base++; 编译错误，只读</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base = <span class=\"number\">0</span>;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld\\n&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 这里输出是103，而不是3</span></span><br></pre></td></tr></table></figure></li>\n<li><p>static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。<br>如下所示的一段代码输出结果是0 3 1，表明Block外部对base的更新会影响Block中的base的取值，同样Block对base的更新也会影响Block外部的base值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  base++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base = <span class=\"number\">0</span>;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>, base);</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld\\n&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 这里输出是3，而不是103</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>, base);</span><br></pre></td></tr></table></figure></li>\n<li><p>Block变量，被__block修饰的变量称作Block变量。 基本类型的Block变量等效于全局变量、或静态变量。Block被另一个Block使用时，另一个Block被copy到堆上时，被使用的Block也会被copy。但作为参数的Block是不会发生copy的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> foo() &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">  BlkSum blk = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  base + a + b;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, blk); <span class=\"comment\">// &lt;__NSStackBlock__: 0xbfffdb40&gt;</span></span><br><span class=\"line\">  bar(blk);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> bar(BlkSum sum_blk) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,sum_blk); <span class=\"comment\">// 与上面一样，说明作为参数传递时，并不会发生copy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">void</span> (^blk) (BlkSum) = ^ (BlkSum sum) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,sum);     <span class=\"comment\">// 无论blk在堆上还是栈上，作为参数的Block不会发生copy。</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,sum_blk); <span class=\"comment\">// 当blk copy到堆上时，sum_blk也被copy了一分到堆上上。</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  blk(sum_blk); <span class=\"comment\">// blk在栈上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  blk = [[blk <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">  blk(sum_blk); <span class=\"comment\">// blk在堆上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ObjC对象，不同于基本类型，Block会引起对象的引用计数变化。<br>先看下面代码<br>执行结果为1 1 1 2 1。<br>__globalObj和__staticObj在内存中的位置是确定的，所以Block copy时不会retain对象。<br>_instanceObj在Block copy时也没有直接retain _instanceObj对象本身，但会retain self。所以在Block中可以直接读写_instanceObj变量。<br>localObj在Block copy时，系统自动retain对象，增加其引用计数。<br>blockObj在Block copy时也不会retain。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSObject</span>* _instanceObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSObject</span>* __globalObj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>) init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init]) &#123;</span><br><span class=\"line\">        _instanceObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>) test &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSObject</span>* __staticObj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    __globalObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    __staticObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSObject</span>* localObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    __block <span class=\"built_in\">NSObject</span>* blockObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"type\">void</span> (^MyBlock)(<span class=\"type\">void</span>) ;</span><br><span class=\"line\">    MyBlock aBlock = ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, __globalObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, __staticObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, _instanceObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, localObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, blockObj);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    aBlock = [[aBlock <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">    aBlock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [__globalObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [__staticObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [_instanceObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [localObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [blockObj retainCount]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\">        [obj test];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数，这点要非常小心。</p>\n</li>\n</ul>\n<h2 id=\"Block中使用的ObjC对象的行为\"><a href=\"#Block中使用的ObjC对象的行为\" class=\"headerlink\" title=\"Block中使用的ObjC对象的行为\"></a>Block中使用的ObjC对象的行为</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"type\">void</span>(^myBlock)(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  [obj doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。</p>\n<h2 id=\"retain-cycle\"><a href=\"#retain-cycle\" class=\"headerlink\" title=\"retain cycle\"></a>retain cycle</h2><p>retain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</span><br><span class=\"line\">[request setCompletionBlock:^&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSString</span>* string = [request responseString];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">---&gt; |           | --------&gt; |           |</span><br><span class=\"line\">     | retain 2  | &lt;-------- | retain 1  |</span><br><span class=\"line\">     |           |           |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>解决这个问题的办法是使用弱引用打断retain cycle：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</span><br><span class=\"line\">[request setCompletionBlock:^&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSString</span>* string = [request responseString];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">----&gt;|           | --------&gt; |           |</span><br><span class=\"line\">     | retain 1  | &lt; - - - - | retain 1  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>request被持有者释放后。request 的retainCount变成0,request被dealloc，request释放持有的Block，导致Block的retainCount变成0，也被销毁。这样这两个对象内存都被回收。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">--X-&gt;|           | ----X---&gt; |           |</span><br><span class=\"line\">     | retain 0  | &lt; - - - - | retain 0  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>与上面情况类似的陷阱：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">self</span> doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里self和myBlock循环引用，解决办法同上：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSString</span>* someVar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, _someVer);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里在Block中虽然没直接使用self，但使用了成员变量。在Block中使用成员变量，retain的不是这个变量，而会retain self。解决办法也和上面一样。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSString</span>* someVar;</span><br><span class=\"line\"></span><br><span class=\"line\">__block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, <span class=\"keyword\">self</span>.someVer);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span>* str = _someVer;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, str);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>retain cycle不只发生在两个对象之间，也可能发生在多个对象之间，这样问题更复杂，更难发现</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class=\"line\">objA.myBlock = ^&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> doSomething];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.objA = objA;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+           +-----------+           +-----------+</span><br><span class=\"line\">|   self    |           |   objA    |           |   Block   |</span><br><span class=\"line\">|           | --------&gt; |           | --------&gt; |           |</span><br><span class=\"line\">| retain 1  |           | retain 1  |           | retain 1  |</span><br><span class=\"line\">|           |           |           |           |           |</span><br><span class=\"line\">+-----------+           +-----------+           +-----------+</span><br><span class=\"line\">     ^                                                |</span><br><span class=\"line\">     |                                                |</span><br><span class=\"line\">     +------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>解决办法同样是用__block打破循环引用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">objA.myBlock = ^&#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.objA = objA;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：MRC中__block是不会引起retain；但在ARC中__block则会引起retain。ARC中应该使用__weak或__unsafe_unretained弱引用。__weak只能在iOS5以后使用。</p>\n</blockquote>\n<h2 id=\"Block使用对象被提前释放\"><a href=\"#Block使用对象被提前释放\" class=\"headerlink\" title=\"Block使用对象被提前释放\"></a>Block使用对象被提前释放</h2><p>看下面例子，有这种情况，如果不只是request持有了Block，另一个对象也持有了Block。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |   objA</span><br><span class=\"line\">----&gt;|           | --------&gt; |           |&lt;--------</span><br><span class=\"line\">     | retain 1  | &lt; - - - - | retain 2  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>这时如果request 被持有者释放。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |   objA</span><br><span class=\"line\">--X-&gt;|           | --------&gt; |           |&lt;--------</span><br><span class=\"line\">     | retain 0  | &lt; - - - - | retain 1  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>这时request已被完全释放，但Block仍被objA持有，没有释放，如果这时触发了Block，在Block中将访问已经销毁的request，这将导致程序crash。为了避免这种情况，开发者必须要注意对象和Block的生命周期。</p>\n<p>另一个常见错误使用是，开发者担心retain cycle错误的使用__block。比如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block kkProducView* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">  weakSelf.xx = xx;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>将Block作为参数传给dispatch_async时，系统会将Block拷贝到堆上，如果Block中使用了实例变量，还将retain self，因为dispatch_async并不知道self会在什么时候被释放，为了确保系统调度执行Block中的任务时self没有被意外释放掉，dispatch_async必须自己retain一次self，任务完成后再release self。但这里使用__block，使dispatch_async没有增加self的引用计数，这使得在系统在调度执行Block之前，self可能已被销毁，但系统并不知道这个情况，导致Block被调度执行时self已经被释放导致crash。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass.m</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>) test &#123;</span><br><span class=\"line\">  __block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">  <span class=\"type\">double</span> delayInSeconds = <span class=\"number\">10.0</span>;</span><br><span class=\"line\">  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">  dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"type\">void</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, weakSelf);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.m</span></span><br><span class=\"line\">MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\">[obj test];</span><br></pre></td></tr></table></figure>\n<p>这里用dispatch_after模拟了一个异步任务，10秒后执行Block。但执行Block的时候MyClass* obj已经被释放了，导致crash。解决办法是不要使用__block。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文只介绍了MRC时的情况，有些细节不适用于ARC。比如MRC下__block不会增加引用计数，但ARC会，ARC下必须用__weak指明不增加引用计数；ARC下block内存分配机制也与MRC不一样，所以文中的一些例子在ARC下测试结果可能与文中描述的不一样</p>\n</blockquote>\n<h2 id=\"Block简介\"><a href=\"#Block简介\" class=\"headerlink\" title=\"Block简介\"></a>Block简介</h2><p>Block作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于objc在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理 要么导致return cycle内存泄漏要么内存被提前释放导致crash。 Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅 实现函数的功能，还能携带函数的执行环境。</p>\n<p>可以这样理解，Block其实包含两个部分内容</p>\n<ul>\n<li>Block执行的代码，这是在编译的时候已经生成好的；</li>\n<li>一个包含Block执行时需要的所有外部变量值的数据结构。 Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。</li>\n</ul>\n<p>Block与函数另一个不同是，Block类似ObjC的对象，可以使用自动释放池管理内存（但Block并不完全等同于ObjC对象，后面将详细说明）。</p>","more":"<h2 id=\"Block基本语法\"><a href=\"#Block基本语法\" class=\"headerlink\" title=\"Block基本语法\"></a>Block基本语法</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个Block变量</span></span><br><span class=\"line\"><span class=\"type\">long</span> (^sum) (<span class=\"type\">int</span>, <span class=\"type\">int</span>) = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"comment\">// sum是个Block变量，该Block类型有两个int型参数，返回类型是long。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义Block并赋给变量sum</span></span><br><span class=\"line\">sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用Block：</span></span><br><span class=\"line\"><span class=\"type\">long</span> s = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>定义一个实例函数，该函数返回Block：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">long</span> (^)(<span class=\"type\">int</span>, <span class=\"type\">int</span>)) sumBlock &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[ ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用Block</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> sumBlock](<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>是不是感觉很怪？为了看的舒服，我们把Block类型typedef一下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> (^BlkSum)(<span class=\"type\">int</span>, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">- (BlkSum) sumBlock &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">    BlkSum blk = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[blk <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Block在内存中的位置\"><a href=\"#Block在内存中的位置\" class=\"headerlink\" title=\"Block在内存中的位置\"></a>Block在内存中的位置</h2><p>根据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。</p>\n<ul>\n<li>NSGlobalBlock：类似函数，位于text段；</li>\n<li>NSStackBlock：位于栈内存，函数返回后Block将无效；</li>\n<li>NSMallocBlock：位于堆内存。</li>\n</ul>\n<p>来看下面一段代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BlkSum blk1 = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;blk1 = %@&quot;</span>, blk1);<span class=\"comment\">// blk1 = &lt;__NSGlobalBlock__: 0x47d0&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum blk2 = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;blk2 = %@&quot;</span>, blk2); <span class=\"comment\">// blk2 = &lt;__NSStackBlock__: 0xbfffddf8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlkSum blk3 = [[blk2 <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;blk3 = %@&quot;</span>, blk3); <span class=\"comment\">// blk3 = &lt;__NSMallocBlock__: 0x902fda0&gt;</span></span><br></pre></td></tr></table></figure>\n<p>为什么blk1类型是NSGlobalBlock，而blk2类型是NSStackBlock？blk1和blk2的区别在于，blk1没有使用Block以外的任何外部变量，Block不需要建立局部变量值的快照，这使blk1与函数没有任何区别，从blk1所在内存地址0x47d0猜测编译器把blk1放到了text代码段。blk2与blk1唯一不同是的使用了局部变量base，在定义（注意是定义，不是运行）blk2时，局部变量base当前值被copy到栈上，作为常量供Block使用。执行下面代码，结果是203，而不是204。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">base += <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base++;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在Block内变量base是只读的，如果想在Block内改变base的值，在定义base时要用 __block修饰：__block int base = 100;</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">base += <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    base += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base++;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld\\n&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>,base);</span><br></pre></td></tr></table></figure>\n<p>上方的代码输出将是214,211。Block中使用__block修饰的变量时，将取变量此刻运行时的值，而不是定义时的快照。这个例子中，执行sum(1,2)时，base将取base++之后的值，也就是201，再执行Blockbase+=10; base+a+b，运行结果是214。执行完Block时，base已经变成211了。</p>\n<h2 id=\"Block的copy、retain、release操作\"><a href=\"#Block的copy、retain、release操作\" class=\"headerlink\" title=\"Block的copy、retain、release操作\"></a>Block的copy、retain、release操作</h2><p>不同于NSObjec的copy、retain、release操作：</p>\n<ul>\n<li>Block_copy与copy等效，Block_release与release等效；</li>\n<li>对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；</li>\n<li>NSGlobalBlock：retain、copy、release操作都无效；</li>\n<li>NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。支持copy，copy之后生成新的NSMallocBlock类型对象。</li>\n<li>NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；</li>\n<li>尽量不要对Block使用retain操作。</li>\n</ul>\n<h2 id=\"Block对不同类型的变量的存取\"><a href=\"#Block对不同类型的变量的存取\" class=\"headerlink\" title=\"Block对不同类型的变量的存取\"></a>Block对不同类型的变量的存取</h2><p>** 基本类型 **</p>\n<ul>\n<li><p>局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// base++; 编译错误，只读</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base = <span class=\"number\">0</span>;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld\\n&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 这里输出是103，而不是3</span></span><br></pre></td></tr></table></figure></li>\n<li><p>static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。<br>如下所示的一段代码输出结果是0 3 1，表明Block外部对base的更新会影响Block中的base的取值，同样Block对base的更新也会影响Block外部的base值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">  base++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base = <span class=\"number\">0</span>;</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>, base);</span><br><span class=\"line\">printf(<span class=\"string\">&quot;%ld\\n&quot;</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 这里输出是3，而不是103</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>, base);</span><br></pre></td></tr></table></figure></li>\n<li><p>Block变量，被__block修饰的变量称作Block变量。 基本类型的Block变量等效于全局变量、或静态变量。Block被另一个Block使用时，另一个Block被copy到堆上时，被使用的Block也会被copy。但作为参数的Block是不会发生copy的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> foo() &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">  BlkSum blk = ^ <span class=\"type\">long</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  base + a + b;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, blk); <span class=\"comment\">// &lt;__NSStackBlock__: 0xbfffdb40&gt;</span></span><br><span class=\"line\">  bar(blk);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> bar(BlkSum sum_blk) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,sum_blk); <span class=\"comment\">// 与上面一样，说明作为参数传递时，并不会发生copy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">void</span> (^blk) (BlkSum) = ^ (BlkSum sum) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,sum);     <span class=\"comment\">// 无论blk在堆上还是栈上，作为参数的Block不会发生copy。</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,sum_blk); <span class=\"comment\">// 当blk copy到堆上时，sum_blk也被copy了一分到堆上上。</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  blk(sum_blk); <span class=\"comment\">// blk在栈上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  blk = [[blk <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">  blk(sum_blk); <span class=\"comment\">// blk在堆上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ObjC对象，不同于基本类型，Block会引起对象的引用计数变化。<br>先看下面代码<br>执行结果为1 1 1 2 1。<br>__globalObj和__staticObj在内存中的位置是确定的，所以Block copy时不会retain对象。<br>_instanceObj在Block copy时也没有直接retain _instanceObj对象本身，但会retain self。所以在Block中可以直接读写_instanceObj变量。<br>localObj在Block copy时，系统自动retain对象，增加其引用计数。<br>blockObj在Block copy时也不会retain。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSObject</span>* _instanceObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSObject</span>* __globalObj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>) init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init]) &#123;</span><br><span class=\"line\">        _instanceObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>) test &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSObject</span>* __staticObj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    __globalObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    __staticObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSObject</span>* localObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    __block <span class=\"built_in\">NSObject</span>* blockObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"type\">void</span> (^MyBlock)(<span class=\"type\">void</span>) ;</span><br><span class=\"line\">    MyBlock aBlock = ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, __globalObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, __staticObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, _instanceObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, localObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, blockObj);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    aBlock = [[aBlock <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">    aBlock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [__globalObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [__staticObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [_instanceObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [localObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%d&quot;</span>, [blockObj retainCount]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\">        [obj test];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数，这点要非常小心。</p>\n</li>\n</ul>\n<h2 id=\"Block中使用的ObjC对象的行为\"><a href=\"#Block中使用的ObjC对象的行为\" class=\"headerlink\" title=\"Block中使用的ObjC对象的行为\"></a>Block中使用的ObjC对象的行为</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"type\">void</span>(^myBlock)(<span class=\"type\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  [obj doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。</p>\n<h2 id=\"retain-cycle\"><a href=\"#retain-cycle\" class=\"headerlink\" title=\"retain cycle\"></a>retain cycle</h2><p>retain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</span><br><span class=\"line\">[request setCompletionBlock:^&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSString</span>* string = [request responseString];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">---&gt; |           | --------&gt; |           |</span><br><span class=\"line\">     | retain 2  | &lt;-------- | retain 1  |</span><br><span class=\"line\">     |           |           |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>解决这个问题的办法是使用弱引用打断retain cycle：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</span><br><span class=\"line\">[request setCompletionBlock:^&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSString</span>* string = [request responseString];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">----&gt;|           | --------&gt; |           |</span><br><span class=\"line\">     | retain 1  | &lt; - - - - | retain 1  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>request被持有者释放后。request 的retainCount变成0,request被dealloc，request释放持有的Block，导致Block的retainCount变成0，也被销毁。这样这两个对象内存都被回收。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">--X-&gt;|           | ----X---&gt; |           |</span><br><span class=\"line\">     | retain 0  | &lt; - - - - | retain 0  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>与上面情况类似的陷阱：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">self</span> doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里self和myBlock循环引用，解决办法同上：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSString</span>* someVar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, _someVer);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里在Block中虽然没直接使用self，但使用了成员变量。在Block中使用成员变量，retain的不是这个变量，而会retain self。解决办法也和上面一样。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSString</span>* someVar;</span><br><span class=\"line\"></span><br><span class=\"line\">__block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, <span class=\"keyword\">self</span>.someVer);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span>* str = _someVer;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, str);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>retain cycle不只发生在两个对象之间，也可能发生在多个对象之间，这样问题更复杂，更难发现</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class=\"line\">objA.myBlock = ^&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> doSomething];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.objA = objA;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+           +-----------+           +-----------+</span><br><span class=\"line\">|   self    |           |   objA    |           |   Block   |</span><br><span class=\"line\">|           | --------&gt; |           | --------&gt; |           |</span><br><span class=\"line\">| retain 1  |           | retain 1  |           | retain 1  |</span><br><span class=\"line\">|           |           |           |           |           |</span><br><span class=\"line\">+-----------+           +-----------+           +-----------+</span><br><span class=\"line\">     ^                                                |</span><br><span class=\"line\">     |                                                |</span><br><span class=\"line\">     +------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>解决办法同样是用__block打破循环引用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">objA.myBlock = ^&#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.objA = objA;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：MRC中__block是不会引起retain；但在ARC中__block则会引起retain。ARC中应该使用__weak或__unsafe_unretained弱引用。__weak只能在iOS5以后使用。</p>\n</blockquote>\n<h2 id=\"Block使用对象被提前释放\"><a href=\"#Block使用对象被提前释放\" class=\"headerlink\" title=\"Block使用对象被提前释放\"></a>Block使用对象被提前释放</h2><p>看下面例子，有这种情况，如果不只是request持有了Block，另一个对象也持有了Block。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |   objA</span><br><span class=\"line\">----&gt;|           | --------&gt; |           |&lt;--------</span><br><span class=\"line\">     | retain 1  | &lt; - - - - | retain 2  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>这时如果request 被持有者释放。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |   objA</span><br><span class=\"line\">--X-&gt;|           | --------&gt; |           |&lt;--------</span><br><span class=\"line\">     | retain 0  | &lt; - - - - | retain 1  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>这时request已被完全释放，但Block仍被objA持有，没有释放，如果这时触发了Block，在Block中将访问已经销毁的request，这将导致程序crash。为了避免这种情况，开发者必须要注意对象和Block的生命周期。</p>\n<p>另一个常见错误使用是，开发者担心retain cycle错误的使用__block。比如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block kkProducView* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">  weakSelf.xx = xx;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>将Block作为参数传给dispatch_async时，系统会将Block拷贝到堆上，如果Block中使用了实例变量，还将retain self，因为dispatch_async并不知道self会在什么时候被释放，为了确保系统调度执行Block中的任务时self没有被意外释放掉，dispatch_async必须自己retain一次self，任务完成后再release self。但这里使用__block，使dispatch_async没有增加self的引用计数，这使得在系统在调度执行Block之前，self可能已被销毁，但系统并不知道这个情况，导致Block被调度执行时self已经被释放导致crash。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass.m</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>) test &#123;</span><br><span class=\"line\">  __block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">  <span class=\"type\">double</span> delayInSeconds = <span class=\"number\">10.0</span>;</span><br><span class=\"line\">  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">  dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"type\">void</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, weakSelf);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.m</span></span><br><span class=\"line\">MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\">[obj test];</span><br></pre></td></tr></table></figure>\n<p>这里用dispatch_after模拟了一个异步任务，10秒后执行Block。但执行Block的时候MyClass* obj已经被释放了，导致crash。解决办法是不要使用__block。</p>"},{"title":"CocoaPods安装和使用教程","date":"2016-02-20T01:14:02.000Z","abbrlink":"0bbcfa1b5067319a","_content":"\n## CocosPods是什么\n\nCocoaPods是iOS项目的依赖管理工具，该项目源码在Github上管理。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和第三方开源库的时间。\n在使用CocoaPods之前，开发项目需要用到第三方开源库的时候，我们需要\n1.把开源库的源代码复制到项目中\n2.添加一些依赖框架和动态库\n3.设置-ObjC，-fno-objc-arc等参数\n4.管理他们的更新\n在使用CocoaPods后，我们只需要把用到的开源库放到一个名为Podfile的文件中，然后执行pod install.Cocoapods就会自动将这些第三方开源库的源码下载下来，并且为我们的工程设置好响应的系统依赖和编译参数。\n\n<!-- more -->\n\n## CocoaPods的原理##\n\nCocoaPods的原理是将所有的依赖库都放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。\n\n## CocoaPods的安装##\n\nCocoaPods可以方便地通过Mac自带的RubyGems安装。\n打开Terminal，然后键入以下命令：\n``` bash\n$ sudo gem install cocoapods\n```\n执行完这句如果报告以下错误：\n``` bash\nERROR: Could not find a valid gem 'cocoapods' (>= 0), here is why:\nUnable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Operation timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)\nERROR: Possible alternatives: cocoapods\n```\n这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被我天朝屏蔽了，需要更新一下ruby的源，过程如下：\n``` bash\n$ gem sources -l (查看当前ruby的源)\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n```\n如果gem太老，可以尝试用如下命令升级gem\n``` bash\n$ sudo gem update --system\n```\n升级成功后会提示: RubyGems system software updated\n\n然后重新执行安装下载命令\n``` bash\n$ sudo gem install cocoapods\n```\n这时候应该没什么问题了\n\n接下来进行安装，执行：\n``` bash\n$ pod setup\n```\nTerminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下.如果想加快速度,可使用cocoapods的镜像索引.（文章末尾附使用镜像索引的方法）\n\n## Cocoapods的使用\n\n进入工程所在的目录（工程根目录）\n执行命令 touch Podfile\n这句是说新建一个名为Podfile的文件（不能写成别的名字，也可以自己在工程根目录里面直接新建）\n\n然后对改文件进行编辑，执行命令 open -e Podfile\n第一次执行这个命令,会有一个空白文件打开，可以先放在一边，\nPodfile文件的格式应该如下：\n``` bash\nplatform :ios, '7.0'\npod 'AMap2DMap', '~> 2.5.0'\npod 'AFNetworking', '~> 2.5.3'\npod 'SDWebImage', '~> 3.7.2'\n```\n需要注意的几点：platform那一行，ios三个字母都要小写，而且与前面的冒号之间不能有间隔，后面的版本号也可以不写，但是有些开源库对版本是有要求的，比如要在6.0以上才能运行，遇到这样的开源库就需要写上版本号。\n\nplatform下面就是Cocoapods需要集成的开源库，根据你的需要确定集成那些库。\n\n举个例子：\n我要集成AFNetworking这个库类，需要在Cocoapods里面先搜索是否有需要的库，可以在Terminal中输入：\n``` bash\npod search AFNetworking\n```\n回车之后就可以看到和你搜索的关键字相关的一些库类。\n\n其中第一个就是我们需要的，把pod ‘AFNetworking’， ‘~>2.5.3’\n那一行复制到我们的Podfile文件中，保存修改。\n然后在Terminal中执行 ：\n``` bash\npod install\n```\n这样，AFNetworking就已经下载完成并且设置好了编译参数和依赖，以后使用的时候切记如下两点：\n1.从此以后需要使用Cocoapods生成的 .xcworkspace文件来打开工程，而不是使用以前的.xcodeproj文件\n2.每次更改了Podfile文件，都需要重新执行一次pod update命令\n\nps:当执行pod install之后，除了Podfile，还会生成一个名为Podfile.lock的文件，它会锁定当前各依赖库的版本，之后即使多次执行pod install也不会更改版本，只有执行pod update才会改变Podfile.lock.在多人协作的时候，这样可以防止第三方库升级时候造成大家各自的第三方库版本不一致。所以在提交版本的时候不能把它落下，也不要添加到.gitignore中.\n","source":"_posts/CocoaPods安装和使用教程.md","raw":"---\ntitle: CocoaPods安装和使用教程\ndate: 2016-02-20 09:14:02\ntags:\n  - Cocoapods\ncategories: 经验积累\nabbrlink: 0bbcfa1b5067319a\n---\n\n## CocosPods是什么\n\nCocoaPods是iOS项目的依赖管理工具，该项目源码在Github上管理。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和第三方开源库的时间。\n在使用CocoaPods之前，开发项目需要用到第三方开源库的时候，我们需要\n1.把开源库的源代码复制到项目中\n2.添加一些依赖框架和动态库\n3.设置-ObjC，-fno-objc-arc等参数\n4.管理他们的更新\n在使用CocoaPods后，我们只需要把用到的开源库放到一个名为Podfile的文件中，然后执行pod install.Cocoapods就会自动将这些第三方开源库的源码下载下来，并且为我们的工程设置好响应的系统依赖和编译参数。\n\n<!-- more -->\n\n## CocoaPods的原理##\n\nCocoaPods的原理是将所有的依赖库都放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。\n\n## CocoaPods的安装##\n\nCocoaPods可以方便地通过Mac自带的RubyGems安装。\n打开Terminal，然后键入以下命令：\n``` bash\n$ sudo gem install cocoapods\n```\n执行完这句如果报告以下错误：\n``` bash\nERROR: Could not find a valid gem 'cocoapods' (>= 0), here is why:\nUnable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Operation timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)\nERROR: Possible alternatives: cocoapods\n```\n这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被我天朝屏蔽了，需要更新一下ruby的源，过程如下：\n``` bash\n$ gem sources -l (查看当前ruby的源)\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n```\n如果gem太老，可以尝试用如下命令升级gem\n``` bash\n$ sudo gem update --system\n```\n升级成功后会提示: RubyGems system software updated\n\n然后重新执行安装下载命令\n``` bash\n$ sudo gem install cocoapods\n```\n这时候应该没什么问题了\n\n接下来进行安装，执行：\n``` bash\n$ pod setup\n```\nTerminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下.如果想加快速度,可使用cocoapods的镜像索引.（文章末尾附使用镜像索引的方法）\n\n## Cocoapods的使用\n\n进入工程所在的目录（工程根目录）\n执行命令 touch Podfile\n这句是说新建一个名为Podfile的文件（不能写成别的名字，也可以自己在工程根目录里面直接新建）\n\n然后对改文件进行编辑，执行命令 open -e Podfile\n第一次执行这个命令,会有一个空白文件打开，可以先放在一边，\nPodfile文件的格式应该如下：\n``` bash\nplatform :ios, '7.0'\npod 'AMap2DMap', '~> 2.5.0'\npod 'AFNetworking', '~> 2.5.3'\npod 'SDWebImage', '~> 3.7.2'\n```\n需要注意的几点：platform那一行，ios三个字母都要小写，而且与前面的冒号之间不能有间隔，后面的版本号也可以不写，但是有些开源库对版本是有要求的，比如要在6.0以上才能运行，遇到这样的开源库就需要写上版本号。\n\nplatform下面就是Cocoapods需要集成的开源库，根据你的需要确定集成那些库。\n\n举个例子：\n我要集成AFNetworking这个库类，需要在Cocoapods里面先搜索是否有需要的库，可以在Terminal中输入：\n``` bash\npod search AFNetworking\n```\n回车之后就可以看到和你搜索的关键字相关的一些库类。\n\n其中第一个就是我们需要的，把pod ‘AFNetworking’， ‘~>2.5.3’\n那一行复制到我们的Podfile文件中，保存修改。\n然后在Terminal中执行 ：\n``` bash\npod install\n```\n这样，AFNetworking就已经下载完成并且设置好了编译参数和依赖，以后使用的时候切记如下两点：\n1.从此以后需要使用Cocoapods生成的 .xcworkspace文件来打开工程，而不是使用以前的.xcodeproj文件\n2.每次更改了Podfile文件，都需要重新执行一次pod update命令\n\nps:当执行pod install之后，除了Podfile，还会生成一个名为Podfile.lock的文件，它会锁定当前各依赖库的版本，之后即使多次执行pod install也不会更改版本，只有执行pod update才会改变Podfile.lock.在多人协作的时候，这样可以防止第三方库升级时候造成大家各自的第三方库版本不一致。所以在提交版本的时候不能把它落下，也不要添加到.gitignore中.\n","slug":"CocoaPods安装和使用教程","published":1,"updated":"2022-05-19T03:13:11.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceni0009l1l3a1d05dvq","content":"<h2 id=\"CocosPods是什么\"><a href=\"#CocosPods是什么\" class=\"headerlink\" title=\"CocosPods是什么\"></a>CocosPods是什么</h2><p>CocoaPods是iOS项目的依赖管理工具，该项目源码在Github上管理。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和第三方开源库的时间。<br>在使用CocoaPods之前，开发项目需要用到第三方开源库的时候，我们需要<br>1.把开源库的源代码复制到项目中<br>2.添加一些依赖框架和动态库<br>3.设置-ObjC，-fno-objc-arc等参数<br>4.管理他们的更新<br>在使用CocoaPods后，我们只需要把用到的开源库放到一个名为Podfile的文件中，然后执行pod install.Cocoapods就会自动将这些第三方开源库的源码下载下来，并且为我们的工程设置好响应的系统依赖和编译参数。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"CocoaPods的原理\"><a href=\"#CocoaPods的原理\" class=\"headerlink\" title=\"CocoaPods的原理##\"></a>CocoaPods的原理##</h2><p>CocoaPods的原理是将所有的依赖库都放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p>\n<h2 id=\"CocoaPods的安装\"><a href=\"#CocoaPods的安装\" class=\"headerlink\" title=\"CocoaPods的安装##\"></a>CocoaPods的安装##</h2><p>CocoaPods可以方便地通过Mac自带的RubyGems安装。<br>打开Terminal，然后键入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n<p>执行完这句如果报告以下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Could not find a valid gem <span class=\"string\">&#x27;cocoapods&#x27;</span> (&gt;= 0), here is why:</span><br><span class=\"line\">Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Operation timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)</span><br><span class=\"line\">ERROR: Possible alternatives: cocoapods</span><br></pre></td></tr></table></figure>\n<p>这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被我天朝屏蔽了，需要更新一下ruby的源，过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources -l (查看当前ruby的源)</span><br><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources -l</span><br></pre></td></tr></table></figure>\n<p>如果gem太老，可以尝试用如下命令升级gem</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem update --system</span><br></pre></td></tr></table></figure>\n<p>升级成功后会提示: RubyGems system software updated</p>\n<p>然后重新执行安装下载命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n<p>这时候应该没什么问题了</p>\n<p>接下来进行安装，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>Terminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下.如果想加快速度,可使用cocoapods的镜像索引.（文章末尾附使用镜像索引的方法）</p>\n<h2 id=\"Cocoapods的使用\"><a href=\"#Cocoapods的使用\" class=\"headerlink\" title=\"Cocoapods的使用\"></a>Cocoapods的使用</h2><p>进入工程所在的目录（工程根目录）<br>执行命令 touch Podfile<br>这句是说新建一个名为Podfile的文件（不能写成别的名字，也可以自己在工程根目录里面直接新建）</p>\n<p>然后对改文件进行编辑，执行命令 open -e Podfile<br>第一次执行这个命令,会有一个空白文件打开，可以先放在一边，<br>Podfile文件的格式应该如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform :ios, <span class=\"string\">&#x27;7.0&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;AMap2DMap&#x27;</span>, <span class=\"string\">&#x27;~&gt; 2.5.0&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;AFNetworking&#x27;</span>, <span class=\"string\">&#x27;~&gt; 2.5.3&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;SDWebImage&#x27;</span>, <span class=\"string\">&#x27;~&gt; 3.7.2&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的几点：platform那一行，ios三个字母都要小写，而且与前面的冒号之间不能有间隔，后面的版本号也可以不写，但是有些开源库对版本是有要求的，比如要在6.0以上才能运行，遇到这样的开源库就需要写上版本号。</p>\n<p>platform下面就是Cocoapods需要集成的开源库，根据你的需要确定集成那些库。</p>\n<p>举个例子：<br>我要集成AFNetworking这个库类，需要在Cocoapods里面先搜索是否有需要的库，可以在Terminal中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod search AFNetworking</span><br></pre></td></tr></table></figure>\n<p>回车之后就可以看到和你搜索的关键字相关的一些库类。</p>\n<p>其中第一个就是我们需要的，把pod ‘AFNetworking’， ‘~&gt;2.5.3’<br>那一行复制到我们的Podfile文件中，保存修改。<br>然后在Terminal中执行 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>这样，AFNetworking就已经下载完成并且设置好了编译参数和依赖，以后使用的时候切记如下两点：<br>1.从此以后需要使用Cocoapods生成的 .xcworkspace文件来打开工程，而不是使用以前的.xcodeproj文件<br>2.每次更改了Podfile文件，都需要重新执行一次pod update命令</p>\n<p>ps:当执行pod install之后，除了Podfile，还会生成一个名为Podfile.lock的文件，它会锁定当前各依赖库的版本，之后即使多次执行pod install也不会更改版本，只有执行pod update才会改变Podfile.lock.在多人协作的时候，这样可以防止第三方库升级时候造成大家各自的第三方库版本不一致。所以在提交版本的时候不能把它落下，也不要添加到.gitignore中.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CocosPods是什么\"><a href=\"#CocosPods是什么\" class=\"headerlink\" title=\"CocosPods是什么\"></a>CocosPods是什么</h2><p>CocoaPods是iOS项目的依赖管理工具，该项目源码在Github上管理。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和第三方开源库的时间。<br>在使用CocoaPods之前，开发项目需要用到第三方开源库的时候，我们需要<br>1.把开源库的源代码复制到项目中<br>2.添加一些依赖框架和动态库<br>3.设置-ObjC，-fno-objc-arc等参数<br>4.管理他们的更新<br>在使用CocoaPods后，我们只需要把用到的开源库放到一个名为Podfile的文件中，然后执行pod install.Cocoapods就会自动将这些第三方开源库的源码下载下来，并且为我们的工程设置好响应的系统依赖和编译参数。</p>","more":"<h2 id=\"CocoaPods的原理\"><a href=\"#CocoaPods的原理\" class=\"headerlink\" title=\"CocoaPods的原理##\"></a>CocoaPods的原理##</h2><p>CocoaPods的原理是将所有的依赖库都放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p>\n<h2 id=\"CocoaPods的安装\"><a href=\"#CocoaPods的安装\" class=\"headerlink\" title=\"CocoaPods的安装##\"></a>CocoaPods的安装##</h2><p>CocoaPods可以方便地通过Mac自带的RubyGems安装。<br>打开Terminal，然后键入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n<p>执行完这句如果报告以下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Could not find a valid gem <span class=\"string\">&#x27;cocoapods&#x27;</span> (&gt;= 0), here is why:</span><br><span class=\"line\">Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Operation timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)</span><br><span class=\"line\">ERROR: Possible alternatives: cocoapods</span><br></pre></td></tr></table></figure>\n<p>这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被我天朝屏蔽了，需要更新一下ruby的源，过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources -l (查看当前ruby的源)</span><br><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -a https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources -l</span><br></pre></td></tr></table></figure>\n<p>如果gem太老，可以尝试用如下命令升级gem</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem update --system</span><br></pre></td></tr></table></figure>\n<p>升级成功后会提示: RubyGems system software updated</p>\n<p>然后重新执行安装下载命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n<p>这时候应该没什么问题了</p>\n<p>接下来进行安装，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>Terminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下.如果想加快速度,可使用cocoapods的镜像索引.（文章末尾附使用镜像索引的方法）</p>\n<h2 id=\"Cocoapods的使用\"><a href=\"#Cocoapods的使用\" class=\"headerlink\" title=\"Cocoapods的使用\"></a>Cocoapods的使用</h2><p>进入工程所在的目录（工程根目录）<br>执行命令 touch Podfile<br>这句是说新建一个名为Podfile的文件（不能写成别的名字，也可以自己在工程根目录里面直接新建）</p>\n<p>然后对改文件进行编辑，执行命令 open -e Podfile<br>第一次执行这个命令,会有一个空白文件打开，可以先放在一边，<br>Podfile文件的格式应该如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform :ios, <span class=\"string\">&#x27;7.0&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;AMap2DMap&#x27;</span>, <span class=\"string\">&#x27;~&gt; 2.5.0&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;AFNetworking&#x27;</span>, <span class=\"string\">&#x27;~&gt; 2.5.3&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;SDWebImage&#x27;</span>, <span class=\"string\">&#x27;~&gt; 3.7.2&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的几点：platform那一行，ios三个字母都要小写，而且与前面的冒号之间不能有间隔，后面的版本号也可以不写，但是有些开源库对版本是有要求的，比如要在6.0以上才能运行，遇到这样的开源库就需要写上版本号。</p>\n<p>platform下面就是Cocoapods需要集成的开源库，根据你的需要确定集成那些库。</p>\n<p>举个例子：<br>我要集成AFNetworking这个库类，需要在Cocoapods里面先搜索是否有需要的库，可以在Terminal中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod search AFNetworking</span><br></pre></td></tr></table></figure>\n<p>回车之后就可以看到和你搜索的关键字相关的一些库类。</p>\n<p>其中第一个就是我们需要的，把pod ‘AFNetworking’， ‘~&gt;2.5.3’<br>那一行复制到我们的Podfile文件中，保存修改。<br>然后在Terminal中执行 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>这样，AFNetworking就已经下载完成并且设置好了编译参数和依赖，以后使用的时候切记如下两点：<br>1.从此以后需要使用Cocoapods生成的 .xcworkspace文件来打开工程，而不是使用以前的.xcodeproj文件<br>2.每次更改了Podfile文件，都需要重新执行一次pod update命令</p>\n<p>ps:当执行pod install之后，除了Podfile，还会生成一个名为Podfile.lock的文件，它会锁定当前各依赖库的版本，之后即使多次执行pod install也不会更改版本，只有执行pod update才会改变Podfile.lock.在多人协作的时候，这样可以防止第三方库升级时候造成大家各自的第三方库版本不一致。所以在提交版本的时候不能把它落下，也不要添加到.gitignore中.</p>"},{"title":"AES/CBC/128/PKCS5Padding加密解密算法（iOS、Android、JavaScript、PHP）","date":"2017-10-24T14:56:40.000Z","abbrlink":"c7d47655acbdf40d","_content":"\n最近项目中考虑到用户账户数据的安全性问题，需要对用户账户相关信息进行加密解密。这里我们选择使用AES加解密，至于AES相比其他对称加密算法的优缺点就不再详述，当然加解密过程中还使用了一些其他的算法，比如混合MD5。这边文章主要记录下Objective-C、Java、JavaScript、PHP四种语言的AES/CBC/128/PKCS5Padding的加解密算法，下面直接上代码。\n<!-- more -->\n### Node.js\n``` javascript\nvar crypto = require('crypto');\nvar data = \"test\";\nvar key = '7854156156611111';\n//data 是准备加密的字符串,key是你的密钥\nfunction encryption(data, key) {\n    var iv = \"0000000000000000\";\n    var clearEncoding = 'utf8';\n    var cipherEncoding = 'base64';\n    var cipherChunks = [];\n    var cipher = crypto.createCipheriv('aes-128-cbc', key, iv);\n    cipher.setAutoPadding(true);\n    cipherChunks.push(cipher.update(data, clearEncoding, cipherEncoding));\n    cipherChunks.push(cipher.final(cipherEncoding));\n    return cipherChunks.join('');\n}\n//data 是你的准备解密的字符串,key是你的密钥\nfunction decryption(data, key) {\n    var iv = \"0000000000000000\";\n    var clearEncoding = 'utf8';\n    var cipherEncoding = 'base64';\n    var cipherChunks = [];\n    var decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);\n    decipher.setAutoPadding(true);\n    cipherChunks.push(decipher.update(data, cipherEncoding, clearEncoding));\n    cipherChunks.push(decipher.final(clearEncoding));\n    return cipherChunks.join('');\n}\nconsole.log(encryption(data, key)) ;\n```\n\n### PHP\n``` php\n<?php\n$privateKey = \"7854156156611111\";\n$iv \t= \"0000000000000000\";\n$data \t= \"test\";\necho($privateKey.\"\\n\");\n//加密\n$encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $privateKey, $data, MCRYPT_MODE_CBC, $iv);\necho(base64_encode($encrypted).\"\\n\");\n\n//解密\n$encryptedData = base64_decode(\"L7AswKt5/t1gND4ct22Odw==\");\n$decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $privateKey, $encryptedData, MCRYPT_MODE_CBC, $iv);\necho($decrypted);\n?>\n```\n> 这里的PHP版本是7.0.22，需要引入依赖`sudo apt-get install php7-mcrypt`\n### Android\n``` java\npackage org.learn;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport java.util.Base64;\n\npublic class Encryptor {\n\tpublic static String encrypt(String key, String initVector, String value) {\n\t\ttry {\n\t\t\tIvParameterSpec iv = new IvParameterSpec(initVector.getBytes(\"UTF-8\"));\n\t\t\tSecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\n\n\t\t\tbyte[] encrypted = cipher.doFinal(value.getBytes());\n\t\t\tSystem.out.println(\"encrypted string: \" + Base64.getEncoder().encodeToString(encrypted));\n\n\t\t\treturn Base64.getEncoder().encodeToString(encrypted);\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static String decrypt(String key, String initVector, String encrypted) {\n\t\ttry {\n\t\t\tIvParameterSpec iv = new IvParameterSpec(initVector.getBytes(\"UTF-8\"));\n\t\t\tSecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);\n\n\t\t\tbyte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));\n\n\t\t\treturn new String(original);\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tString key = \"7854156156611111\";\n\t\tString initVector = \"0000000000000000\"; // 16 bytes IV\n\n\t\tSystem.out.println(decrypt(key, initVector, encrypt(key, initVector, \"test\")));\n\n\t}\n}\n```\n### iOS\niOS客户端的加密解密相对复杂一些，使用Objective-C语言编写，一共5个文件。\n#### GTMDefines.h\n``` objc\n//\n// GTMDefines.h\n//\n//  Copyright 2008 Google Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n//  use this file except in compliance with the License.  You may obtain a copy\n//  of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n//  License for the specific language governing permissions and limitations under\n//  the License.\n//\n\n// ============================================================================\n\n#include <AvailabilityMacros.h>\n\n// Not all MAC_OS_X_VERSION_10_X macros defined in past SDKs\n#ifndef MAC_OS_X_VERSION_10_5\n#define MAC_OS_X_VERSION_10_5 1050\n#endif\n#ifndef MAC_OS_X_VERSION_10_6\n#define MAC_OS_X_VERSION_10_6 1060\n#endif\n\n// ----------------------------------------------------------------------------\n// CPP symbols that can be overridden in a prefix to control how the toolbox\n// is compiled.\n// ----------------------------------------------------------------------------\n\n\n// GTMHTTPFetcher will support logging by default but only hook its input\n// stream support for logging when requested.  You can control the inclusion of\n// the code by providing your own definitions for these w/in a prefix header.\n//\n#ifndef GTM_HTTPFETCHER_ENABLE_LOGGING\n#define GTM_HTTPFETCHER_ENABLE_LOGGING 1\n#endif // GTM_HTTPFETCHER_ENABLE_LOGGING\n#ifndef GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING\n#define GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING 0\n#endif // GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING\n\n// By setting the GTM_CONTAINERS_VALIDATION_FAILED_LOG and\n// GTM_CONTAINERS_VALIDATION_FAILED_ASSERT macros you can control what happens\n// when a validation fails. If you implement your own validators, you may want\n// to control their internals using the same macros for consistency.\n#ifndef GTM_CONTAINERS_VALIDATION_FAILED_ASSERT\n#define GTM_CONTAINERS_VALIDATION_FAILED_ASSERT 0\n#endif\n\n// Give ourselves a consistent way to do inlines.  Apple's macros even use\n// a few different actual definitions, so we're based off of the foundation\n// one.\n#if !defined(GTM_INLINE)\n#if defined (__GNUC__) && (__GNUC__ == 4)\n#define GTM_INLINE static __inline__ __attribute__((always_inline))\n#else\n#define GTM_INLINE static __inline__\n#endif\n#endif\n\n// Give ourselves a consistent way of doing externs that links up nicely\n// when mixing objc and objc++\n#if !defined (GTM_EXTERN)\n#if defined __cplusplus\n#define GTM_EXTERN extern \"C\"\n#else\n#define GTM_EXTERN extern\n#endif\n#endif\n\n// Give ourselves a consistent way of exporting things if we have visibility\n// set to hidden.\n#if !defined (GTM_EXPORT)\n#define GTM_EXPORT __attribute__((visibility(\"default\")))\n#endif\n\n// _GTMDevLog & _GTMDevAssert\n//\n// _GTMDevLog & _GTMDevAssert are meant to be a very lightweight shell for\n// developer level errors.  This implementation simply macros to NSLog/NSAssert.\n// It is not intended to be a general logging/reporting system.\n//\n// Please see http://code.google.com/p/google-toolbox-for-mac/wiki/DevLogNAssert\n// for a little more background on the usage of these macros.\n//\n//    _GTMDevLog           log some error/problem in debug builds\n//    _GTMDevAssert        assert if conditon isn't met w/in a method/function\n//                           in all builds.\n//\n// To replace this system, just provide different macro definitions in your\n// prefix header.  Remember, any implementation you provide *must* be thread\n// safe since this could be called by anything in what ever situtation it has\n// been placed in.\n//\n\n// We only define the simple macros if nothing else has defined this.\n#ifndef _GTMDevLog\n\n#ifdef DEBUG\n#define _GTMDevLog(...) NSLog(__VA_ARGS__)\n#else\n#define _GTMDevLog(...) do { } while (0)\n#endif\n\n#endif // _GTMDevLog\n\n// Declared here so that it can easily be used for logging tracking if\n// necessary. See GTMUnitTestDevLog.h for details.\n@class NSString;\nGTM_EXTERN void _GTMUnitTestDevLog(NSString *format, ...);\n\n#ifndef _GTMDevAssert\n// we directly invoke the NSAssert handler so we can pass on the varargs\n// (NSAssert doesn't have a macro we can use that takes varargs)\n#if !defined(NS_BLOCK_ASSERTIONS)\n#define _GTMDevAssert(condition, ...)                                       \\\ndo {                                                                      \\\nif (!(condition)) {                                                     \\\n[[NSAssertionHandler currentHandler]                                  \\\nhandleFailureInFunction:[NSString stringWithUTF8String:__PRETTY_FUNCTION__] \\\nfile:[NSString stringWithUTF8String:__FILE__]  \\\nlineNumber:__LINE__                                  \\\ndescription:__VA_ARGS__];                             \\\n}                                                                       \\\n} while(0)\n#else // !defined(NS_BLOCK_ASSERTIONS)\n#define _GTMDevAssert(condition, ...) do { } while (0)\n#endif // !defined(NS_BLOCK_ASSERTIONS)\n\n#endif // _GTMDevAssert\n\n// _GTMCompileAssert\n// _GTMCompileAssert is an assert that is meant to fire at compile time if you\n// want to check things at compile instead of runtime. For example if you\n// want to check that a wchar is 4 bytes instead of 2 you would use\n// _GTMCompileAssert(sizeof(wchar_t) == 4, wchar_t_is_4_bytes_on_OS_X)\n// Note that the second \"arg\" is not in quotes, and must be a valid processor\n// symbol in it's own right (no spaces, punctuation etc).\n\n// Wrapping this in an #ifndef allows external groups to define their own\n// compile time assert scheme.\n#ifndef _GTMCompileAssert\n// We got this technique from here:\n// http://unixjunkie.blogspot.com/2007/10/better-compile-time-asserts_29.html\n\n#define _GTMCompileAssertSymbolInner(line, msg) _GTMCOMPILEASSERT ## line ## __ ## msg\n#define _GTMCompileAssertSymbol(line, msg) _GTMCompileAssertSymbolInner(line, msg)\n#define _GTMCompileAssert(test, msg) \\\ntypedef char _GTMCompileAssertSymbol(__LINE__, msg) [ ((test) ? 1 : -1) ]\n#endif // _GTMCompileAssert\n\n// Macro to allow fast enumeration when building for 10.5 or later, and\n// reliance on NSEnumerator for 10.4.  Remember, NSDictionary w/ FastEnumeration\n// does keys, so pick the right thing, nothing is done on the FastEnumeration\n// side to be sure you're getting what you wanted.\n#ifndef GTM_FOREACH_OBJECT\n#if defined(TARGET_OS_IPHONE) || (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)\n#define GTM_FOREACH_OBJECT(element, collection) \\\nfor (element in collection)\n#define GTM_FOREACH_KEY(element, collection) \\\nfor (element in collection)\n#else\n#define GTM_FOREACH_OBJECT(element, collection) \\\nfor (NSEnumerator * _ ## element ## _enum = [collection objectEnumerator]; \\\n(element = [_ ## element ## _enum nextObject]) != nil; )\n#define GTM_FOREACH_KEY(element, collection) \\\nfor (NSEnumerator * _ ## element ## _enum = [collection keyEnumerator]; \\\n(element = [_ ## element ## _enum nextObject]) != nil; )\n#endif\n#endif\n\n// ============================================================================\n\n// ----------------------------------------------------------------------------\n// CPP symbols defined based on the project settings so the GTM code has\n// simple things to test against w/o scattering the knowledge of project\n// setting through all the code.\n// ----------------------------------------------------------------------------\n\n// Provide a single constant CPP symbol that all of GTM uses for ifdefing\n// iPhone code.\n#include <TargetConditionals.h>\n#if TARGET_OS_IPHONE // iPhone SDK\n// For iPhone specific stuff\n#define GTM_IPHONE_SDK 1\n#if TARGET_IPHONE_SIMULATOR\n#define GTM_IPHONE_SIMULATOR 1\n#else\n#define GTM_IPHONE_DEVICE 1\n#endif  // TARGET_IPHONE_SIMULATOR\n#else\n// For MacOS specific stuff\n#define GTM_MACOS_SDK 1\n#endif\n\n// Provide a symbol to include/exclude extra code for GC support.  (This mainly\n// just controls the inclusion of finalize methods).\n#ifndef GTM_SUPPORT_GC\n#if GTM_IPHONE_SDK\n// iPhone never needs GC\n#define GTM_SUPPORT_GC 0\n#else\n// We can't find a symbol to tell if GC is supported/required, so best we\n// do on Mac targets is include it if we're on 10.5 or later.\n#if MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n#define GTM_SUPPORT_GC 0\n#else\n#define GTM_SUPPORT_GC 1\n#endif\n#endif\n#endif\n\n// To simplify support for 64bit (and Leopard in general), we provide the type\n// defines for non Leopard SDKs\n#if MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n// NSInteger/NSUInteger and Max/Mins\n#ifndef NSINTEGER_DEFINED\n#if __LP64__ || NS_BUILD_32_LIKE_64\ntypedef long NSInteger;\ntypedef unsigned long NSUInteger;\n#else\ntypedef int NSInteger;\ntypedef unsigned int NSUInteger;\n#endif\n#define NSIntegerMax    LONG_MAX\n#define NSIntegerMin    LONG_MIN\n#define NSUIntegerMax   ULONG_MAX\n#define NSINTEGER_DEFINED 1\n#endif  // NSINTEGER_DEFINED\n// CGFloat\n#ifndef CGFLOAT_DEFINED\n#if defined(__LP64__) && __LP64__\n// This really is an untested path (64bit on Tiger?)\ntypedef double CGFloat;\n#define CGFLOAT_MIN DBL_MIN\n#define CGFLOAT_MAX DBL_MAX\n#define CGFLOAT_IS_DOUBLE 1\n#else /* !defined(__LP64__) || !__LP64__ */\ntypedef float CGFloat;\n#define CGFLOAT_MIN FLT_MIN\n#define CGFLOAT_MAX FLT_MAX\n#define CGFLOAT_IS_DOUBLE 0\n#endif /* !defined(__LP64__) || !__LP64__ */\n#define CGFLOAT_DEFINED 1\n#endif // CGFLOAT_DEFINED\n#endif  // MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n```\n#### GTMBase64.h\n``` objc\n//\n//  GTMBase64.h\n//\n//  Copyright 2006-2008 Google Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n//  use this file except in compliance with the License.  You may obtain a copy\n//  of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n//  License for the specific language governing permissions and limitations under\n//  the License.\n//\n\n#import <Foundation/Foundation.h>\n#import \"GTMDefines.h\"\n\n// GTMBase64\n//\n/// Helper for handling Base64 and WebSafeBase64 encodings\n//\n/// The webSafe methods use different character set and also the results aren't\n/// always padded to a multiple of 4 characters.  This is done so the resulting\n/// data can be used in urls and url query arguments without needing any\n/// encoding.  You must use the webSafe* methods together, the data does not\n/// interop with the RFC methods.\n//\n@interface GTMBase64 : NSObject\n\n//\n// Standard Base64 (RFC) handling\n//\n\n// encodeData:\n//\n/// Base64 encodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)encodeData:(NSData *)data;\n\n// decodeData:\n//\n/// Base64 decodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)decodeData:(NSData *)data;\n\n// encodeBytes:length:\n//\n/// Base64 encodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)encodeBytes:(const void *)bytes length:(NSUInteger)length;\n\n// decodeBytes:length:\n//\n/// Base64 decodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)decodeBytes:(const void *)bytes length:(NSUInteger)length;\n\n// stringByEncodingData:\n//\n/// Base64 encodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByEncodingData:(NSData *)data;\n\n// stringByEncodingBytes:length:\n//\n/// Base64 encodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByEncodingBytes:(const void *)bytes length:(NSUInteger)length;\n\n// decodeString:\n//\n/// Base64 decodes contents of the NSString.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)decodeString:(NSString *)string;\n\n//\n// Modified Base64 encoding so the results can go onto urls.\n//\n// The changes are in the characters generated and also allows the result to\n// not be padded to a multiple of 4.\n// Must use the matching call to encode/decode, won't interop with the\n// RFC versions.\n//\n\n// webSafeEncodeData:padded:\n//\n/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)webSafeEncodeData:(NSData *)data\n                      padded:(BOOL)padded;\n\n// webSafeDecodeData:\n//\n/// WebSafe Base64 decodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)webSafeDecodeData:(NSData *)data;\n\n// webSafeEncodeBytes:length:padded:\n//\n/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)webSafeEncodeBytes:(const void *)bytes\n                       length:(NSUInteger)length\n                       padded:(BOOL)padded;\n\n// webSafeDecodeBytes:length:\n//\n/// WebSafe Base64 decodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)webSafeDecodeBytes:(const void *)bytes length:(NSUInteger)length;\n\n// stringByWebSafeEncodingData:padded:\n//\n/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByWebSafeEncodingData:(NSData *)data\n                                  padded:(BOOL)padded;\n\n// stringByWebSafeEncodingBytes:length:padded:\n//\n/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByWebSafeEncodingBytes:(const void *)bytes\n                                   length:(NSUInteger)length\n                                   padded:(BOOL)padded;\n\n// webSafeDecodeString:\n//\n/// WebSafe Base64 decodes contents of the NSString.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)webSafeDecodeString:(NSString *)string;\n\n@end\n\n```\n#### GTMBase64.m\n``` objc\n\n//\n//  GTMBase64.m\n//\n//  Copyright 2006-2008 Google Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n//  use this file except in compliance with the License.  You may obtain a copy\n//  of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n//  License for the specific language governing permissions and limitations under\n//  the License.\n//\n\n#import \"GTMBase64.h\"\n#import \"GTMDefines.h\"\n\nstatic const char *kBase64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nstatic const char *kWebSafeBase64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nstatic const char kBase64PaddingChar = '=';\nstatic const char kBase64InvalidChar = 99;\n\nstatic const char kBase64DecodeChars[] = {\n    // This array was generated by the following code:\n    // #include <sys/time.h>\n    // #include <stdlib.h>\n    // #include <string.h>\n    // main()\n    // {\n    //   static const char Base64[] =\n    //     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    //   char *pos;\n    //   int idx, i, j;\n    //   printf(\"    \");\n    //   for (i = 0; i < 255; i += 8) {\n    //     for (j = i; j < i + 8; j++) {\n    //       pos = strchr(Base64, j);\n    //       if ((pos == NULL) || (j == 0))\n    //         idx = 99;\n    //       else\n    //         idx = pos - Base64;\n    //       if (idx == 99)\n    //         printf(\" %2d,     \", idx);\n    //       else\n    //         printf(\" %2d/*%c*/,\", idx, j);\n    //     }\n    //     printf(\"\\n    \");\n    //   }\n    // }\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      62/*+*/, 99,      99,      99,      63/*/ */,\n    52/*0*/, 53/*1*/, 54/*2*/, 55/*3*/, 56/*4*/, 57/*5*/, 58/*6*/, 59/*7*/,\n    60/*8*/, 61/*9*/, 99,      99,      99,      99,      99,      99,\n    99,       0/*A*/,  1/*B*/,  2/*C*/,  3/*D*/,  4/*E*/,  5/*F*/,  6/*G*/,\n    7/*H*/,  8/*I*/,  9/*J*/, 10/*K*/, 11/*L*/, 12/*M*/, 13/*N*/, 14/*O*/,\n    15/*P*/, 16/*Q*/, 17/*R*/, 18/*S*/, 19/*T*/, 20/*U*/, 21/*V*/, 22/*W*/,\n    23/*X*/, 24/*Y*/, 25/*Z*/, 99,      99,      99,      99,      99,\n    99,      26/*a*/, 27/*b*/, 28/*c*/, 29/*d*/, 30/*e*/, 31/*f*/, 32/*g*/,\n    33/*h*/, 34/*i*/, 35/*j*/, 36/*k*/, 37/*l*/, 38/*m*/, 39/*n*/, 40/*o*/,\n    41/*p*/, 42/*q*/, 43/*r*/, 44/*s*/, 45/*t*/, 46/*u*/, 47/*v*/, 48/*w*/,\n    49/*x*/, 50/*y*/, 51/*z*/, 99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99\n};\n\nstatic const char kWebSafeBase64DecodeChars[] = {\n    // This array was generated by the following code:\n    // #include <sys/time.h>\n    // #include <stdlib.h>\n    // #include <string.h>\n    // main()\n    // {\n    //   static const char Base64[] =\n    //     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n    //   char *pos;\n    //   int idx, i, j;\n    //   printf(\"    \");\n    //   for (i = 0; i < 255; i += 8) {\n    //     for (j = i; j < i + 8; j++) {\n    //       pos = strchr(Base64, j);\n    //       if ((pos == NULL) || (j == 0))\n    //         idx = 99;\n    //       else\n    //         idx = pos - Base64;\n    //       if (idx == 99)\n    //         printf(\" %2d,     \", idx);\n    //       else\n    //         printf(\" %2d/*%c*/,\", idx, j);\n    //     }\n    //     printf(\"\\n    \");\n    //   }\n    // }\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      62/*-*/, 99,      99,\n    52/*0*/, 53/*1*/, 54/*2*/, 55/*3*/, 56/*4*/, 57/*5*/, 58/*6*/, 59/*7*/,\n    60/*8*/, 61/*9*/, 99,      99,      99,      99,      99,      99,\n    99,       0/*A*/,  1/*B*/,  2/*C*/,  3/*D*/,  4/*E*/,  5/*F*/,  6/*G*/,\n    7/*H*/,  8/*I*/,  9/*J*/, 10/*K*/, 11/*L*/, 12/*M*/, 13/*N*/, 14/*O*/,\n    15/*P*/, 16/*Q*/, 17/*R*/, 18/*S*/, 19/*T*/, 20/*U*/, 21/*V*/, 22/*W*/,\n    23/*X*/, 24/*Y*/, 25/*Z*/, 99,      99,      99,      99,      63/*_*/,\n    99,      26/*a*/, 27/*b*/, 28/*c*/, 29/*d*/, 30/*e*/, 31/*f*/, 32/*g*/,\n    33/*h*/, 34/*i*/, 35/*j*/, 36/*k*/, 37/*l*/, 38/*m*/, 39/*n*/, 40/*o*/,\n    41/*p*/, 42/*q*/, 43/*r*/, 44/*s*/, 45/*t*/, 46/*u*/, 47/*v*/, 48/*w*/,\n    49/*x*/, 50/*y*/, 51/*z*/, 99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99\n};\n\n\n// Tests a character to see if it's a whitespace character.\n//\n// Returns:\n//   YES if the character is a whitespace character.\n//   NO if the character is not a whitespace character.\n//\nGTM_INLINE BOOL IsSpace(unsigned char c) {\n    // we use our own mapping here because we don't want anything w/ locale\n    // support.\n    static BOOL kSpaces[256] = {\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  // 0-9\n        1, 1, 1, 1, 0, 0, 0, 0, 0, 0,  // 10-19\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 20-29\n        0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  // 30-39\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 40-49\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 50-59\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 60-69\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 70-79\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 80-89\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 90-99\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 100-109\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 110-119\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 120-129\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 130-139\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 140-149\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 150-159\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 160-169\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 170-179\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 180-189\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 190-199\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 200-209\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 210-219\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 220-229\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 230-239\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 240-249\n        0, 0, 0, 0, 0, 1,              // 250-255\n    };\n    return kSpaces[c];\n}\n\n// Calculate how long the data will be once it's base64 encoded.\n//\n// Returns:\n//   The guessed encoded length for a source length\n//\nGTM_INLINE NSUInteger CalcEncodedLength(NSUInteger srcLen, BOOL padded) {\n    NSUInteger intermediate_result = 8 * srcLen + 5;\n    NSUInteger len = intermediate_result / 6;\n    if (padded) {\n        len = ((len + 3) / 4) * 4;\n    }\n    return len;\n}\n\n// Tries to calculate how long the data will be once it's base64 decoded.\n// Unlike the above, this is always an upperbound, since the source data\n// could have spaces and might end with the padding characters on them.\n//\n// Returns:\n//   The guessed decoded length for a source length\n//\nGTM_INLINE NSUInteger GuessDecodedLength(NSUInteger srcLen) {\n    return (srcLen + 3) / 4 * 3;\n}\n\n\n@interface GTMBase64 (PrivateMethods)\n\n+(NSData *)baseEncode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char *)charset\n               padded:(BOOL)padded;\n\n+(NSData *)baseDecode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char*)charset\n       requirePadding:(BOOL)requirePadding;\n\n+(NSUInteger)baseEncode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n                 padded:(BOOL)padded;\n\n+(NSUInteger)baseDecode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n         requirePadding:(BOOL)requirePadding;\n\n@end\n\n\n@implementation GTMBase64\n\n//\n// Standard Base64 (RFC) handling\n//\n\n+(NSData *)encodeData:(NSData *)data {\n    return [self baseEncode:[data bytes]\n                     length:[data length]\n                    charset:kBase64EncodeChars\n                     padded:YES];\n}\n\n+(NSData *)decodeData:(NSData *)data {\n    return [self baseDecode:[data bytes]\n                     length:[data length]\n                    charset:kBase64DecodeChars\n             requirePadding:YES];\n}\n\n+(NSData *)encodeBytes:(const void *)bytes length:(NSUInteger)length {\n    return [self baseEncode:bytes\n                     length:length\n                    charset:kBase64EncodeChars\n                     padded:YES];\n}\n\n+(NSData *)decodeBytes:(const void *)bytes length:(NSUInteger)length {\n    return [self baseDecode:bytes\n                     length:length\n                    charset:kBase64DecodeChars\n             requirePadding:YES];\n}\n\n+(NSString *)stringByEncodingData:(NSData *)data {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:[data bytes]\n                                  length:[data length]\n                                 charset:kBase64EncodeChars\n                                  padded:YES];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSString *)stringByEncodingBytes:(const void *)bytes length:(NSUInteger)length {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:bytes\n                                  length:length\n                                 charset:kBase64EncodeChars\n                                  padded:YES];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSData *)decodeString:(NSString *)string {\n    NSData *result = nil;\n    NSData *data = [string dataUsingEncoding:NSASCIIStringEncoding];\n    if (data) {\n        result = [self baseDecode:[data bytes]\n                           length:[data length]\n                          charset:kBase64DecodeChars\n                   requirePadding:YES];\n    }\n    return result;\n}\n\n//\n// Modified Base64 encoding so the results can go onto urls.\n//\n// The changes are in the characters generated and also the result isn't\n// padded to a multiple of 4.\n// Must use the matching call to encode/decode, won't interop with the\n// RFC versions.\n//\n\n+(NSData *)webSafeEncodeData:(NSData *)data\n                      padded:(BOOL)padded {\n    return [self baseEncode:[data bytes]\n                     length:[data length]\n                    charset:kWebSafeBase64EncodeChars\n                     padded:padded];\n}\n\n+(NSData *)webSafeDecodeData:(NSData *)data {\n    return [self baseDecode:[data bytes]\n                     length:[data length]\n                    charset:kWebSafeBase64DecodeChars\n             requirePadding:NO];\n}\n\n+(NSData *)webSafeEncodeBytes:(const void *)bytes\n                       length:(NSUInteger)length\n                       padded:(BOOL)padded {\n    return [self baseEncode:bytes\n                     length:length\n                    charset:kWebSafeBase64EncodeChars\n                     padded:padded];\n}\n\n+(NSData *)webSafeDecodeBytes:(const void *)bytes length:(NSUInteger)length {\n    return [self baseDecode:bytes\n                     length:length\n                    charset:kWebSafeBase64DecodeChars\n             requirePadding:NO];\n}\n\n+(NSString *)stringByWebSafeEncodingData:(NSData *)data\n                                  padded:(BOOL)padded {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:[data bytes]\n                                  length:[data length]\n                                 charset:kWebSafeBase64EncodeChars\n                                  padded:padded];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSString *)stringByWebSafeEncodingBytes:(const void *)bytes\n                                   length:(NSUInteger)length\n                                   padded:(BOOL)padded {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:bytes\n                                  length:length\n                                 charset:kWebSafeBase64EncodeChars\n                                  padded:padded];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSData *)webSafeDecodeString:(NSString *)string {\n    NSData *result = nil;\n    NSData *data = [string dataUsingEncoding:NSASCIIStringEncoding];\n    if (data) {\n        result = [self baseDecode:[data bytes]\n                           length:[data length]\n                          charset:kWebSafeBase64DecodeChars\n                   requirePadding:NO];\n    }\n    return result;\n}\n\n@end\n\n@implementation GTMBase64 (PrivateMethods)\n\n//\n// baseEncode:length:charset:padded:\n//\n// Does the common lifting of creating the dest NSData.  it creates & sizes the\n// data for the results.  |charset| is the characters to use for the encoding\n// of the data.  |padding| controls if the encoded data should be padded to a\n// multiple of 4.\n//\n// Returns:\n//   an autorelease NSData with the encoded data, nil if any error.\n//\n+(NSData *)baseEncode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char *)charset\n               padded:(BOOL)padded {\n    // how big could it be?\n    NSUInteger maxLength = CalcEncodedLength(length, padded);\n    // make space\n    NSMutableData *result = [NSMutableData data];\n    [result setLength:maxLength];\n    // do it\n    NSUInteger finalLength = [self baseEncode:bytes\n                                       srcLen:length\n                                    destBytes:[result mutableBytes]\n                                      destLen:[result length]\n                                      charset:charset\n                                       padded:padded];\n    if (finalLength) {\n        _GTMDevAssert(finalLength == maxLength, @\"how did we calc the length wrong?\");\n    } else {\n        // shouldn't happen, this means we ran out of space\n        result = nil;\n    }\n    return result;\n}\n\n//\n// baseDecode:length:charset:requirePadding:\n//\n// Does the common lifting of creating the dest NSData.  it creates & sizes the\n// data for the results.  |charset| is the characters to use for the decoding\n// of the data.\n//\n// Returns:\n//   an autorelease NSData with the decoded data, nil if any error.\n//\n//\n+(NSData *)baseDecode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char *)charset\n       requirePadding:(BOOL)requirePadding {\n    // could try to calculate what it will end up as\n    NSUInteger maxLength = GuessDecodedLength(length);\n    // make space\n    NSMutableData *result = [NSMutableData data];\n    [result setLength:maxLength];\n    // do it\n    NSUInteger finalLength = [self baseDecode:bytes\n                                       srcLen:length\n                                    destBytes:[result mutableBytes]\n                                      destLen:[result length]\n                                      charset:charset\n                               requirePadding:requirePadding];\n    if (finalLength) {\n        if (finalLength != maxLength) {\n            // resize down to how big it was\n            [result setLength:finalLength];\n        }\n    } else {\n        // either an error in the args, or we ran out of space\n        result = nil;\n    }\n    return result;\n}\n\n//\n// baseEncode:srcLen:destBytes:destLen:charset:padded:\n//\n// Encodes the buffer into the larger.  returns the length of the encoded\n// data, or zero for an error.\n// |charset| is the characters to use for the encoding\n// |padded| tells if the result should be padded to a multiple of 4.\n//\n// Returns:\n//   the length of the encoded data.  zero if any error.\n//\n+(NSUInteger)baseEncode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n                 padded:(BOOL)padded {\n    if (!srcLen || !destLen || !srcBytes || !destBytes) {\n        return 0;\n    }\n    \n    char *curDest = destBytes;\n    const unsigned char *curSrc = (const unsigned char *)(srcBytes);\n    \n    // Three bytes of data encodes to four characters of cyphertext.\n    // So we can pump through three-byte chunks atomically.\n    while (srcLen > 2) {\n        // space?\n        _GTMDevAssert(destLen >= 4, @\"our calc for encoded length was wrong\");\n        curDest[0] = charset[curSrc[0] >> 2];\n        curDest[1] = charset[((curSrc[0] & 0x03) << 4) + (curSrc[1] >> 4)];\n        curDest[2] = charset[((curSrc[1] & 0x0f) << 2) + (curSrc[2] >> 6)];\n        curDest[3] = charset[curSrc[2] & 0x3f];\n        \n        curDest += 4;\n        curSrc += 3;\n        srcLen -= 3;\n        destLen -= 4;\n    }\n    \n    // now deal with the tail (<=2 bytes)\n    switch (srcLen) {\n        case 0:\n            // Nothing left; nothing more to do.\n            break;\n        case 1:\n            // One byte left: this encodes to two characters, and (optionally)\n            // two pad characters to round out the four-character cypherblock.\n            _GTMDevAssert(destLen >= 2, @\"our calc for encoded length was wrong\");\n            curDest[0] = charset[curSrc[0] >> 2];\n            curDest[1] = charset[(curSrc[0] & 0x03) << 4];\n            curDest += 2;\n            destLen -= 2;\n            if (padded) {\n                _GTMDevAssert(destLen >= 2, @\"our calc for encoded length was wrong\");\n                curDest[0] = kBase64PaddingChar;\n                curDest[1] = kBase64PaddingChar;\n                curDest += 2;\n            }\n            break;\n        case 2:\n            // Two bytes left: this encodes to three characters, and (optionally)\n            // one pad character to round out the four-character cypherblock.\n            _GTMDevAssert(destLen >= 3, @\"our calc for encoded length was wrong\");\n            curDest[0] = charset[curSrc[0] >> 2];\n            curDest[1] = charset[((curSrc[0] & 0x03) << 4) + (curSrc[1] >> 4)];\n            curDest[2] = charset[(curSrc[1] & 0x0f) << 2];\n            curDest += 3;\n            destLen -= 3;\n            if (padded) {\n                _GTMDevAssert(destLen >= 1, @\"our calc for encoded length was wrong\");\n                curDest[0] = kBase64PaddingChar;\n                curDest += 1;\n            }\n            break;\n    }\n    // return the length\n    return (curDest - destBytes);\n}\n\n//\n// baseDecode:srcLen:destBytes:destLen:charset:requirePadding:\n//\n// Decodes the buffer into the larger.  returns the length of the decoded\n// data, or zero for an error.\n// |charset| is the character decoding buffer to use\n//\n// Returns:\n//   the length of the encoded data.  zero if any error.\n//\n+(NSUInteger)baseDecode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n         requirePadding:(BOOL)requirePadding {\n    if (!srcLen || !destLen || !srcBytes || !destBytes) {\n        return 0;\n    }\n    \n    int decode;\n    NSUInteger destIndex = 0;\n    int state = 0;\n    char ch = 0;\n    while (srcLen-- && (ch = *srcBytes++) != 0)  {\n        if (IsSpace(ch))  // Skip whitespace\n            continue;\n        \n        if (ch == kBase64PaddingChar)\n            break;\n        \n        decode = charset[(unsigned int)ch];\n        if (decode == kBase64InvalidChar)\n            return 0;\n        \n        // Four cyphertext characters decode to three bytes.\n        // Therefore we can be in one of four states.\n        switch (state) {\n            case 0:\n                // We're at the beginning of a four-character cyphertext block.\n                // This sets the high six bits of the first byte of the\n                // plaintext block.\n                _GTMDevAssert(destIndex < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] = decode << 2;\n                state = 1;\n                break;\n            case 1:\n                // We're one character into a four-character cyphertext block.\n                // This sets the low two bits of the first plaintext byte,\n                // and the high four bits of the second plaintext byte.\n                _GTMDevAssert((destIndex+1) < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] |= decode >> 4;\n                destBytes[destIndex+1] = (decode & 0x0f) << 4;\n                destIndex++;\n                state = 2;\n                break;\n            case 2:\n                // We're two characters into a four-character cyphertext block.\n                // This sets the low four bits of the second plaintext\n                // byte, and the high two bits of the third plaintext byte.\n                // However, if this is the end of data, and those two\n                // bits are zero, it could be that those two bits are\n                // leftovers from the encoding of data that had a length\n                // of two mod three.\n                _GTMDevAssert((destIndex+1) < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] |= decode >> 2;\n                destBytes[destIndex+1] = (decode & 0x03) << 6;\n                destIndex++;\n                state = 3;\n                break;\n            case 3:\n                // We're at the last character of a four-character cyphertext block.\n                // This sets the low six bits of the third plaintext byte.\n                _GTMDevAssert(destIndex < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] |= decode;\n                destIndex++;\n                state = 0;\n                break;\n        }\n    }\n    \n    // We are done decoding Base-64 chars.  Let's see if we ended\n    //      on a byte boundary, and/or with erroneous trailing characters.\n    if (ch == kBase64PaddingChar) {               // We got a pad char\n        if ((state == 0) || (state == 1)) {\n            return 0;  // Invalid '=' in first or second position\n        }\n        if (srcLen == 0) {\n            if (state == 2) { // We run out of input but we still need another '='\n                return 0;\n            }\n            // Otherwise, we are in state 3 and only need this '='\n        } else {\n            if (state == 2) {  // need another '='\n                while ((ch = *srcBytes++) && (srcLen-- > 0)) {\n                    if (!IsSpace(ch))\n                        break;\n                }\n                if (ch != kBase64PaddingChar) {\n                    return 0;\n                }\n            }\n            // state = 1 or 2, check if all remain padding is space\n            while ((ch = *srcBytes++) && (srcLen-- > 0)) {\n                if (!IsSpace(ch)) {\n                    return 0;\n                }\n            }\n        }\n    } else {\n        // We ended by seeing the end of the string.\n        \n        if (requirePadding) {\n            // If we require padding, then anything but state 0 is an error.\n            if (state != 0) {\n                return 0;\n            }\n        } else {\n            // Make sure we have no partial bytes lying around.  Note that we do not\n            // require trailing '=', so states 2 and 3 are okay too.\n            if (state == 1) {\n                return 0;\n            }\n        }\n    }\n    \n    // If then next piece of output was valid and got written to it means we got a\n    // very carefully crafted input that appeared valid but contains some trailing\n    // bits past the real length, so just toss the thing.\n    if ((destIndex < destLen) &&\n        (destBytes[destIndex] != 0)) {\n        return 0;\n    }\n    \n    return destIndex;\n}\n\n@end\n\n```\n#### NSData+AES.h\n``` objc\n//\n//  NSData+AES.h\n//  iOS_AES\n//\n//  Created by FM-13 on 16/6/8.\n//  Copyright © 2016年 cong. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface NSData (AES)\n\n\n//加密\n- (NSData *)AES128EncryptWithKey:(NSString *)key iv:(NSString *)iv;\n\n\n//解密\n- (NSData *)AES128DecryptWithKey:(NSString *)key iv:(NSString *)iv;\n\n\n\n@end\n\n```\n#### NSData+AES.m\n``` objc\n//\n//  NSData+AES.m\n//  iOS_AES\n//\n//  Created by FM-13 on 16/6/8.\n//  Copyright © 2016年 cong. All rights reserved.\n//\n\n#import \"NSData+AES.h\"\n#import <CommonCrypto/CommonCryptor.h>\n\n@implementation NSData (AES)\n\n//加密\n- (NSData *)AES128EncryptWithKey:(NSString *)key iv:(NSString *)iv\n{\n    return [self AES128operation:kCCEncrypt key:key iv:iv];\n}\n\n\n//解密\n- (NSData *)AES128DecryptWithKey:(NSString *)key iv:(NSString *)iv\n{\n    return [self AES128operation:kCCDecrypt key:key iv:iv];\n}\n\n- (NSData *)AES128operation:(CCOperation)operation key:(NSString *)key iv:(NSString *)iv\n{\n    char keyPtr[kCCKeySizeAES128 + 1];\n    bzero(keyPtr, sizeof(keyPtr));\n    [key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];\n    \n    // IV\n    char ivPtr[kCCBlockSizeAES128 + 1];\n    bzero(ivPtr, sizeof(ivPtr));\n    [iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];\n    \n    size_t bufferSize = [self length] + kCCBlockSizeAES128;\n    void *buffer = malloc(bufferSize);\n    size_t numBytesEncrypted = 0;\n    \n    \n    CCCryptorStatus cryptorStatus = CCCrypt(operation, kCCAlgorithmAES128, kCCOptionPKCS7Padding,\n                                            keyPtr, kCCKeySizeAES128,\n                                            ivPtr,\n                                            [self bytes], [self length],\n                                            buffer, bufferSize,\n                                            &numBytesEncrypted);\n    \n    if(cryptorStatus == kCCSuccess){\n        NSLog(@\"Success\");\n        return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];\n        \n    }else{\n        NSLog(@\"Error\");\n    }\n    \n    free(buffer);\n    return nil;\n}\n\n@end\n\n```\n\n使用方法如下：\n```\nNSString *aesKey = @\"7854156156611111\";\nNSString *aesIV = @\"0000000000000000\";\n    \nNSData *data = [self dataUsingEncoding:NSUTF8StringEncoding];\n//加密\ndata = [data AES128EncryptWithKey:aesKey iv:aesIV];\ndata = [GTMBase64 encodeData:data];\n    \nNSString *encodeStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n```","source":"_posts/AES-CBC-128-PKCS5Padding加密解密算法（iOS、Android、JavaScript、PHP）.md","raw":"---\ntitle: AES/CBC/128/PKCS5Padding加密解密算法（iOS、Android、JavaScript、PHP）\ndate: 2017-10-24 22:56:40\ntags:\n  - AES\n  - 算法\ncategories: 技术杂谈\nabbrlink: c7d47655acbdf40d\n---\n\n最近项目中考虑到用户账户数据的安全性问题，需要对用户账户相关信息进行加密解密。这里我们选择使用AES加解密，至于AES相比其他对称加密算法的优缺点就不再详述，当然加解密过程中还使用了一些其他的算法，比如混合MD5。这边文章主要记录下Objective-C、Java、JavaScript、PHP四种语言的AES/CBC/128/PKCS5Padding的加解密算法，下面直接上代码。\n<!-- more -->\n### Node.js\n``` javascript\nvar crypto = require('crypto');\nvar data = \"test\";\nvar key = '7854156156611111';\n//data 是准备加密的字符串,key是你的密钥\nfunction encryption(data, key) {\n    var iv = \"0000000000000000\";\n    var clearEncoding = 'utf8';\n    var cipherEncoding = 'base64';\n    var cipherChunks = [];\n    var cipher = crypto.createCipheriv('aes-128-cbc', key, iv);\n    cipher.setAutoPadding(true);\n    cipherChunks.push(cipher.update(data, clearEncoding, cipherEncoding));\n    cipherChunks.push(cipher.final(cipherEncoding));\n    return cipherChunks.join('');\n}\n//data 是你的准备解密的字符串,key是你的密钥\nfunction decryption(data, key) {\n    var iv = \"0000000000000000\";\n    var clearEncoding = 'utf8';\n    var cipherEncoding = 'base64';\n    var cipherChunks = [];\n    var decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);\n    decipher.setAutoPadding(true);\n    cipherChunks.push(decipher.update(data, cipherEncoding, clearEncoding));\n    cipherChunks.push(decipher.final(clearEncoding));\n    return cipherChunks.join('');\n}\nconsole.log(encryption(data, key)) ;\n```\n\n### PHP\n``` php\n<?php\n$privateKey = \"7854156156611111\";\n$iv \t= \"0000000000000000\";\n$data \t= \"test\";\necho($privateKey.\"\\n\");\n//加密\n$encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $privateKey, $data, MCRYPT_MODE_CBC, $iv);\necho(base64_encode($encrypted).\"\\n\");\n\n//解密\n$encryptedData = base64_decode(\"L7AswKt5/t1gND4ct22Odw==\");\n$decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $privateKey, $encryptedData, MCRYPT_MODE_CBC, $iv);\necho($decrypted);\n?>\n```\n> 这里的PHP版本是7.0.22，需要引入依赖`sudo apt-get install php7-mcrypt`\n### Android\n``` java\npackage org.learn;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport java.util.Base64;\n\npublic class Encryptor {\n\tpublic static String encrypt(String key, String initVector, String value) {\n\t\ttry {\n\t\t\tIvParameterSpec iv = new IvParameterSpec(initVector.getBytes(\"UTF-8\"));\n\t\t\tSecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\n\n\t\t\tbyte[] encrypted = cipher.doFinal(value.getBytes());\n\t\t\tSystem.out.println(\"encrypted string: \" + Base64.getEncoder().encodeToString(encrypted));\n\n\t\t\treturn Base64.getEncoder().encodeToString(encrypted);\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static String decrypt(String key, String initVector, String encrypted) {\n\t\ttry {\n\t\t\tIvParameterSpec iv = new IvParameterSpec(initVector.getBytes(\"UTF-8\"));\n\t\t\tSecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"AES\");\n\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);\n\n\t\t\tbyte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));\n\n\t\t\treturn new String(original);\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tString key = \"7854156156611111\";\n\t\tString initVector = \"0000000000000000\"; // 16 bytes IV\n\n\t\tSystem.out.println(decrypt(key, initVector, encrypt(key, initVector, \"test\")));\n\n\t}\n}\n```\n### iOS\niOS客户端的加密解密相对复杂一些，使用Objective-C语言编写，一共5个文件。\n#### GTMDefines.h\n``` objc\n//\n// GTMDefines.h\n//\n//  Copyright 2008 Google Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n//  use this file except in compliance with the License.  You may obtain a copy\n//  of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n//  License for the specific language governing permissions and limitations under\n//  the License.\n//\n\n// ============================================================================\n\n#include <AvailabilityMacros.h>\n\n// Not all MAC_OS_X_VERSION_10_X macros defined in past SDKs\n#ifndef MAC_OS_X_VERSION_10_5\n#define MAC_OS_X_VERSION_10_5 1050\n#endif\n#ifndef MAC_OS_X_VERSION_10_6\n#define MAC_OS_X_VERSION_10_6 1060\n#endif\n\n// ----------------------------------------------------------------------------\n// CPP symbols that can be overridden in a prefix to control how the toolbox\n// is compiled.\n// ----------------------------------------------------------------------------\n\n\n// GTMHTTPFetcher will support logging by default but only hook its input\n// stream support for logging when requested.  You can control the inclusion of\n// the code by providing your own definitions for these w/in a prefix header.\n//\n#ifndef GTM_HTTPFETCHER_ENABLE_LOGGING\n#define GTM_HTTPFETCHER_ENABLE_LOGGING 1\n#endif // GTM_HTTPFETCHER_ENABLE_LOGGING\n#ifndef GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING\n#define GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING 0\n#endif // GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING\n\n// By setting the GTM_CONTAINERS_VALIDATION_FAILED_LOG and\n// GTM_CONTAINERS_VALIDATION_FAILED_ASSERT macros you can control what happens\n// when a validation fails. If you implement your own validators, you may want\n// to control their internals using the same macros for consistency.\n#ifndef GTM_CONTAINERS_VALIDATION_FAILED_ASSERT\n#define GTM_CONTAINERS_VALIDATION_FAILED_ASSERT 0\n#endif\n\n// Give ourselves a consistent way to do inlines.  Apple's macros even use\n// a few different actual definitions, so we're based off of the foundation\n// one.\n#if !defined(GTM_INLINE)\n#if defined (__GNUC__) && (__GNUC__ == 4)\n#define GTM_INLINE static __inline__ __attribute__((always_inline))\n#else\n#define GTM_INLINE static __inline__\n#endif\n#endif\n\n// Give ourselves a consistent way of doing externs that links up nicely\n// when mixing objc and objc++\n#if !defined (GTM_EXTERN)\n#if defined __cplusplus\n#define GTM_EXTERN extern \"C\"\n#else\n#define GTM_EXTERN extern\n#endif\n#endif\n\n// Give ourselves a consistent way of exporting things if we have visibility\n// set to hidden.\n#if !defined (GTM_EXPORT)\n#define GTM_EXPORT __attribute__((visibility(\"default\")))\n#endif\n\n// _GTMDevLog & _GTMDevAssert\n//\n// _GTMDevLog & _GTMDevAssert are meant to be a very lightweight shell for\n// developer level errors.  This implementation simply macros to NSLog/NSAssert.\n// It is not intended to be a general logging/reporting system.\n//\n// Please see http://code.google.com/p/google-toolbox-for-mac/wiki/DevLogNAssert\n// for a little more background on the usage of these macros.\n//\n//    _GTMDevLog           log some error/problem in debug builds\n//    _GTMDevAssert        assert if conditon isn't met w/in a method/function\n//                           in all builds.\n//\n// To replace this system, just provide different macro definitions in your\n// prefix header.  Remember, any implementation you provide *must* be thread\n// safe since this could be called by anything in what ever situtation it has\n// been placed in.\n//\n\n// We only define the simple macros if nothing else has defined this.\n#ifndef _GTMDevLog\n\n#ifdef DEBUG\n#define _GTMDevLog(...) NSLog(__VA_ARGS__)\n#else\n#define _GTMDevLog(...) do { } while (0)\n#endif\n\n#endif // _GTMDevLog\n\n// Declared here so that it can easily be used for logging tracking if\n// necessary. See GTMUnitTestDevLog.h for details.\n@class NSString;\nGTM_EXTERN void _GTMUnitTestDevLog(NSString *format, ...);\n\n#ifndef _GTMDevAssert\n// we directly invoke the NSAssert handler so we can pass on the varargs\n// (NSAssert doesn't have a macro we can use that takes varargs)\n#if !defined(NS_BLOCK_ASSERTIONS)\n#define _GTMDevAssert(condition, ...)                                       \\\ndo {                                                                      \\\nif (!(condition)) {                                                     \\\n[[NSAssertionHandler currentHandler]                                  \\\nhandleFailureInFunction:[NSString stringWithUTF8String:__PRETTY_FUNCTION__] \\\nfile:[NSString stringWithUTF8String:__FILE__]  \\\nlineNumber:__LINE__                                  \\\ndescription:__VA_ARGS__];                             \\\n}                                                                       \\\n} while(0)\n#else // !defined(NS_BLOCK_ASSERTIONS)\n#define _GTMDevAssert(condition, ...) do { } while (0)\n#endif // !defined(NS_BLOCK_ASSERTIONS)\n\n#endif // _GTMDevAssert\n\n// _GTMCompileAssert\n// _GTMCompileAssert is an assert that is meant to fire at compile time if you\n// want to check things at compile instead of runtime. For example if you\n// want to check that a wchar is 4 bytes instead of 2 you would use\n// _GTMCompileAssert(sizeof(wchar_t) == 4, wchar_t_is_4_bytes_on_OS_X)\n// Note that the second \"arg\" is not in quotes, and must be a valid processor\n// symbol in it's own right (no spaces, punctuation etc).\n\n// Wrapping this in an #ifndef allows external groups to define their own\n// compile time assert scheme.\n#ifndef _GTMCompileAssert\n// We got this technique from here:\n// http://unixjunkie.blogspot.com/2007/10/better-compile-time-asserts_29.html\n\n#define _GTMCompileAssertSymbolInner(line, msg) _GTMCOMPILEASSERT ## line ## __ ## msg\n#define _GTMCompileAssertSymbol(line, msg) _GTMCompileAssertSymbolInner(line, msg)\n#define _GTMCompileAssert(test, msg) \\\ntypedef char _GTMCompileAssertSymbol(__LINE__, msg) [ ((test) ? 1 : -1) ]\n#endif // _GTMCompileAssert\n\n// Macro to allow fast enumeration when building for 10.5 or later, and\n// reliance on NSEnumerator for 10.4.  Remember, NSDictionary w/ FastEnumeration\n// does keys, so pick the right thing, nothing is done on the FastEnumeration\n// side to be sure you're getting what you wanted.\n#ifndef GTM_FOREACH_OBJECT\n#if defined(TARGET_OS_IPHONE) || (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)\n#define GTM_FOREACH_OBJECT(element, collection) \\\nfor (element in collection)\n#define GTM_FOREACH_KEY(element, collection) \\\nfor (element in collection)\n#else\n#define GTM_FOREACH_OBJECT(element, collection) \\\nfor (NSEnumerator * _ ## element ## _enum = [collection objectEnumerator]; \\\n(element = [_ ## element ## _enum nextObject]) != nil; )\n#define GTM_FOREACH_KEY(element, collection) \\\nfor (NSEnumerator * _ ## element ## _enum = [collection keyEnumerator]; \\\n(element = [_ ## element ## _enum nextObject]) != nil; )\n#endif\n#endif\n\n// ============================================================================\n\n// ----------------------------------------------------------------------------\n// CPP symbols defined based on the project settings so the GTM code has\n// simple things to test against w/o scattering the knowledge of project\n// setting through all the code.\n// ----------------------------------------------------------------------------\n\n// Provide a single constant CPP symbol that all of GTM uses for ifdefing\n// iPhone code.\n#include <TargetConditionals.h>\n#if TARGET_OS_IPHONE // iPhone SDK\n// For iPhone specific stuff\n#define GTM_IPHONE_SDK 1\n#if TARGET_IPHONE_SIMULATOR\n#define GTM_IPHONE_SIMULATOR 1\n#else\n#define GTM_IPHONE_DEVICE 1\n#endif  // TARGET_IPHONE_SIMULATOR\n#else\n// For MacOS specific stuff\n#define GTM_MACOS_SDK 1\n#endif\n\n// Provide a symbol to include/exclude extra code for GC support.  (This mainly\n// just controls the inclusion of finalize methods).\n#ifndef GTM_SUPPORT_GC\n#if GTM_IPHONE_SDK\n// iPhone never needs GC\n#define GTM_SUPPORT_GC 0\n#else\n// We can't find a symbol to tell if GC is supported/required, so best we\n// do on Mac targets is include it if we're on 10.5 or later.\n#if MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n#define GTM_SUPPORT_GC 0\n#else\n#define GTM_SUPPORT_GC 1\n#endif\n#endif\n#endif\n\n// To simplify support for 64bit (and Leopard in general), we provide the type\n// defines for non Leopard SDKs\n#if MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n// NSInteger/NSUInteger and Max/Mins\n#ifndef NSINTEGER_DEFINED\n#if __LP64__ || NS_BUILD_32_LIKE_64\ntypedef long NSInteger;\ntypedef unsigned long NSUInteger;\n#else\ntypedef int NSInteger;\ntypedef unsigned int NSUInteger;\n#endif\n#define NSIntegerMax    LONG_MAX\n#define NSIntegerMin    LONG_MIN\n#define NSUIntegerMax   ULONG_MAX\n#define NSINTEGER_DEFINED 1\n#endif  // NSINTEGER_DEFINED\n// CGFloat\n#ifndef CGFLOAT_DEFINED\n#if defined(__LP64__) && __LP64__\n// This really is an untested path (64bit on Tiger?)\ntypedef double CGFloat;\n#define CGFLOAT_MIN DBL_MIN\n#define CGFLOAT_MAX DBL_MAX\n#define CGFLOAT_IS_DOUBLE 1\n#else /* !defined(__LP64__) || !__LP64__ */\ntypedef float CGFloat;\n#define CGFLOAT_MIN FLT_MIN\n#define CGFLOAT_MAX FLT_MAX\n#define CGFLOAT_IS_DOUBLE 0\n#endif /* !defined(__LP64__) || !__LP64__ */\n#define CGFLOAT_DEFINED 1\n#endif // CGFLOAT_DEFINED\n#endif  // MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n```\n#### GTMBase64.h\n``` objc\n//\n//  GTMBase64.h\n//\n//  Copyright 2006-2008 Google Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n//  use this file except in compliance with the License.  You may obtain a copy\n//  of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n//  License for the specific language governing permissions and limitations under\n//  the License.\n//\n\n#import <Foundation/Foundation.h>\n#import \"GTMDefines.h\"\n\n// GTMBase64\n//\n/// Helper for handling Base64 and WebSafeBase64 encodings\n//\n/// The webSafe methods use different character set and also the results aren't\n/// always padded to a multiple of 4 characters.  This is done so the resulting\n/// data can be used in urls and url query arguments without needing any\n/// encoding.  You must use the webSafe* methods together, the data does not\n/// interop with the RFC methods.\n//\n@interface GTMBase64 : NSObject\n\n//\n// Standard Base64 (RFC) handling\n//\n\n// encodeData:\n//\n/// Base64 encodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)encodeData:(NSData *)data;\n\n// decodeData:\n//\n/// Base64 decodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)decodeData:(NSData *)data;\n\n// encodeBytes:length:\n//\n/// Base64 encodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)encodeBytes:(const void *)bytes length:(NSUInteger)length;\n\n// decodeBytes:length:\n//\n/// Base64 decodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)decodeBytes:(const void *)bytes length:(NSUInteger)length;\n\n// stringByEncodingData:\n//\n/// Base64 encodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByEncodingData:(NSData *)data;\n\n// stringByEncodingBytes:length:\n//\n/// Base64 encodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByEncodingBytes:(const void *)bytes length:(NSUInteger)length;\n\n// decodeString:\n//\n/// Base64 decodes contents of the NSString.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)decodeString:(NSString *)string;\n\n//\n// Modified Base64 encoding so the results can go onto urls.\n//\n// The changes are in the characters generated and also allows the result to\n// not be padded to a multiple of 4.\n// Must use the matching call to encode/decode, won't interop with the\n// RFC versions.\n//\n\n// webSafeEncodeData:padded:\n//\n/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)webSafeEncodeData:(NSData *)data\n                      padded:(BOOL)padded;\n\n// webSafeDecodeData:\n//\n/// WebSafe Base64 decodes contents of the NSData object.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)webSafeDecodeData:(NSData *)data;\n\n// webSafeEncodeBytes:length:padded:\n//\n/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)webSafeEncodeBytes:(const void *)bytes\n                       length:(NSUInteger)length\n                       padded:(BOOL)padded;\n\n// webSafeDecodeBytes:length:\n//\n/// WebSafe Base64 decodes the data pointed at by |bytes|.\n//\n/// Returns:\n///   A new autoreleased NSData with the encoded payload.  nil for any error.\n//\n+(NSData *)webSafeDecodeBytes:(const void *)bytes length:(NSUInteger)length;\n\n// stringByWebSafeEncodingData:padded:\n//\n/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByWebSafeEncodingData:(NSData *)data\n                                  padded:(BOOL)padded;\n\n// stringByWebSafeEncodingBytes:length:padded:\n//\n/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES\n/// then padding characters are added so the result length is a multiple of 4.\n//\n/// Returns:\n///   A new autoreleased NSString with the encoded payload.  nil for any error.\n//\n+(NSString *)stringByWebSafeEncodingBytes:(const void *)bytes\n                                   length:(NSUInteger)length\n                                   padded:(BOOL)padded;\n\n// webSafeDecodeString:\n//\n/// WebSafe Base64 decodes contents of the NSString.\n//\n/// Returns:\n///   A new autoreleased NSData with the decoded payload.  nil for any error.\n//\n+(NSData *)webSafeDecodeString:(NSString *)string;\n\n@end\n\n```\n#### GTMBase64.m\n``` objc\n\n//\n//  GTMBase64.m\n//\n//  Copyright 2006-2008 Google Inc.\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n//  use this file except in compliance with the License.  You may obtain a copy\n//  of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n//  License for the specific language governing permissions and limitations under\n//  the License.\n//\n\n#import \"GTMBase64.h\"\n#import \"GTMDefines.h\"\n\nstatic const char *kBase64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nstatic const char *kWebSafeBase64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nstatic const char kBase64PaddingChar = '=';\nstatic const char kBase64InvalidChar = 99;\n\nstatic const char kBase64DecodeChars[] = {\n    // This array was generated by the following code:\n    // #include <sys/time.h>\n    // #include <stdlib.h>\n    // #include <string.h>\n    // main()\n    // {\n    //   static const char Base64[] =\n    //     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    //   char *pos;\n    //   int idx, i, j;\n    //   printf(\"    \");\n    //   for (i = 0; i < 255; i += 8) {\n    //     for (j = i; j < i + 8; j++) {\n    //       pos = strchr(Base64, j);\n    //       if ((pos == NULL) || (j == 0))\n    //         idx = 99;\n    //       else\n    //         idx = pos - Base64;\n    //       if (idx == 99)\n    //         printf(\" %2d,     \", idx);\n    //       else\n    //         printf(\" %2d/*%c*/,\", idx, j);\n    //     }\n    //     printf(\"\\n    \");\n    //   }\n    // }\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      62/*+*/, 99,      99,      99,      63/*/ */,\n    52/*0*/, 53/*1*/, 54/*2*/, 55/*3*/, 56/*4*/, 57/*5*/, 58/*6*/, 59/*7*/,\n    60/*8*/, 61/*9*/, 99,      99,      99,      99,      99,      99,\n    99,       0/*A*/,  1/*B*/,  2/*C*/,  3/*D*/,  4/*E*/,  5/*F*/,  6/*G*/,\n    7/*H*/,  8/*I*/,  9/*J*/, 10/*K*/, 11/*L*/, 12/*M*/, 13/*N*/, 14/*O*/,\n    15/*P*/, 16/*Q*/, 17/*R*/, 18/*S*/, 19/*T*/, 20/*U*/, 21/*V*/, 22/*W*/,\n    23/*X*/, 24/*Y*/, 25/*Z*/, 99,      99,      99,      99,      99,\n    99,      26/*a*/, 27/*b*/, 28/*c*/, 29/*d*/, 30/*e*/, 31/*f*/, 32/*g*/,\n    33/*h*/, 34/*i*/, 35/*j*/, 36/*k*/, 37/*l*/, 38/*m*/, 39/*n*/, 40/*o*/,\n    41/*p*/, 42/*q*/, 43/*r*/, 44/*s*/, 45/*t*/, 46/*u*/, 47/*v*/, 48/*w*/,\n    49/*x*/, 50/*y*/, 51/*z*/, 99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99\n};\n\nstatic const char kWebSafeBase64DecodeChars[] = {\n    // This array was generated by the following code:\n    // #include <sys/time.h>\n    // #include <stdlib.h>\n    // #include <string.h>\n    // main()\n    // {\n    //   static const char Base64[] =\n    //     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n    //   char *pos;\n    //   int idx, i, j;\n    //   printf(\"    \");\n    //   for (i = 0; i < 255; i += 8) {\n    //     for (j = i; j < i + 8; j++) {\n    //       pos = strchr(Base64, j);\n    //       if ((pos == NULL) || (j == 0))\n    //         idx = 99;\n    //       else\n    //         idx = pos - Base64;\n    //       if (idx == 99)\n    //         printf(\" %2d,     \", idx);\n    //       else\n    //         printf(\" %2d/*%c*/,\", idx, j);\n    //     }\n    //     printf(\"\\n    \");\n    //   }\n    // }\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      62/*-*/, 99,      99,\n    52/*0*/, 53/*1*/, 54/*2*/, 55/*3*/, 56/*4*/, 57/*5*/, 58/*6*/, 59/*7*/,\n    60/*8*/, 61/*9*/, 99,      99,      99,      99,      99,      99,\n    99,       0/*A*/,  1/*B*/,  2/*C*/,  3/*D*/,  4/*E*/,  5/*F*/,  6/*G*/,\n    7/*H*/,  8/*I*/,  9/*J*/, 10/*K*/, 11/*L*/, 12/*M*/, 13/*N*/, 14/*O*/,\n    15/*P*/, 16/*Q*/, 17/*R*/, 18/*S*/, 19/*T*/, 20/*U*/, 21/*V*/, 22/*W*/,\n    23/*X*/, 24/*Y*/, 25/*Z*/, 99,      99,      99,      99,      63/*_*/,\n    99,      26/*a*/, 27/*b*/, 28/*c*/, 29/*d*/, 30/*e*/, 31/*f*/, 32/*g*/,\n    33/*h*/, 34/*i*/, 35/*j*/, 36/*k*/, 37/*l*/, 38/*m*/, 39/*n*/, 40/*o*/,\n    41/*p*/, 42/*q*/, 43/*r*/, 44/*s*/, 45/*t*/, 46/*u*/, 47/*v*/, 48/*w*/,\n    49/*x*/, 50/*y*/, 51/*z*/, 99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99,\n    99,      99,      99,      99,      99,      99,      99,      99\n};\n\n\n// Tests a character to see if it's a whitespace character.\n//\n// Returns:\n//   YES if the character is a whitespace character.\n//   NO if the character is not a whitespace character.\n//\nGTM_INLINE BOOL IsSpace(unsigned char c) {\n    // we use our own mapping here because we don't want anything w/ locale\n    // support.\n    static BOOL kSpaces[256] = {\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  // 0-9\n        1, 1, 1, 1, 0, 0, 0, 0, 0, 0,  // 10-19\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 20-29\n        0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  // 30-39\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 40-49\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 50-59\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 60-69\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 70-79\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 80-89\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 90-99\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 100-109\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 110-119\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 120-129\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 130-139\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 140-149\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 150-159\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 160-169\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 170-179\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 180-189\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 190-199\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 200-209\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 210-219\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 220-229\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 230-239\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  // 240-249\n        0, 0, 0, 0, 0, 1,              // 250-255\n    };\n    return kSpaces[c];\n}\n\n// Calculate how long the data will be once it's base64 encoded.\n//\n// Returns:\n//   The guessed encoded length for a source length\n//\nGTM_INLINE NSUInteger CalcEncodedLength(NSUInteger srcLen, BOOL padded) {\n    NSUInteger intermediate_result = 8 * srcLen + 5;\n    NSUInteger len = intermediate_result / 6;\n    if (padded) {\n        len = ((len + 3) / 4) * 4;\n    }\n    return len;\n}\n\n// Tries to calculate how long the data will be once it's base64 decoded.\n// Unlike the above, this is always an upperbound, since the source data\n// could have spaces and might end with the padding characters on them.\n//\n// Returns:\n//   The guessed decoded length for a source length\n//\nGTM_INLINE NSUInteger GuessDecodedLength(NSUInteger srcLen) {\n    return (srcLen + 3) / 4 * 3;\n}\n\n\n@interface GTMBase64 (PrivateMethods)\n\n+(NSData *)baseEncode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char *)charset\n               padded:(BOOL)padded;\n\n+(NSData *)baseDecode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char*)charset\n       requirePadding:(BOOL)requirePadding;\n\n+(NSUInteger)baseEncode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n                 padded:(BOOL)padded;\n\n+(NSUInteger)baseDecode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n         requirePadding:(BOOL)requirePadding;\n\n@end\n\n\n@implementation GTMBase64\n\n//\n// Standard Base64 (RFC) handling\n//\n\n+(NSData *)encodeData:(NSData *)data {\n    return [self baseEncode:[data bytes]\n                     length:[data length]\n                    charset:kBase64EncodeChars\n                     padded:YES];\n}\n\n+(NSData *)decodeData:(NSData *)data {\n    return [self baseDecode:[data bytes]\n                     length:[data length]\n                    charset:kBase64DecodeChars\n             requirePadding:YES];\n}\n\n+(NSData *)encodeBytes:(const void *)bytes length:(NSUInteger)length {\n    return [self baseEncode:bytes\n                     length:length\n                    charset:kBase64EncodeChars\n                     padded:YES];\n}\n\n+(NSData *)decodeBytes:(const void *)bytes length:(NSUInteger)length {\n    return [self baseDecode:bytes\n                     length:length\n                    charset:kBase64DecodeChars\n             requirePadding:YES];\n}\n\n+(NSString *)stringByEncodingData:(NSData *)data {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:[data bytes]\n                                  length:[data length]\n                                 charset:kBase64EncodeChars\n                                  padded:YES];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSString *)stringByEncodingBytes:(const void *)bytes length:(NSUInteger)length {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:bytes\n                                  length:length\n                                 charset:kBase64EncodeChars\n                                  padded:YES];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSData *)decodeString:(NSString *)string {\n    NSData *result = nil;\n    NSData *data = [string dataUsingEncoding:NSASCIIStringEncoding];\n    if (data) {\n        result = [self baseDecode:[data bytes]\n                           length:[data length]\n                          charset:kBase64DecodeChars\n                   requirePadding:YES];\n    }\n    return result;\n}\n\n//\n// Modified Base64 encoding so the results can go onto urls.\n//\n// The changes are in the characters generated and also the result isn't\n// padded to a multiple of 4.\n// Must use the matching call to encode/decode, won't interop with the\n// RFC versions.\n//\n\n+(NSData *)webSafeEncodeData:(NSData *)data\n                      padded:(BOOL)padded {\n    return [self baseEncode:[data bytes]\n                     length:[data length]\n                    charset:kWebSafeBase64EncodeChars\n                     padded:padded];\n}\n\n+(NSData *)webSafeDecodeData:(NSData *)data {\n    return [self baseDecode:[data bytes]\n                     length:[data length]\n                    charset:kWebSafeBase64DecodeChars\n             requirePadding:NO];\n}\n\n+(NSData *)webSafeEncodeBytes:(const void *)bytes\n                       length:(NSUInteger)length\n                       padded:(BOOL)padded {\n    return [self baseEncode:bytes\n                     length:length\n                    charset:kWebSafeBase64EncodeChars\n                     padded:padded];\n}\n\n+(NSData *)webSafeDecodeBytes:(const void *)bytes length:(NSUInteger)length {\n    return [self baseDecode:bytes\n                     length:length\n                    charset:kWebSafeBase64DecodeChars\n             requirePadding:NO];\n}\n\n+(NSString *)stringByWebSafeEncodingData:(NSData *)data\n                                  padded:(BOOL)padded {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:[data bytes]\n                                  length:[data length]\n                                 charset:kWebSafeBase64EncodeChars\n                                  padded:padded];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSString *)stringByWebSafeEncodingBytes:(const void *)bytes\n                                   length:(NSUInteger)length\n                                   padded:(BOOL)padded {\n    NSString *result = nil;\n    NSData *converted = [self baseEncode:bytes\n                                  length:length\n                                 charset:kWebSafeBase64EncodeChars\n                                  padded:padded];\n    if (converted) {\n        result = [[NSString alloc] initWithData:converted\n                                        encoding:NSASCIIStringEncoding];\n    }\n    return result;\n}\n\n+(NSData *)webSafeDecodeString:(NSString *)string {\n    NSData *result = nil;\n    NSData *data = [string dataUsingEncoding:NSASCIIStringEncoding];\n    if (data) {\n        result = [self baseDecode:[data bytes]\n                           length:[data length]\n                          charset:kWebSafeBase64DecodeChars\n                   requirePadding:NO];\n    }\n    return result;\n}\n\n@end\n\n@implementation GTMBase64 (PrivateMethods)\n\n//\n// baseEncode:length:charset:padded:\n//\n// Does the common lifting of creating the dest NSData.  it creates & sizes the\n// data for the results.  |charset| is the characters to use for the encoding\n// of the data.  |padding| controls if the encoded data should be padded to a\n// multiple of 4.\n//\n// Returns:\n//   an autorelease NSData with the encoded data, nil if any error.\n//\n+(NSData *)baseEncode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char *)charset\n               padded:(BOOL)padded {\n    // how big could it be?\n    NSUInteger maxLength = CalcEncodedLength(length, padded);\n    // make space\n    NSMutableData *result = [NSMutableData data];\n    [result setLength:maxLength];\n    // do it\n    NSUInteger finalLength = [self baseEncode:bytes\n                                       srcLen:length\n                                    destBytes:[result mutableBytes]\n                                      destLen:[result length]\n                                      charset:charset\n                                       padded:padded];\n    if (finalLength) {\n        _GTMDevAssert(finalLength == maxLength, @\"how did we calc the length wrong?\");\n    } else {\n        // shouldn't happen, this means we ran out of space\n        result = nil;\n    }\n    return result;\n}\n\n//\n// baseDecode:length:charset:requirePadding:\n//\n// Does the common lifting of creating the dest NSData.  it creates & sizes the\n// data for the results.  |charset| is the characters to use for the decoding\n// of the data.\n//\n// Returns:\n//   an autorelease NSData with the decoded data, nil if any error.\n//\n//\n+(NSData *)baseDecode:(const void *)bytes\n               length:(NSUInteger)length\n              charset:(const char *)charset\n       requirePadding:(BOOL)requirePadding {\n    // could try to calculate what it will end up as\n    NSUInteger maxLength = GuessDecodedLength(length);\n    // make space\n    NSMutableData *result = [NSMutableData data];\n    [result setLength:maxLength];\n    // do it\n    NSUInteger finalLength = [self baseDecode:bytes\n                                       srcLen:length\n                                    destBytes:[result mutableBytes]\n                                      destLen:[result length]\n                                      charset:charset\n                               requirePadding:requirePadding];\n    if (finalLength) {\n        if (finalLength != maxLength) {\n            // resize down to how big it was\n            [result setLength:finalLength];\n        }\n    } else {\n        // either an error in the args, or we ran out of space\n        result = nil;\n    }\n    return result;\n}\n\n//\n// baseEncode:srcLen:destBytes:destLen:charset:padded:\n//\n// Encodes the buffer into the larger.  returns the length of the encoded\n// data, or zero for an error.\n// |charset| is the characters to use for the encoding\n// |padded| tells if the result should be padded to a multiple of 4.\n//\n// Returns:\n//   the length of the encoded data.  zero if any error.\n//\n+(NSUInteger)baseEncode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n                 padded:(BOOL)padded {\n    if (!srcLen || !destLen || !srcBytes || !destBytes) {\n        return 0;\n    }\n    \n    char *curDest = destBytes;\n    const unsigned char *curSrc = (const unsigned char *)(srcBytes);\n    \n    // Three bytes of data encodes to four characters of cyphertext.\n    // So we can pump through three-byte chunks atomically.\n    while (srcLen > 2) {\n        // space?\n        _GTMDevAssert(destLen >= 4, @\"our calc for encoded length was wrong\");\n        curDest[0] = charset[curSrc[0] >> 2];\n        curDest[1] = charset[((curSrc[0] & 0x03) << 4) + (curSrc[1] >> 4)];\n        curDest[2] = charset[((curSrc[1] & 0x0f) << 2) + (curSrc[2] >> 6)];\n        curDest[3] = charset[curSrc[2] & 0x3f];\n        \n        curDest += 4;\n        curSrc += 3;\n        srcLen -= 3;\n        destLen -= 4;\n    }\n    \n    // now deal with the tail (<=2 bytes)\n    switch (srcLen) {\n        case 0:\n            // Nothing left; nothing more to do.\n            break;\n        case 1:\n            // One byte left: this encodes to two characters, and (optionally)\n            // two pad characters to round out the four-character cypherblock.\n            _GTMDevAssert(destLen >= 2, @\"our calc for encoded length was wrong\");\n            curDest[0] = charset[curSrc[0] >> 2];\n            curDest[1] = charset[(curSrc[0] & 0x03) << 4];\n            curDest += 2;\n            destLen -= 2;\n            if (padded) {\n                _GTMDevAssert(destLen >= 2, @\"our calc for encoded length was wrong\");\n                curDest[0] = kBase64PaddingChar;\n                curDest[1] = kBase64PaddingChar;\n                curDest += 2;\n            }\n            break;\n        case 2:\n            // Two bytes left: this encodes to three characters, and (optionally)\n            // one pad character to round out the four-character cypherblock.\n            _GTMDevAssert(destLen >= 3, @\"our calc for encoded length was wrong\");\n            curDest[0] = charset[curSrc[0] >> 2];\n            curDest[1] = charset[((curSrc[0] & 0x03) << 4) + (curSrc[1] >> 4)];\n            curDest[2] = charset[(curSrc[1] & 0x0f) << 2];\n            curDest += 3;\n            destLen -= 3;\n            if (padded) {\n                _GTMDevAssert(destLen >= 1, @\"our calc for encoded length was wrong\");\n                curDest[0] = kBase64PaddingChar;\n                curDest += 1;\n            }\n            break;\n    }\n    // return the length\n    return (curDest - destBytes);\n}\n\n//\n// baseDecode:srcLen:destBytes:destLen:charset:requirePadding:\n//\n// Decodes the buffer into the larger.  returns the length of the decoded\n// data, or zero for an error.\n// |charset| is the character decoding buffer to use\n//\n// Returns:\n//   the length of the encoded data.  zero if any error.\n//\n+(NSUInteger)baseDecode:(const char *)srcBytes\n                 srcLen:(NSUInteger)srcLen\n              destBytes:(char *)destBytes\n                destLen:(NSUInteger)destLen\n                charset:(const char *)charset\n         requirePadding:(BOOL)requirePadding {\n    if (!srcLen || !destLen || !srcBytes || !destBytes) {\n        return 0;\n    }\n    \n    int decode;\n    NSUInteger destIndex = 0;\n    int state = 0;\n    char ch = 0;\n    while (srcLen-- && (ch = *srcBytes++) != 0)  {\n        if (IsSpace(ch))  // Skip whitespace\n            continue;\n        \n        if (ch == kBase64PaddingChar)\n            break;\n        \n        decode = charset[(unsigned int)ch];\n        if (decode == kBase64InvalidChar)\n            return 0;\n        \n        // Four cyphertext characters decode to three bytes.\n        // Therefore we can be in one of four states.\n        switch (state) {\n            case 0:\n                // We're at the beginning of a four-character cyphertext block.\n                // This sets the high six bits of the first byte of the\n                // plaintext block.\n                _GTMDevAssert(destIndex < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] = decode << 2;\n                state = 1;\n                break;\n            case 1:\n                // We're one character into a four-character cyphertext block.\n                // This sets the low two bits of the first plaintext byte,\n                // and the high four bits of the second plaintext byte.\n                _GTMDevAssert((destIndex+1) < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] |= decode >> 4;\n                destBytes[destIndex+1] = (decode & 0x0f) << 4;\n                destIndex++;\n                state = 2;\n                break;\n            case 2:\n                // We're two characters into a four-character cyphertext block.\n                // This sets the low four bits of the second plaintext\n                // byte, and the high two bits of the third plaintext byte.\n                // However, if this is the end of data, and those two\n                // bits are zero, it could be that those two bits are\n                // leftovers from the encoding of data that had a length\n                // of two mod three.\n                _GTMDevAssert((destIndex+1) < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] |= decode >> 2;\n                destBytes[destIndex+1] = (decode & 0x03) << 6;\n                destIndex++;\n                state = 3;\n                break;\n            case 3:\n                // We're at the last character of a four-character cyphertext block.\n                // This sets the low six bits of the third plaintext byte.\n                _GTMDevAssert(destIndex < destLen, @\"our calc for decoded length was wrong\");\n                destBytes[destIndex] |= decode;\n                destIndex++;\n                state = 0;\n                break;\n        }\n    }\n    \n    // We are done decoding Base-64 chars.  Let's see if we ended\n    //      on a byte boundary, and/or with erroneous trailing characters.\n    if (ch == kBase64PaddingChar) {               // We got a pad char\n        if ((state == 0) || (state == 1)) {\n            return 0;  // Invalid '=' in first or second position\n        }\n        if (srcLen == 0) {\n            if (state == 2) { // We run out of input but we still need another '='\n                return 0;\n            }\n            // Otherwise, we are in state 3 and only need this '='\n        } else {\n            if (state == 2) {  // need another '='\n                while ((ch = *srcBytes++) && (srcLen-- > 0)) {\n                    if (!IsSpace(ch))\n                        break;\n                }\n                if (ch != kBase64PaddingChar) {\n                    return 0;\n                }\n            }\n            // state = 1 or 2, check if all remain padding is space\n            while ((ch = *srcBytes++) && (srcLen-- > 0)) {\n                if (!IsSpace(ch)) {\n                    return 0;\n                }\n            }\n        }\n    } else {\n        // We ended by seeing the end of the string.\n        \n        if (requirePadding) {\n            // If we require padding, then anything but state 0 is an error.\n            if (state != 0) {\n                return 0;\n            }\n        } else {\n            // Make sure we have no partial bytes lying around.  Note that we do not\n            // require trailing '=', so states 2 and 3 are okay too.\n            if (state == 1) {\n                return 0;\n            }\n        }\n    }\n    \n    // If then next piece of output was valid and got written to it means we got a\n    // very carefully crafted input that appeared valid but contains some trailing\n    // bits past the real length, so just toss the thing.\n    if ((destIndex < destLen) &&\n        (destBytes[destIndex] != 0)) {\n        return 0;\n    }\n    \n    return destIndex;\n}\n\n@end\n\n```\n#### NSData+AES.h\n``` objc\n//\n//  NSData+AES.h\n//  iOS_AES\n//\n//  Created by FM-13 on 16/6/8.\n//  Copyright © 2016年 cong. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface NSData (AES)\n\n\n//加密\n- (NSData *)AES128EncryptWithKey:(NSString *)key iv:(NSString *)iv;\n\n\n//解密\n- (NSData *)AES128DecryptWithKey:(NSString *)key iv:(NSString *)iv;\n\n\n\n@end\n\n```\n#### NSData+AES.m\n``` objc\n//\n//  NSData+AES.m\n//  iOS_AES\n//\n//  Created by FM-13 on 16/6/8.\n//  Copyright © 2016年 cong. All rights reserved.\n//\n\n#import \"NSData+AES.h\"\n#import <CommonCrypto/CommonCryptor.h>\n\n@implementation NSData (AES)\n\n//加密\n- (NSData *)AES128EncryptWithKey:(NSString *)key iv:(NSString *)iv\n{\n    return [self AES128operation:kCCEncrypt key:key iv:iv];\n}\n\n\n//解密\n- (NSData *)AES128DecryptWithKey:(NSString *)key iv:(NSString *)iv\n{\n    return [self AES128operation:kCCDecrypt key:key iv:iv];\n}\n\n- (NSData *)AES128operation:(CCOperation)operation key:(NSString *)key iv:(NSString *)iv\n{\n    char keyPtr[kCCKeySizeAES128 + 1];\n    bzero(keyPtr, sizeof(keyPtr));\n    [key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];\n    \n    // IV\n    char ivPtr[kCCBlockSizeAES128 + 1];\n    bzero(ivPtr, sizeof(ivPtr));\n    [iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];\n    \n    size_t bufferSize = [self length] + kCCBlockSizeAES128;\n    void *buffer = malloc(bufferSize);\n    size_t numBytesEncrypted = 0;\n    \n    \n    CCCryptorStatus cryptorStatus = CCCrypt(operation, kCCAlgorithmAES128, kCCOptionPKCS7Padding,\n                                            keyPtr, kCCKeySizeAES128,\n                                            ivPtr,\n                                            [self bytes], [self length],\n                                            buffer, bufferSize,\n                                            &numBytesEncrypted);\n    \n    if(cryptorStatus == kCCSuccess){\n        NSLog(@\"Success\");\n        return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];\n        \n    }else{\n        NSLog(@\"Error\");\n    }\n    \n    free(buffer);\n    return nil;\n}\n\n@end\n\n```\n\n使用方法如下：\n```\nNSString *aesKey = @\"7854156156611111\";\nNSString *aesIV = @\"0000000000000000\";\n    \nNSData *data = [self dataUsingEncoding:NSUTF8StringEncoding];\n//加密\ndata = [data AES128EncryptWithKey:aesKey iv:aesIV];\ndata = [GTMBase64 encodeData:data];\n    \nNSString *encodeStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n```","slug":"AES-CBC-128-PKCS5Padding加密解密算法（iOS、Android、JavaScript、PHP）","published":1,"updated":"2022-05-19T03:13:11.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceni000bl1l307gudghe","content":"<p>最近项目中考虑到用户账户数据的安全性问题，需要对用户账户相关信息进行加密解密。这里我们选择使用AES加解密，至于AES相比其他对称加密算法的优缺点就不再详述，当然加解密过程中还使用了一些其他的算法，比如混合MD5。这边文章主要记录下Objective-C、Java、JavaScript、PHP四种语言的AES/CBC/128/PKCS5Padding的加解密算法，下面直接上代码。</p>\n<span id=\"more\"></span>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> key = <span class=\"string\">&#x27;7854156156611111&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//data 是准备加密的字符串,key是你的密钥</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">encryption</span>(<span class=\"params\">data, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iv = <span class=\"string\">&quot;0000000000000000&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clearEncoding = <span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherEncoding = <span class=\"string\">&#x27;base64&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherChunks = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipher = crypto.<span class=\"title function_\">createCipheriv</span>(<span class=\"string\">&#x27;aes-128-cbc&#x27;</span>, key, iv);</span><br><span class=\"line\">    cipher.<span class=\"title function_\">setAutoPadding</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(cipher.<span class=\"title function_\">update</span>(data, clearEncoding, cipherEncoding));</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(cipher.<span class=\"title function_\">final</span>(cipherEncoding));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipherChunks.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//data 是你的准备解密的字符串,key是你的密钥</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">decryption</span>(<span class=\"params\">data, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iv = <span class=\"string\">&quot;0000000000000000&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clearEncoding = <span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherEncoding = <span class=\"string\">&#x27;base64&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherChunks = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> decipher = crypto.<span class=\"title function_\">createDecipheriv</span>(<span class=\"string\">&#x27;aes-128-cbc&#x27;</span>, key, iv);</span><br><span class=\"line\">    decipher.<span class=\"title function_\">setAutoPadding</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(decipher.<span class=\"title function_\">update</span>(data, cipherEncoding, clearEncoding));</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(decipher.<span class=\"title function_\">final</span>(clearEncoding));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipherChunks.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">encryption</span>(data, key)) ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$privateKey</span> = <span class=\"string\">&quot;7854156156611111&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$iv</span> \t= <span class=\"string\">&quot;0000000000000000&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$data</span> \t= <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"variable\">$privateKey</span>.<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\"><span class=\"variable\">$encrypted</span> = <span class=\"title function_ invoke__\">mcrypt_encrypt</span>(MCRYPT_RIJNDAEL_128, <span class=\"variable\">$privateKey</span>, <span class=\"variable\">$data</span>, MCRYPT_MODE_CBC, <span class=\"variable\">$iv</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$encrypted</span>).<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"variable\">$encryptedData</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"string\">&quot;L7AswKt5/t1gND4ct22Odw==&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$decrypted</span> = <span class=\"title function_ invoke__\">mcrypt_decrypt</span>(MCRYPT_RIJNDAEL_128, <span class=\"variable\">$privateKey</span>, <span class=\"variable\">$encryptedData</span>, MCRYPT_MODE_CBC, <span class=\"variable\">$iv</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"variable\">$decrypted</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的PHP版本是7.0.22，需要引入依赖<code>sudo apt-get install php7-mcrypt</code></p>\n</blockquote>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.learn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Cipher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Encryptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encrypt</span><span class=\"params\">(String key, String initVector, String value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">IvParameterSpec</span> <span class=\"variable\">iv</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IvParameterSpec</span>(initVector.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">\t\t\t<span class=\"type\">SecretKeySpec</span> <span class=\"variable\">skeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(key.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>), <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/CBC/PKCS5PADDING&quot;</span>);</span><br><span class=\"line\">\t\t\tcipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] encrypted = cipher.doFinal(value.getBytes());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;encrypted string: &quot;</span> + Base64.getEncoder().encodeToString(encrypted));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Base64.getEncoder().encodeToString(encrypted);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tex.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">decrypt</span><span class=\"params\">(String key, String initVector, String encrypted)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">IvParameterSpec</span> <span class=\"variable\">iv</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IvParameterSpec</span>(initVector.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">\t\t\t<span class=\"type\">SecretKeySpec</span> <span class=\"variable\">skeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(key.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>), <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/CBC/PKCS5PADDING&quot;</span>);</span><br><span class=\"line\">\t\t\tcipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(original);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tex.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;7854156156611111&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">initVector</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;0000000000000000&quot;</span>; <span class=\"comment\">// 16 bytes IV</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(decrypt(key, initVector, encrypt(key, initVector, <span class=\"string\">&quot;test&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>iOS客户端的加密解密相对复杂一些，使用Objective-C语言编写，一共5个文件。</p>\n<h4 id=\"GTMDefines-h\"><a href=\"#GTMDefines-h\" class=\"headerlink\" title=\"GTMDefines.h\"></a>GTMDefines.h</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// GTMDefines.h</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright 2008 Google Inc.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not</span></span><br><span class=\"line\"><span class=\"comment\">//  use this file except in compliance with the License.  You may obtain a copy</span></span><br><span class=\"line\"><span class=\"comment\">//  of the License at</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\">//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</span></span><br><span class=\"line\"><span class=\"comment\">//  License for the specific language governing permissions and limitations under</span></span><br><span class=\"line\"><span class=\"comment\">//  the License.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ============================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AvailabilityMacros.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Not all MAC_OS_X_VERSION_10_X macros defined in past SDKs</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> MAC_OS_X_VERSION_10_5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAC_OS_X_VERSION_10_5 1050</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> MAC_OS_X_VERSION_10_6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAC_OS_X_VERSION_10_6 1060</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// CPP symbols that can be overridden in a prefix to control how the toolbox</span></span><br><span class=\"line\"><span class=\"comment\">// is compiled.</span></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GTMHTTPFetcher will support logging by default but only hook its input</span></span><br><span class=\"line\"><span class=\"comment\">// stream support for logging when requested.  You can control the inclusion of</span></span><br><span class=\"line\"><span class=\"comment\">// the code by providing your own definitions for these w/in a prefix header.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_HTTPFETCHER_ENABLE_LOGGING</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_HTTPFETCHER_ENABLE_LOGGING 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// GTM_HTTPFETCHER_ENABLE_LOGGING</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// By setting the GTM_CONTAINERS_VALIDATION_FAILED_LOG and</span></span><br><span class=\"line\"><span class=\"comment\">// GTM_CONTAINERS_VALIDATION_FAILED_ASSERT macros you can control what happens</span></span><br><span class=\"line\"><span class=\"comment\">// when a validation fails. If you implement your own validators, you may want</span></span><br><span class=\"line\"><span class=\"comment\">// to control their internals using the same macros for consistency.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_CONTAINERS_VALIDATION_FAILED_ASSERT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_CONTAINERS_VALIDATION_FAILED_ASSERT 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Give ourselves a consistent way to do inlines.  Apple&#x27;s macros even use</span></span><br><span class=\"line\"><span class=\"comment\">// a few different actual definitions, so we&#x27;re based off of the foundation</span></span><br><span class=\"line\"><span class=\"comment\">// one.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined(GTM_INLINE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined (__GNUC__) &amp;&amp; (__GNUC__ == 4)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_INLINE static __inline__ __attribute__((always_inline))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_INLINE static __inline__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Give ourselves a consistent way of doing externs that links up nicely</span></span><br><span class=\"line\"><span class=\"comment\">// when mixing objc and objc++</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined (GTM_EXTERN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined __cplusplus</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_EXTERN extern <span class=\"string\">&quot;C&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_EXTERN extern</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Give ourselves a consistent way of exporting things if we have visibility</span></span><br><span class=\"line\"><span class=\"comment\">// set to hidden.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined (GTM_EXPORT)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_EXPORT __attribute__((visibility(<span class=\"string\">&quot;default&quot;</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _GTMDevLog &amp; _GTMDevAssert</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// _GTMDevLog &amp; _GTMDevAssert are meant to be a very lightweight shell for</span></span><br><span class=\"line\"><span class=\"comment\">// developer level errors.  This implementation simply macros to NSLog/NSAssert.</span></span><br><span class=\"line\"><span class=\"comment\">// It is not intended to be a general logging/reporting system.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Please see http://code.google.com/p/google-toolbox-for-mac/wiki/DevLogNAssert</span></span><br><span class=\"line\"><span class=\"comment\">// for a little more background on the usage of these macros.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    _GTMDevLog           log some error/problem in debug builds</span></span><br><span class=\"line\"><span class=\"comment\">//    _GTMDevAssert        assert if conditon isn&#x27;t met w/in a method/function</span></span><br><span class=\"line\"><span class=\"comment\">//                           in all builds.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// To replace this system, just provide different macro definitions in your</span></span><br><span class=\"line\"><span class=\"comment\">// prefix header.  Remember, any implementation you provide *must* be thread</span></span><br><span class=\"line\"><span class=\"comment\">// safe since this could be called by anything in what ever situtation it has</span></span><br><span class=\"line\"><span class=\"comment\">// been placed in.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We only define the simple macros if nothing else has defined this.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _GTMDevLog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevLog(...) NSLog(__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevLog(...) do &#123; &#125; while (0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// _GTMDevLog</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declared here so that it can easily be used for logging tracking if</span></span><br><span class=\"line\"><span class=\"comment\">// necessary. See GTMUnitTestDevLog.h for details.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@class</span> <span class=\"title\">NSString</span>;</span></span><br><span class=\"line\">GTM_EXTERN <span class=\"type\">void</span> _GTMUnitTestDevLog(<span class=\"built_in\">NSString</span> *format, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _GTMDevAssert</span></span><br><span class=\"line\"><span class=\"comment\">// we directly invoke the NSAssert handler so we can pass on the varargs</span></span><br><span class=\"line\"><span class=\"comment\">// (NSAssert doesn&#x27;t have a macro we can use that takes varargs)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined(NS_BLOCK_ASSERTIONS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevAssert(condition, ...)                                       \\</span></span><br><span class=\"line\"><span class=\"meta\">do &#123;                                                                      \\</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">if</span> (!(condition)) &#123;                                                     \\</span></span><br><span class=\"line\"><span class=\"meta\">[[NSAssertionHandler currentHandler]                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">handleFailureInFunction:[NSString stringWithUTF8String:__PRETTY_FUNCTION__] \\</span></span><br><span class=\"line\"><span class=\"meta\">file:[NSString stringWithUTF8String:__FILE__]  \\</span></span><br><span class=\"line\"><span class=\"meta\">lineNumber:__LINE__                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">description:__VA_ARGS__];                             \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;                                                                       \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125; while(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span> <span class=\"comment\">// !defined(NS_BLOCK_ASSERTIONS)</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevAssert(condition, ...) do &#123; &#125; while (0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// !defined(NS_BLOCK_ASSERTIONS)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// _GTMDevAssert</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _GTMCompileAssert</span></span><br><span class=\"line\"><span class=\"comment\">// _GTMCompileAssert is an assert that is meant to fire at compile time if you</span></span><br><span class=\"line\"><span class=\"comment\">// want to check things at compile instead of runtime. For example if you</span></span><br><span class=\"line\"><span class=\"comment\">// want to check that a wchar is 4 bytes instead of 2 you would use</span></span><br><span class=\"line\"><span class=\"comment\">// _GTMCompileAssert(sizeof(wchar_t) == 4, wchar_t_is_4_bytes_on_OS_X)</span></span><br><span class=\"line\"><span class=\"comment\">// Note that the second &quot;arg&quot; is not in quotes, and must be a valid processor</span></span><br><span class=\"line\"><span class=\"comment\">// symbol in it&#x27;s own right (no spaces, punctuation etc).</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Wrapping this in an #ifndef allows external groups to define their own</span></span><br><span class=\"line\"><span class=\"comment\">// compile time assert scheme.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _GTMCompileAssert</span></span><br><span class=\"line\"><span class=\"comment\">// We got this technique from here:</span></span><br><span class=\"line\"><span class=\"comment\">// http://unixjunkie.blogspot.com/2007/10/better-compile-time-asserts_29.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMCompileAssertSymbolInner(<span class=\"keyword\">line</span>, msg) _GTMCOMPILEASSERT ## <span class=\"keyword\">line</span> ## __ ## msg</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMCompileAssertSymbol(<span class=\"keyword\">line</span>, msg) _GTMCompileAssertSymbolInner(<span class=\"keyword\">line</span>, msg)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMCompileAssert(test, msg) \\</span></span><br><span class=\"line\"><span class=\"meta\">typedef char _GTMCompileAssertSymbol(__LINE__, msg) [ ((test) ? 1 : -1) ]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// _GTMCompileAssert</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Macro to allow fast enumeration when building for 10.5 or later, and</span></span><br><span class=\"line\"><span class=\"comment\">// reliance on NSEnumerator for 10.4.  Remember, NSDictionary w/ FastEnumeration</span></span><br><span class=\"line\"><span class=\"comment\">// does keys, so pick the right thing, nothing is done on the FastEnumeration</span></span><br><span class=\"line\"><span class=\"comment\">// side to be sure you&#x27;re getting what you wanted.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_FOREACH_OBJECT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(TARGET_OS_IPHONE) || (MAC_OS_X_VERSION_MIN_REQUIRED &gt;= MAC_OS_X_VERSION_10_5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_OBJECT(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (element in collection)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_KEY(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (element in collection)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_OBJECT(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (NSEnumerator * _ ## element ## _enum = [collection objectEnumerator]; \\</span></span><br><span class=\"line\"><span class=\"meta\">(element = [_ ## element ## _enum nextObject]) != nil; )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_KEY(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (NSEnumerator * _ ## element ## _enum = [collection keyEnumerator]; \\</span></span><br><span class=\"line\"><span class=\"meta\">(element = [_ ## element ## _enum nextObject]) != nil; )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ============================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// CPP symbols defined based on the project settings so the GTM code has</span></span><br><span class=\"line\"><span class=\"comment\">// simple things to test against w/o scattering the knowledge of project</span></span><br><span class=\"line\"><span class=\"comment\">// setting through all the code.</span></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Provide a single constant CPP symbol that all of GTM uses for ifdefing</span></span><br><span class=\"line\"><span class=\"comment\">// iPhone code.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;TargetConditionals.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> TARGET_OS_IPHONE <span class=\"comment\">// iPhone SDK</span></span></span><br><span class=\"line\"><span class=\"comment\">// For iPhone specific stuff</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_IPHONE_SDK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> TARGET_IPHONE_SIMULATOR</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_IPHONE_SIMULATOR 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_IPHONE_DEVICE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span>  <span class=\"comment\">// TARGET_IPHONE_SIMULATOR</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"comment\">// For MacOS specific stuff</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_MACOS_SDK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Provide a symbol to include/exclude extra code for GC support.  (This mainly</span></span><br><span class=\"line\"><span class=\"comment\">// just controls the inclusion of finalize methods).</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_SUPPORT_GC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> GTM_IPHONE_SDK</span></span><br><span class=\"line\"><span class=\"comment\">// iPhone never needs GC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_SUPPORT_GC 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"comment\">// We can&#x27;t find a symbol to tell if GC is supported/required, so best we</span></span><br><span class=\"line\"><span class=\"comment\">// do on Mac targets is include it if we&#x27;re on 10.5 or later.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> MAC_OS_X_VERSION_MAX_ALLOWED &lt;= MAC_OS_X_VERSION_10_4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_SUPPORT_GC 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_SUPPORT_GC 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// To simplify support for 64bit (and Leopard in general), we provide the type</span></span><br><span class=\"line\"><span class=\"comment\">// defines for non Leopard SDKs</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> MAC_OS_X_VERSION_MAX_ALLOWED &lt;= MAC_OS_X_VERSION_10_4</span></span><br><span class=\"line\"><span class=\"comment\">// NSInteger/NSUInteger and Max/Mins</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> NSINTEGER_DEFINED</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __LP64__ || NS_BUILD_32_LIKE_64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"built_in\">NSInteger</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"built_in\">NSUInteger</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> <span class=\"built_in\">NSInteger</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"built_in\">NSUInteger</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSIntegerMax    LONG_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSIntegerMin    LONG_MIN</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSUIntegerMax   ULONG_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSINTEGER_DEFINED 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span>  <span class=\"comment\">// NSINTEGER_DEFINED</span></span></span><br><span class=\"line\"><span class=\"comment\">// CGFloat</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> CGFLOAT_DEFINED</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(__LP64__) &amp;&amp; __LP64__</span></span><br><span class=\"line\"><span class=\"comment\">// This really is an untested path (64bit on Tiger?)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> <span class=\"built_in\">CGFloat</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MIN DBL_MIN</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MAX DBL_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_IS_DOUBLE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span> <span class=\"comment\">/* !defined(__LP64__) || !__LP64__ */</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">float</span> <span class=\"built_in\">CGFloat</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MIN FLT_MIN</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MAX FLT_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_IS_DOUBLE 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* !defined(__LP64__) || !__LP64__ */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_DEFINED 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// CGFLOAT_DEFINED</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span>  <span class=\"comment\">// MAC_OS_X_VERSION_MAX_ALLOWED &lt;= MAC_OS_X_VERSION_10_4</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"GTMBase64-h\"><a href=\"#GTMBase64-h\" class=\"headerlink\" title=\"GTMBase64.h\"></a>GTMBase64.h</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  GTMBase64.h</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright 2006-2008 Google Inc.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not</span></span><br><span class=\"line\"><span class=\"comment\">//  use this file except in compliance with the License.  You may obtain a copy</span></span><br><span class=\"line\"><span class=\"comment\">//  of the License at</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\">//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</span></span><br><span class=\"line\"><span class=\"comment\">//  License for the specific language governing permissions and limitations under</span></span><br><span class=\"line\"><span class=\"comment\">//  the License.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GTMDefines.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GTMBase64</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Helper for handling Base64 and WebSafeBase64 encodings</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// The webSafe methods use different character set and also the results aren&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">/// always padded to a multiple of 4 characters.  This is done so the resulting</span></span><br><span class=\"line\"><span class=\"comment\">/// data can be used in urls and url query arguments without needing any</span></span><br><span class=\"line\"><span class=\"comment\">/// encoding.  You must use the webSafe* methods together, the data does not</span></span><br><span class=\"line\"><span class=\"comment\">/// interop with the RFC methods.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GTMBase64</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Standard Base64 (RFC) handling</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// encodeData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// decodeData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 decodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// encodeBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// decodeBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 decodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByEncodingData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByEncodingBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// decodeString:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 decodes contents of the NSString.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeString:(<span class=\"built_in\">NSString</span> *)string;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Modified Base64 encoding so the results can go onto urls.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The changes are in the characters generated and also allows the result to</span></span><br><span class=\"line\"><span class=\"comment\">// not be padded to a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">// Must use the matching call to encode/decode, won&#x27;t interop with the</span></span><br><span class=\"line\"><span class=\"comment\">// RFC versions.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeEncodeData:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                      padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeDecodeData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 decodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeEncodeBytes:length:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                       length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                       padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeDecodeBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 decodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByWebSafeEncodingData:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                                  padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByWebSafeEncodingBytes:length:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                                   length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                                   padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeDecodeString:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 decodes contents of the NSString.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeString:(<span class=\"built_in\">NSString</span> *)string;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"GTMBase64-m\"><a href=\"#GTMBase64-m\" class=\"headerlink\" title=\"GTMBase64.m\"></a>GTMBase64.m</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  GTMBase64.m</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright 2006-2008 Google Inc.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not</span></span><br><span class=\"line\"><span class=\"comment\">//  use this file except in compliance with the License.  You may obtain a copy</span></span><br><span class=\"line\"><span class=\"comment\">//  of the License at</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\">//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</span></span><br><span class=\"line\"><span class=\"comment\">//  License for the specific language governing permissions and limitations under</span></span><br><span class=\"line\"><span class=\"comment\">//  the License.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GTMBase64.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GTMDefines.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> *kBase64EncodeChars = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> *kWebSafeBase64EncodeChars = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kBase64PaddingChar = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kBase64InvalidChar = <span class=\"number\">99</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kBase64DecodeChars[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This array was generated by the following code:</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;sys/time.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;stdlib.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;string.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// main()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   static const char Base64[] =</span></span><br><span class=\"line\">    <span class=\"comment\">//     &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//   char *pos;</span></span><br><span class=\"line\">    <span class=\"comment\">//   int idx, i, j;</span></span><br><span class=\"line\">    <span class=\"comment\">//   printf(&quot;    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   for (i = 0; i &lt; 255; i += 8) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (j = i; j &lt; i + 8; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//       pos = strchr(Base64, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//       if ((pos == NULL) || (j == 0))</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = 99;</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = pos - Base64;</span></span><br><span class=\"line\">    <span class=\"comment\">//       if (idx == 99)</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d,     &quot;, idx);</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d/*%c*/,&quot;, idx, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;\\n    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">62</span><span class=\"comment\">/*+*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">63</span><span class=\"comment\">/*/ */</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span><span class=\"comment\">/*0*/</span>, <span class=\"number\">53</span><span class=\"comment\">/*1*/</span>, <span class=\"number\">54</span><span class=\"comment\">/*2*/</span>, <span class=\"number\">55</span><span class=\"comment\">/*3*/</span>, <span class=\"number\">56</span><span class=\"comment\">/*4*/</span>, <span class=\"number\">57</span><span class=\"comment\">/*5*/</span>, <span class=\"number\">58</span><span class=\"comment\">/*6*/</span>, <span class=\"number\">59</span><span class=\"comment\">/*7*/</span>,</span><br><span class=\"line\">    <span class=\"number\">60</span><span class=\"comment\">/*8*/</span>, <span class=\"number\">61</span><span class=\"comment\">/*9*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,       <span class=\"number\">0</span><span class=\"comment\">/*A*/</span>,  <span class=\"number\">1</span><span class=\"comment\">/*B*/</span>,  <span class=\"number\">2</span><span class=\"comment\">/*C*/</span>,  <span class=\"number\">3</span><span class=\"comment\">/*D*/</span>,  <span class=\"number\">4</span><span class=\"comment\">/*E*/</span>,  <span class=\"number\">5</span><span class=\"comment\">/*F*/</span>,  <span class=\"number\">6</span><span class=\"comment\">/*G*/</span>,</span><br><span class=\"line\">    <span class=\"number\">7</span><span class=\"comment\">/*H*/</span>,  <span class=\"number\">8</span><span class=\"comment\">/*I*/</span>,  <span class=\"number\">9</span><span class=\"comment\">/*J*/</span>, <span class=\"number\">10</span><span class=\"comment\">/*K*/</span>, <span class=\"number\">11</span><span class=\"comment\">/*L*/</span>, <span class=\"number\">12</span><span class=\"comment\">/*M*/</span>, <span class=\"number\">13</span><span class=\"comment\">/*N*/</span>, <span class=\"number\">14</span><span class=\"comment\">/*O*/</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span><span class=\"comment\">/*P*/</span>, <span class=\"number\">16</span><span class=\"comment\">/*Q*/</span>, <span class=\"number\">17</span><span class=\"comment\">/*R*/</span>, <span class=\"number\">18</span><span class=\"comment\">/*S*/</span>, <span class=\"number\">19</span><span class=\"comment\">/*T*/</span>, <span class=\"number\">20</span><span class=\"comment\">/*U*/</span>, <span class=\"number\">21</span><span class=\"comment\">/*V*/</span>, <span class=\"number\">22</span><span class=\"comment\">/*W*/</span>,</span><br><span class=\"line\">    <span class=\"number\">23</span><span class=\"comment\">/*X*/</span>, <span class=\"number\">24</span><span class=\"comment\">/*Y*/</span>, <span class=\"number\">25</span><span class=\"comment\">/*Z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">26</span><span class=\"comment\">/*a*/</span>, <span class=\"number\">27</span><span class=\"comment\">/*b*/</span>, <span class=\"number\">28</span><span class=\"comment\">/*c*/</span>, <span class=\"number\">29</span><span class=\"comment\">/*d*/</span>, <span class=\"number\">30</span><span class=\"comment\">/*e*/</span>, <span class=\"number\">31</span><span class=\"comment\">/*f*/</span>, <span class=\"number\">32</span><span class=\"comment\">/*g*/</span>,</span><br><span class=\"line\">    <span class=\"number\">33</span><span class=\"comment\">/*h*/</span>, <span class=\"number\">34</span><span class=\"comment\">/*i*/</span>, <span class=\"number\">35</span><span class=\"comment\">/*j*/</span>, <span class=\"number\">36</span><span class=\"comment\">/*k*/</span>, <span class=\"number\">37</span><span class=\"comment\">/*l*/</span>, <span class=\"number\">38</span><span class=\"comment\">/*m*/</span>, <span class=\"number\">39</span><span class=\"comment\">/*n*/</span>, <span class=\"number\">40</span><span class=\"comment\">/*o*/</span>,</span><br><span class=\"line\">    <span class=\"number\">41</span><span class=\"comment\">/*p*/</span>, <span class=\"number\">42</span><span class=\"comment\">/*q*/</span>, <span class=\"number\">43</span><span class=\"comment\">/*r*/</span>, <span class=\"number\">44</span><span class=\"comment\">/*s*/</span>, <span class=\"number\">45</span><span class=\"comment\">/*t*/</span>, <span class=\"number\">46</span><span class=\"comment\">/*u*/</span>, <span class=\"number\">47</span><span class=\"comment\">/*v*/</span>, <span class=\"number\">48</span><span class=\"comment\">/*w*/</span>,</span><br><span class=\"line\">    <span class=\"number\">49</span><span class=\"comment\">/*x*/</span>, <span class=\"number\">50</span><span class=\"comment\">/*y*/</span>, <span class=\"number\">51</span><span class=\"comment\">/*z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kWebSafeBase64DecodeChars[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This array was generated by the following code:</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;sys/time.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;stdlib.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;string.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// main()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   static const char Base64[] =</span></span><br><span class=\"line\">    <span class=\"comment\">//     &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//   char *pos;</span></span><br><span class=\"line\">    <span class=\"comment\">//   int idx, i, j;</span></span><br><span class=\"line\">    <span class=\"comment\">//   printf(&quot;    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   for (i = 0; i &lt; 255; i += 8) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (j = i; j &lt; i + 8; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//       pos = strchr(Base64, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//       if ((pos == NULL) || (j == 0))</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = 99;</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = pos - Base64;</span></span><br><span class=\"line\">    <span class=\"comment\">//       if (idx == 99)</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d,     &quot;, idx);</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d/*%c*/,&quot;, idx, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;\\n    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">62</span><span class=\"comment\">/*-*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span><span class=\"comment\">/*0*/</span>, <span class=\"number\">53</span><span class=\"comment\">/*1*/</span>, <span class=\"number\">54</span><span class=\"comment\">/*2*/</span>, <span class=\"number\">55</span><span class=\"comment\">/*3*/</span>, <span class=\"number\">56</span><span class=\"comment\">/*4*/</span>, <span class=\"number\">57</span><span class=\"comment\">/*5*/</span>, <span class=\"number\">58</span><span class=\"comment\">/*6*/</span>, <span class=\"number\">59</span><span class=\"comment\">/*7*/</span>,</span><br><span class=\"line\">    <span class=\"number\">60</span><span class=\"comment\">/*8*/</span>, <span class=\"number\">61</span><span class=\"comment\">/*9*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,       <span class=\"number\">0</span><span class=\"comment\">/*A*/</span>,  <span class=\"number\">1</span><span class=\"comment\">/*B*/</span>,  <span class=\"number\">2</span><span class=\"comment\">/*C*/</span>,  <span class=\"number\">3</span><span class=\"comment\">/*D*/</span>,  <span class=\"number\">4</span><span class=\"comment\">/*E*/</span>,  <span class=\"number\">5</span><span class=\"comment\">/*F*/</span>,  <span class=\"number\">6</span><span class=\"comment\">/*G*/</span>,</span><br><span class=\"line\">    <span class=\"number\">7</span><span class=\"comment\">/*H*/</span>,  <span class=\"number\">8</span><span class=\"comment\">/*I*/</span>,  <span class=\"number\">9</span><span class=\"comment\">/*J*/</span>, <span class=\"number\">10</span><span class=\"comment\">/*K*/</span>, <span class=\"number\">11</span><span class=\"comment\">/*L*/</span>, <span class=\"number\">12</span><span class=\"comment\">/*M*/</span>, <span class=\"number\">13</span><span class=\"comment\">/*N*/</span>, <span class=\"number\">14</span><span class=\"comment\">/*O*/</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span><span class=\"comment\">/*P*/</span>, <span class=\"number\">16</span><span class=\"comment\">/*Q*/</span>, <span class=\"number\">17</span><span class=\"comment\">/*R*/</span>, <span class=\"number\">18</span><span class=\"comment\">/*S*/</span>, <span class=\"number\">19</span><span class=\"comment\">/*T*/</span>, <span class=\"number\">20</span><span class=\"comment\">/*U*/</span>, <span class=\"number\">21</span><span class=\"comment\">/*V*/</span>, <span class=\"number\">22</span><span class=\"comment\">/*W*/</span>,</span><br><span class=\"line\">    <span class=\"number\">23</span><span class=\"comment\">/*X*/</span>, <span class=\"number\">24</span><span class=\"comment\">/*Y*/</span>, <span class=\"number\">25</span><span class=\"comment\">/*Z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">63</span><span class=\"comment\">/*_*/</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">26</span><span class=\"comment\">/*a*/</span>, <span class=\"number\">27</span><span class=\"comment\">/*b*/</span>, <span class=\"number\">28</span><span class=\"comment\">/*c*/</span>, <span class=\"number\">29</span><span class=\"comment\">/*d*/</span>, <span class=\"number\">30</span><span class=\"comment\">/*e*/</span>, <span class=\"number\">31</span><span class=\"comment\">/*f*/</span>, <span class=\"number\">32</span><span class=\"comment\">/*g*/</span>,</span><br><span class=\"line\">    <span class=\"number\">33</span><span class=\"comment\">/*h*/</span>, <span class=\"number\">34</span><span class=\"comment\">/*i*/</span>, <span class=\"number\">35</span><span class=\"comment\">/*j*/</span>, <span class=\"number\">36</span><span class=\"comment\">/*k*/</span>, <span class=\"number\">37</span><span class=\"comment\">/*l*/</span>, <span class=\"number\">38</span><span class=\"comment\">/*m*/</span>, <span class=\"number\">39</span><span class=\"comment\">/*n*/</span>, <span class=\"number\">40</span><span class=\"comment\">/*o*/</span>,</span><br><span class=\"line\">    <span class=\"number\">41</span><span class=\"comment\">/*p*/</span>, <span class=\"number\">42</span><span class=\"comment\">/*q*/</span>, <span class=\"number\">43</span><span class=\"comment\">/*r*/</span>, <span class=\"number\">44</span><span class=\"comment\">/*s*/</span>, <span class=\"number\">45</span><span class=\"comment\">/*t*/</span>, <span class=\"number\">46</span><span class=\"comment\">/*u*/</span>, <span class=\"number\">47</span><span class=\"comment\">/*v*/</span>, <span class=\"number\">48</span><span class=\"comment\">/*w*/</span>,</span><br><span class=\"line\">    <span class=\"number\">49</span><span class=\"comment\">/*x*/</span>, <span class=\"number\">50</span><span class=\"comment\">/*y*/</span>, <span class=\"number\">51</span><span class=\"comment\">/*z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tests a character to see if it&#x27;s a whitespace character.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   YES if the character is a whitespace character.</span></span><br><span class=\"line\"><span class=\"comment\">//   NO if the character is not a whitespace character.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">GTM_INLINE <span class=\"type\">BOOL</span> IsSpace(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> c) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// we use our own mapping here because we don&#x27;t want anything w/ locale</span></span><br><span class=\"line\">    <span class=\"comment\">// support.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">BOOL</span> kSpaces[<span class=\"number\">256</span>] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,  <span class=\"comment\">// 0-9</span></span><br><span class=\"line\">        <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 10-19</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 20-29</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 30-39</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 40-49</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 50-59</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 60-69</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 70-79</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 80-89</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 90-99</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 100-109</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 110-119</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 120-129</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 130-139</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 140-149</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 150-159</span></span><br><span class=\"line\">        <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 160-169</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 170-179</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 180-189</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 190-199</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 200-209</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 210-219</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 220-229</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 230-239</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 240-249</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,              <span class=\"comment\">// 250-255</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kSpaces[c];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Calculate how long the data will be once it&#x27;s base64 encoded.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   The guessed encoded length for a source length</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">GTM_INLINE <span class=\"built_in\">NSUInteger</span> CalcEncodedLength(<span class=\"built_in\">NSUInteger</span> srcLen, <span class=\"type\">BOOL</span> padded) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> intermediate_result = <span class=\"number\">8</span> * srcLen + <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> len = intermediate_result / <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (padded) &#123;</span><br><span class=\"line\">        len = ((len + <span class=\"number\">3</span>) / <span class=\"number\">4</span>) * <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tries to calculate how long the data will be once it&#x27;s base64 decoded.</span></span><br><span class=\"line\"><span class=\"comment\">// Unlike the above, this is always an upperbound, since the source data</span></span><br><span class=\"line\"><span class=\"comment\">// could have spaces and might end with the padding characters on them.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   The guessed decoded length for a source length</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">GTM_INLINE <span class=\"built_in\">NSUInteger</span> GuessDecodedLength(<span class=\"built_in\">NSUInteger</span> srcLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (srcLen + <span class=\"number\">3</span>) / <span class=\"number\">4</span> * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GTMBase64</span> (<span class=\"title\">PrivateMethods</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">               padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span>*)charset</span><br><span class=\"line\">       requirePadding:(<span class=\"type\">BOOL</span>)requirePadding;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">                 padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">         requirePadding:(<span class=\"type\">BOOL</span>)requirePadding;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GTMBase64</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Standard Base64 (RFC) handling</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kBase64EncodeChars</span><br><span class=\"line\">                     padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kBase64EncodeChars</span><br><span class=\"line\">                     padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                                  length:[data length]</span><br><span class=\"line\">                                 charset:kBase64EncodeChars</span><br><span class=\"line\">                                  padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                                  length:length</span><br><span class=\"line\">                                 charset:kBase64EncodeChars</span><br><span class=\"line\">                                  padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeString:(<span class=\"built_in\">NSString</span> *)string &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *data = [string dataUsingEncoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        result = [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                           length:[data length]</span><br><span class=\"line\">                          charset:kBase64DecodeChars</span><br><span class=\"line\">                   requirePadding:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Modified Base64 encoding so the results can go onto urls.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The changes are in the characters generated and also the result isn&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">// padded to a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">// Must use the matching call to encode/decode, won&#x27;t interop with the</span></span><br><span class=\"line\"><span class=\"comment\">// RFC versions.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                      padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                     padded:padded];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kWebSafeBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                       length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                       padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                     padded:padded];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kWebSafeBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                                  padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                                  length:[data length]</span><br><span class=\"line\">                                 charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                                  padded:padded];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                                   length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                                   padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                                  length:length</span><br><span class=\"line\">                                 charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                                  padded:padded];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeString:(<span class=\"built_in\">NSString</span> *)string &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *data = [string dataUsingEncoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        result = [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                           length:[data length]</span><br><span class=\"line\">                          charset:kWebSafeBase64DecodeChars</span><br><span class=\"line\">                   requirePadding:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GTMBase64</span> (<span class=\"title\">PrivateMethods</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseEncode:length:charset:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Does the common lifting of creating the dest NSData.  it creates &amp; sizes the</span></span><br><span class=\"line\"><span class=\"comment\">// data for the results.  |charset| is the characters to use for the encoding</span></span><br><span class=\"line\"><span class=\"comment\">// of the data.  |padding| controls if the encoded data should be padded to a</span></span><br><span class=\"line\"><span class=\"comment\">// multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   an autorelease NSData with the encoded data, nil if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">               padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"comment\">// how big could it be?</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> maxLength = CalcEncodedLength(length, padded);</span><br><span class=\"line\">    <span class=\"comment\">// make space</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableData</span> *result = [<span class=\"built_in\">NSMutableData</span> data];</span><br><span class=\"line\">    [result setLength:maxLength];</span><br><span class=\"line\">    <span class=\"comment\">// do it</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> finalLength = [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                                       srcLen:length</span><br><span class=\"line\">                                    destBytes:[result mutableBytes]</span><br><span class=\"line\">                                      destLen:[result length]</span><br><span class=\"line\">                                      charset:charset</span><br><span class=\"line\">                                       padded:padded];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finalLength) &#123;</span><br><span class=\"line\">        _GTMDevAssert(finalLength == maxLength, <span class=\"string\">@&quot;how did we calc the length wrong?&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// shouldn&#x27;t happen, this means we ran out of space</span></span><br><span class=\"line\">        result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseDecode:length:charset:requirePadding:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Does the common lifting of creating the dest NSData.  it creates &amp; sizes the</span></span><br><span class=\"line\"><span class=\"comment\">// data for the results.  |charset| is the characters to use for the decoding</span></span><br><span class=\"line\"><span class=\"comment\">// of the data.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   an autorelease NSData with the decoded data, nil if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">       requirePadding:(<span class=\"type\">BOOL</span>)requirePadding &#123;</span><br><span class=\"line\">    <span class=\"comment\">// could try to calculate what it will end up as</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> maxLength = GuessDecodedLength(length);</span><br><span class=\"line\">    <span class=\"comment\">// make space</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableData</span> *result = [<span class=\"built_in\">NSMutableData</span> data];</span><br><span class=\"line\">    [result setLength:maxLength];</span><br><span class=\"line\">    <span class=\"comment\">// do it</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> finalLength = [<span class=\"keyword\">self</span> baseDecode:bytes</span><br><span class=\"line\">                                       srcLen:length</span><br><span class=\"line\">                                    destBytes:[result mutableBytes]</span><br><span class=\"line\">                                      destLen:[result length]</span><br><span class=\"line\">                                      charset:charset</span><br><span class=\"line\">                               requirePadding:requirePadding];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finalLength) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (finalLength != maxLength) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// resize down to how big it was</span></span><br><span class=\"line\">            [result setLength:finalLength];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// either an error in the args, or we ran out of space</span></span><br><span class=\"line\">        result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseEncode:srcLen:destBytes:destLen:charset:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Encodes the buffer into the larger.  returns the length of the encoded</span></span><br><span class=\"line\"><span class=\"comment\">// data, or zero for an error.</span></span><br><span class=\"line\"><span class=\"comment\">// |charset| is the characters to use for the encoding</span></span><br><span class=\"line\"><span class=\"comment\">// |padded| tells if the result should be padded to a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   the length of the encoded data.  zero if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">                 padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!srcLen || !destLen || !srcBytes || !destBytes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> *curDest = destBytes;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *curSrc = (<span class=\"keyword\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)(srcBytes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Three bytes of data encodes to four characters of cyphertext.</span></span><br><span class=\"line\">    <span class=\"comment\">// So we can pump through three-byte chunks atomically.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (srcLen &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// space?</span></span><br><span class=\"line\">        _GTMDevAssert(destLen &gt;= <span class=\"number\">4</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">        curDest[<span class=\"number\">0</span>] = charset[curSrc[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">        curDest[<span class=\"number\">1</span>] = charset[((curSrc[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">4</span>) + (curSrc[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">        curDest[<span class=\"number\">2</span>] = charset[((curSrc[<span class=\"number\">1</span>] &amp; <span class=\"number\">0x0f</span>) &lt;&lt; <span class=\"number\">2</span>) + (curSrc[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">        curDest[<span class=\"number\">3</span>] = charset[curSrc[<span class=\"number\">2</span>] &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        curDest += <span class=\"number\">4</span>;</span><br><span class=\"line\">        curSrc += <span class=\"number\">3</span>;</span><br><span class=\"line\">        srcLen -= <span class=\"number\">3</span>;</span><br><span class=\"line\">        destLen -= <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// now deal with the tail (&lt;=2 bytes)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (srcLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">// Nothing left; nothing more to do.</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\">// One byte left: this encodes to two characters, and (optionally)</span></span><br><span class=\"line\">            <span class=\"comment\">// two pad characters to round out the four-character cypherblock.</span></span><br><span class=\"line\">            _GTMDevAssert(destLen &gt;= <span class=\"number\">2</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">            curDest[<span class=\"number\">0</span>] = charset[curSrc[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">            curDest[<span class=\"number\">1</span>] = charset[(curSrc[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">4</span>];</span><br><span class=\"line\">            curDest += <span class=\"number\">2</span>;</span><br><span class=\"line\">            destLen -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (padded) &#123;</span><br><span class=\"line\">                _GTMDevAssert(destLen &gt;= <span class=\"number\">2</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">                curDest[<span class=\"number\">0</span>] = kBase64PaddingChar;</span><br><span class=\"line\">                curDest[<span class=\"number\">1</span>] = kBase64PaddingChar;</span><br><span class=\"line\">                curDest += <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\">// Two bytes left: this encodes to three characters, and (optionally)</span></span><br><span class=\"line\">            <span class=\"comment\">// one pad character to round out the four-character cypherblock.</span></span><br><span class=\"line\">            _GTMDevAssert(destLen &gt;= <span class=\"number\">3</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">            curDest[<span class=\"number\">0</span>] = charset[curSrc[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">            curDest[<span class=\"number\">1</span>] = charset[((curSrc[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">4</span>) + (curSrc[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">            curDest[<span class=\"number\">2</span>] = charset[(curSrc[<span class=\"number\">1</span>] &amp; <span class=\"number\">0x0f</span>) &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">            curDest += <span class=\"number\">3</span>;</span><br><span class=\"line\">            destLen -= <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (padded) &#123;</span><br><span class=\"line\">                _GTMDevAssert(destLen &gt;= <span class=\"number\">1</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">                curDest[<span class=\"number\">0</span>] = kBase64PaddingChar;</span><br><span class=\"line\">                curDest += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return the length</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (curDest - destBytes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseDecode:srcLen:destBytes:destLen:charset:requirePadding:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Decodes the buffer into the larger.  returns the length of the decoded</span></span><br><span class=\"line\"><span class=\"comment\">// data, or zero for an error.</span></span><br><span class=\"line\"><span class=\"comment\">// |charset| is the character decoding buffer to use</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   the length of the encoded data.  zero if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">         requirePadding:(<span class=\"type\">BOOL</span>)requirePadding &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!srcLen || !destLen || !srcBytes || !destBytes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> decode;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> destIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (srcLen-- &amp;&amp; (ch = *srcBytes++) != <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IsSpace(ch))  <span class=\"comment\">// Skip whitespace</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == kBase64PaddingChar)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        decode = charset[(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)ch];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (decode == kBase64InvalidChar)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Four cyphertext characters decode to three bytes.</span></span><br><span class=\"line\">        <span class=\"comment\">// Therefore we can be in one of four states.</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re at the beginning of a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the high six bits of the first byte of the</span></span><br><span class=\"line\">                <span class=\"comment\">// plaintext block.</span></span><br><span class=\"line\">                _GTMDevAssert(destIndex &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] = decode &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">                state = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re one character into a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the low two bits of the first plaintext byte,</span></span><br><span class=\"line\">                <span class=\"comment\">// and the high four bits of the second plaintext byte.</span></span><br><span class=\"line\">                _GTMDevAssert((destIndex+<span class=\"number\">1</span>) &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] |= decode &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                destBytes[destIndex+<span class=\"number\">1</span>] = (decode &amp; <span class=\"number\">0x0f</span>) &lt;&lt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                destIndex++;</span><br><span class=\"line\">                state = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re two characters into a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the low four bits of the second plaintext</span></span><br><span class=\"line\">                <span class=\"comment\">// byte, and the high two bits of the third plaintext byte.</span></span><br><span class=\"line\">                <span class=\"comment\">// However, if this is the end of data, and those two</span></span><br><span class=\"line\">                <span class=\"comment\">// bits are zero, it could be that those two bits are</span></span><br><span class=\"line\">                <span class=\"comment\">// leftovers from the encoding of data that had a length</span></span><br><span class=\"line\">                <span class=\"comment\">// of two mod three.</span></span><br><span class=\"line\">                _GTMDevAssert((destIndex+<span class=\"number\">1</span>) &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] |= decode &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">                destBytes[destIndex+<span class=\"number\">1</span>] = (decode &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">6</span>;</span><br><span class=\"line\">                destIndex++;</span><br><span class=\"line\">                state = <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re at the last character of a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the low six bits of the third plaintext byte.</span></span><br><span class=\"line\">                _GTMDevAssert(destIndex &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] |= decode;</span><br><span class=\"line\">                destIndex++;</span><br><span class=\"line\">                state = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// We are done decoding Base-64 chars.  Let&#x27;s see if we ended</span></span><br><span class=\"line\">    <span class=\"comment\">//      on a byte boundary, and/or with erroneous trailing characters.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == kBase64PaddingChar) &#123;               <span class=\"comment\">// We got a pad char</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((state == <span class=\"number\">0</span>) || (state == <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// Invalid &#x27;=&#x27; in first or second position</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (srcLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// We run out of input but we still need another &#x27;=&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Otherwise, we are in state 3 and only need this &#x27;=&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// need another &#x27;=&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((ch = *srcBytes++) &amp;&amp; (srcLen-- &gt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!IsSpace(ch))</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch != kBase64PaddingChar) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// state = 1 or 2, check if all remain padding is space</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((ch = *srcBytes++) &amp;&amp; (srcLen-- &gt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!IsSpace(ch)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We ended by seeing the end of the string.</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requirePadding) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we require padding, then anything but state 0 is an error.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Make sure we have no partial bytes lying around.  Note that we do not</span></span><br><span class=\"line\">            <span class=\"comment\">// require trailing &#x27;=&#x27;, so states 2 and 3 are okay too.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// If then next piece of output was valid and got written to it means we got a</span></span><br><span class=\"line\">    <span class=\"comment\">// very carefully crafted input that appeared valid but contains some trailing</span></span><br><span class=\"line\">    <span class=\"comment\">// bits past the real length, so just toss the thing.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((destIndex &lt; destLen) &amp;&amp;</span><br><span class=\"line\">        (destBytes[destIndex] != <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> destIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"NSData-AES-h\"><a href=\"#NSData-AES-h\" class=\"headerlink\" title=\"NSData+AES.h\"></a>NSData+AES.h</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  NSData+AES.h</span></span><br><span class=\"line\"><span class=\"comment\">//  iOS_AES</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by FM-13 on 16/6/8.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 cong. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSData</span> (<span class=\"title\">AES</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128EncryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128DecryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"NSData-AES-m\"><a href=\"#NSData-AES-m\" class=\"headerlink\" title=\"NSData+AES.m\"></a>NSData+AES.m</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  NSData+AES.m</span></span><br><span class=\"line\"><span class=\"comment\">//  iOS_AES</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by FM-13 on 16/6/8.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 cong. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;NSData+AES.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;CommonCrypto/CommonCryptor.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSData</span> (<span class=\"title\">AES</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128EncryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> AES128operation:kCCEncrypt key:key iv:iv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128DecryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> AES128operation:kCCDecrypt key:key iv:iv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128operation:(CCOperation)operation key:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> keyPtr[kCCKeySizeAES128 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    bzero(keyPtr, <span class=\"keyword\">sizeof</span>(keyPtr));</span><br><span class=\"line\">    [key getCString:keyPtr maxLength:<span class=\"keyword\">sizeof</span>(keyPtr) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// IV</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ivPtr[kCCBlockSizeAES128 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    bzero(ivPtr, <span class=\"keyword\">sizeof</span>(ivPtr));</span><br><span class=\"line\">    [iv getCString:ivPtr maxLength:<span class=\"keyword\">sizeof</span>(ivPtr) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    size_t bufferSize = [<span class=\"keyword\">self</span> length] + kCCBlockSizeAES128;</span><br><span class=\"line\">    <span class=\"type\">void</span> *buffer = malloc(bufferSize);</span><br><span class=\"line\">    size_t numBytesEncrypted = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    CCCryptorStatus cryptorStatus = CCCrypt(operation, kCCAlgorithmAES128, kCCOptionPKCS7Padding,</span><br><span class=\"line\">                                            keyPtr, kCCKeySizeAES128,</span><br><span class=\"line\">                                            ivPtr,</span><br><span class=\"line\">                                            [<span class=\"keyword\">self</span> bytes], [<span class=\"keyword\">self</span> length],</span><br><span class=\"line\">                                            buffer, bufferSize,</span><br><span class=\"line\">                                            &amp;numBytesEncrypted);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cryptorStatus == kCCSuccess)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Success&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"built_in\">NSData</span> dataWithBytesNoCopy:buffer length:numBytesEncrypted];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    free(buffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *aesKey = @&quot;7854156156611111&quot;;</span><br><span class=\"line\">NSString *aesIV = @&quot;0000000000000000&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">NSData *data = [self dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">//加密</span><br><span class=\"line\">data = [data AES128EncryptWithKey:aesKey iv:aesIV];</span><br><span class=\"line\">data = [GTMBase64 encodeData:data];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSString *encodeStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近项目中考虑到用户账户数据的安全性问题，需要对用户账户相关信息进行加密解密。这里我们选择使用AES加解密，至于AES相比其他对称加密算法的优缺点就不再详述，当然加解密过程中还使用了一些其他的算法，比如混合MD5。这边文章主要记录下Objective-C、Java、JavaScript、PHP四种语言的AES/CBC/128/PKCS5Padding的加解密算法，下面直接上代码。</p>","more":"<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> key = <span class=\"string\">&#x27;7854156156611111&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//data 是准备加密的字符串,key是你的密钥</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">encryption</span>(<span class=\"params\">data, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iv = <span class=\"string\">&quot;0000000000000000&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clearEncoding = <span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherEncoding = <span class=\"string\">&#x27;base64&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherChunks = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipher = crypto.<span class=\"title function_\">createCipheriv</span>(<span class=\"string\">&#x27;aes-128-cbc&#x27;</span>, key, iv);</span><br><span class=\"line\">    cipher.<span class=\"title function_\">setAutoPadding</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(cipher.<span class=\"title function_\">update</span>(data, clearEncoding, cipherEncoding));</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(cipher.<span class=\"title function_\">final</span>(cipherEncoding));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipherChunks.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//data 是你的准备解密的字符串,key是你的密钥</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">decryption</span>(<span class=\"params\">data, key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> iv = <span class=\"string\">&quot;0000000000000000&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clearEncoding = <span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherEncoding = <span class=\"string\">&#x27;base64&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cipherChunks = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> decipher = crypto.<span class=\"title function_\">createDecipheriv</span>(<span class=\"string\">&#x27;aes-128-cbc&#x27;</span>, key, iv);</span><br><span class=\"line\">    decipher.<span class=\"title function_\">setAutoPadding</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(decipher.<span class=\"title function_\">update</span>(data, cipherEncoding, clearEncoding));</span><br><span class=\"line\">    cipherChunks.<span class=\"title function_\">push</span>(decipher.<span class=\"title function_\">final</span>(clearEncoding));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipherChunks.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">encryption</span>(data, key)) ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$privateKey</span> = <span class=\"string\">&quot;7854156156611111&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$iv</span> \t= <span class=\"string\">&quot;0000000000000000&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$data</span> \t= <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"variable\">$privateKey</span>.<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\"><span class=\"variable\">$encrypted</span> = <span class=\"title function_ invoke__\">mcrypt_encrypt</span>(MCRYPT_RIJNDAEL_128, <span class=\"variable\">$privateKey</span>, <span class=\"variable\">$data</span>, MCRYPT_MODE_CBC, <span class=\"variable\">$iv</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$encrypted</span>).<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"variable\">$encryptedData</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"string\">&quot;L7AswKt5/t1gND4ct22Odw==&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$decrypted</span> = <span class=\"title function_ invoke__\">mcrypt_decrypt</span>(MCRYPT_RIJNDAEL_128, <span class=\"variable\">$privateKey</span>, <span class=\"variable\">$encryptedData</span>, MCRYPT_MODE_CBC, <span class=\"variable\">$iv</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"variable\">$decrypted</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的PHP版本是7.0.22，需要引入依赖<code>sudo apt-get install php7-mcrypt</code></p>\n</blockquote>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.learn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Cipher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Encryptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encrypt</span><span class=\"params\">(String key, String initVector, String value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">IvParameterSpec</span> <span class=\"variable\">iv</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IvParameterSpec</span>(initVector.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">\t\t\t<span class=\"type\">SecretKeySpec</span> <span class=\"variable\">skeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(key.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>), <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/CBC/PKCS5PADDING&quot;</span>);</span><br><span class=\"line\">\t\t\tcipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] encrypted = cipher.doFinal(value.getBytes());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;encrypted string: &quot;</span> + Base64.getEncoder().encodeToString(encrypted));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Base64.getEncoder().encodeToString(encrypted);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tex.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">decrypt</span><span class=\"params\">(String key, String initVector, String encrypted)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">IvParameterSpec</span> <span class=\"variable\">iv</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IvParameterSpec</span>(initVector.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">\t\t\t<span class=\"type\">SecretKeySpec</span> <span class=\"variable\">skeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(key.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>), <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">Cipher</span> <span class=\"variable\">cipher</span> <span class=\"operator\">=</span> Cipher.getInstance(<span class=\"string\">&quot;AES/CBC/PKCS5PADDING&quot;</span>);</span><br><span class=\"line\">\t\t\tcipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">byte</span>[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(original);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tex.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;7854156156611111&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">initVector</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;0000000000000000&quot;</span>; <span class=\"comment\">// 16 bytes IV</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(decrypt(key, initVector, encrypt(key, initVector, <span class=\"string\">&quot;test&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>iOS客户端的加密解密相对复杂一些，使用Objective-C语言编写，一共5个文件。</p>\n<h4 id=\"GTMDefines-h\"><a href=\"#GTMDefines-h\" class=\"headerlink\" title=\"GTMDefines.h\"></a>GTMDefines.h</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// GTMDefines.h</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright 2008 Google Inc.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not</span></span><br><span class=\"line\"><span class=\"comment\">//  use this file except in compliance with the License.  You may obtain a copy</span></span><br><span class=\"line\"><span class=\"comment\">//  of the License at</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\">//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</span></span><br><span class=\"line\"><span class=\"comment\">//  License for the specific language governing permissions and limitations under</span></span><br><span class=\"line\"><span class=\"comment\">//  the License.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ============================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AvailabilityMacros.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Not all MAC_OS_X_VERSION_10_X macros defined in past SDKs</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> MAC_OS_X_VERSION_10_5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAC_OS_X_VERSION_10_5 1050</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> MAC_OS_X_VERSION_10_6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAC_OS_X_VERSION_10_6 1060</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// CPP symbols that can be overridden in a prefix to control how the toolbox</span></span><br><span class=\"line\"><span class=\"comment\">// is compiled.</span></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GTMHTTPFetcher will support logging by default but only hook its input</span></span><br><span class=\"line\"><span class=\"comment\">// stream support for logging when requested.  You can control the inclusion of</span></span><br><span class=\"line\"><span class=\"comment\">// the code by providing your own definitions for these w/in a prefix header.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_HTTPFETCHER_ENABLE_LOGGING</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_HTTPFETCHER_ENABLE_LOGGING 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// GTM_HTTPFETCHER_ENABLE_LOGGING</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// GTM_HTTPFETCHER_ENABLE_INPUTSTREAM_LOGGING</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// By setting the GTM_CONTAINERS_VALIDATION_FAILED_LOG and</span></span><br><span class=\"line\"><span class=\"comment\">// GTM_CONTAINERS_VALIDATION_FAILED_ASSERT macros you can control what happens</span></span><br><span class=\"line\"><span class=\"comment\">// when a validation fails. If you implement your own validators, you may want</span></span><br><span class=\"line\"><span class=\"comment\">// to control their internals using the same macros for consistency.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_CONTAINERS_VALIDATION_FAILED_ASSERT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_CONTAINERS_VALIDATION_FAILED_ASSERT 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Give ourselves a consistent way to do inlines.  Apple&#x27;s macros even use</span></span><br><span class=\"line\"><span class=\"comment\">// a few different actual definitions, so we&#x27;re based off of the foundation</span></span><br><span class=\"line\"><span class=\"comment\">// one.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined(GTM_INLINE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined (__GNUC__) &amp;&amp; (__GNUC__ == 4)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_INLINE static __inline__ __attribute__((always_inline))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_INLINE static __inline__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Give ourselves a consistent way of doing externs that links up nicely</span></span><br><span class=\"line\"><span class=\"comment\">// when mixing objc and objc++</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined (GTM_EXTERN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined __cplusplus</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_EXTERN extern <span class=\"string\">&quot;C&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_EXTERN extern</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Give ourselves a consistent way of exporting things if we have visibility</span></span><br><span class=\"line\"><span class=\"comment\">// set to hidden.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined (GTM_EXPORT)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_EXPORT __attribute__((visibility(<span class=\"string\">&quot;default&quot;</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _GTMDevLog &amp; _GTMDevAssert</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// _GTMDevLog &amp; _GTMDevAssert are meant to be a very lightweight shell for</span></span><br><span class=\"line\"><span class=\"comment\">// developer level errors.  This implementation simply macros to NSLog/NSAssert.</span></span><br><span class=\"line\"><span class=\"comment\">// It is not intended to be a general logging/reporting system.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Please see http://code.google.com/p/google-toolbox-for-mac/wiki/DevLogNAssert</span></span><br><span class=\"line\"><span class=\"comment\">// for a little more background on the usage of these macros.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    _GTMDevLog           log some error/problem in debug builds</span></span><br><span class=\"line\"><span class=\"comment\">//    _GTMDevAssert        assert if conditon isn&#x27;t met w/in a method/function</span></span><br><span class=\"line\"><span class=\"comment\">//                           in all builds.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// To replace this system, just provide different macro definitions in your</span></span><br><span class=\"line\"><span class=\"comment\">// prefix header.  Remember, any implementation you provide *must* be thread</span></span><br><span class=\"line\"><span class=\"comment\">// safe since this could be called by anything in what ever situtation it has</span></span><br><span class=\"line\"><span class=\"comment\">// been placed in.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We only define the simple macros if nothing else has defined this.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _GTMDevLog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevLog(...) NSLog(__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevLog(...) do &#123; &#125; while (0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// _GTMDevLog</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declared here so that it can easily be used for logging tracking if</span></span><br><span class=\"line\"><span class=\"comment\">// necessary. See GTMUnitTestDevLog.h for details.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@class</span> <span class=\"title\">NSString</span>;</span></span><br><span class=\"line\">GTM_EXTERN <span class=\"type\">void</span> _GTMUnitTestDevLog(<span class=\"built_in\">NSString</span> *format, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _GTMDevAssert</span></span><br><span class=\"line\"><span class=\"comment\">// we directly invoke the NSAssert handler so we can pass on the varargs</span></span><br><span class=\"line\"><span class=\"comment\">// (NSAssert doesn&#x27;t have a macro we can use that takes varargs)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !defined(NS_BLOCK_ASSERTIONS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevAssert(condition, ...)                                       \\</span></span><br><span class=\"line\"><span class=\"meta\">do &#123;                                                                      \\</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">if</span> (!(condition)) &#123;                                                     \\</span></span><br><span class=\"line\"><span class=\"meta\">[[NSAssertionHandler currentHandler]                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">handleFailureInFunction:[NSString stringWithUTF8String:__PRETTY_FUNCTION__] \\</span></span><br><span class=\"line\"><span class=\"meta\">file:[NSString stringWithUTF8String:__FILE__]  \\</span></span><br><span class=\"line\"><span class=\"meta\">lineNumber:__LINE__                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">description:__VA_ARGS__];                             \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;                                                                       \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125; while(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span> <span class=\"comment\">// !defined(NS_BLOCK_ASSERTIONS)</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMDevAssert(condition, ...) do &#123; &#125; while (0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// !defined(NS_BLOCK_ASSERTIONS)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// _GTMDevAssert</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _GTMCompileAssert</span></span><br><span class=\"line\"><span class=\"comment\">// _GTMCompileAssert is an assert that is meant to fire at compile time if you</span></span><br><span class=\"line\"><span class=\"comment\">// want to check things at compile instead of runtime. For example if you</span></span><br><span class=\"line\"><span class=\"comment\">// want to check that a wchar is 4 bytes instead of 2 you would use</span></span><br><span class=\"line\"><span class=\"comment\">// _GTMCompileAssert(sizeof(wchar_t) == 4, wchar_t_is_4_bytes_on_OS_X)</span></span><br><span class=\"line\"><span class=\"comment\">// Note that the second &quot;arg&quot; is not in quotes, and must be a valid processor</span></span><br><span class=\"line\"><span class=\"comment\">// symbol in it&#x27;s own right (no spaces, punctuation etc).</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Wrapping this in an #ifndef allows external groups to define their own</span></span><br><span class=\"line\"><span class=\"comment\">// compile time assert scheme.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _GTMCompileAssert</span></span><br><span class=\"line\"><span class=\"comment\">// We got this technique from here:</span></span><br><span class=\"line\"><span class=\"comment\">// http://unixjunkie.blogspot.com/2007/10/better-compile-time-asserts_29.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMCompileAssertSymbolInner(<span class=\"keyword\">line</span>, msg) _GTMCOMPILEASSERT ## <span class=\"keyword\">line</span> ## __ ## msg</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMCompileAssertSymbol(<span class=\"keyword\">line</span>, msg) _GTMCompileAssertSymbolInner(<span class=\"keyword\">line</span>, msg)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GTMCompileAssert(test, msg) \\</span></span><br><span class=\"line\"><span class=\"meta\">typedef char _GTMCompileAssertSymbol(__LINE__, msg) [ ((test) ? 1 : -1) ]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// _GTMCompileAssert</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Macro to allow fast enumeration when building for 10.5 or later, and</span></span><br><span class=\"line\"><span class=\"comment\">// reliance on NSEnumerator for 10.4.  Remember, NSDictionary w/ FastEnumeration</span></span><br><span class=\"line\"><span class=\"comment\">// does keys, so pick the right thing, nothing is done on the FastEnumeration</span></span><br><span class=\"line\"><span class=\"comment\">// side to be sure you&#x27;re getting what you wanted.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_FOREACH_OBJECT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(TARGET_OS_IPHONE) || (MAC_OS_X_VERSION_MIN_REQUIRED &gt;= MAC_OS_X_VERSION_10_5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_OBJECT(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (element in collection)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_KEY(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (element in collection)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_OBJECT(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (NSEnumerator * _ ## element ## _enum = [collection objectEnumerator]; \\</span></span><br><span class=\"line\"><span class=\"meta\">(element = [_ ## element ## _enum nextObject]) != nil; )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_FOREACH_KEY(element, collection) \\</span></span><br><span class=\"line\"><span class=\"meta\">for (NSEnumerator * _ ## element ## _enum = [collection keyEnumerator]; \\</span></span><br><span class=\"line\"><span class=\"meta\">(element = [_ ## element ## _enum nextObject]) != nil; )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ============================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// CPP symbols defined based on the project settings so the GTM code has</span></span><br><span class=\"line\"><span class=\"comment\">// simple things to test against w/o scattering the knowledge of project</span></span><br><span class=\"line\"><span class=\"comment\">// setting through all the code.</span></span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Provide a single constant CPP symbol that all of GTM uses for ifdefing</span></span><br><span class=\"line\"><span class=\"comment\">// iPhone code.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;TargetConditionals.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> TARGET_OS_IPHONE <span class=\"comment\">// iPhone SDK</span></span></span><br><span class=\"line\"><span class=\"comment\">// For iPhone specific stuff</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_IPHONE_SDK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> TARGET_IPHONE_SIMULATOR</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_IPHONE_SIMULATOR 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_IPHONE_DEVICE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span>  <span class=\"comment\">// TARGET_IPHONE_SIMULATOR</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"comment\">// For MacOS specific stuff</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_MACOS_SDK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Provide a symbol to include/exclude extra code for GC support.  (This mainly</span></span><br><span class=\"line\"><span class=\"comment\">// just controls the inclusion of finalize methods).</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> GTM_SUPPORT_GC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> GTM_IPHONE_SDK</span></span><br><span class=\"line\"><span class=\"comment\">// iPhone never needs GC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_SUPPORT_GC 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"comment\">// We can&#x27;t find a symbol to tell if GC is supported/required, so best we</span></span><br><span class=\"line\"><span class=\"comment\">// do on Mac targets is include it if we&#x27;re on 10.5 or later.</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> MAC_OS_X_VERSION_MAX_ALLOWED &lt;= MAC_OS_X_VERSION_10_4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_SUPPORT_GC 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTM_SUPPORT_GC 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// To simplify support for 64bit (and Leopard in general), we provide the type</span></span><br><span class=\"line\"><span class=\"comment\">// defines for non Leopard SDKs</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> MAC_OS_X_VERSION_MAX_ALLOWED &lt;= MAC_OS_X_VERSION_10_4</span></span><br><span class=\"line\"><span class=\"comment\">// NSInteger/NSUInteger and Max/Mins</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> NSINTEGER_DEFINED</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __LP64__ || NS_BUILD_32_LIKE_64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"built_in\">NSInteger</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"built_in\">NSUInteger</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> <span class=\"built_in\">NSInteger</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"built_in\">NSUInteger</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSIntegerMax    LONG_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSIntegerMin    LONG_MIN</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSUIntegerMax   ULONG_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NSINTEGER_DEFINED 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span>  <span class=\"comment\">// NSINTEGER_DEFINED</span></span></span><br><span class=\"line\"><span class=\"comment\">// CGFloat</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> CGFLOAT_DEFINED</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(__LP64__) &amp;&amp; __LP64__</span></span><br><span class=\"line\"><span class=\"comment\">// This really is an untested path (64bit on Tiger?)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> <span class=\"built_in\">CGFloat</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MIN DBL_MIN</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MAX DBL_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_IS_DOUBLE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span> <span class=\"comment\">/* !defined(__LP64__) || !__LP64__ */</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">float</span> <span class=\"built_in\">CGFloat</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MIN FLT_MIN</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_MAX FLT_MAX</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_IS_DOUBLE 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* !defined(__LP64__) || !__LP64__ */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CGFLOAT_DEFINED 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// CGFLOAT_DEFINED</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span>  <span class=\"comment\">// MAC_OS_X_VERSION_MAX_ALLOWED &lt;= MAC_OS_X_VERSION_10_4</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"GTMBase64-h\"><a href=\"#GTMBase64-h\" class=\"headerlink\" title=\"GTMBase64.h\"></a>GTMBase64.h</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  GTMBase64.h</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright 2006-2008 Google Inc.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not</span></span><br><span class=\"line\"><span class=\"comment\">//  use this file except in compliance with the License.  You may obtain a copy</span></span><br><span class=\"line\"><span class=\"comment\">//  of the License at</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\">//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</span></span><br><span class=\"line\"><span class=\"comment\">//  License for the specific language governing permissions and limitations under</span></span><br><span class=\"line\"><span class=\"comment\">//  the License.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GTMDefines.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GTMBase64</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Helper for handling Base64 and WebSafeBase64 encodings</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// The webSafe methods use different character set and also the results aren&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">/// always padded to a multiple of 4 characters.  This is done so the resulting</span></span><br><span class=\"line\"><span class=\"comment\">/// data can be used in urls and url query arguments without needing any</span></span><br><span class=\"line\"><span class=\"comment\">/// encoding.  You must use the webSafe* methods together, the data does not</span></span><br><span class=\"line\"><span class=\"comment\">/// interop with the RFC methods.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GTMBase64</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Standard Base64 (RFC) handling</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// encodeData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// decodeData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 decodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// encodeBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// decodeBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 decodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByEncodingData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByEncodingBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 encodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// decodeString:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Base64 decodes contents of the NSString.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeString:(<span class=\"built_in\">NSString</span> *)string;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Modified Base64 encoding so the results can go onto urls.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The changes are in the characters generated and also allows the result to</span></span><br><span class=\"line\"><span class=\"comment\">// not be padded to a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">// Must use the matching call to encode/decode, won&#x27;t interop with the</span></span><br><span class=\"line\"><span class=\"comment\">// RFC versions.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeEncodeData:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                      padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeDecodeData:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 decodes contents of the NSData object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeEncodeBytes:length:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                       length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                       padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeDecodeBytes:length:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 decodes the data pointed at by |bytes|.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByWebSafeEncodingData:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes contents of the NSData object.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                                  padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stringByWebSafeEncodingBytes:length:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 encodes the data pointed at by |bytes|.  If |padded| is YES</span></span><br><span class=\"line\"><span class=\"comment\">/// then padding characters are added so the result length is a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSString with the encoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                                   length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                                   padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webSafeDecodeString:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// WebSafe Base64 decodes contents of the NSString.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">///   A new autoreleased NSData with the decoded payload.  nil for any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeString:(<span class=\"built_in\">NSString</span> *)string;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"GTMBase64-m\"><a href=\"#GTMBase64-m\" class=\"headerlink\" title=\"GTMBase64.m\"></a>GTMBase64.m</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  GTMBase64.m</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright 2006-2008 Google Inc.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not</span></span><br><span class=\"line\"><span class=\"comment\">//  use this file except in compliance with the License.  You may obtain a copy</span></span><br><span class=\"line\"><span class=\"comment\">//  of the License at</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">//  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\">//  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the</span></span><br><span class=\"line\"><span class=\"comment\">//  License for the specific language governing permissions and limitations under</span></span><br><span class=\"line\"><span class=\"comment\">//  the License.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GTMBase64.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GTMDefines.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> *kBase64EncodeChars = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> *kWebSafeBase64EncodeChars = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kBase64PaddingChar = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kBase64InvalidChar = <span class=\"number\">99</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kBase64DecodeChars[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This array was generated by the following code:</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;sys/time.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;stdlib.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;string.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// main()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   static const char Base64[] =</span></span><br><span class=\"line\">    <span class=\"comment\">//     &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//   char *pos;</span></span><br><span class=\"line\">    <span class=\"comment\">//   int idx, i, j;</span></span><br><span class=\"line\">    <span class=\"comment\">//   printf(&quot;    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   for (i = 0; i &lt; 255; i += 8) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (j = i; j &lt; i + 8; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//       pos = strchr(Base64, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//       if ((pos == NULL) || (j == 0))</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = 99;</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = pos - Base64;</span></span><br><span class=\"line\">    <span class=\"comment\">//       if (idx == 99)</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d,     &quot;, idx);</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d/*%c*/,&quot;, idx, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;\\n    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">62</span><span class=\"comment\">/*+*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">63</span><span class=\"comment\">/*/ */</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span><span class=\"comment\">/*0*/</span>, <span class=\"number\">53</span><span class=\"comment\">/*1*/</span>, <span class=\"number\">54</span><span class=\"comment\">/*2*/</span>, <span class=\"number\">55</span><span class=\"comment\">/*3*/</span>, <span class=\"number\">56</span><span class=\"comment\">/*4*/</span>, <span class=\"number\">57</span><span class=\"comment\">/*5*/</span>, <span class=\"number\">58</span><span class=\"comment\">/*6*/</span>, <span class=\"number\">59</span><span class=\"comment\">/*7*/</span>,</span><br><span class=\"line\">    <span class=\"number\">60</span><span class=\"comment\">/*8*/</span>, <span class=\"number\">61</span><span class=\"comment\">/*9*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,       <span class=\"number\">0</span><span class=\"comment\">/*A*/</span>,  <span class=\"number\">1</span><span class=\"comment\">/*B*/</span>,  <span class=\"number\">2</span><span class=\"comment\">/*C*/</span>,  <span class=\"number\">3</span><span class=\"comment\">/*D*/</span>,  <span class=\"number\">4</span><span class=\"comment\">/*E*/</span>,  <span class=\"number\">5</span><span class=\"comment\">/*F*/</span>,  <span class=\"number\">6</span><span class=\"comment\">/*G*/</span>,</span><br><span class=\"line\">    <span class=\"number\">7</span><span class=\"comment\">/*H*/</span>,  <span class=\"number\">8</span><span class=\"comment\">/*I*/</span>,  <span class=\"number\">9</span><span class=\"comment\">/*J*/</span>, <span class=\"number\">10</span><span class=\"comment\">/*K*/</span>, <span class=\"number\">11</span><span class=\"comment\">/*L*/</span>, <span class=\"number\">12</span><span class=\"comment\">/*M*/</span>, <span class=\"number\">13</span><span class=\"comment\">/*N*/</span>, <span class=\"number\">14</span><span class=\"comment\">/*O*/</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span><span class=\"comment\">/*P*/</span>, <span class=\"number\">16</span><span class=\"comment\">/*Q*/</span>, <span class=\"number\">17</span><span class=\"comment\">/*R*/</span>, <span class=\"number\">18</span><span class=\"comment\">/*S*/</span>, <span class=\"number\">19</span><span class=\"comment\">/*T*/</span>, <span class=\"number\">20</span><span class=\"comment\">/*U*/</span>, <span class=\"number\">21</span><span class=\"comment\">/*V*/</span>, <span class=\"number\">22</span><span class=\"comment\">/*W*/</span>,</span><br><span class=\"line\">    <span class=\"number\">23</span><span class=\"comment\">/*X*/</span>, <span class=\"number\">24</span><span class=\"comment\">/*Y*/</span>, <span class=\"number\">25</span><span class=\"comment\">/*Z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">26</span><span class=\"comment\">/*a*/</span>, <span class=\"number\">27</span><span class=\"comment\">/*b*/</span>, <span class=\"number\">28</span><span class=\"comment\">/*c*/</span>, <span class=\"number\">29</span><span class=\"comment\">/*d*/</span>, <span class=\"number\">30</span><span class=\"comment\">/*e*/</span>, <span class=\"number\">31</span><span class=\"comment\">/*f*/</span>, <span class=\"number\">32</span><span class=\"comment\">/*g*/</span>,</span><br><span class=\"line\">    <span class=\"number\">33</span><span class=\"comment\">/*h*/</span>, <span class=\"number\">34</span><span class=\"comment\">/*i*/</span>, <span class=\"number\">35</span><span class=\"comment\">/*j*/</span>, <span class=\"number\">36</span><span class=\"comment\">/*k*/</span>, <span class=\"number\">37</span><span class=\"comment\">/*l*/</span>, <span class=\"number\">38</span><span class=\"comment\">/*m*/</span>, <span class=\"number\">39</span><span class=\"comment\">/*n*/</span>, <span class=\"number\">40</span><span class=\"comment\">/*o*/</span>,</span><br><span class=\"line\">    <span class=\"number\">41</span><span class=\"comment\">/*p*/</span>, <span class=\"number\">42</span><span class=\"comment\">/*q*/</span>, <span class=\"number\">43</span><span class=\"comment\">/*r*/</span>, <span class=\"number\">44</span><span class=\"comment\">/*s*/</span>, <span class=\"number\">45</span><span class=\"comment\">/*t*/</span>, <span class=\"number\">46</span><span class=\"comment\">/*u*/</span>, <span class=\"number\">47</span><span class=\"comment\">/*v*/</span>, <span class=\"number\">48</span><span class=\"comment\">/*w*/</span>,</span><br><span class=\"line\">    <span class=\"number\">49</span><span class=\"comment\">/*x*/</span>, <span class=\"number\">50</span><span class=\"comment\">/*y*/</span>, <span class=\"number\">51</span><span class=\"comment\">/*z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"type\">char</span> kWebSafeBase64DecodeChars[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This array was generated by the following code:</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;sys/time.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;stdlib.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// #include &lt;string.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// main()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   static const char Base64[] =</span></span><br><span class=\"line\">    <span class=\"comment\">//     &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//   char *pos;</span></span><br><span class=\"line\">    <span class=\"comment\">//   int idx, i, j;</span></span><br><span class=\"line\">    <span class=\"comment\">//   printf(&quot;    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   for (i = 0; i &lt; 255; i += 8) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (j = i; j &lt; i + 8; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//       pos = strchr(Base64, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//       if ((pos == NULL) || (j == 0))</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = 99;</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         idx = pos - Base64;</span></span><br><span class=\"line\">    <span class=\"comment\">//       if (idx == 99)</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d,     &quot;, idx);</span></span><br><span class=\"line\">    <span class=\"comment\">//       else</span></span><br><span class=\"line\">    <span class=\"comment\">//         printf(&quot; %2d/*%c*/,&quot;, idx, j);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;\\n    &quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">62</span><span class=\"comment\">/*-*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span><span class=\"comment\">/*0*/</span>, <span class=\"number\">53</span><span class=\"comment\">/*1*/</span>, <span class=\"number\">54</span><span class=\"comment\">/*2*/</span>, <span class=\"number\">55</span><span class=\"comment\">/*3*/</span>, <span class=\"number\">56</span><span class=\"comment\">/*4*/</span>, <span class=\"number\">57</span><span class=\"comment\">/*5*/</span>, <span class=\"number\">58</span><span class=\"comment\">/*6*/</span>, <span class=\"number\">59</span><span class=\"comment\">/*7*/</span>,</span><br><span class=\"line\">    <span class=\"number\">60</span><span class=\"comment\">/*8*/</span>, <span class=\"number\">61</span><span class=\"comment\">/*9*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,       <span class=\"number\">0</span><span class=\"comment\">/*A*/</span>,  <span class=\"number\">1</span><span class=\"comment\">/*B*/</span>,  <span class=\"number\">2</span><span class=\"comment\">/*C*/</span>,  <span class=\"number\">3</span><span class=\"comment\">/*D*/</span>,  <span class=\"number\">4</span><span class=\"comment\">/*E*/</span>,  <span class=\"number\">5</span><span class=\"comment\">/*F*/</span>,  <span class=\"number\">6</span><span class=\"comment\">/*G*/</span>,</span><br><span class=\"line\">    <span class=\"number\">7</span><span class=\"comment\">/*H*/</span>,  <span class=\"number\">8</span><span class=\"comment\">/*I*/</span>,  <span class=\"number\">9</span><span class=\"comment\">/*J*/</span>, <span class=\"number\">10</span><span class=\"comment\">/*K*/</span>, <span class=\"number\">11</span><span class=\"comment\">/*L*/</span>, <span class=\"number\">12</span><span class=\"comment\">/*M*/</span>, <span class=\"number\">13</span><span class=\"comment\">/*N*/</span>, <span class=\"number\">14</span><span class=\"comment\">/*O*/</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span><span class=\"comment\">/*P*/</span>, <span class=\"number\">16</span><span class=\"comment\">/*Q*/</span>, <span class=\"number\">17</span><span class=\"comment\">/*R*/</span>, <span class=\"number\">18</span><span class=\"comment\">/*S*/</span>, <span class=\"number\">19</span><span class=\"comment\">/*T*/</span>, <span class=\"number\">20</span><span class=\"comment\">/*U*/</span>, <span class=\"number\">21</span><span class=\"comment\">/*V*/</span>, <span class=\"number\">22</span><span class=\"comment\">/*W*/</span>,</span><br><span class=\"line\">    <span class=\"number\">23</span><span class=\"comment\">/*X*/</span>, <span class=\"number\">24</span><span class=\"comment\">/*Y*/</span>, <span class=\"number\">25</span><span class=\"comment\">/*Z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">63</span><span class=\"comment\">/*_*/</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">26</span><span class=\"comment\">/*a*/</span>, <span class=\"number\">27</span><span class=\"comment\">/*b*/</span>, <span class=\"number\">28</span><span class=\"comment\">/*c*/</span>, <span class=\"number\">29</span><span class=\"comment\">/*d*/</span>, <span class=\"number\">30</span><span class=\"comment\">/*e*/</span>, <span class=\"number\">31</span><span class=\"comment\">/*f*/</span>, <span class=\"number\">32</span><span class=\"comment\">/*g*/</span>,</span><br><span class=\"line\">    <span class=\"number\">33</span><span class=\"comment\">/*h*/</span>, <span class=\"number\">34</span><span class=\"comment\">/*i*/</span>, <span class=\"number\">35</span><span class=\"comment\">/*j*/</span>, <span class=\"number\">36</span><span class=\"comment\">/*k*/</span>, <span class=\"number\">37</span><span class=\"comment\">/*l*/</span>, <span class=\"number\">38</span><span class=\"comment\">/*m*/</span>, <span class=\"number\">39</span><span class=\"comment\">/*n*/</span>, <span class=\"number\">40</span><span class=\"comment\">/*o*/</span>,</span><br><span class=\"line\">    <span class=\"number\">41</span><span class=\"comment\">/*p*/</span>, <span class=\"number\">42</span><span class=\"comment\">/*q*/</span>, <span class=\"number\">43</span><span class=\"comment\">/*r*/</span>, <span class=\"number\">44</span><span class=\"comment\">/*s*/</span>, <span class=\"number\">45</span><span class=\"comment\">/*t*/</span>, <span class=\"number\">46</span><span class=\"comment\">/*u*/</span>, <span class=\"number\">47</span><span class=\"comment\">/*v*/</span>, <span class=\"number\">48</span><span class=\"comment\">/*w*/</span>,</span><br><span class=\"line\">    <span class=\"number\">49</span><span class=\"comment\">/*x*/</span>, <span class=\"number\">50</span><span class=\"comment\">/*y*/</span>, <span class=\"number\">51</span><span class=\"comment\">/*z*/</span>, <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,</span><br><span class=\"line\">    <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span>,      <span class=\"number\">99</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tests a character to see if it&#x27;s a whitespace character.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   YES if the character is a whitespace character.</span></span><br><span class=\"line\"><span class=\"comment\">//   NO if the character is not a whitespace character.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">GTM_INLINE <span class=\"type\">BOOL</span> IsSpace(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> c) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// we use our own mapping here because we don&#x27;t want anything w/ locale</span></span><br><span class=\"line\">    <span class=\"comment\">// support.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">BOOL</span> kSpaces[<span class=\"number\">256</span>] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,  <span class=\"comment\">// 0-9</span></span><br><span class=\"line\">        <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 10-19</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 20-29</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 30-39</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 40-49</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 50-59</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 60-69</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 70-79</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 80-89</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 90-99</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 100-109</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 110-119</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 120-129</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 130-139</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 140-149</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 150-159</span></span><br><span class=\"line\">        <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 160-169</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 170-179</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 180-189</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 190-199</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 200-209</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 210-219</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 220-229</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 230-239</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,  <span class=\"comment\">// 240-249</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,              <span class=\"comment\">// 250-255</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kSpaces[c];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Calculate how long the data will be once it&#x27;s base64 encoded.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   The guessed encoded length for a source length</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">GTM_INLINE <span class=\"built_in\">NSUInteger</span> CalcEncodedLength(<span class=\"built_in\">NSUInteger</span> srcLen, <span class=\"type\">BOOL</span> padded) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> intermediate_result = <span class=\"number\">8</span> * srcLen + <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> len = intermediate_result / <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (padded) &#123;</span><br><span class=\"line\">        len = ((len + <span class=\"number\">3</span>) / <span class=\"number\">4</span>) * <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tries to calculate how long the data will be once it&#x27;s base64 decoded.</span></span><br><span class=\"line\"><span class=\"comment\">// Unlike the above, this is always an upperbound, since the source data</span></span><br><span class=\"line\"><span class=\"comment\">// could have spaces and might end with the padding characters on them.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   The guessed decoded length for a source length</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">GTM_INLINE <span class=\"built_in\">NSUInteger</span> GuessDecodedLength(<span class=\"built_in\">NSUInteger</span> srcLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (srcLen + <span class=\"number\">3</span>) / <span class=\"number\">4</span> * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GTMBase64</span> (<span class=\"title\">PrivateMethods</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">               padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span>*)charset</span><br><span class=\"line\">       requirePadding:(<span class=\"type\">BOOL</span>)requirePadding;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">                 padded:(<span class=\"type\">BOOL</span>)padded;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">         requirePadding:(<span class=\"type\">BOOL</span>)requirePadding;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GTMBase64</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Standard Base64 (RFC) handling</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kBase64EncodeChars</span><br><span class=\"line\">                     padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)encodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kBase64EncodeChars</span><br><span class=\"line\">                     padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                                  length:[data length]</span><br><span class=\"line\">                                 charset:kBase64EncodeChars</span><br><span class=\"line\">                                  padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                                  length:length</span><br><span class=\"line\">                                 charset:kBase64EncodeChars</span><br><span class=\"line\">                                  padded:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)decodeString:(<span class=\"built_in\">NSString</span> *)string &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *data = [string dataUsingEncoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        result = [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                           length:[data length]</span><br><span class=\"line\">                          charset:kBase64DecodeChars</span><br><span class=\"line\">                   requirePadding:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Modified Base64 encoding so the results can go onto urls.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The changes are in the characters generated and also the result isn&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">// padded to a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">// Must use the matching call to encode/decode, won&#x27;t interop with the</span></span><br><span class=\"line\"><span class=\"comment\">// RFC versions.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                      padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                     padded:padded];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                     length:[data length]</span><br><span class=\"line\">                    charset:kWebSafeBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeEncodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                       length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                       padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                     padded:padded];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes length:(<span class=\"built_in\">NSUInteger</span>)length &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> baseDecode:bytes</span><br><span class=\"line\">                     length:length</span><br><span class=\"line\">                    charset:kWebSafeBase64DecodeChars</span><br><span class=\"line\">             requirePadding:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingData:(<span class=\"built_in\">NSData</span> *)data</span><br><span class=\"line\">                                  padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:[data bytes]</span><br><span class=\"line\">                                  length:[data length]</span><br><span class=\"line\">                                 charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                                  padded:padded];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSString</span> *)stringByWebSafeEncodingBytes:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">                                   length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">                                   padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *converted = [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                                  length:length</span><br><span class=\"line\">                                 charset:kWebSafeBase64EncodeChars</span><br><span class=\"line\">                                  padded:padded];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (converted) &#123;</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSString</span> alloc] initWithData:converted</span><br><span class=\"line\">                                        encoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)webSafeDecodeString:(<span class=\"built_in\">NSString</span> *)string &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span> *data = [string dataUsingEncoding:<span class=\"built_in\">NSASCIIStringEncoding</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">        result = [<span class=\"keyword\">self</span> baseDecode:[data bytes]</span><br><span class=\"line\">                           length:[data length]</span><br><span class=\"line\">                          charset:kWebSafeBase64DecodeChars</span><br><span class=\"line\">                   requirePadding:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GTMBase64</span> (<span class=\"title\">PrivateMethods</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseEncode:length:charset:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Does the common lifting of creating the dest NSData.  it creates &amp; sizes the</span></span><br><span class=\"line\"><span class=\"comment\">// data for the results.  |charset| is the characters to use for the encoding</span></span><br><span class=\"line\"><span class=\"comment\">// of the data.  |padding| controls if the encoded data should be padded to a</span></span><br><span class=\"line\"><span class=\"comment\">// multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   an autorelease NSData with the encoded data, nil if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">               padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"comment\">// how big could it be?</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> maxLength = CalcEncodedLength(length, padded);</span><br><span class=\"line\">    <span class=\"comment\">// make space</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableData</span> *result = [<span class=\"built_in\">NSMutableData</span> data];</span><br><span class=\"line\">    [result setLength:maxLength];</span><br><span class=\"line\">    <span class=\"comment\">// do it</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> finalLength = [<span class=\"keyword\">self</span> baseEncode:bytes</span><br><span class=\"line\">                                       srcLen:length</span><br><span class=\"line\">                                    destBytes:[result mutableBytes]</span><br><span class=\"line\">                                      destLen:[result length]</span><br><span class=\"line\">                                      charset:charset</span><br><span class=\"line\">                                       padded:padded];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finalLength) &#123;</span><br><span class=\"line\">        _GTMDevAssert(finalLength == maxLength, <span class=\"string\">@&quot;how did we calc the length wrong?&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// shouldn&#x27;t happen, this means we ran out of space</span></span><br><span class=\"line\">        result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseDecode:length:charset:requirePadding:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Does the common lifting of creating the dest NSData.  it creates &amp; sizes the</span></span><br><span class=\"line\"><span class=\"comment\">// data for the results.  |charset| is the characters to use for the decoding</span></span><br><span class=\"line\"><span class=\"comment\">// of the data.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   an autorelease NSData with the decoded data, nil if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSData</span> *)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">void</span> *)bytes</span><br><span class=\"line\">               length:(<span class=\"built_in\">NSUInteger</span>)length</span><br><span class=\"line\">              charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">       requirePadding:(<span class=\"type\">BOOL</span>)requirePadding &#123;</span><br><span class=\"line\">    <span class=\"comment\">// could try to calculate what it will end up as</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> maxLength = GuessDecodedLength(length);</span><br><span class=\"line\">    <span class=\"comment\">// make space</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableData</span> *result = [<span class=\"built_in\">NSMutableData</span> data];</span><br><span class=\"line\">    [result setLength:maxLength];</span><br><span class=\"line\">    <span class=\"comment\">// do it</span></span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> finalLength = [<span class=\"keyword\">self</span> baseDecode:bytes</span><br><span class=\"line\">                                       srcLen:length</span><br><span class=\"line\">                                    destBytes:[result mutableBytes]</span><br><span class=\"line\">                                      destLen:[result length]</span><br><span class=\"line\">                                      charset:charset</span><br><span class=\"line\">                               requirePadding:requirePadding];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finalLength) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (finalLength != maxLength) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// resize down to how big it was</span></span><br><span class=\"line\">            [result setLength:finalLength];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// either an error in the args, or we ran out of space</span></span><br><span class=\"line\">        result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseEncode:srcLen:destBytes:destLen:charset:padded:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Encodes the buffer into the larger.  returns the length of the encoded</span></span><br><span class=\"line\"><span class=\"comment\">// data, or zero for an error.</span></span><br><span class=\"line\"><span class=\"comment\">// |charset| is the characters to use for the encoding</span></span><br><span class=\"line\"><span class=\"comment\">// |padded| tells if the result should be padded to a multiple of 4.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   the length of the encoded data.  zero if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseEncode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">                 padded:(<span class=\"type\">BOOL</span>)padded &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!srcLen || !destLen || !srcBytes || !destBytes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> *curDest = destBytes;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *curSrc = (<span class=\"keyword\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)(srcBytes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Three bytes of data encodes to four characters of cyphertext.</span></span><br><span class=\"line\">    <span class=\"comment\">// So we can pump through three-byte chunks atomically.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (srcLen &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// space?</span></span><br><span class=\"line\">        _GTMDevAssert(destLen &gt;= <span class=\"number\">4</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">        curDest[<span class=\"number\">0</span>] = charset[curSrc[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">        curDest[<span class=\"number\">1</span>] = charset[((curSrc[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">4</span>) + (curSrc[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">        curDest[<span class=\"number\">2</span>] = charset[((curSrc[<span class=\"number\">1</span>] &amp; <span class=\"number\">0x0f</span>) &lt;&lt; <span class=\"number\">2</span>) + (curSrc[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">        curDest[<span class=\"number\">3</span>] = charset[curSrc[<span class=\"number\">2</span>] &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        curDest += <span class=\"number\">4</span>;</span><br><span class=\"line\">        curSrc += <span class=\"number\">3</span>;</span><br><span class=\"line\">        srcLen -= <span class=\"number\">3</span>;</span><br><span class=\"line\">        destLen -= <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// now deal with the tail (&lt;=2 bytes)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (srcLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">// Nothing left; nothing more to do.</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\">// One byte left: this encodes to two characters, and (optionally)</span></span><br><span class=\"line\">            <span class=\"comment\">// two pad characters to round out the four-character cypherblock.</span></span><br><span class=\"line\">            _GTMDevAssert(destLen &gt;= <span class=\"number\">2</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">            curDest[<span class=\"number\">0</span>] = charset[curSrc[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">            curDest[<span class=\"number\">1</span>] = charset[(curSrc[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">4</span>];</span><br><span class=\"line\">            curDest += <span class=\"number\">2</span>;</span><br><span class=\"line\">            destLen -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (padded) &#123;</span><br><span class=\"line\">                _GTMDevAssert(destLen &gt;= <span class=\"number\">2</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">                curDest[<span class=\"number\">0</span>] = kBase64PaddingChar;</span><br><span class=\"line\">                curDest[<span class=\"number\">1</span>] = kBase64PaddingChar;</span><br><span class=\"line\">                curDest += <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\">// Two bytes left: this encodes to three characters, and (optionally)</span></span><br><span class=\"line\">            <span class=\"comment\">// one pad character to round out the four-character cypherblock.</span></span><br><span class=\"line\">            _GTMDevAssert(destLen &gt;= <span class=\"number\">3</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">            curDest[<span class=\"number\">0</span>] = charset[curSrc[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">            curDest[<span class=\"number\">1</span>] = charset[((curSrc[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">4</span>) + (curSrc[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">            curDest[<span class=\"number\">2</span>] = charset[(curSrc[<span class=\"number\">1</span>] &amp; <span class=\"number\">0x0f</span>) &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">            curDest += <span class=\"number\">3</span>;</span><br><span class=\"line\">            destLen -= <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (padded) &#123;</span><br><span class=\"line\">                _GTMDevAssert(destLen &gt;= <span class=\"number\">1</span>, <span class=\"string\">@&quot;our calc for encoded length was wrong&quot;</span>);</span><br><span class=\"line\">                curDest[<span class=\"number\">0</span>] = kBase64PaddingChar;</span><br><span class=\"line\">                curDest += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return the length</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (curDest - destBytes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// baseDecode:srcLen:destBytes:destLen:charset:requirePadding:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Decodes the buffer into the larger.  returns the length of the decoded</span></span><br><span class=\"line\"><span class=\"comment\">// data, or zero for an error.</span></span><br><span class=\"line\"><span class=\"comment\">// |charset| is the character decoding buffer to use</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">//   the length of the encoded data.  zero if any error.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">+(<span class=\"built_in\">NSUInteger</span>)baseDecode:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)srcBytes</span><br><span class=\"line\">                 srcLen:(<span class=\"built_in\">NSUInteger</span>)srcLen</span><br><span class=\"line\">              destBytes:(<span class=\"type\">char</span> *)destBytes</span><br><span class=\"line\">                destLen:(<span class=\"built_in\">NSUInteger</span>)destLen</span><br><span class=\"line\">                charset:(<span class=\"keyword\">const</span> <span class=\"type\">char</span> *)charset</span><br><span class=\"line\">         requirePadding:(<span class=\"type\">BOOL</span>)requirePadding &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!srcLen || !destLen || !srcBytes || !destBytes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> decode;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> destIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (srcLen-- &amp;&amp; (ch = *srcBytes++) != <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IsSpace(ch))  <span class=\"comment\">// Skip whitespace</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == kBase64PaddingChar)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        decode = charset[(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)ch];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (decode == kBase64InvalidChar)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Four cyphertext characters decode to three bytes.</span></span><br><span class=\"line\">        <span class=\"comment\">// Therefore we can be in one of four states.</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re at the beginning of a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the high six bits of the first byte of the</span></span><br><span class=\"line\">                <span class=\"comment\">// plaintext block.</span></span><br><span class=\"line\">                _GTMDevAssert(destIndex &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] = decode &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">                state = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re one character into a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the low two bits of the first plaintext byte,</span></span><br><span class=\"line\">                <span class=\"comment\">// and the high four bits of the second plaintext byte.</span></span><br><span class=\"line\">                _GTMDevAssert((destIndex+<span class=\"number\">1</span>) &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] |= decode &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                destBytes[destIndex+<span class=\"number\">1</span>] = (decode &amp; <span class=\"number\">0x0f</span>) &lt;&lt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                destIndex++;</span><br><span class=\"line\">                state = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re two characters into a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the low four bits of the second plaintext</span></span><br><span class=\"line\">                <span class=\"comment\">// byte, and the high two bits of the third plaintext byte.</span></span><br><span class=\"line\">                <span class=\"comment\">// However, if this is the end of data, and those two</span></span><br><span class=\"line\">                <span class=\"comment\">// bits are zero, it could be that those two bits are</span></span><br><span class=\"line\">                <span class=\"comment\">// leftovers from the encoding of data that had a length</span></span><br><span class=\"line\">                <span class=\"comment\">// of two mod three.</span></span><br><span class=\"line\">                _GTMDevAssert((destIndex+<span class=\"number\">1</span>) &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] |= decode &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">                destBytes[destIndex+<span class=\"number\">1</span>] = (decode &amp; <span class=\"number\">0x03</span>) &lt;&lt; <span class=\"number\">6</span>;</span><br><span class=\"line\">                destIndex++;</span><br><span class=\"line\">                state = <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re at the last character of a four-character cyphertext block.</span></span><br><span class=\"line\">                <span class=\"comment\">// This sets the low six bits of the third plaintext byte.</span></span><br><span class=\"line\">                _GTMDevAssert(destIndex &lt; destLen, <span class=\"string\">@&quot;our calc for decoded length was wrong&quot;</span>);</span><br><span class=\"line\">                destBytes[destIndex] |= decode;</span><br><span class=\"line\">                destIndex++;</span><br><span class=\"line\">                state = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// We are done decoding Base-64 chars.  Let&#x27;s see if we ended</span></span><br><span class=\"line\">    <span class=\"comment\">//      on a byte boundary, and/or with erroneous trailing characters.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == kBase64PaddingChar) &#123;               <span class=\"comment\">// We got a pad char</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((state == <span class=\"number\">0</span>) || (state == <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// Invalid &#x27;=&#x27; in first or second position</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (srcLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// We run out of input but we still need another &#x27;=&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Otherwise, we are in state 3 and only need this &#x27;=&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// need another &#x27;=&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((ch = *srcBytes++) &amp;&amp; (srcLen-- &gt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!IsSpace(ch))</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch != kBase64PaddingChar) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// state = 1 or 2, check if all remain padding is space</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((ch = *srcBytes++) &amp;&amp; (srcLen-- &gt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!IsSpace(ch)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We ended by seeing the end of the string.</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requirePadding) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we require padding, then anything but state 0 is an error.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Make sure we have no partial bytes lying around.  Note that we do not</span></span><br><span class=\"line\">            <span class=\"comment\">// require trailing &#x27;=&#x27;, so states 2 and 3 are okay too.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// If then next piece of output was valid and got written to it means we got a</span></span><br><span class=\"line\">    <span class=\"comment\">// very carefully crafted input that appeared valid but contains some trailing</span></span><br><span class=\"line\">    <span class=\"comment\">// bits past the real length, so just toss the thing.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((destIndex &lt; destLen) &amp;&amp;</span><br><span class=\"line\">        (destBytes[destIndex] != <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> destIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"NSData-AES-h\"><a href=\"#NSData-AES-h\" class=\"headerlink\" title=\"NSData+AES.h\"></a>NSData+AES.h</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  NSData+AES.h</span></span><br><span class=\"line\"><span class=\"comment\">//  iOS_AES</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by FM-13 on 16/6/8.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 cong. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSData</span> (<span class=\"title\">AES</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128EncryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128DecryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"NSData-AES-m\"><a href=\"#NSData-AES-m\" class=\"headerlink\" title=\"NSData+AES.m\"></a>NSData+AES.m</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  NSData+AES.m</span></span><br><span class=\"line\"><span class=\"comment\">//  iOS_AES</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by FM-13 on 16/6/8.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 cong. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;NSData+AES.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;CommonCrypto/CommonCryptor.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSData</span> (<span class=\"title\">AES</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128EncryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> AES128operation:kCCEncrypt key:key iv:iv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128DecryptWithKey:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> AES128operation:kCCDecrypt key:key iv:iv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSData</span> *)AES128operation:(CCOperation)operation key:(<span class=\"built_in\">NSString</span> *)key iv:(<span class=\"built_in\">NSString</span> *)iv</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> keyPtr[kCCKeySizeAES128 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    bzero(keyPtr, <span class=\"keyword\">sizeof</span>(keyPtr));</span><br><span class=\"line\">    [key getCString:keyPtr maxLength:<span class=\"keyword\">sizeof</span>(keyPtr) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// IV</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ivPtr[kCCBlockSizeAES128 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    bzero(ivPtr, <span class=\"keyword\">sizeof</span>(ivPtr));</span><br><span class=\"line\">    [iv getCString:ivPtr maxLength:<span class=\"keyword\">sizeof</span>(ivPtr) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    size_t bufferSize = [<span class=\"keyword\">self</span> length] + kCCBlockSizeAES128;</span><br><span class=\"line\">    <span class=\"type\">void</span> *buffer = malloc(bufferSize);</span><br><span class=\"line\">    size_t numBytesEncrypted = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    CCCryptorStatus cryptorStatus = CCCrypt(operation, kCCAlgorithmAES128, kCCOptionPKCS7Padding,</span><br><span class=\"line\">                                            keyPtr, kCCKeySizeAES128,</span><br><span class=\"line\">                                            ivPtr,</span><br><span class=\"line\">                                            [<span class=\"keyword\">self</span> bytes], [<span class=\"keyword\">self</span> length],</span><br><span class=\"line\">                                            buffer, bufferSize,</span><br><span class=\"line\">                                            &amp;numBytesEncrypted);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cryptorStatus == kCCSuccess)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Success&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"built_in\">NSData</span> dataWithBytesNoCopy:buffer length:numBytesEncrypted];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    free(buffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *aesKey = @&quot;7854156156611111&quot;;</span><br><span class=\"line\">NSString *aesIV = @&quot;0000000000000000&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">NSData *data = [self dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">//加密</span><br><span class=\"line\">data = [data AES128EncryptWithKey:aesKey iv:aesIV];</span><br><span class=\"line\">data = [GTMBase64 encodeData:data];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSString *encodeStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br></pre></td></tr></table></figure>"},{"title":"CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解","date":"2016-09-20T05:18:12.000Z","abbrlink":"720308c7cbe4e8d5","_content":"\n[《iOS球形波浪加载进度控件－HcdProcessView》](http://www.jianshu.com/p/239a650bf73a)这篇文章已经展示了我在项目中编写的一个球形进度加载控件HcdProcessView，这篇文章我要简单介绍一下我的制作过程。\n\n{% asset_img 905614-aad2c9e81a2873c7.gif %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-aad2c9e81a2873c7.gif) -->\n\n## 思路\n首先我放弃了使用通过改变图片的位置来实现上面的动画效果，虽然这样也可以实现如上的效果，但是从性能和资源消耗上来说都不是最好的选择。这里我采用了通过上下文（也就是CGContextRef）来绘制这样的效果，大家对它应该并不陌生，它既可以绘制直线、曲线、多边形圆形以及各种各样的几何图形。\n\n## 具体步骤\n我们可以将上面的复杂图形拆分成如下几步：\n1. 绘制最外面的一圈刻度尺\n2. 绘制表示进度的刻度尺\n3. 绘制中间的球形加载界面\n<!-- more -->\n\n### 绘制刻度尺\n如果你先要在控件中绘制自己想要的图形，你需要重写UIView的`drawRect`方法：\n``` objc\n- (void)drawRect:(CGRect)rect\n{\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [self drawScale:context];\n}\n```\n在`drawRect`方法中，我们先画出了刻度尺的图形，刻度尺是由一圈短线在一个圆内围成的一个圆。\n\n``` objc\n/**\n *  画比例尺\n *\n *  @param context 全局context\n */\n- (void)drawScale:(CGContextRef)context {\n    \n    CGContextSetLineWidth(context, _scaleDivisionsWidth);//线的宽度\n    \n    //先将参照点移到控件中心\n    CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);\n    \n    //设置线的颜色\n    CGContextSetStrokeColorWithColor(context, [UIColor colorWithRed:0.655 green:0.710 blue:0.859 alpha:1.00].CGColor);//线框颜色\n    //绘制一些图形\n    for (int i = 0; i < _scaleCount; i++) {\n        CGContextMoveToPoint(context, scaleRect.size.width/2 - _scaleDivisionsLength, 0);\n        CGContextAddLineToPoint(context, scaleRect.size.width/2, 0);\n        //    CGContextScaleCTM(ctx, 0.5, 0.5);\n        //渲染\n        CGContextStrokePath(context);\n        CGContextRotateCTM(context, 2 * M_PI / _scaleCount);\n    }\n    \n    //绘制刻度尺外的一个圈\n    CGContextSetStrokeColorWithColor(context, [UIColor colorWithRed:0.694 green:0.745 blue:0.867 alpha:1.00].CGColor);//线框颜色\n    CGContextSetLineWidth(context, 0.5);\n    CGContextAddArc (context, 0, 0, scaleRect.size.width/2 - _scaleDivisionsLength - 3, 0, M_PI* 2 , 0);\n    CGContextStrokePath(context);\n    \n    //复原参照点\n    CGContextTranslateCTM(context, -fullRect.size.width / 2, -fullRect.size.width / 2);\n}\n```\n\n这里需要用到两个东西一个是`CGContextAddArc`，一个是`CGContextAddLineToPoint`。创建圆弧的方法有两种一种是`CGContextAddArc`，一种是`CGContextAddArcToPoint`，这里画的圆比较简单所以用的是`CGContextAddArc`,`CGContextAddArcToPoint`在后面也会用到（我会在用到的地方详解）。\n\n#### CGContextAddArc\n``` objc\n void CGContextAddArc (\n    CGContextRef c,    \n    CGFloat x,             //圆心的x坐标\n    CGFloat y,   //圆心的x坐标\n    CGFloat radius,   //圆的半径\n    CGFloat startAngle,    //开始弧度\n    CGFloat endAngle,   //结束弧度\n    int clockwise          //0表示顺时针，1表示逆时针\n );\n```\n\n这里需要创建一个完整的圆，那么 开始弧度就是0 结束弧度是 2PI， 因为圆周长是 2*PI*radius。函数执行完后，current point就被重置为(x,y)。`CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);`已经将current point移动到了`(fullRect.size.width / 2, fullRect.size.width / 2)`。\n\n#### CGContextAddLineToPoint\n``` objc\n void CGContextAddLineToPoint (\n    CGContextRef c,\n    CGFloat x,\n    CGFloat y\n );\n```\n 创建一条直线，从current point到 (x,y)\n 然后current point会变成(x,y)。\n由于短线不连续，所以通过for循环来不断画短线，`_scaleCount`代表的是刻度尺的个数，每次循环先将current point移动到`(scaleRect.size.width/2 - _scaleDivisionsLength, 0)`点，`_scaleDivisionsLength`代表短线的长度。绘制完短线后将前面绘制完成的图形旋转一个刻度尺的角度`CGContextRotateCTM(context, 2 * M_PI / _scaleCount);`，将最终的绘制渲染后就得到了如下的刻度尺：\n\n\n{% asset_img 905614-282356612ba9f28c.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-282356612ba9f28c.png) -->\n\n### 刻度尺上的进度绘制\n首先在`drawRect`中添加`drawProcessScale`方法。\n``` objc\n- (void)drawRect:(CGRect)rect\n{\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [self drawScale:context];\n    [self drawProcessScale:context];\n}\n```\n然后在`drawProcessScale`方法中实现左右两部分的刻度尺进度绘制。\n``` objc\n/**\n *  比例尺进度\n *\n *  @param context 全局context\n */\n- (void)drawProcessScale:(CGContextRef)context {\n    \n    CGContextSetLineWidth(context, _scaleDivisionsWidth);//线的宽度\n    CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);\n    \n    CGContextSetStrokeColorWithColor(context, [UIColor colorWithRed:0.969 green:0.937 blue:0.227 alpha:1.00].CGColor);//线框颜色\n    \n    int count = (_scaleCount / 2 + 1) * currentPercent;\n    CGFloat scaleAngle = 2 * M_PI / _scaleCount;\n    \n    //绘制左边刻度进度\n    for (int i = 0; i < count; i++) {\n        CGContextMoveToPoint(context, 0, scaleRect.size.width/2 - _scaleDivisionsLength);\n        CGContextAddLineToPoint(context, 0, scaleRect.size.width/2);\n        //    CGContextScaleCTM(ctx, 0.5, 0.5);\n        // 渲染\n        CGContextStrokePath(context);\n        CGContextRotateCTM(context, scaleAngle);\n    }\n    //绘制右边刻度进度\n    CGContextRotateCTM(context, -count * scaleAngle);\n    \n    for (int i = 0; i < count; i++) {\n        CGContextMoveToPoint(context, 0, scaleRect.size.width/2 - _scaleDivisionsLength);\n        CGContextAddLineToPoint(context, 0, scaleRect.size.width/2);\n        //    CGContextScaleCTM(ctx, 0.5, 0.5);\n        // 渲染\n        CGContextStrokePath(context);\n        CGContextRotateCTM(context, -scaleAngle);\n    }\n    \n    CGContextTranslateCTM(context, -fullRect.size.width / 2, -fullRect.size.width / 2);\n}\n```\n绘制完后效果如下：\n\n{% asset_img 905614-e85a60e792a0c99d.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-e85a60e792a0c99d.png) -->\n\n\n### 水的波浪效果绘制\n终于到了最主要也是最难的效果绘制了，对于带有波浪不断滚动的效果是采用NSTimer来不断绘制每一帧图形实现的，现在简单介绍下每一帧的绘制方法。\n首先在`drawRect`中添加`drawWave`方法，\n``` objc\n- (void)drawRect:(CGRect)rect\n{\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [self drawScale:context];\n    [self drawProcessScale:context];\n    [self drawWave:context];\n}\n```\n`drawWave`中实现如下方法：\n``` objc\n/**\n *  画波浪\n *\n *  @param context 全局context\n */\n- (void)drawWave:(CGContextRef)context {\n    \n    CGMutablePathRef frontPath = CGPathCreateMutable();\n    CGMutablePathRef backPath = CGPathCreateMutable();\n    \n    //画水\n    CGContextSetLineWidth(context, 1);\n    CGContextSetFillColorWithColor(context, [_frontWaterColor CGColor]);\n    \n    CGFloat offset = _scaleMargin + _waveMargin + _scaleDivisionsWidth;\n    \n    float frontY = currentLinePointY;\n    float backY = currentLinePointY;\n    \n    CGFloat radius = waveRect.size.width / 2;\n    \n    CGPoint frontStartPoint = CGPointMake(offset, currentLinePointY + offset);\n    CGPoint frontEndPoint = CGPointMake(offset, currentLinePointY + offset);\n    \n    CGPoint backStartPoint = CGPointMake(offset, currentLinePointY + offset);\n    CGPoint backEndPoint = CGPointMake(offset, currentLinePointY + offset);\n    \n    for(float x = 0; x <= waveRect.size.width; x++){\n        \n        //前浪绘制\n        frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;\n        \n        CGFloat frontCircleY = frontY;\n        if (currentLinePointY < radius) {\n            frontCircleY = radius - sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (frontY < frontCircleY) {\n                frontY = frontCircleY;\n            }\n        } else if (currentLinePointY > radius) {\n            frontCircleY = radius + sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (frontY > frontCircleY) {\n                frontY = frontCircleY;\n            }\n        }\n        \n        if (fabs(0 - x) < 0.001) {\n            frontStartPoint = CGPointMake(x + offset, frontY + offset);\n            CGPathMoveToPoint(frontPath, NULL, frontStartPoint.x, frontStartPoint.y);\n        }\n        \n        frontEndPoint = CGPointMake(x + offset, frontY + offset);\n        CGPathAddLineToPoint(frontPath, nil, frontEndPoint.x, frontEndPoint.y);\n        \n        //后波浪绘制\n        backY = a * cos( x / 180 * M_PI + 3 * b / M_PI ) * amplitude + currentLinePointY;\n        CGFloat backCircleY = backY;\n        if (currentLinePointY < radius) {\n            backCircleY = radius - sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (backY < backCircleY) {\n                backY = backCircleY;\n            }\n        } else if (currentLinePointY > radius) {\n            backCircleY = radius + sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (backY > backCircleY) {\n                backY = backCircleY;\n            }\n        }\n        \n        if (fabs(0 - x) < 0.001) {\n            backStartPoint = CGPointMake(x + offset, backY + offset);\n            CGPathMoveToPoint(backPath, NULL, backStartPoint.x, backStartPoint.y);\n        }\n        \n        backEndPoint = CGPointMake(x + offset, backY + offset);\n        CGPathAddLineToPoint(backPath, nil, backEndPoint.x, backEndPoint.y);\n    }\n    \n    CGPoint centerPoint = CGPointMake(fullRect.size.width / 2, fullRect.size.height / 2);\n    \n    //绘制前浪圆弧\n    CGFloat frontStart = [self calculateRotateDegree:centerPoint point:frontStartPoint];\n    CGFloat frontEnd = [self calculateRotateDegree:centerPoint point:frontEndPoint];\n    \n    CGPathAddArc(frontPath, nil, centerPoint.x, centerPoint.y, waveRect.size.width / 2, frontEnd, frontStart, 0);\n    CGContextAddPath(context, frontPath);\n    CGContextFillPath(context);\n    //推入\n    CGContextSaveGState(context);\n    CGContextDrawPath(context, kCGPathStroke);\n    CGPathRelease(frontPath);\n    \n    \n    //绘制后浪圆弧\n    CGFloat backStart = [self calculateRotateDegree:centerPoint point:backStartPoint];\n    CGFloat backEnd = [self calculateRotateDegree:centerPoint point:backEndPoint];\n    \n    CGPathAddArc(backPath, nil, centerPoint.x, centerPoint.y, waveRect.size.width / 2, backEnd, backStart, 0);\n    \n    CGContextSetFillColorWithColor(context, [_backWaterColor CGColor]);\n    CGContextAddPath(context, backPath);\n    CGContextFillPath(context);\n    //推入\n    CGContextSaveGState(context);\n    CGContextDrawPath(context, kCGPathStroke);\n    CGPathRelease(backPath);\n    \n}\n```\n\n上面的代码较长，可能也比较难以理解。下面我将会对上述代码简单解读一下，已前浪为例（前浪和后浪的实现方式基本一样，只是两个浪正余弦函数不一样而已）。两个浪都是由一条曲线和和一个圆弧构成的封闭区间，曲线的x区间为`[0, waveRect.size.width]`，y值坐标为`frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`(currentLinePointY为偏移量)，通过for循环自增x，计算出y的位置来不断`CGPathAddLineToPoint`绘制出一条曲线，这就构成了波浪的曲线。然后我们需要根据波浪曲线的起始点和结束点以及圆心点(fullRect.size.width / 2, fullRect.size.height / 2)，来绘制一段封闭的圆弧。\n这里就需要用到`CGPathAddArc`方法；`CGPathAddArc`方法和`CGContextAddArc`类似。需要先计算出点波浪的起始点和结束点分别与圆心之间的夹角。知道两点计算夹角的方式如下：\n``` objc\n/**\n *  根据圆心点和圆上一个点计算角度\n *\n *  @param centerPoint 圆心点\n *  @param point       圆上的一个点\n *\n *  @return 角度\n */\n- (CGFloat)calculateRotateDegree:(CGPoint)centerPoint point:(CGPoint)point {\n    \n    CGFloat rotateDegree = asin(fabs(point.y - centerPoint.y) / (sqrt(pow(point.x - centerPoint.x, 2) + pow(point.y - centerPoint.y, 2))));\n    \n    //如果point纵坐标大于原点centerPoint纵坐标(在第一和第二象限)\n    if (point.y > centerPoint.y) {\n        //第一象限\n        if (point.x >= centerPoint.x) {\n            rotateDegree = rotateDegree;\n        }\n        //第二象限\n        else {\n            rotateDegree = M_PI - rotateDegree;\n        }\n    } else //第三和第四象限\n    {\n        if (point.x <= centerPoint.x) //第三象限，不做任何处理\n        {\n            rotateDegree = M_PI + rotateDegree;\n        }\n        else //第四象限\n        {\n            rotateDegree = 2 * M_PI - rotateDegree;\n        }\n    }\n    return rotateDegree;\n}\n```\n\n#### 波浪绘制的相关判断\n由于曲线x区间是`[0, waveRect.size.width]`，y值是根据公式`frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`计算出来的，但是最终构成的波浪是一个球形的，所以对于计算出来的y值坐标，我们需要判断它是否在圆上，如果不在圆上，我们应该将它移到圆上。\n\n判断分为两种情况：\n##### currentLinePointY<fullRect.size.height / 2\n当currentLinePointY<fullRect.size.height / 2时，已知点的坐标x，根据公式`y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1<y2 则最终应该放到波浪上的点为 `(x,y2)`。\n\n{% asset_img 905614-6d980e01c0a78df8.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-6d980e01c0a78df8.png) -->\n\n##### currentLinePointY>fullRect.size.height / 2\n同理当currentLinePointY>fullRect.size.height / 2时，已知点的坐标x，根据公式`y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1>y2 则最终应该放到波浪上的点为 `(x,y2)`。\n\n{% asset_img 905614-11de31e505d895a1.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-11de31e505d895a1.png) -->\n\n其中判断的代码如下：\n``` objc\nfrontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;\n        \nCGFloat frontCircleY = frontY;\nif (currentLinePointY < radius) {\n    frontCircleY = radius - sqrt(pow(radius, 2) - pow((radius - x), 2));\n    if (frontY < frontCircleY) {\n        frontY = frontCircleY;\n    }\n} else if (currentLinePointY > radius) {\n    frontCircleY = radius + sqrt(pow(radius, 2) - pow((radius - x), 2));\n    if (frontY > frontCircleY) {\n        frontY = frontCircleY;\n    }\n}\n```\n其中当`currentLinePointY < radius `时，`y2=radius - sqrt(pow(radius, 2) - pow((radius - x), 2))`;\n当`currentLinePointY > radius`时，`y2=radius + sqrt(pow(radius, 2) - pow((radius - x), 2))`；\n\n这样就构成了一个如下的效果：\n\n{% asset_img 905614-cb9896a7ba570a22.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-cb9896a7ba570a22.png) -->\n\n然后通过Timer不断的改变`a`、`b`的值就得到了我想要的动画效果。\n\nGithub地址：https://github.com/Jvaeyhcd/HcdProcessView\n","source":"_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解.md","raw":"---\ntitle: CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解\ndate: 2016-09-20 13:18:12\ntags:\n   - iOS\ncategories: 技术杂谈\nabbrlink: 720308c7cbe4e8d5\n---\n\n[《iOS球形波浪加载进度控件－HcdProcessView》](http://www.jianshu.com/p/239a650bf73a)这篇文章已经展示了我在项目中编写的一个球形进度加载控件HcdProcessView，这篇文章我要简单介绍一下我的制作过程。\n\n{% asset_img 905614-aad2c9e81a2873c7.gif %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-aad2c9e81a2873c7.gif) -->\n\n## 思路\n首先我放弃了使用通过改变图片的位置来实现上面的动画效果，虽然这样也可以实现如上的效果，但是从性能和资源消耗上来说都不是最好的选择。这里我采用了通过上下文（也就是CGContextRef）来绘制这样的效果，大家对它应该并不陌生，它既可以绘制直线、曲线、多边形圆形以及各种各样的几何图形。\n\n## 具体步骤\n我们可以将上面的复杂图形拆分成如下几步：\n1. 绘制最外面的一圈刻度尺\n2. 绘制表示进度的刻度尺\n3. 绘制中间的球形加载界面\n<!-- more -->\n\n### 绘制刻度尺\n如果你先要在控件中绘制自己想要的图形，你需要重写UIView的`drawRect`方法：\n``` objc\n- (void)drawRect:(CGRect)rect\n{\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [self drawScale:context];\n}\n```\n在`drawRect`方法中，我们先画出了刻度尺的图形，刻度尺是由一圈短线在一个圆内围成的一个圆。\n\n``` objc\n/**\n *  画比例尺\n *\n *  @param context 全局context\n */\n- (void)drawScale:(CGContextRef)context {\n    \n    CGContextSetLineWidth(context, _scaleDivisionsWidth);//线的宽度\n    \n    //先将参照点移到控件中心\n    CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);\n    \n    //设置线的颜色\n    CGContextSetStrokeColorWithColor(context, [UIColor colorWithRed:0.655 green:0.710 blue:0.859 alpha:1.00].CGColor);//线框颜色\n    //绘制一些图形\n    for (int i = 0; i < _scaleCount; i++) {\n        CGContextMoveToPoint(context, scaleRect.size.width/2 - _scaleDivisionsLength, 0);\n        CGContextAddLineToPoint(context, scaleRect.size.width/2, 0);\n        //    CGContextScaleCTM(ctx, 0.5, 0.5);\n        //渲染\n        CGContextStrokePath(context);\n        CGContextRotateCTM(context, 2 * M_PI / _scaleCount);\n    }\n    \n    //绘制刻度尺外的一个圈\n    CGContextSetStrokeColorWithColor(context, [UIColor colorWithRed:0.694 green:0.745 blue:0.867 alpha:1.00].CGColor);//线框颜色\n    CGContextSetLineWidth(context, 0.5);\n    CGContextAddArc (context, 0, 0, scaleRect.size.width/2 - _scaleDivisionsLength - 3, 0, M_PI* 2 , 0);\n    CGContextStrokePath(context);\n    \n    //复原参照点\n    CGContextTranslateCTM(context, -fullRect.size.width / 2, -fullRect.size.width / 2);\n}\n```\n\n这里需要用到两个东西一个是`CGContextAddArc`，一个是`CGContextAddLineToPoint`。创建圆弧的方法有两种一种是`CGContextAddArc`，一种是`CGContextAddArcToPoint`，这里画的圆比较简单所以用的是`CGContextAddArc`,`CGContextAddArcToPoint`在后面也会用到（我会在用到的地方详解）。\n\n#### CGContextAddArc\n``` objc\n void CGContextAddArc (\n    CGContextRef c,    \n    CGFloat x,             //圆心的x坐标\n    CGFloat y,   //圆心的x坐标\n    CGFloat radius,   //圆的半径\n    CGFloat startAngle,    //开始弧度\n    CGFloat endAngle,   //结束弧度\n    int clockwise          //0表示顺时针，1表示逆时针\n );\n```\n\n这里需要创建一个完整的圆，那么 开始弧度就是0 结束弧度是 2PI， 因为圆周长是 2*PI*radius。函数执行完后，current point就被重置为(x,y)。`CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);`已经将current point移动到了`(fullRect.size.width / 2, fullRect.size.width / 2)`。\n\n#### CGContextAddLineToPoint\n``` objc\n void CGContextAddLineToPoint (\n    CGContextRef c,\n    CGFloat x,\n    CGFloat y\n );\n```\n 创建一条直线，从current point到 (x,y)\n 然后current point会变成(x,y)。\n由于短线不连续，所以通过for循环来不断画短线，`_scaleCount`代表的是刻度尺的个数，每次循环先将current point移动到`(scaleRect.size.width/2 - _scaleDivisionsLength, 0)`点，`_scaleDivisionsLength`代表短线的长度。绘制完短线后将前面绘制完成的图形旋转一个刻度尺的角度`CGContextRotateCTM(context, 2 * M_PI / _scaleCount);`，将最终的绘制渲染后就得到了如下的刻度尺：\n\n\n{% asset_img 905614-282356612ba9f28c.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-282356612ba9f28c.png) -->\n\n### 刻度尺上的进度绘制\n首先在`drawRect`中添加`drawProcessScale`方法。\n``` objc\n- (void)drawRect:(CGRect)rect\n{\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [self drawScale:context];\n    [self drawProcessScale:context];\n}\n```\n然后在`drawProcessScale`方法中实现左右两部分的刻度尺进度绘制。\n``` objc\n/**\n *  比例尺进度\n *\n *  @param context 全局context\n */\n- (void)drawProcessScale:(CGContextRef)context {\n    \n    CGContextSetLineWidth(context, _scaleDivisionsWidth);//线的宽度\n    CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);\n    \n    CGContextSetStrokeColorWithColor(context, [UIColor colorWithRed:0.969 green:0.937 blue:0.227 alpha:1.00].CGColor);//线框颜色\n    \n    int count = (_scaleCount / 2 + 1) * currentPercent;\n    CGFloat scaleAngle = 2 * M_PI / _scaleCount;\n    \n    //绘制左边刻度进度\n    for (int i = 0; i < count; i++) {\n        CGContextMoveToPoint(context, 0, scaleRect.size.width/2 - _scaleDivisionsLength);\n        CGContextAddLineToPoint(context, 0, scaleRect.size.width/2);\n        //    CGContextScaleCTM(ctx, 0.5, 0.5);\n        // 渲染\n        CGContextStrokePath(context);\n        CGContextRotateCTM(context, scaleAngle);\n    }\n    //绘制右边刻度进度\n    CGContextRotateCTM(context, -count * scaleAngle);\n    \n    for (int i = 0; i < count; i++) {\n        CGContextMoveToPoint(context, 0, scaleRect.size.width/2 - _scaleDivisionsLength);\n        CGContextAddLineToPoint(context, 0, scaleRect.size.width/2);\n        //    CGContextScaleCTM(ctx, 0.5, 0.5);\n        // 渲染\n        CGContextStrokePath(context);\n        CGContextRotateCTM(context, -scaleAngle);\n    }\n    \n    CGContextTranslateCTM(context, -fullRect.size.width / 2, -fullRect.size.width / 2);\n}\n```\n绘制完后效果如下：\n\n{% asset_img 905614-e85a60e792a0c99d.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-e85a60e792a0c99d.png) -->\n\n\n### 水的波浪效果绘制\n终于到了最主要也是最难的效果绘制了，对于带有波浪不断滚动的效果是采用NSTimer来不断绘制每一帧图形实现的，现在简单介绍下每一帧的绘制方法。\n首先在`drawRect`中添加`drawWave`方法，\n``` objc\n- (void)drawRect:(CGRect)rect\n{\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [self drawScale:context];\n    [self drawProcessScale:context];\n    [self drawWave:context];\n}\n```\n`drawWave`中实现如下方法：\n``` objc\n/**\n *  画波浪\n *\n *  @param context 全局context\n */\n- (void)drawWave:(CGContextRef)context {\n    \n    CGMutablePathRef frontPath = CGPathCreateMutable();\n    CGMutablePathRef backPath = CGPathCreateMutable();\n    \n    //画水\n    CGContextSetLineWidth(context, 1);\n    CGContextSetFillColorWithColor(context, [_frontWaterColor CGColor]);\n    \n    CGFloat offset = _scaleMargin + _waveMargin + _scaleDivisionsWidth;\n    \n    float frontY = currentLinePointY;\n    float backY = currentLinePointY;\n    \n    CGFloat radius = waveRect.size.width / 2;\n    \n    CGPoint frontStartPoint = CGPointMake(offset, currentLinePointY + offset);\n    CGPoint frontEndPoint = CGPointMake(offset, currentLinePointY + offset);\n    \n    CGPoint backStartPoint = CGPointMake(offset, currentLinePointY + offset);\n    CGPoint backEndPoint = CGPointMake(offset, currentLinePointY + offset);\n    \n    for(float x = 0; x <= waveRect.size.width; x++){\n        \n        //前浪绘制\n        frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;\n        \n        CGFloat frontCircleY = frontY;\n        if (currentLinePointY < radius) {\n            frontCircleY = radius - sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (frontY < frontCircleY) {\n                frontY = frontCircleY;\n            }\n        } else if (currentLinePointY > radius) {\n            frontCircleY = radius + sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (frontY > frontCircleY) {\n                frontY = frontCircleY;\n            }\n        }\n        \n        if (fabs(0 - x) < 0.001) {\n            frontStartPoint = CGPointMake(x + offset, frontY + offset);\n            CGPathMoveToPoint(frontPath, NULL, frontStartPoint.x, frontStartPoint.y);\n        }\n        \n        frontEndPoint = CGPointMake(x + offset, frontY + offset);\n        CGPathAddLineToPoint(frontPath, nil, frontEndPoint.x, frontEndPoint.y);\n        \n        //后波浪绘制\n        backY = a * cos( x / 180 * M_PI + 3 * b / M_PI ) * amplitude + currentLinePointY;\n        CGFloat backCircleY = backY;\n        if (currentLinePointY < radius) {\n            backCircleY = radius - sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (backY < backCircleY) {\n                backY = backCircleY;\n            }\n        } else if (currentLinePointY > radius) {\n            backCircleY = radius + sqrt(pow(radius, 2) - pow((radius - x), 2));\n            if (backY > backCircleY) {\n                backY = backCircleY;\n            }\n        }\n        \n        if (fabs(0 - x) < 0.001) {\n            backStartPoint = CGPointMake(x + offset, backY + offset);\n            CGPathMoveToPoint(backPath, NULL, backStartPoint.x, backStartPoint.y);\n        }\n        \n        backEndPoint = CGPointMake(x + offset, backY + offset);\n        CGPathAddLineToPoint(backPath, nil, backEndPoint.x, backEndPoint.y);\n    }\n    \n    CGPoint centerPoint = CGPointMake(fullRect.size.width / 2, fullRect.size.height / 2);\n    \n    //绘制前浪圆弧\n    CGFloat frontStart = [self calculateRotateDegree:centerPoint point:frontStartPoint];\n    CGFloat frontEnd = [self calculateRotateDegree:centerPoint point:frontEndPoint];\n    \n    CGPathAddArc(frontPath, nil, centerPoint.x, centerPoint.y, waveRect.size.width / 2, frontEnd, frontStart, 0);\n    CGContextAddPath(context, frontPath);\n    CGContextFillPath(context);\n    //推入\n    CGContextSaveGState(context);\n    CGContextDrawPath(context, kCGPathStroke);\n    CGPathRelease(frontPath);\n    \n    \n    //绘制后浪圆弧\n    CGFloat backStart = [self calculateRotateDegree:centerPoint point:backStartPoint];\n    CGFloat backEnd = [self calculateRotateDegree:centerPoint point:backEndPoint];\n    \n    CGPathAddArc(backPath, nil, centerPoint.x, centerPoint.y, waveRect.size.width / 2, backEnd, backStart, 0);\n    \n    CGContextSetFillColorWithColor(context, [_backWaterColor CGColor]);\n    CGContextAddPath(context, backPath);\n    CGContextFillPath(context);\n    //推入\n    CGContextSaveGState(context);\n    CGContextDrawPath(context, kCGPathStroke);\n    CGPathRelease(backPath);\n    \n}\n```\n\n上面的代码较长，可能也比较难以理解。下面我将会对上述代码简单解读一下，已前浪为例（前浪和后浪的实现方式基本一样，只是两个浪正余弦函数不一样而已）。两个浪都是由一条曲线和和一个圆弧构成的封闭区间，曲线的x区间为`[0, waveRect.size.width]`，y值坐标为`frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`(currentLinePointY为偏移量)，通过for循环自增x，计算出y的位置来不断`CGPathAddLineToPoint`绘制出一条曲线，这就构成了波浪的曲线。然后我们需要根据波浪曲线的起始点和结束点以及圆心点(fullRect.size.width / 2, fullRect.size.height / 2)，来绘制一段封闭的圆弧。\n这里就需要用到`CGPathAddArc`方法；`CGPathAddArc`方法和`CGContextAddArc`类似。需要先计算出点波浪的起始点和结束点分别与圆心之间的夹角。知道两点计算夹角的方式如下：\n``` objc\n/**\n *  根据圆心点和圆上一个点计算角度\n *\n *  @param centerPoint 圆心点\n *  @param point       圆上的一个点\n *\n *  @return 角度\n */\n- (CGFloat)calculateRotateDegree:(CGPoint)centerPoint point:(CGPoint)point {\n    \n    CGFloat rotateDegree = asin(fabs(point.y - centerPoint.y) / (sqrt(pow(point.x - centerPoint.x, 2) + pow(point.y - centerPoint.y, 2))));\n    \n    //如果point纵坐标大于原点centerPoint纵坐标(在第一和第二象限)\n    if (point.y > centerPoint.y) {\n        //第一象限\n        if (point.x >= centerPoint.x) {\n            rotateDegree = rotateDegree;\n        }\n        //第二象限\n        else {\n            rotateDegree = M_PI - rotateDegree;\n        }\n    } else //第三和第四象限\n    {\n        if (point.x <= centerPoint.x) //第三象限，不做任何处理\n        {\n            rotateDegree = M_PI + rotateDegree;\n        }\n        else //第四象限\n        {\n            rotateDegree = 2 * M_PI - rotateDegree;\n        }\n    }\n    return rotateDegree;\n}\n```\n\n#### 波浪绘制的相关判断\n由于曲线x区间是`[0, waveRect.size.width]`，y值是根据公式`frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`计算出来的，但是最终构成的波浪是一个球形的，所以对于计算出来的y值坐标，我们需要判断它是否在圆上，如果不在圆上，我们应该将它移到圆上。\n\n判断分为两种情况：\n##### currentLinePointY<fullRect.size.height / 2\n当currentLinePointY<fullRect.size.height / 2时，已知点的坐标x，根据公式`y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1<y2 则最终应该放到波浪上的点为 `(x,y2)`。\n\n{% asset_img 905614-6d980e01c0a78df8.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-6d980e01c0a78df8.png) -->\n\n##### currentLinePointY>fullRect.size.height / 2\n同理当currentLinePointY>fullRect.size.height / 2时，已知点的坐标x，根据公式`y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;`算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1>y2 则最终应该放到波浪上的点为 `(x,y2)`。\n\n{% asset_img 905614-11de31e505d895a1.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-11de31e505d895a1.png) -->\n\n其中判断的代码如下：\n``` objc\nfrontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;\n        \nCGFloat frontCircleY = frontY;\nif (currentLinePointY < radius) {\n    frontCircleY = radius - sqrt(pow(radius, 2) - pow((radius - x), 2));\n    if (frontY < frontCircleY) {\n        frontY = frontCircleY;\n    }\n} else if (currentLinePointY > radius) {\n    frontCircleY = radius + sqrt(pow(radius, 2) - pow((radius - x), 2));\n    if (frontY > frontCircleY) {\n        frontY = frontCircleY;\n    }\n}\n```\n其中当`currentLinePointY < radius `时，`y2=radius - sqrt(pow(radius, 2) - pow((radius - x), 2))`;\n当`currentLinePointY > radius`时，`y2=radius + sqrt(pow(radius, 2) - pow((radius - x), 2))`；\n\n这样就构成了一个如下的效果：\n\n{% asset_img 905614-cb9896a7ba570a22.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-cb9896a7ba570a22.png) -->\n\n然后通过Timer不断的改变`a`、`b`的值就得到了我想要的动画效果。\n\nGithub地址：https://github.com/Jvaeyhcd/HcdProcessView\n","slug":"CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解","published":1,"updated":"2022-05-19T03:13:11.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenk000gl1l391xd5okn","content":"<p><a href=\"http://www.jianshu.com/p/239a650bf73a\">《iOS球形波浪加载进度控件－HcdProcessView》</a>这篇文章已经展示了我在项目中编写的一个球形进度加载控件HcdProcessView，这篇文章我要简单介绍一下我的制作过程。</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-aad2c9e81a2873c7.gif\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-aad2c9e81a2873c7.gif) -->\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>首先我放弃了使用通过改变图片的位置来实现上面的动画效果，虽然这样也可以实现如上的效果，但是从性能和资源消耗上来说都不是最好的选择。这里我采用了通过上下文（也就是CGContextRef）来绘制这样的效果，大家对它应该并不陌生，它既可以绘制直线、曲线、多边形圆形以及各种各样的几何图形。</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p>我们可以将上面的复杂图形拆分成如下几步：</p>\n<ol>\n<li>绘制最外面的一圈刻度尺</li>\n<li>绘制表示进度的刻度尺</li>\n<li>绘制中间的球形加载界面<span id=\"more\"></span></li>\n</ol>\n<h3 id=\"绘制刻度尺\"><a href=\"#绘制刻度尺\" class=\"headerlink\" title=\"绘制刻度尺\"></a>绘制刻度尺</h3><p>如果你先要在控件中绘制自己想要的图形，你需要重写UIView的<code>drawRect</code>方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>drawRect</code>方法中，我们先画出了刻度尺的图形，刻度尺是由一圈短线在一个圆内围成的一个圆。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  画比例尺</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param context 全局context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)drawScale:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, _scaleDivisionsWidth);<span class=\"comment\">//线的宽度</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//先将参照点移到控件中心</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect.size.width / <span class=\"number\">2</span>, fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//设置线的颜色</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.655</span> green:<span class=\"number\">0.710</span> blue:<span class=\"number\">0.859</span> alpha:<span class=\"number\">1.00</span>].CGColor);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    <span class=\"comment\">//绘制一些图形</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; _scaleCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, scaleRect.size.width/<span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">//渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, <span class=\"number\">2</span> * M_PI / _scaleCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制刻度尺外的一个圈</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.694</span> green:<span class=\"number\">0.745</span> blue:<span class=\"number\">0.867</span> alpha:<span class=\"number\">1.00</span>].CGColor);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddArc</span> (context, <span class=\"number\">0</span>, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength - <span class=\"number\">3</span>, <span class=\"number\">0</span>, M_PI* <span class=\"number\">2</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//复原参照点</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, -fullRect.size.width / <span class=\"number\">2</span>, -fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要用到两个东西一个是<code>CGContextAddArc</code>，一个是<code>CGContextAddLineToPoint</code>。创建圆弧的方法有两种一种是<code>CGContextAddArc</code>，一种是<code>CGContextAddArcToPoint</code>，这里画的圆比较简单所以用的是<code>CGContextAddArc</code>,<code>CGContextAddArcToPoint</code>在后面也会用到（我会在用到的地方详解）。</p>\n<h4 id=\"CGContextAddArc\"><a href=\"#CGContextAddArc\" class=\"headerlink\" title=\"CGContextAddArc\"></a>CGContextAddArc</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"built_in\">CGContextAddArc</span> (</span><br><span class=\"line\">   <span class=\"built_in\">CGContextRef</span> c,    </span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> x,             <span class=\"comment\">//圆心的x坐标</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> y,   <span class=\"comment\">//圆心的x坐标</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> radius,   <span class=\"comment\">//圆的半径</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> startAngle,    <span class=\"comment\">//开始弧度</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> endAngle,   <span class=\"comment\">//结束弧度</span></span><br><span class=\"line\">   <span class=\"type\">int</span> clockwise          <span class=\"comment\">//0表示顺时针，1表示逆时针</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这里需要创建一个完整的圆，那么 开始弧度就是0 结束弧度是 2PI， 因为圆周长是 2<em>PI</em>radius。函数执行完后，current point就被重置为(x,y)。<code>CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);</code>已经将current point移动到了<code>(fullRect.size.width / 2, fullRect.size.width / 2)</code>。</p>\n<h4 id=\"CGContextAddLineToPoint\"><a href=\"#CGContextAddLineToPoint\" class=\"headerlink\" title=\"CGContextAddLineToPoint\"></a>CGContextAddLineToPoint</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"built_in\">CGContextAddLineToPoint</span> (</span><br><span class=\"line\">   <span class=\"built_in\">CGContextRef</span> c,</span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> x,</span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> y</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p> 创建一条直线，从current point到 (x,y)<br> 然后current point会变成(x,y)。<br>由于短线不连续，所以通过for循环来不断画短线，<code>_scaleCount</code>代表的是刻度尺的个数，每次循环先将current point移动到<code>(scaleRect.size.width/2 - _scaleDivisionsLength, 0)</code>点，<code>_scaleDivisionsLength</code>代表短线的长度。绘制完短线后将前面绘制完成的图形旋转一个刻度尺的角度<code>CGContextRotateCTM(context, 2 * M_PI / _scaleCount);</code>，将最终的绘制渲染后就得到了如下的刻度尺：</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-282356612ba9f28c.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-282356612ba9f28c.png) -->\n\n<h3 id=\"刻度尺上的进度绘制\"><a href=\"#刻度尺上的进度绘制\" class=\"headerlink\" title=\"刻度尺上的进度绘制\"></a>刻度尺上的进度绘制</h3><p>首先在<code>drawRect</code>中添加<code>drawProcessScale</code>方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawProcessScale:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在<code>drawProcessScale</code>方法中实现左右两部分的刻度尺进度绘制。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  比例尺进度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param context 全局context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)drawProcessScale:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, _scaleDivisionsWidth);<span class=\"comment\">//线的宽度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect.size.width / <span class=\"number\">2</span>, fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.969</span> green:<span class=\"number\">0.937</span> blue:<span class=\"number\">0.227</span> alpha:<span class=\"number\">1.00</span>].CGColor);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> count = (_scaleCount / <span class=\"number\">2</span> + <span class=\"number\">1</span>) * currentPercent;</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> scaleAngle = <span class=\"number\">2</span> * M_PI / _scaleCount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制左边刻度进度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, scaleAngle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//绘制右边刻度进度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextRotateCTM</span>(context, -count * scaleAngle);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, -scaleAngle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, -fullRect.size.width / <span class=\"number\">2</span>, -fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绘制完后效果如下：</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-e85a60e792a0c99d.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-e85a60e792a0c99d.png) -->\n\n\n<h3 id=\"水的波浪效果绘制\"><a href=\"#水的波浪效果绘制\" class=\"headerlink\" title=\"水的波浪效果绘制\"></a>水的波浪效果绘制</h3><p>终于到了最主要也是最难的效果绘制了，对于带有波浪不断滚动的效果是采用NSTimer来不断绘制每一帧图形实现的，现在简单介绍下每一帧的绘制方法。<br>首先在<code>drawRect</code>中添加<code>drawWave</code>方法，</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawProcessScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawWave:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>drawWave</code>中实现如下方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  画波浪</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param context 全局context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)drawWave:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> frontPath = <span class=\"built_in\">CGPathCreateMutable</span>();</span><br><span class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> backPath = <span class=\"built_in\">CGPathCreateMutable</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//画水</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetFillColorWithColor</span>(context, [_frontWaterColor <span class=\"built_in\">CGColor</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> offset = _scaleMargin + _waveMargin + _scaleDivisionsWidth;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">float</span> frontY = currentLinePointY;</span><br><span class=\"line\">    <span class=\"type\">float</span> backY = currentLinePointY;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = waveRect.size.width / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> frontStartPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> frontEndPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> backStartPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> backEndPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">float</span> x = <span class=\"number\">0</span>; x &lt;= waveRect.size.width; x++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//前浪绘制</span></span><br><span class=\"line\">        frontY = a * sin( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">4</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> frontCircleY = frontY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">            frontCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frontY &lt; frontCircleY) &#123;</span><br><span class=\"line\">                frontY = frontCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">            frontCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frontY &gt; frontCircleY) &#123;</span><br><span class=\"line\">                frontY = frontCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fabs(<span class=\"number\">0</span> - x) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">            frontStartPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, frontY + offset);</span><br><span class=\"line\">            <span class=\"built_in\">CGPathMoveToPoint</span>(frontPath, <span class=\"literal\">NULL</span>, frontStartPoint.x, frontStartPoint.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        frontEndPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, frontY + offset);</span><br><span class=\"line\">        <span class=\"built_in\">CGPathAddLineToPoint</span>(frontPath, <span class=\"literal\">nil</span>, frontEndPoint.x, frontEndPoint.y);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//后波浪绘制</span></span><br><span class=\"line\">        backY = a * cos( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">3</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> backCircleY = backY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">            backCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backY &lt; backCircleY) &#123;</span><br><span class=\"line\">                backY = backCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">            backCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backY &gt; backCircleY) &#123;</span><br><span class=\"line\">                backY = backCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fabs(<span class=\"number\">0</span> - x) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">            backStartPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, backY + offset);</span><br><span class=\"line\">            <span class=\"built_in\">CGPathMoveToPoint</span>(backPath, <span class=\"literal\">NULL</span>, backStartPoint.x, backStartPoint.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        backEndPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, backY + offset);</span><br><span class=\"line\">        <span class=\"built_in\">CGPathAddLineToPoint</span>(backPath, <span class=\"literal\">nil</span>, backEndPoint.x, backEndPoint.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> centerPoint = <span class=\"built_in\">CGPointMake</span>(fullRect.size.width / <span class=\"number\">2</span>, fullRect.size.height / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制前浪圆弧</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> frontStart = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:frontStartPoint];</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> frontEnd = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:frontEndPoint];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPathAddArc</span>(frontPath, <span class=\"literal\">nil</span>, centerPoint.x, centerPoint.y, waveRect.size.width / <span class=\"number\">2</span>, frontEnd, frontStart, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddPath</span>(context, frontPath);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(context);</span><br><span class=\"line\">    <span class=\"comment\">//推入</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSaveGState</span>(context);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextDrawPath</span>(context, kCGPathStroke);</span><br><span class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(frontPath);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制后浪圆弧</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> backStart = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:backStartPoint];</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> backEnd = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:backEndPoint];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPathAddArc</span>(backPath, <span class=\"literal\">nil</span>, centerPoint.x, centerPoint.y, waveRect.size.width / <span class=\"number\">2</span>, backEnd, backStart, <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetFillColorWithColor</span>(context, [_backWaterColor <span class=\"built_in\">CGColor</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddPath</span>(context, backPath);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(context);</span><br><span class=\"line\">    <span class=\"comment\">//推入</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSaveGState</span>(context);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextDrawPath</span>(context, kCGPathStroke);</span><br><span class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(backPath);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码较长，可能也比较难以理解。下面我将会对上述代码简单解读一下，已前浪为例（前浪和后浪的实现方式基本一样，只是两个浪正余弦函数不一样而已）。两个浪都是由一条曲线和和一个圆弧构成的封闭区间，曲线的x区间为<code>[0, waveRect.size.width]</code>，y值坐标为<code>frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>(currentLinePointY为偏移量)，通过for循环自增x，计算出y的位置来不断<code>CGPathAddLineToPoint</code>绘制出一条曲线，这就构成了波浪的曲线。然后我们需要根据波浪曲线的起始点和结束点以及圆心点(fullRect.size.width / 2, fullRect.size.height / 2)，来绘制一段封闭的圆弧。<br>这里就需要用到<code>CGPathAddArc</code>方法；<code>CGPathAddArc</code>方法和<code>CGContextAddArc</code>类似。需要先计算出点波浪的起始点和结束点分别与圆心之间的夹角。知道两点计算夹角的方式如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  根据圆心点和圆上一个点计算角度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param centerPoint 圆心点</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param point       圆上的一个点</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 角度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"built_in\">CGFloat</span>)calculateRotateDegree:(<span class=\"built_in\">CGPoint</span>)centerPoint point:(<span class=\"built_in\">CGPoint</span>)point &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> rotateDegree = asin(fabs(point.y - centerPoint.y) / (sqrt(pow(point.x - centerPoint.x, <span class=\"number\">2</span>) + pow(point.y - centerPoint.y, <span class=\"number\">2</span>))));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果point纵坐标大于原点centerPoint纵坐标(在第一和第二象限)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (point.y &gt; centerPoint.y) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一象限</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point.x &gt;= centerPoint.x) &#123;</span><br><span class=\"line\">            rotateDegree = rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//第二象限</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rotateDegree = M_PI - rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"comment\">//第三和第四象限</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point.x &lt;= centerPoint.x) <span class=\"comment\">//第三象限，不做任何处理</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rotateDegree = M_PI + rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//第四象限</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rotateDegree = <span class=\"number\">2</span> * M_PI - rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rotateDegree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"波浪绘制的相关判断\"><a href=\"#波浪绘制的相关判断\" class=\"headerlink\" title=\"波浪绘制的相关判断\"></a>波浪绘制的相关判断</h4><p>由于曲线x区间是<code>[0, waveRect.size.width]</code>，y值是根据公式<code>frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>计算出来的，但是最终构成的波浪是一个球形的，所以对于计算出来的y值坐标，我们需要判断它是否在圆上，如果不在圆上，我们应该将它移到圆上。</p>\n<p>判断分为两种情况：</p>\n<h5 id=\"currentLinePointY-lt-fullRect-size-height-2\"><a href=\"#currentLinePointY-lt-fullRect-size-height-2\" class=\"headerlink\" title=\"currentLinePointY&lt;fullRect.size.height / 2\"></a>currentLinePointY&lt;fullRect.size.height / 2</h5><p>当currentLinePointY&lt;fullRect.size.height / 2时，已知点的坐标x，根据公式<code>y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1&lt;y2 则最终应该放到波浪上的点为 <code>(x,y2)</code>。</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-6d980e01c0a78df8.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-6d980e01c0a78df8.png) -->\n\n<h5 id=\"currentLinePointY-gt-fullRect-size-height-2\"><a href=\"#currentLinePointY-gt-fullRect-size-height-2\" class=\"headerlink\" title=\"currentLinePointY&gt;fullRect.size.height / 2\"></a>currentLinePointY&gt;fullRect.size.height / 2</h5><p>同理当currentLinePointY&gt;fullRect.size.height / 2时，已知点的坐标x，根据公式<code>y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1&gt;y2 则最终应该放到波浪上的点为 <code>(x,y2)</code>。</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-11de31e505d895a1.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-11de31e505d895a1.png) -->\n\n<p>其中判断的代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontY = a * sin( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">4</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"built_in\">CGFloat</span> frontCircleY = frontY;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">    frontCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (frontY &lt; frontCircleY) &#123;</span><br><span class=\"line\">        frontY = frontCircleY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">    frontCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (frontY &gt; frontCircleY) &#123;</span><br><span class=\"line\">        frontY = frontCircleY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中当<code>currentLinePointY &lt; radius </code>时，<code>y2=radius - sqrt(pow(radius, 2) - pow((radius - x), 2))</code>;<br>当<code>currentLinePointY &gt; radius</code>时，<code>y2=radius + sqrt(pow(radius, 2) - pow((radius - x), 2))</code>；</p>\n<p>这样就构成了一个如下的效果：</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-cb9896a7ba570a22.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-cb9896a7ba570a22.png) -->\n\n<p>然后通过Timer不断的改变<code>a</code>、<code>b</code>的值就得到了我想要的动画效果。</p>\n<p>Github地址：<a href=\"https://github.com/Jvaeyhcd/HcdProcessView\">https://github.com/Jvaeyhcd/HcdProcessView</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.jianshu.com/p/239a650bf73a\">《iOS球形波浪加载进度控件－HcdProcessView》</a>这篇文章已经展示了我在项目中编写的一个球形进度加载控件HcdProcessView，这篇文章我要简单介绍一下我的制作过程。</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-aad2c9e81a2873c7.gif\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-aad2c9e81a2873c7.gif) -->\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>首先我放弃了使用通过改变图片的位置来实现上面的动画效果，虽然这样也可以实现如上的效果，但是从性能和资源消耗上来说都不是最好的选择。这里我采用了通过上下文（也就是CGContextRef）来绘制这样的效果，大家对它应该并不陌生，它既可以绘制直线、曲线、多边形圆形以及各种各样的几何图形。</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p>我们可以将上面的复杂图形拆分成如下几步：</p>\n<ol>\n<li>绘制最外面的一圈刻度尺</li>\n<li>绘制表示进度的刻度尺</li>\n<li>绘制中间的球形加载界面","more":"</li>\n</ol>\n<h3 id=\"绘制刻度尺\"><a href=\"#绘制刻度尺\" class=\"headerlink\" title=\"绘制刻度尺\"></a>绘制刻度尺</h3><p>如果你先要在控件中绘制自己想要的图形，你需要重写UIView的<code>drawRect</code>方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>drawRect</code>方法中，我们先画出了刻度尺的图形，刻度尺是由一圈短线在一个圆内围成的一个圆。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  画比例尺</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param context 全局context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)drawScale:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, _scaleDivisionsWidth);<span class=\"comment\">//线的宽度</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//先将参照点移到控件中心</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect.size.width / <span class=\"number\">2</span>, fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//设置线的颜色</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.655</span> green:<span class=\"number\">0.710</span> blue:<span class=\"number\">0.859</span> alpha:<span class=\"number\">1.00</span>].CGColor);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    <span class=\"comment\">//绘制一些图形</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; _scaleCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, scaleRect.size.width/<span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">//渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, <span class=\"number\">2</span> * M_PI / _scaleCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制刻度尺外的一个圈</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.694</span> green:<span class=\"number\">0.745</span> blue:<span class=\"number\">0.867</span> alpha:<span class=\"number\">1.00</span>].CGColor);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddArc</span> (context, <span class=\"number\">0</span>, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength - <span class=\"number\">3</span>, <span class=\"number\">0</span>, M_PI* <span class=\"number\">2</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//复原参照点</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, -fullRect.size.width / <span class=\"number\">2</span>, -fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要用到两个东西一个是<code>CGContextAddArc</code>，一个是<code>CGContextAddLineToPoint</code>。创建圆弧的方法有两种一种是<code>CGContextAddArc</code>，一种是<code>CGContextAddArcToPoint</code>，这里画的圆比较简单所以用的是<code>CGContextAddArc</code>,<code>CGContextAddArcToPoint</code>在后面也会用到（我会在用到的地方详解）。</p>\n<h4 id=\"CGContextAddArc\"><a href=\"#CGContextAddArc\" class=\"headerlink\" title=\"CGContextAddArc\"></a>CGContextAddArc</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"built_in\">CGContextAddArc</span> (</span><br><span class=\"line\">   <span class=\"built_in\">CGContextRef</span> c,    </span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> x,             <span class=\"comment\">//圆心的x坐标</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> y,   <span class=\"comment\">//圆心的x坐标</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> radius,   <span class=\"comment\">//圆的半径</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> startAngle,    <span class=\"comment\">//开始弧度</span></span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> endAngle,   <span class=\"comment\">//结束弧度</span></span><br><span class=\"line\">   <span class=\"type\">int</span> clockwise          <span class=\"comment\">//0表示顺时针，1表示逆时针</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这里需要创建一个完整的圆，那么 开始弧度就是0 结束弧度是 2PI， 因为圆周长是 2<em>PI</em>radius。函数执行完后，current point就被重置为(x,y)。<code>CGContextTranslateCTM(context, fullRect.size.width / 2, fullRect.size.width / 2);</code>已经将current point移动到了<code>(fullRect.size.width / 2, fullRect.size.width / 2)</code>。</p>\n<h4 id=\"CGContextAddLineToPoint\"><a href=\"#CGContextAddLineToPoint\" class=\"headerlink\" title=\"CGContextAddLineToPoint\"></a>CGContextAddLineToPoint</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"built_in\">CGContextAddLineToPoint</span> (</span><br><span class=\"line\">   <span class=\"built_in\">CGContextRef</span> c,</span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> x,</span><br><span class=\"line\">   <span class=\"built_in\">CGFloat</span> y</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p> 创建一条直线，从current point到 (x,y)<br> 然后current point会变成(x,y)。<br>由于短线不连续，所以通过for循环来不断画短线，<code>_scaleCount</code>代表的是刻度尺的个数，每次循环先将current point移动到<code>(scaleRect.size.width/2 - _scaleDivisionsLength, 0)</code>点，<code>_scaleDivisionsLength</code>代表短线的长度。绘制完短线后将前面绘制完成的图形旋转一个刻度尺的角度<code>CGContextRotateCTM(context, 2 * M_PI / _scaleCount);</code>，将最终的绘制渲染后就得到了如下的刻度尺：</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-282356612ba9f28c.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-282356612ba9f28c.png) -->\n\n<h3 id=\"刻度尺上的进度绘制\"><a href=\"#刻度尺上的进度绘制\" class=\"headerlink\" title=\"刻度尺上的进度绘制\"></a>刻度尺上的进度绘制</h3><p>首先在<code>drawRect</code>中添加<code>drawProcessScale</code>方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawProcessScale:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在<code>drawProcessScale</code>方法中实现左右两部分的刻度尺进度绘制。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  比例尺进度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param context 全局context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)drawProcessScale:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, _scaleDivisionsWidth);<span class=\"comment\">//线的宽度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect.size.width / <span class=\"number\">2</span>, fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.969</span> green:<span class=\"number\">0.937</span> blue:<span class=\"number\">0.227</span> alpha:<span class=\"number\">1.00</span>].CGColor);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> count = (_scaleCount / <span class=\"number\">2</span> + <span class=\"number\">1</span>) * currentPercent;</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> scaleAngle = <span class=\"number\">2</span> * M_PI / _scaleCount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制左边刻度进度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, scaleAngle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//绘制右边刻度进度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextRotateCTM</span>(context, -count * scaleAngle);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span> - _scaleDivisionsLength);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, <span class=\"number\">0</span>, scaleRect.size.width/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, -scaleAngle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, -fullRect.size.width / <span class=\"number\">2</span>, -fullRect.size.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绘制完后效果如下：</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-e85a60e792a0c99d.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-e85a60e792a0c99d.png) -->\n\n\n<h3 id=\"水的波浪效果绘制\"><a href=\"#水的波浪效果绘制\" class=\"headerlink\" title=\"水的波浪效果绘制\"></a>水的波浪效果绘制</h3><p>终于到了最主要也是最难的效果绘制了，对于带有波浪不断滚动的效果是采用NSTimer来不断绘制每一帧图形实现的，现在简单介绍下每一帧的绘制方法。<br>首先在<code>drawRect</code>中添加<code>drawWave</code>方法，</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawProcessScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawWave:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>drawWave</code>中实现如下方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  画波浪</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param context 全局context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)drawWave:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> frontPath = <span class=\"built_in\">CGPathCreateMutable</span>();</span><br><span class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> backPath = <span class=\"built_in\">CGPathCreateMutable</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//画水</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetFillColorWithColor</span>(context, [_frontWaterColor <span class=\"built_in\">CGColor</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> offset = _scaleMargin + _waveMargin + _scaleDivisionsWidth;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">float</span> frontY = currentLinePointY;</span><br><span class=\"line\">    <span class=\"type\">float</span> backY = currentLinePointY;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = waveRect.size.width / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> frontStartPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> frontEndPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> backStartPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> backEndPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">float</span> x = <span class=\"number\">0</span>; x &lt;= waveRect.size.width; x++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//前浪绘制</span></span><br><span class=\"line\">        frontY = a * sin( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">4</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> frontCircleY = frontY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">            frontCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frontY &lt; frontCircleY) &#123;</span><br><span class=\"line\">                frontY = frontCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">            frontCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frontY &gt; frontCircleY) &#123;</span><br><span class=\"line\">                frontY = frontCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fabs(<span class=\"number\">0</span> - x) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">            frontStartPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, frontY + offset);</span><br><span class=\"line\">            <span class=\"built_in\">CGPathMoveToPoint</span>(frontPath, <span class=\"literal\">NULL</span>, frontStartPoint.x, frontStartPoint.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        frontEndPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, frontY + offset);</span><br><span class=\"line\">        <span class=\"built_in\">CGPathAddLineToPoint</span>(frontPath, <span class=\"literal\">nil</span>, frontEndPoint.x, frontEndPoint.y);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//后波浪绘制</span></span><br><span class=\"line\">        backY = a * cos( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">3</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> backCircleY = backY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">            backCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backY &lt; backCircleY) &#123;</span><br><span class=\"line\">                backY = backCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">            backCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backY &gt; backCircleY) &#123;</span><br><span class=\"line\">                backY = backCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fabs(<span class=\"number\">0</span> - x) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">            backStartPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, backY + offset);</span><br><span class=\"line\">            <span class=\"built_in\">CGPathMoveToPoint</span>(backPath, <span class=\"literal\">NULL</span>, backStartPoint.x, backStartPoint.y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        backEndPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, backY + offset);</span><br><span class=\"line\">        <span class=\"built_in\">CGPathAddLineToPoint</span>(backPath, <span class=\"literal\">nil</span>, backEndPoint.x, backEndPoint.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> centerPoint = <span class=\"built_in\">CGPointMake</span>(fullRect.size.width / <span class=\"number\">2</span>, fullRect.size.height / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制前浪圆弧</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> frontStart = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:frontStartPoint];</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> frontEnd = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:frontEndPoint];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPathAddArc</span>(frontPath, <span class=\"literal\">nil</span>, centerPoint.x, centerPoint.y, waveRect.size.width / <span class=\"number\">2</span>, frontEnd, frontStart, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddPath</span>(context, frontPath);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(context);</span><br><span class=\"line\">    <span class=\"comment\">//推入</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSaveGState</span>(context);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextDrawPath</span>(context, kCGPathStroke);</span><br><span class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(frontPath);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制后浪圆弧</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> backStart = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:backStartPoint];</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> backEnd = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:backEndPoint];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPathAddArc</span>(backPath, <span class=\"literal\">nil</span>, centerPoint.x, centerPoint.y, waveRect.size.width / <span class=\"number\">2</span>, backEnd, backStart, <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetFillColorWithColor</span>(context, [_backWaterColor <span class=\"built_in\">CGColor</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddPath</span>(context, backPath);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(context);</span><br><span class=\"line\">    <span class=\"comment\">//推入</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSaveGState</span>(context);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextDrawPath</span>(context, kCGPathStroke);</span><br><span class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(backPath);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码较长，可能也比较难以理解。下面我将会对上述代码简单解读一下，已前浪为例（前浪和后浪的实现方式基本一样，只是两个浪正余弦函数不一样而已）。两个浪都是由一条曲线和和一个圆弧构成的封闭区间，曲线的x区间为<code>[0, waveRect.size.width]</code>，y值坐标为<code>frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>(currentLinePointY为偏移量)，通过for循环自增x，计算出y的位置来不断<code>CGPathAddLineToPoint</code>绘制出一条曲线，这就构成了波浪的曲线。然后我们需要根据波浪曲线的起始点和结束点以及圆心点(fullRect.size.width / 2, fullRect.size.height / 2)，来绘制一段封闭的圆弧。<br>这里就需要用到<code>CGPathAddArc</code>方法；<code>CGPathAddArc</code>方法和<code>CGContextAddArc</code>类似。需要先计算出点波浪的起始点和结束点分别与圆心之间的夹角。知道两点计算夹角的方式如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  根据圆心点和圆上一个点计算角度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param centerPoint 圆心点</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param point       圆上的一个点</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 角度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"built_in\">CGFloat</span>)calculateRotateDegree:(<span class=\"built_in\">CGPoint</span>)centerPoint point:(<span class=\"built_in\">CGPoint</span>)point &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> rotateDegree = asin(fabs(point.y - centerPoint.y) / (sqrt(pow(point.x - centerPoint.x, <span class=\"number\">2</span>) + pow(point.y - centerPoint.y, <span class=\"number\">2</span>))));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果point纵坐标大于原点centerPoint纵坐标(在第一和第二象限)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (point.y &gt; centerPoint.y) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一象限</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point.x &gt;= centerPoint.x) &#123;</span><br><span class=\"line\">            rotateDegree = rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//第二象限</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rotateDegree = M_PI - rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"comment\">//第三和第四象限</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point.x &lt;= centerPoint.x) <span class=\"comment\">//第三象限，不做任何处理</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rotateDegree = M_PI + rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//第四象限</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rotateDegree = <span class=\"number\">2</span> * M_PI - rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rotateDegree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"波浪绘制的相关判断\"><a href=\"#波浪绘制的相关判断\" class=\"headerlink\" title=\"波浪绘制的相关判断\"></a>波浪绘制的相关判断</h4><p>由于曲线x区间是<code>[0, waveRect.size.width]</code>，y值是根据公式<code>frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>计算出来的，但是最终构成的波浪是一个球形的，所以对于计算出来的y值坐标，我们需要判断它是否在圆上，如果不在圆上，我们应该将它移到圆上。</p>\n<p>判断分为两种情况：</p>\n<h5 id=\"currentLinePointY-lt-fullRect-size-height-2\"><a href=\"#currentLinePointY-lt-fullRect-size-height-2\" class=\"headerlink\" title=\"currentLinePointY&lt;fullRect.size.height / 2\"></a>currentLinePointY&lt;fullRect.size.height / 2</h5><p>当currentLinePointY&lt;fullRect.size.height / 2时，已知点的坐标x，根据公式<code>y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1&lt;y2 则最终应该放到波浪上的点为 <code>(x,y2)</code>。</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-6d980e01c0a78df8.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-6d980e01c0a78df8.png) -->\n\n<h5 id=\"currentLinePointY-gt-fullRect-size-height-2\"><a href=\"#currentLinePointY-gt-fullRect-size-height-2\" class=\"headerlink\" title=\"currentLinePointY&gt;fullRect.size.height / 2\"></a>currentLinePointY&gt;fullRect.size.height / 2</h5><p>同理当currentLinePointY&gt;fullRect.size.height / 2时，已知点的坐标x，根据公式<code>y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1&gt;y2 则最终应该放到波浪上的点为 <code>(x,y2)</code>。</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-11de31e505d895a1.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-11de31e505d895a1.png) -->\n\n<p>其中判断的代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontY = a * sin( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">4</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"built_in\">CGFloat</span> frontCircleY = frontY;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">    frontCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (frontY &lt; frontCircleY) &#123;</span><br><span class=\"line\">        frontY = frontCircleY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">    frontCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (frontY &gt; frontCircleY) &#123;</span><br><span class=\"line\">        frontY = frontCircleY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中当<code>currentLinePointY &lt; radius </code>时，<code>y2=radius - sqrt(pow(radius, 2) - pow((radius - x), 2))</code>;<br>当<code>currentLinePointY &gt; radius</code>时，<code>y2=radius + sqrt(pow(radius, 2) - pow((radius - x), 2))</code>；</p>\n<p>这样就构成了一个如下的效果：</p>\n<img src=\"/posts/720308c7cbe4e8d5/905614-cb9896a7ba570a22.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-cb9896a7ba570a22.png) -->\n\n<p>然后通过Timer不断的改变<code>a</code>、<code>b</code>的值就得到了我想要的动画效果。</p>\n<p>Github地址：<a href=\"https://github.com/Jvaeyhcd/HcdProcessView\">https://github.com/Jvaeyhcd/HcdProcessView</a></p>"},{"title":"CocoaPods的制作过程","date":"2016-07-08T09:14:00.000Z","abbrlink":"f0d17f38ce3c6038","_content":"\n最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。\n\n### 创建仓库\n\n#### 本地仓库\n使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。\n\n#### 远程仓库\n在github上同样创建一个`HcdCachePlayer`,最好保持同名,需要注意的是,在创建仓库的时候需要添加`license`类型,这里我使用`license`类型为`MIT`。这个很简单就不再啰嗦了。\n<!-- more -->\n#### 关联本地仓库到远程仓库\n进入本地仓库目录\n``` bash\ncd ~/github/HcdCachePlayer/\n```\n关联远程仓库\n``` bash\ngit init\ngit remote add origin https://github.com/Jvaeyhcd/HcdCachePlayer.git\ngit push -u origin master\n```\n\n### 添加Pods依赖库所需文件\n依赖库所需的文件格式为`{project}.podspec`格式，每个Pods依赖库必须有这个描述文件。\n\n#### 添加{project}.podspec文件\n\n使用pod命令创建\n``` bash\npod spec create HcdCachePlayer\n```\n这样就生成了HcdCachePlayer.podspec文件，打开该文件添加内容，并删除不需要的后就像这样：\n``` bash\nPod::Spec.new do |s|\n  s.name         = \"HcdCachePlayer\"\n  s.version      = \"0.0.1\"\n  s.summary      = \"一个带缓存的视频播放器HcdCachePlayer\"\n  s.description  = <<-DESC\n  一个使用AVPlayer封装的带缓存的视频播放器,支持全屏，可以左右滑动手势快进快退，上下滑动手势调节屏幕亮度\n                   DESC\n  s.homepage     = \"https://github.com/Jvaeyhcd/HcdCachePlayer\"\n  s.license      = { :type => \"MIT\", :file => \"LICENSE\" }\n  s.author             = { \"Jvaeyhcd\" => \"chedahuang@icloud.com\" }\n  s.platform     = :ios, '7.0'\n  s.source       = { :git => \"https://github.com/Jvaeyhcd/HcdCachePlayer.git\", :tag => s.version.to_s }\n  s.source_files  = \"hcdCachePlayer/**/*.{h,m}\"\n  s.resource  = \"hcdCachePlayer/hcdCachePlayer.bundle\"\n  s.frameworks = \"UIKit\", \"AVFoundation\", \"MobileCoreServices\", \"Foundation\"\n  s.requires_arc = true\n  s.dependency \"Masonry\"\nend\n\n```\ns.source_files指向循环滚动的核心代码放在项目的s.hcdCachePlayer/**/*.{h,m},所以这里最好将库代码都放在同一个目录下。\n\n### 提交到github\n此时编码已经完成了，并且配置好了相关文件我们可以先将代码提交到github上了。\n\n#### Pods验证\n提交之前我们需要先验证一下HcdCachePlayer.podspec文件。在HcdCachePlayer.podspec所在目录运行如下命令：\n``` bash\npod lib lint\n```\n如果出现ERROR和WARING都会失败，如果失败会明确指明哪个地方出错了，按提示修改就可以了。\n\n#### 提交代码到Github\n\n``` bash\ngit add .\ngit commit -m \"version 0.0.1\"\ngit push origin master\n```\n\n打上标签\n``` bash\ngit tag 0.0.1\ngit push --tags\n```\n不出问题的话,就可以在github上看到最新提交的内容了。\n\n### 上传{project}.podspec到CocoaPods官方仓库中\n要想一个HcdCachePlayer真正可以用,就得把生成的HcdCachePlayer.podspec文件提交到Cocoapods官方的[Specs](https://github.com/CocoaPods/Specs)仓库中,才能被search到并使用。\n\n> 之前的提交方式是先将[Specs](https://github.com/CocoaPods/Specs)仓库fork一份，添加修改，然后push，等待审核，这种显示是不安全的，所以现在不能使用了。也就是这篇文章：[《CocoaPods详解之----制作篇》](http://blog.csdn.net/wzzvictory/article/details/20067595)中说提到的方法，注意这个方法已经不能使用了。\n\nCocoaPods为我们提供了另外一个更加安全的方法[Trunk](http://blog.cocoapods.org/CocoaPods-Trunk/#transition)。\n\n#### Trunk的Register\n如果第一次使用的话那么就需要注册了，需要CocoaPods0.33版本以上才支持\n``` bash\npod trunk register *youremail* *yourname* --description='iMac' --verbose\n```\n以上命令是注册所需的,替换你的邮箱,用户名,以及描述内容, --verbose可以输入详细的debug。\n\n注册完成后可以使用一下命令查看注册信息\n``` bash\npod trunk me\n```\n#### 提交{project}.podspec\n在{project}.podspec文件的路径下执行\n``` bash\npod trunk push HcdCachePlayer.podspec\n```\n这条命令做了如下三件事:\n* 验证本地的podspec文件,也可以使用 pod lib lint验证\n* 上传podspec文件到trunk服务\n* 将{project}.podspec文件转为{poject}.podspec.json文件\n\n如果没有报错那么就成功了。\n\n#### 使用\n终端执行 pod search HcdCachePlayer就可以找到了,如果没有找到 pod setup再试一下。\n``` bash\n-> HcdCachePlayer (0.0.1)\n   一个带缓存的视频播放器HcdCachePlayer\n   pod 'HcdCachePlayer', '~> 0.0.1'\n   - Homepage: https://github.com/Jvaeyhcd/HcdCachePlayer\n   - Source:   https://github.com/Jvaeyhcd/HcdCachePlayer.git\n   - Versions: 0.0.1 [master repo]\n(END)\n```\n> 这里遇到一个问题创建成功了，但是另外一台电脑却收不到。\n\n#### 协同工作\n当需要其他人来共同维护你的代码,需要提供权限。\n``` bash\npod trunk add-owner HcdCachePlayer *email*\n```\n\n参考文章：\n\n[CocoaPods 详解之----更新篇](http://foggry.com/blog/2016/03/23/cocoapods-xiang-jie-zhi-geng-xin-pian/)\n","source":"_posts/CocoaPods的制作过程.md","raw":"---\ntitle: CocoaPods的制作过程\ndate: 2016-07-08 17:14:00\ntags:\n  - Cocoapods\ncategories: 经验积累\nabbrlink: f0d17f38ce3c6038\n---\n\n最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。\n\n### 创建仓库\n\n#### 本地仓库\n使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。\n\n#### 远程仓库\n在github上同样创建一个`HcdCachePlayer`,最好保持同名,需要注意的是,在创建仓库的时候需要添加`license`类型,这里我使用`license`类型为`MIT`。这个很简单就不再啰嗦了。\n<!-- more -->\n#### 关联本地仓库到远程仓库\n进入本地仓库目录\n``` bash\ncd ~/github/HcdCachePlayer/\n```\n关联远程仓库\n``` bash\ngit init\ngit remote add origin https://github.com/Jvaeyhcd/HcdCachePlayer.git\ngit push -u origin master\n```\n\n### 添加Pods依赖库所需文件\n依赖库所需的文件格式为`{project}.podspec`格式，每个Pods依赖库必须有这个描述文件。\n\n#### 添加{project}.podspec文件\n\n使用pod命令创建\n``` bash\npod spec create HcdCachePlayer\n```\n这样就生成了HcdCachePlayer.podspec文件，打开该文件添加内容，并删除不需要的后就像这样：\n``` bash\nPod::Spec.new do |s|\n  s.name         = \"HcdCachePlayer\"\n  s.version      = \"0.0.1\"\n  s.summary      = \"一个带缓存的视频播放器HcdCachePlayer\"\n  s.description  = <<-DESC\n  一个使用AVPlayer封装的带缓存的视频播放器,支持全屏，可以左右滑动手势快进快退，上下滑动手势调节屏幕亮度\n                   DESC\n  s.homepage     = \"https://github.com/Jvaeyhcd/HcdCachePlayer\"\n  s.license      = { :type => \"MIT\", :file => \"LICENSE\" }\n  s.author             = { \"Jvaeyhcd\" => \"chedahuang@icloud.com\" }\n  s.platform     = :ios, '7.0'\n  s.source       = { :git => \"https://github.com/Jvaeyhcd/HcdCachePlayer.git\", :tag => s.version.to_s }\n  s.source_files  = \"hcdCachePlayer/**/*.{h,m}\"\n  s.resource  = \"hcdCachePlayer/hcdCachePlayer.bundle\"\n  s.frameworks = \"UIKit\", \"AVFoundation\", \"MobileCoreServices\", \"Foundation\"\n  s.requires_arc = true\n  s.dependency \"Masonry\"\nend\n\n```\ns.source_files指向循环滚动的核心代码放在项目的s.hcdCachePlayer/**/*.{h,m},所以这里最好将库代码都放在同一个目录下。\n\n### 提交到github\n此时编码已经完成了，并且配置好了相关文件我们可以先将代码提交到github上了。\n\n#### Pods验证\n提交之前我们需要先验证一下HcdCachePlayer.podspec文件。在HcdCachePlayer.podspec所在目录运行如下命令：\n``` bash\npod lib lint\n```\n如果出现ERROR和WARING都会失败，如果失败会明确指明哪个地方出错了，按提示修改就可以了。\n\n#### 提交代码到Github\n\n``` bash\ngit add .\ngit commit -m \"version 0.0.1\"\ngit push origin master\n```\n\n打上标签\n``` bash\ngit tag 0.0.1\ngit push --tags\n```\n不出问题的话,就可以在github上看到最新提交的内容了。\n\n### 上传{project}.podspec到CocoaPods官方仓库中\n要想一个HcdCachePlayer真正可以用,就得把生成的HcdCachePlayer.podspec文件提交到Cocoapods官方的[Specs](https://github.com/CocoaPods/Specs)仓库中,才能被search到并使用。\n\n> 之前的提交方式是先将[Specs](https://github.com/CocoaPods/Specs)仓库fork一份，添加修改，然后push，等待审核，这种显示是不安全的，所以现在不能使用了。也就是这篇文章：[《CocoaPods详解之----制作篇》](http://blog.csdn.net/wzzvictory/article/details/20067595)中说提到的方法，注意这个方法已经不能使用了。\n\nCocoaPods为我们提供了另外一个更加安全的方法[Trunk](http://blog.cocoapods.org/CocoaPods-Trunk/#transition)。\n\n#### Trunk的Register\n如果第一次使用的话那么就需要注册了，需要CocoaPods0.33版本以上才支持\n``` bash\npod trunk register *youremail* *yourname* --description='iMac' --verbose\n```\n以上命令是注册所需的,替换你的邮箱,用户名,以及描述内容, --verbose可以输入详细的debug。\n\n注册完成后可以使用一下命令查看注册信息\n``` bash\npod trunk me\n```\n#### 提交{project}.podspec\n在{project}.podspec文件的路径下执行\n``` bash\npod trunk push HcdCachePlayer.podspec\n```\n这条命令做了如下三件事:\n* 验证本地的podspec文件,也可以使用 pod lib lint验证\n* 上传podspec文件到trunk服务\n* 将{project}.podspec文件转为{poject}.podspec.json文件\n\n如果没有报错那么就成功了。\n\n#### 使用\n终端执行 pod search HcdCachePlayer就可以找到了,如果没有找到 pod setup再试一下。\n``` bash\n-> HcdCachePlayer (0.0.1)\n   一个带缓存的视频播放器HcdCachePlayer\n   pod 'HcdCachePlayer', '~> 0.0.1'\n   - Homepage: https://github.com/Jvaeyhcd/HcdCachePlayer\n   - Source:   https://github.com/Jvaeyhcd/HcdCachePlayer.git\n   - Versions: 0.0.1 [master repo]\n(END)\n```\n> 这里遇到一个问题创建成功了，但是另外一台电脑却收不到。\n\n#### 协同工作\n当需要其他人来共同维护你的代码,需要提供权限。\n``` bash\npod trunk add-owner HcdCachePlayer *email*\n```\n\n参考文章：\n\n[CocoaPods 详解之----更新篇](http://foggry.com/blog/2016/03/23/cocoapods-xiang-jie-zhi-geng-xin-pian/)\n","slug":"CocoaPods的制作过程","published":1,"updated":"2022-05-19T03:13:11.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenl000il1l3fyz3cizi","content":"<p>最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><h4 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h4><p>使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。</p>\n<h4 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h4><p>在github上同样创建一个<code>HcdCachePlayer</code>,最好保持同名,需要注意的是,在创建仓库的时候需要添加<code>license</code>类型,这里我使用<code>license</code>类型为<code>MIT</code>。这个很简单就不再啰嗦了。</p>\n<span id=\"more\"></span>\n<h4 id=\"关联本地仓库到远程仓库\"><a href=\"#关联本地仓库到远程仓库\" class=\"headerlink\" title=\"关联本地仓库到远程仓库\"></a>关联本地仓库到远程仓库</h4><p>进入本地仓库目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/github/HcdCachePlayer/</span><br></pre></td></tr></table></figure>\n<p>关联远程仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https://github.com/Jvaeyhcd/HcdCachePlayer.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加Pods依赖库所需文件\"><a href=\"#添加Pods依赖库所需文件\" class=\"headerlink\" title=\"添加Pods依赖库所需文件\"></a>添加Pods依赖库所需文件</h3><p>依赖库所需的文件格式为<code>&#123;project&#125;.podspec</code>格式，每个Pods依赖库必须有这个描述文件。</p>\n<h4 id=\"添加-project-podspec文件\"><a href=\"#添加-project-podspec文件\" class=\"headerlink\" title=\"添加{project}.podspec文件\"></a>添加{project}.podspec文件</h4><p>使用pod命令创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create HcdCachePlayer</span><br></pre></td></tr></table></figure>\n<p>这样就生成了HcdCachePlayer.podspec文件，打开该文件添加内容，并删除不需要的后就像这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> |s|</span><br><span class=\"line\">  s.name         = <span class=\"string\">&quot;HcdCachePlayer&quot;</span></span><br><span class=\"line\">  s.version      = <span class=\"string\">&quot;0.0.1&quot;</span></span><br><span class=\"line\">  s.summary      = <span class=\"string\">&quot;一个带缓存的视频播放器HcdCachePlayer&quot;</span></span><br><span class=\"line\">  s.description  = &lt;&lt;-<span class=\"string\">DESC</span></span><br><span class=\"line\"><span class=\"string\">  一个使用AVPlayer封装的带缓存的视频播放器,支持全屏，可以左右滑动手势快进快退，上下滑动手势调节屏幕亮度</span></span><br><span class=\"line\"><span class=\"string\">                   DESC</span></span><br><span class=\"line\">  s.homepage     = <span class=\"string\">&quot;https://github.com/Jvaeyhcd/HcdCachePlayer&quot;</span></span><br><span class=\"line\">  s.license      = &#123; :<span class=\"built_in\">type</span> =&gt; <span class=\"string\">&quot;MIT&quot;</span>, :file =&gt; <span class=\"string\">&quot;LICENSE&quot;</span> &#125;</span><br><span class=\"line\">  s.author             = &#123; <span class=\"string\">&quot;Jvaeyhcd&quot;</span> =&gt; <span class=\"string\">&quot;chedahuang@icloud.com&quot;</span> &#125;</span><br><span class=\"line\">  s.platform     = :ios, <span class=\"string\">&#x27;7.0&#x27;</span></span><br><span class=\"line\">  s.source       = &#123; :git =&gt; <span class=\"string\">&quot;https://github.com/Jvaeyhcd/HcdCachePlayer.git&quot;</span>, :tag =&gt; s.version.to_s &#125;</span><br><span class=\"line\">  s.source_files  = <span class=\"string\">&quot;hcdCachePlayer/**/*.&#123;h,m&#125;&quot;</span></span><br><span class=\"line\">  s.resource  = <span class=\"string\">&quot;hcdCachePlayer/hcdCachePlayer.bundle&quot;</span></span><br><span class=\"line\">  s.frameworks = <span class=\"string\">&quot;UIKit&quot;</span>, <span class=\"string\">&quot;AVFoundation&quot;</span>, <span class=\"string\">&quot;MobileCoreServices&quot;</span>, <span class=\"string\">&quot;Foundation&quot;</span></span><br><span class=\"line\">  s.requires_arc = <span class=\"literal\">true</span></span><br><span class=\"line\">  s.dependency <span class=\"string\">&quot;Masonry&quot;</span></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>s.source_files指向循环滚动的核心代码放在项目的s.hcdCachePlayer/**/*.{h,m},所以这里最好将库代码都放在同一个目录下。</p>\n<h3 id=\"提交到github\"><a href=\"#提交到github\" class=\"headerlink\" title=\"提交到github\"></a>提交到github</h3><p>此时编码已经完成了，并且配置好了相关文件我们可以先将代码提交到github上了。</p>\n<h4 id=\"Pods验证\"><a href=\"#Pods验证\" class=\"headerlink\" title=\"Pods验证\"></a>Pods验证</h4><p>提交之前我们需要先验证一下HcdCachePlayer.podspec文件。在HcdCachePlayer.podspec所在目录运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint</span><br></pre></td></tr></table></figure>\n<p>如果出现ERROR和WARING都会失败，如果失败会明确指明哪个地方出错了，按提示修改就可以了。</p>\n<h4 id=\"提交代码到Github\"><a href=\"#提交代码到Github\" class=\"headerlink\" title=\"提交代码到Github\"></a>提交代码到Github</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;version 0.0.1&quot;</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>打上标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 0.0.1</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n<p>不出问题的话,就可以在github上看到最新提交的内容了。</p>\n<h3 id=\"上传-project-podspec到CocoaPods官方仓库中\"><a href=\"#上传-project-podspec到CocoaPods官方仓库中\" class=\"headerlink\" title=\"上传{project}.podspec到CocoaPods官方仓库中\"></a>上传{project}.podspec到CocoaPods官方仓库中</h3><p>要想一个HcdCachePlayer真正可以用,就得把生成的HcdCachePlayer.podspec文件提交到Cocoapods官方的<a href=\"https://github.com/CocoaPods/Specs\">Specs</a>仓库中,才能被search到并使用。</p>\n<blockquote>\n<p>之前的提交方式是先将<a href=\"https://github.com/CocoaPods/Specs\">Specs</a>仓库fork一份，添加修改，然后push，等待审核，这种显示是不安全的，所以现在不能使用了。也就是这篇文章：<a href=\"http://blog.csdn.net/wzzvictory/article/details/20067595\">《CocoaPods详解之—-制作篇》</a>中说提到的方法，注意这个方法已经不能使用了。</p>\n</blockquote>\n<p>CocoaPods为我们提供了另外一个更加安全的方法<a href=\"http://blog.cocoapods.org/CocoaPods-Trunk/#transition\">Trunk</a>。</p>\n<h4 id=\"Trunk的Register\"><a href=\"#Trunk的Register\" class=\"headerlink\" title=\"Trunk的Register\"></a>Trunk的Register</h4><p>如果第一次使用的话那么就需要注册了，需要CocoaPods0.33版本以上才支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk register *youremail* *yourname* --description=<span class=\"string\">&#x27;iMac&#x27;</span> --verbose</span><br></pre></td></tr></table></figure>\n<p>以上命令是注册所需的,替换你的邮箱,用户名,以及描述内容, –verbose可以输入详细的debug。</p>\n<p>注册完成后可以使用一下命令查看注册信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk me</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交-project-podspec\"><a href=\"#提交-project-podspec\" class=\"headerlink\" title=\"提交{project}.podspec\"></a>提交{project}.podspec</h4><p>在{project}.podspec文件的路径下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push HcdCachePlayer.podspec</span><br></pre></td></tr></table></figure>\n<p>这条命令做了如下三件事:</p>\n<ul>\n<li>验证本地的podspec文件,也可以使用 pod lib lint验证</li>\n<li>上传podspec文件到trunk服务</li>\n<li>将{project}.podspec文件转为{poject}.podspec.json文件</li>\n</ul>\n<p>如果没有报错那么就成功了。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>终端执行 pod search HcdCachePlayer就可以找到了,如果没有找到 pod setup再试一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; HcdCachePlayer (0.0.1)</span><br><span class=\"line\">   一个带缓存的视频播放器HcdCachePlayer</span><br><span class=\"line\">   pod <span class=\"string\">&#x27;HcdCachePlayer&#x27;</span>, <span class=\"string\">&#x27;~&gt; 0.0.1&#x27;</span></span><br><span class=\"line\">   - Homepage: https://github.com/Jvaeyhcd/HcdCachePlayer</span><br><span class=\"line\">   - Source:   https://github.com/Jvaeyhcd/HcdCachePlayer.git</span><br><span class=\"line\">   - Versions: 0.0.1 [master repo]</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里遇到一个问题创建成功了，但是另外一台电脑却收不到。</p>\n</blockquote>\n<h4 id=\"协同工作\"><a href=\"#协同工作\" class=\"headerlink\" title=\"协同工作\"></a>协同工作</h4><p>当需要其他人来共同维护你的代码,需要提供权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk add-owner HcdCachePlayer *email*</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<p><a href=\"http://foggry.com/blog/2016/03/23/cocoapods-xiang-jie-zhi-geng-xin-pian/\">CocoaPods 详解之—-更新篇</a></p>\n","site":{"data":{}},"excerpt":"<p>最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><h4 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h4><p>使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。</p>\n<h4 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h4><p>在github上同样创建一个<code>HcdCachePlayer</code>,最好保持同名,需要注意的是,在创建仓库的时候需要添加<code>license</code>类型,这里我使用<code>license</code>类型为<code>MIT</code>。这个很简单就不再啰嗦了。</p>","more":"<h4 id=\"关联本地仓库到远程仓库\"><a href=\"#关联本地仓库到远程仓库\" class=\"headerlink\" title=\"关联本地仓库到远程仓库\"></a>关联本地仓库到远程仓库</h4><p>进入本地仓库目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/github/HcdCachePlayer/</span><br></pre></td></tr></table></figure>\n<p>关联远程仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https://github.com/Jvaeyhcd/HcdCachePlayer.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加Pods依赖库所需文件\"><a href=\"#添加Pods依赖库所需文件\" class=\"headerlink\" title=\"添加Pods依赖库所需文件\"></a>添加Pods依赖库所需文件</h3><p>依赖库所需的文件格式为<code>&#123;project&#125;.podspec</code>格式，每个Pods依赖库必须有这个描述文件。</p>\n<h4 id=\"添加-project-podspec文件\"><a href=\"#添加-project-podspec文件\" class=\"headerlink\" title=\"添加{project}.podspec文件\"></a>添加{project}.podspec文件</h4><p>使用pod命令创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create HcdCachePlayer</span><br></pre></td></tr></table></figure>\n<p>这样就生成了HcdCachePlayer.podspec文件，打开该文件添加内容，并删除不需要的后就像这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> |s|</span><br><span class=\"line\">  s.name         = <span class=\"string\">&quot;HcdCachePlayer&quot;</span></span><br><span class=\"line\">  s.version      = <span class=\"string\">&quot;0.0.1&quot;</span></span><br><span class=\"line\">  s.summary      = <span class=\"string\">&quot;一个带缓存的视频播放器HcdCachePlayer&quot;</span></span><br><span class=\"line\">  s.description  = &lt;&lt;-<span class=\"string\">DESC</span></span><br><span class=\"line\"><span class=\"string\">  一个使用AVPlayer封装的带缓存的视频播放器,支持全屏，可以左右滑动手势快进快退，上下滑动手势调节屏幕亮度</span></span><br><span class=\"line\"><span class=\"string\">                   DESC</span></span><br><span class=\"line\">  s.homepage     = <span class=\"string\">&quot;https://github.com/Jvaeyhcd/HcdCachePlayer&quot;</span></span><br><span class=\"line\">  s.license      = &#123; :<span class=\"built_in\">type</span> =&gt; <span class=\"string\">&quot;MIT&quot;</span>, :file =&gt; <span class=\"string\">&quot;LICENSE&quot;</span> &#125;</span><br><span class=\"line\">  s.author             = &#123; <span class=\"string\">&quot;Jvaeyhcd&quot;</span> =&gt; <span class=\"string\">&quot;chedahuang@icloud.com&quot;</span> &#125;</span><br><span class=\"line\">  s.platform     = :ios, <span class=\"string\">&#x27;7.0&#x27;</span></span><br><span class=\"line\">  s.source       = &#123; :git =&gt; <span class=\"string\">&quot;https://github.com/Jvaeyhcd/HcdCachePlayer.git&quot;</span>, :tag =&gt; s.version.to_s &#125;</span><br><span class=\"line\">  s.source_files  = <span class=\"string\">&quot;hcdCachePlayer/**/*.&#123;h,m&#125;&quot;</span></span><br><span class=\"line\">  s.resource  = <span class=\"string\">&quot;hcdCachePlayer/hcdCachePlayer.bundle&quot;</span></span><br><span class=\"line\">  s.frameworks = <span class=\"string\">&quot;UIKit&quot;</span>, <span class=\"string\">&quot;AVFoundation&quot;</span>, <span class=\"string\">&quot;MobileCoreServices&quot;</span>, <span class=\"string\">&quot;Foundation&quot;</span></span><br><span class=\"line\">  s.requires_arc = <span class=\"literal\">true</span></span><br><span class=\"line\">  s.dependency <span class=\"string\">&quot;Masonry&quot;</span></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>s.source_files指向循环滚动的核心代码放在项目的s.hcdCachePlayer/**/*.{h,m},所以这里最好将库代码都放在同一个目录下。</p>\n<h3 id=\"提交到github\"><a href=\"#提交到github\" class=\"headerlink\" title=\"提交到github\"></a>提交到github</h3><p>此时编码已经完成了，并且配置好了相关文件我们可以先将代码提交到github上了。</p>\n<h4 id=\"Pods验证\"><a href=\"#Pods验证\" class=\"headerlink\" title=\"Pods验证\"></a>Pods验证</h4><p>提交之前我们需要先验证一下HcdCachePlayer.podspec文件。在HcdCachePlayer.podspec所在目录运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint</span><br></pre></td></tr></table></figure>\n<p>如果出现ERROR和WARING都会失败，如果失败会明确指明哪个地方出错了，按提示修改就可以了。</p>\n<h4 id=\"提交代码到Github\"><a href=\"#提交代码到Github\" class=\"headerlink\" title=\"提交代码到Github\"></a>提交代码到Github</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;version 0.0.1&quot;</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>打上标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 0.0.1</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n<p>不出问题的话,就可以在github上看到最新提交的内容了。</p>\n<h3 id=\"上传-project-podspec到CocoaPods官方仓库中\"><a href=\"#上传-project-podspec到CocoaPods官方仓库中\" class=\"headerlink\" title=\"上传{project}.podspec到CocoaPods官方仓库中\"></a>上传{project}.podspec到CocoaPods官方仓库中</h3><p>要想一个HcdCachePlayer真正可以用,就得把生成的HcdCachePlayer.podspec文件提交到Cocoapods官方的<a href=\"https://github.com/CocoaPods/Specs\">Specs</a>仓库中,才能被search到并使用。</p>\n<blockquote>\n<p>之前的提交方式是先将<a href=\"https://github.com/CocoaPods/Specs\">Specs</a>仓库fork一份，添加修改，然后push，等待审核，这种显示是不安全的，所以现在不能使用了。也就是这篇文章：<a href=\"http://blog.csdn.net/wzzvictory/article/details/20067595\">《CocoaPods详解之—-制作篇》</a>中说提到的方法，注意这个方法已经不能使用了。</p>\n</blockquote>\n<p>CocoaPods为我们提供了另外一个更加安全的方法<a href=\"http://blog.cocoapods.org/CocoaPods-Trunk/#transition\">Trunk</a>。</p>\n<h4 id=\"Trunk的Register\"><a href=\"#Trunk的Register\" class=\"headerlink\" title=\"Trunk的Register\"></a>Trunk的Register</h4><p>如果第一次使用的话那么就需要注册了，需要CocoaPods0.33版本以上才支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk register *youremail* *yourname* --description=<span class=\"string\">&#x27;iMac&#x27;</span> --verbose</span><br></pre></td></tr></table></figure>\n<p>以上命令是注册所需的,替换你的邮箱,用户名,以及描述内容, –verbose可以输入详细的debug。</p>\n<p>注册完成后可以使用一下命令查看注册信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk me</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交-project-podspec\"><a href=\"#提交-project-podspec\" class=\"headerlink\" title=\"提交{project}.podspec\"></a>提交{project}.podspec</h4><p>在{project}.podspec文件的路径下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push HcdCachePlayer.podspec</span><br></pre></td></tr></table></figure>\n<p>这条命令做了如下三件事:</p>\n<ul>\n<li>验证本地的podspec文件,也可以使用 pod lib lint验证</li>\n<li>上传podspec文件到trunk服务</li>\n<li>将{project}.podspec文件转为{poject}.podspec.json文件</li>\n</ul>\n<p>如果没有报错那么就成功了。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>终端执行 pod search HcdCachePlayer就可以找到了,如果没有找到 pod setup再试一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; HcdCachePlayer (0.0.1)</span><br><span class=\"line\">   一个带缓存的视频播放器HcdCachePlayer</span><br><span class=\"line\">   pod <span class=\"string\">&#x27;HcdCachePlayer&#x27;</span>, <span class=\"string\">&#x27;~&gt; 0.0.1&#x27;</span></span><br><span class=\"line\">   - Homepage: https://github.com/Jvaeyhcd/HcdCachePlayer</span><br><span class=\"line\">   - Source:   https://github.com/Jvaeyhcd/HcdCachePlayer.git</span><br><span class=\"line\">   - Versions: 0.0.1 [master repo]</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里遇到一个问题创建成功了，但是另外一台电脑却收不到。</p>\n</blockquote>\n<h4 id=\"协同工作\"><a href=\"#协同工作\" class=\"headerlink\" title=\"协同工作\"></a>协同工作</h4><p>当需要其他人来共同维护你的代码,需要提供权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk add-owner HcdCachePlayer *email*</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<p><a href=\"http://foggry.com/blog/2016/03/23/cocoapods-xiang-jie-zhi-geng-xin-pian/\">CocoaPods 详解之—-更新篇</a></p>"},{"title":"CocosPods使用过程中遇到的一些问题，以及解决办法","date":"2016-06-16T07:21:30.000Z","abbrlink":"47287f287faf96e1","_content":"\n经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。\n\n## library not found for -lPods ##\n### 问题描述\n这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下\n``` bash\nld: library not found for -lPods\n```\n<!-- more -->\n\n### 解决办法\n于是在网上搜索了一番找打了一篇帖子：http://www.cocoachina.com/bbs/read.php?tid-253614.html\n\n各种各样的回复都有，我最终的解决步骤如下：\n1. 更新cocospods到最新版本，注：gem的最新的镜像地址：[https://gems.ruby-china.org/](https://gems.ruby-china.org/)， 淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。\n2. 在Build Setting > Other Linker Flag 中删除所有，只留下$(inherited)轻松解决。\n\n其实还有一个原因就是我的工程目录名称和Finder工程目录的文件夹不一致造成的。\n","source":"_posts/CocosPods使用过程中遇到的一些问题，以及解决办法.md","raw":"---\ntitle: CocosPods使用过程中遇到的一些问题，以及解决办法\ndate: 2016-06-16 15:21:30\ntags:\n  - Cocoapods\ncategories: 经验积累\nabbrlink: 47287f287faf96e1\n---\n\n经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。\n\n## library not found for -lPods ##\n### 问题描述\n这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下\n``` bash\nld: library not found for -lPods\n```\n<!-- more -->\n\n### 解决办法\n于是在网上搜索了一番找打了一篇帖子：http://www.cocoachina.com/bbs/read.php?tid-253614.html\n\n各种各样的回复都有，我最终的解决步骤如下：\n1. 更新cocospods到最新版本，注：gem的最新的镜像地址：[https://gems.ruby-china.org/](https://gems.ruby-china.org/)， 淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。\n2. 在Build Setting > Other Linker Flag 中删除所有，只留下$(inherited)轻松解决。\n\n其实还有一个原因就是我的工程目录名称和Finder工程目录的文件夹不一致造成的。\n","slug":"CocosPods使用过程中遇到的一些问题，以及解决办法","published":1,"updated":"2022-05-19T03:13:11.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenm000ol1l3ajd3h0oi","content":"<p>经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。</p>\n<h2 id=\"library-not-found-for-lPods\"><a href=\"#library-not-found-for-lPods\" class=\"headerlink\" title=\"library not found for -lPods\"></a>library not found for -lPods</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld: library not found <span class=\"keyword\">for</span> -lPods</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>于是在网上搜索了一番找打了一篇帖子：<a href=\"http://www.cocoachina.com/bbs/read.php?tid-253614.html\">http://www.cocoachina.com/bbs/read.php?tid-253614.html</a></p>\n<p>各种各样的回复都有，我最终的解决步骤如下：</p>\n<ol>\n<li>更新cocospods到最新版本，注：gem的最新的镜像地址：<a href=\"https://gems.ruby-china.org/\">https://gems.ruby-china.org/</a>， 淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。</li>\n<li>在Build Setting &gt; Other Linker Flag 中删除所有，只留下$(inherited)轻松解决。</li>\n</ol>\n<p>其实还有一个原因就是我的工程目录名称和Finder工程目录的文件夹不一致造成的。</p>\n","site":{"data":{}},"excerpt":"<p>经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。</p>\n<h2 id=\"library-not-found-for-lPods\"><a href=\"#library-not-found-for-lPods\" class=\"headerlink\" title=\"library not found for -lPods\"></a>library not found for -lPods</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld: library not found <span class=\"keyword\">for</span> -lPods</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>于是在网上搜索了一番找打了一篇帖子：<a href=\"http://www.cocoachina.com/bbs/read.php?tid-253614.html\">http://www.cocoachina.com/bbs/read.php?tid-253614.html</a></p>\n<p>各种各样的回复都有，我最终的解决步骤如下：</p>\n<ol>\n<li>更新cocospods到最新版本，注：gem的最新的镜像地址：<a href=\"https://gems.ruby-china.org/\">https://gems.ruby-china.org/</a>， 淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。</li>\n<li>在Build Setting &gt; Other Linker Flag 中删除所有，只留下$(inherited)轻松解决。</li>\n</ol>\n<p>其实还有一个原因就是我的工程目录名称和Finder工程目录的文件夹不一致造成的。</p>"},{"title":"Cocoapods无法search到库的解决办法","date":"2016-10-09T09:05:43.000Z","abbrlink":"c0f2c0ac4dc26ecc","_content":"\n## 缘由\n\n按照往常的方法一样安装Cocoapods，在安装的过程中遇到了一切问题，按照传统的命令`sudo gem install cocoapods`出现了如下的错误：\n``` bash\nERROR:  While executing gem ... (Errno::EPERM)\n    Operation not permitted - /usr/bin/pod\n```\n然后再[stackoverflow](http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030)上找到了如下的解决办法:\n``` bash\nsudo gem install -n /usr/local/bin cocoapods -v 1.0.1\n```\n-v可以跟版本号，来按照您想安装的版本。\n这就这样Cocopods安装成功了，当然如果您没有翻墙的话安装Cocoapods需要切换ruby源到[https://gems.ruby-china.org](https://gems.ruby-china.org)，具体按照可以参考我的这篇文章[《CocoaPods安装和使用教程》](http://jvaeyhcd.github.io/2016/02/20/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/)。\n<!-- more -->\n当我以为一切就绪的时候，我`pod search RxSwift`却提示我如下的错误：\n``` bash\n[!] Unable to find a pod with name, author, summary, or descriptionmatching '······'\n```\n\n> 对于有些类库确实是在Cocoapods中所不存在的，为了确定我们搜索的库是不是真的在Cocoapods的Repos中存在，我们可以到[https://cocoapods.org/](https://cocoapods.org/)中进行搜索。\n\n## 解决办法\n\n在记录一下自己的解决办法，同时分享一下自己的经验，希望能够帮助到大家。\n\n### 执行pod setup\n* 在终端输入`pod setup`,会出现`Setting up CocoaPods master repo`，等几分钟，会输入`Setup completed`，说明`pod setup`执行成功。\n* 结果pod search还是失败\n* 在终端输入`pod search RxSwift`\n* 依然还是提示`Unable to find a pod with name, author, summary, or descriptionmatching 'RxSwift'`。\n* 但是我输入`pod search pop`，却有相应的结果。\n\n### 删除~/Library/Caches/CocoaPods目录下的search_index.json文件\n* `pod setup`成功后会生成`~/Library/Caches/CocoaPods/search_index.json`文件。\n* 终端输入`rm ~/Library/Caches/CocoaPods/search_index.json`\n* 删除成功后再执行`pod search`\n\n### 执行pod search\n\n* 终端输入：`pod search RxSwift`(不区分大小写)\n* 输出：`Creating search index for spec repo 'master'.. Done!`，稍等片刻就会出现所有带RxSwift字段的类库出现。\n","source":"_posts/Cocoapods无法search到库的解决办法.md","raw":"---\ntitle: Cocoapods无法search到库的解决办法\ndate: 2016-10-09 17:05:43\ntags:\n  - Cocoapods\ncategories: 经验积累\nabbrlink: c0f2c0ac4dc26ecc\n---\n\n## 缘由\n\n按照往常的方法一样安装Cocoapods，在安装的过程中遇到了一切问题，按照传统的命令`sudo gem install cocoapods`出现了如下的错误：\n``` bash\nERROR:  While executing gem ... (Errno::EPERM)\n    Operation not permitted - /usr/bin/pod\n```\n然后再[stackoverflow](http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030)上找到了如下的解决办法:\n``` bash\nsudo gem install -n /usr/local/bin cocoapods -v 1.0.1\n```\n-v可以跟版本号，来按照您想安装的版本。\n这就这样Cocopods安装成功了，当然如果您没有翻墙的话安装Cocoapods需要切换ruby源到[https://gems.ruby-china.org](https://gems.ruby-china.org)，具体按照可以参考我的这篇文章[《CocoaPods安装和使用教程》](http://jvaeyhcd.github.io/2016/02/20/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/)。\n<!-- more -->\n当我以为一切就绪的时候，我`pod search RxSwift`却提示我如下的错误：\n``` bash\n[!] Unable to find a pod with name, author, summary, or descriptionmatching '······'\n```\n\n> 对于有些类库确实是在Cocoapods中所不存在的，为了确定我们搜索的库是不是真的在Cocoapods的Repos中存在，我们可以到[https://cocoapods.org/](https://cocoapods.org/)中进行搜索。\n\n## 解决办法\n\n在记录一下自己的解决办法，同时分享一下自己的经验，希望能够帮助到大家。\n\n### 执行pod setup\n* 在终端输入`pod setup`,会出现`Setting up CocoaPods master repo`，等几分钟，会输入`Setup completed`，说明`pod setup`执行成功。\n* 结果pod search还是失败\n* 在终端输入`pod search RxSwift`\n* 依然还是提示`Unable to find a pod with name, author, summary, or descriptionmatching 'RxSwift'`。\n* 但是我输入`pod search pop`，却有相应的结果。\n\n### 删除~/Library/Caches/CocoaPods目录下的search_index.json文件\n* `pod setup`成功后会生成`~/Library/Caches/CocoaPods/search_index.json`文件。\n* 终端输入`rm ~/Library/Caches/CocoaPods/search_index.json`\n* 删除成功后再执行`pod search`\n\n### 执行pod search\n\n* 终端输入：`pod search RxSwift`(不区分大小写)\n* 输出：`Creating search index for spec repo 'master'.. Done!`，稍等片刻就会出现所有带RxSwift字段的类库出现。\n","slug":"Cocoapods无法search到库的解决办法","published":1,"updated":"2022-05-19T03:13:11.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenm000ql1l318jb34nb","content":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>按照往常的方法一样安装Cocoapods，在安装的过程中遇到了一切问题，按照传统的命令<code>sudo gem install cocoapods</code>出现了如下的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class=\"line\">    Operation not permitted - /usr/bin/pod</span><br></pre></td></tr></table></figure>\n<p>然后再<a href=\"http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030\">stackoverflow</a>上找到了如下的解决办法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install -n /usr/local/bin cocoapods -v 1.0.1</span><br></pre></td></tr></table></figure>\n<p>-v可以跟版本号，来按照您想安装的版本。<br>这就这样Cocopods安装成功了，当然如果您没有翻墙的话安装Cocoapods需要切换ruby源到<a href=\"https://gems.ruby-china.org/\">https://gems.ruby-china.org</a>，具体按照可以参考我的这篇文章<a href=\"http://jvaeyhcd.github.io/2016/02/20/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/\">《CocoaPods安装和使用教程》</a>。</p>\n<span id=\"more\"></span>\n<p>当我以为一切就绪的时候，我<code>pod search RxSwift</code>却提示我如下的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[!] Unable to find a pod with name, author, summary, or descriptionmatching <span class=\"string\">&#x27;······&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于有些类库确实是在Cocoapods中所不存在的，为了确定我们搜索的库是不是真的在Cocoapods的Repos中存在，我们可以到<a href=\"https://cocoapods.org/\">https://cocoapods.org/</a>中进行搜索。</p>\n</blockquote>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>在记录一下自己的解决办法，同时分享一下自己的经验，希望能够帮助到大家。</p>\n<h3 id=\"执行pod-setup\"><a href=\"#执行pod-setup\" class=\"headerlink\" title=\"执行pod setup\"></a>执行pod setup</h3><ul>\n<li>在终端输入<code>pod setup</code>,会出现<code>Setting up CocoaPods master repo</code>，等几分钟，会输入<code>Setup completed</code>，说明<code>pod setup</code>执行成功。</li>\n<li>结果pod search还是失败</li>\n<li>在终端输入<code>pod search RxSwift</code></li>\n<li>依然还是提示<code>Unable to find a pod with name, author, summary, or descriptionmatching &#39;RxSwift&#39;</code>。</li>\n<li>但是我输入<code>pod search pop</code>，却有相应的结果。</li>\n</ul>\n<h3 id=\"删除-Library-Caches-CocoaPods目录下的search-index-json文件\"><a href=\"#删除-Library-Caches-CocoaPods目录下的search-index-json文件\" class=\"headerlink\" title=\"删除~/Library/Caches/CocoaPods目录下的search_index.json文件\"></a>删除~/Library/Caches/CocoaPods目录下的search_index.json文件</h3><ul>\n<li><code>pod setup</code>成功后会生成<code>~/Library/Caches/CocoaPods/search_index.json</code>文件。</li>\n<li>终端输入<code>rm ~/Library/Caches/CocoaPods/search_index.json</code></li>\n<li>删除成功后再执行<code>pod search</code></li>\n</ul>\n<h3 id=\"执行pod-search\"><a href=\"#执行pod-search\" class=\"headerlink\" title=\"执行pod search\"></a>执行pod search</h3><ul>\n<li>终端输入：<code>pod search RxSwift</code>(不区分大小写)</li>\n<li>输出：<code>Creating search index for spec repo &#39;master&#39;.. Done!</code>，稍等片刻就会出现所有带RxSwift字段的类库出现。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>按照往常的方法一样安装Cocoapods，在安装的过程中遇到了一切问题，按照传统的命令<code>sudo gem install cocoapods</code>出现了如下的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class=\"line\">    Operation not permitted - /usr/bin/pod</span><br></pre></td></tr></table></figure>\n<p>然后再<a href=\"http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030\">stackoverflow</a>上找到了如下的解决办法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install -n /usr/local/bin cocoapods -v 1.0.1</span><br></pre></td></tr></table></figure>\n<p>-v可以跟版本号，来按照您想安装的版本。<br>这就这样Cocopods安装成功了，当然如果您没有翻墙的话安装Cocoapods需要切换ruby源到<a href=\"https://gems.ruby-china.org/\">https://gems.ruby-china.org</a>，具体按照可以参考我的这篇文章<a href=\"http://jvaeyhcd.github.io/2016/02/20/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/\">《CocoaPods安装和使用教程》</a>。</p>","more":"<p>当我以为一切就绪的时候，我<code>pod search RxSwift</code>却提示我如下的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[!] Unable to find a pod with name, author, summary, or descriptionmatching <span class=\"string\">&#x27;······&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对于有些类库确实是在Cocoapods中所不存在的，为了确定我们搜索的库是不是真的在Cocoapods的Repos中存在，我们可以到<a href=\"https://cocoapods.org/\">https://cocoapods.org/</a>中进行搜索。</p>\n</blockquote>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>在记录一下自己的解决办法，同时分享一下自己的经验，希望能够帮助到大家。</p>\n<h3 id=\"执行pod-setup\"><a href=\"#执行pod-setup\" class=\"headerlink\" title=\"执行pod setup\"></a>执行pod setup</h3><ul>\n<li>在终端输入<code>pod setup</code>,会出现<code>Setting up CocoaPods master repo</code>，等几分钟，会输入<code>Setup completed</code>，说明<code>pod setup</code>执行成功。</li>\n<li>结果pod search还是失败</li>\n<li>在终端输入<code>pod search RxSwift</code></li>\n<li>依然还是提示<code>Unable to find a pod with name, author, summary, or descriptionmatching &#39;RxSwift&#39;</code>。</li>\n<li>但是我输入<code>pod search pop</code>，却有相应的结果。</li>\n</ul>\n<h3 id=\"删除-Library-Caches-CocoaPods目录下的search-index-json文件\"><a href=\"#删除-Library-Caches-CocoaPods目录下的search-index-json文件\" class=\"headerlink\" title=\"删除~/Library/Caches/CocoaPods目录下的search_index.json文件\"></a>删除~/Library/Caches/CocoaPods目录下的search_index.json文件</h3><ul>\n<li><code>pod setup</code>成功后会生成<code>~/Library/Caches/CocoaPods/search_index.json</code>文件。</li>\n<li>终端输入<code>rm ~/Library/Caches/CocoaPods/search_index.json</code></li>\n<li>删除成功后再执行<code>pod search</code></li>\n</ul>\n<h3 id=\"执行pod-search\"><a href=\"#执行pod-search\" class=\"headerlink\" title=\"执行pod search\"></a>执行pod search</h3><ul>\n<li>终端输入：<code>pod search RxSwift</code>(不区分大小写)</li>\n<li>输出：<code>Creating search index for spec repo &#39;master&#39;.. Done!</code>，稍等片刻就会出现所有带RxSwift字段的类库出现。</li>\n</ul>"},{"title":"Failed to Locate or Generate Matchin Signing Assets","date":"2016-04-18T08:58:38.000Z","abbrlink":"91aa6383db86461a","_content":"\n## 发现问题\n\n刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。\n\n{% asset_img problem.png 问题详情%}\n\n<!-- more -->\n\n## 如何解决\n\n还是Google大法好，一下就找到了解决办法。\n\n以下是我在网上找到了解决办法的详细步骤：\n\n* 首先创建一个文件夹，名字就叫Payload，<a style=\"color:#4cc190\">一定要是Payload</a>（如果你不信，可以换一个名字试试）。\n\n* 然后在Organizer中然后把 archive 出来的那个在 finder 打开。\n{% asset_img export.png Organizer中显示%}\n\n* 然后点击显示包内容。\n{% asset_img show_in_finder.png 在Finder中显示%}\n\n* 把app 和 dsym 那两个文件拷贝到 Payload文件夹中。\n{% asset_img product.png product文件目录%}\n{% asset_img dSYMs.png dSYMs文件目录%}\n\n* 然后对Payload压缩\n{% asset_img zip.png Payload压缩%}\n\n* 最后将Playload.zip的后缀名改成ipa即可。\n\n以上的方法完全可以解决无法导出ipa的问题，但是导出ipa比export出来的包要大一些。","source":"_posts/Failed-to-locate-or-generate-matchin-signing-assets.md","raw":"---\ntitle: Failed to locate or generate matchin signing assets\ndate: 2016-04-18 16:58:38\ntags:\n  - iOS\ncategories: 经验积累\nabbrlink: 91aa6383db86461a\n---\n\n## 发现问题\n\n刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。\n\n{% asset_img problem.png 问题详情%}\n\n<!-- more -->\n\n## 如何解决\n\n还是Google大法好，一下就找到了解决办法。\n\n以下是我在网上找到了解决办法的详细步骤：\n\n* 首先创建一个文件夹，名字就叫Payload，<a style=\"color:#4cc190\">一定要是Payload</a>（如果你不信，可以换一个名字试试）。\n\n* 然后在Organizer中然后把 archive 出来的那个在 finder 打开。\n{% asset_img export.png Organizer中显示%}\n\n* 然后点击显示包内容。\n{% asset_img show_in_finder.png 在Finder中显示%}\n\n* 把app 和 dsym 那两个文件拷贝到 Payload文件夹中。\n{% asset_img product.png product文件目录%}\n{% asset_img dSYMs.png dSYMs文件目录%}\n\n* 然后对Payload压缩\n{% asset_img zip.png Payload压缩%}\n\n* 最后将Playload.zip的后缀名改成ipa即可。\n\n以上的方法完全可以解决无法导出ipa的问题，但是导出ipa比export出来的包要大一些。","slug":"Failed-to-locate-or-generate-matchin-signing-assets","published":1,"updated":"2022-05-19T03:13:11.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenn000vl1l3hhwl2knk","content":"<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。</p>\n<img src=\"/posts/91aa6383db86461a/problem.png\" class=\"\" title=\"问题详情\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><p>还是Google大法好，一下就找到了解决办法。</p>\n<p>以下是我在网上找到了解决办法的详细步骤：</p>\n<ul>\n<li><p>首先创建一个文件夹，名字就叫Payload，<a style=\"color:#4cc190\">一定要是Payload</a>（如果你不信，可以换一个名字试试）。</p>\n</li>\n<li><p>然后在Organizer中然后把 archive 出来的那个在 finder 打开。</p>\n<img src=\"/posts/91aa6383db86461a/export.png\" class=\"\" title=\"Organizer中显示\"></li>\n<li><p>然后点击显示包内容。</p>\n<img src=\"/posts/91aa6383db86461a/show_in_finder.png\" class=\"\" title=\"在Finder中显示\"></li>\n<li><p>把app 和 dsym 那两个文件拷贝到 Payload文件夹中。</p>\n<img src=\"/posts/91aa6383db86461a/product.png\" class=\"\" title=\"product文件目录\">\n<img src=\"/posts/91aa6383db86461a/dSYMs.png\" class=\"\" title=\"dSYMs文件目录\"></li>\n<li><p>然后对Payload压缩</p>\n<img src=\"/posts/91aa6383db86461a/zip.png\" class=\"\" title=\"Payload压缩\"></li>\n<li><p>最后将Playload.zip的后缀名改成ipa即可。</p>\n</li>\n</ul>\n<p>以上的方法完全可以解决无法导出ipa的问题，但是导出ipa比export出来的包要大一些。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。</p>\n<img src=\"/posts/91aa6383db86461a/problem.png\" class=\"\" title=\"问题详情\">","more":"<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><p>还是Google大法好，一下就找到了解决办法。</p>\n<p>以下是我在网上找到了解决办法的详细步骤：</p>\n<ul>\n<li><p>首先创建一个文件夹，名字就叫Payload，<a style=\"color:#4cc190\">一定要是Payload</a>（如果你不信，可以换一个名字试试）。</p>\n</li>\n<li><p>然后在Organizer中然后把 archive 出来的那个在 finder 打开。</p>\n<img src=\"/posts/91aa6383db86461a/export.png\" class=\"\" title=\"Organizer中显示\"></li>\n<li><p>然后点击显示包内容。</p>\n<img src=\"/posts/91aa6383db86461a/show_in_finder.png\" class=\"\" title=\"在Finder中显示\"></li>\n<li><p>把app 和 dsym 那两个文件拷贝到 Payload文件夹中。</p>\n<img src=\"/posts/91aa6383db86461a/product.png\" class=\"\" title=\"product文件目录\">\n<img src=\"/posts/91aa6383db86461a/dSYMs.png\" class=\"\" title=\"dSYMs文件目录\"></li>\n<li><p>然后对Payload压缩</p>\n<img src=\"/posts/91aa6383db86461a/zip.png\" class=\"\" title=\"Payload压缩\"></li>\n<li><p>最后将Playload.zip的后缀名改成ipa即可。</p>\n</li>\n</ul>\n<p>以上的方法完全可以解决无法导出ipa的问题，但是导出ipa比export出来的包要大一些。</p>"},{"title":"Github上优秀的objc项目简介","date":"2016-02-20T09:15:47.000Z","abbrlink":"2d92c93946db5207","_content":"\n主要对当前Github排名靠前的项目做一个简单的简介，方便自己快速了解 objc的一些优秀的开源框架。\n\n* <a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"AFNetworking\">AFNetworking</a>\n作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest\n* <a href=\"https://github.com/gavinkwoe/BeeFramework\">BeeFramework</a>\nBeeFramework是一个iOS应用开发框架，由国内开发者郭虹宇创立并且在Github上开源。经过一年多的发展，BeeFramework在Github上，得到了广泛关注，有1000多的star数和400多的fork数\n* <a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a>\n一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 SO 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果\n\n<!-- more -->\n\n* <a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a>\n作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单\n* <a href=\"https://github.com/RestKit/RestKit\">RestKit</a>\n主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上\n* <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a>\n由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 \"An open source project that exemplifies this brave new era for objc\", 也有人说它是 Cocoa 的未来,GitHub自家的函数式响应式编程范式的objc实现，名字听着很高大上，学习曲线确实也比较陡，但是绝对会改变你对iOS编程的认知\n* <a href=\"https://github.com/facebookarchive/three20\">three20</a>\n由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 PR 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 Nimbus, 算是 three20 的一个替代品\n* <a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a>\n作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)\n* <a href=\"https://github.com/magicalpanda/MagicalRecord\">MagicalRecord</a>\n作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作\n* <a href=\"https://github.com/ccgus/fmdb\">FMDB</a>\n一个对 SQLite 进行封装的库, 使用起来方便, 简单\n* <a href=\"https://github.com/Mantle/Mantle\">Mantle</a>\n作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了。GitHub自家的产物，轻量级建模的首选，也可以很好的配合CoreData工作\n* <a href=\"https://github.com/Grouper/FlatUIKit\">FlatUIKit</a>\n收集了很多扁平化 UI 的 iOS 组件, 方便使用\n* <a href=\"https://github.com/pokeb/asi-http-request\">ASIHTTPRequest</a>\n一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)\n* <a href=\"https://github.com/path/FastImageCache\">FastImageCache</a>\nPath 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点\n* <a href=\"https://github.com/SnapKit/Masonry\">Masonry</a>\n一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备\n* <a href=\"https://github.com/facebook/Shimmer\">Shimmer</a>\nFacebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单\n* <a href=\"https://github.com/TransitApp/SVProgressHUD\">SVProgressHUD</a>\n又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用\n* <a href=\"https://github.com/johnezang/JSONKit\">JSONKit</a>\n主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了\n* <a href=\"https://github.com/jverkoey/nimbus\">Nimbus</a>\n作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全\n* <a href=\"https://github.com/facebook/facebook-ios-sdk\"> Facebook SDK for iOS</a>\nFacebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面\n* <a href=\"https://github.com/facebook/AsyncDisplayKit\">AsyncDisplayKit</a>\nFacebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎\n* <a href=\"https://github.com/supermarin/Alcatraz\">Alcatraz</a>\nAlcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传\n* <a href=\"https://github.com/jessesquires/JSQMessagesViewController\">JSQMessagesViewController</a>\n优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高\n* <a href=\"https://github.com/facebook/xctool\">Xctool</a>\n是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, Travis CI, OCLint 等测试工具\n* <a href=\"https://github.com/OpenEmu/OpenEmu\">OpenEmu</a>\n超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错\n* <a href=\"https://github.com/nicklockwood/iCarousel\">iCarousel</a>\n作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果\n* <a href=\"https://github.com/romaonthego/RESideMenu\">RESideMenu</a>\n作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8\n* <a href=\"https://github.com/kevinzhow/PNChart\">PNChart</a>\n作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱\n* <a href=\"https://github.com/square/PonyDebugger\">PonyDebugger</a>\n由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试\n* <a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a>\n作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本\n* <a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a>\nUITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮\n* <a href=\"https://github.com/levey/AwesomeMenu\">AwesomeMenu</a>\n作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果\n* <a href=\"https://github.com/tonymillion/Reachability\">Reachability</a>\nReachablity 是用于检测 iOS 设备网络环境的库,Beeframeowrk中使用过的库\n* <a href=\"https://github.com/onevcat/VVDocumenter-Xcode\"> VVDocumenter-Xcode</a>\n作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞\n* <a href=\"https://github.com/google/physical-web\">The Physical Web</a>\n由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段\n* <a href=\"https://github.com/samuelclay/NewsBlur\">NewsBlur</a>\n作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码\n* <a href=\"https://github.com/cocos2d/cocos2d-objc\">Cocos2D-SpriteBuilder</a>\n一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁\n* <a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a>\nUILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能\n* <a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\">CocoaAsyncSocket</a>\n一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师\n* <a href=\"https://github.com/devinross/tapkulibrary\">TapkuLibrary</a>\n作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</a>\n* <a href=\"https://github.com/CanvasPod/Canvas\">Canvas</a>\n无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手\n* <a href=\"https://github.com/square/SocketRocket\">SocketRocket</a>\nSquare 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱\n* <a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\">ECSlidingViewController</a>\n一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工\n* <a href=\"https://github.com/stig/json-framework\">Json Framework</a>\n用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了\n* <a href=\"https://github.com/facebook/Tweaks\">Tweaks</a>\nFacebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了\n* <a href=\"https://github.com/realm/realm-cocoa\">realm-cocoa</a>\nRealm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库\n* <a href=\"https://github.com/icanzilb/JSONModel\">JSONModel</a>\n一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换\n* <a href=\"https://github.com/facebook/KVOController\">KVOController</a>\n一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一\n* <a href=\"https://github.com/mwaterfall/MWPhotoBrowser\">MWPhotoBrowser</a>\n一款简单的 iOS 照片浏览控件\n* <a href=\"https://github.com/samvermette/SVPullToRefresh\">SVPullToRefresh</a>\n<b>一款只需一行代码便可集成上拉刷新和下拉加载的组件</b>\n* <a href=\"https://github.com/facebook/pop\">POP</a>\nfacebook出品的paper，动画效果太好了，赶超apple的原生app一大截。pop就是paper的动画库！\n* <a href=\"https://github.com/dennisreimann/ioctocat\">ioctocat</a>\ngithub的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载\n* <a href=\"https://github.com/ChatSecure/ChatSecure-iOS\">ChatSecure</a>\n使用XMPP协议的IM开源软件，很强大，在appstore上可以下载\n* [FDFullscreenPopGesture](https://github.com/forkingdog/FDFullscreenPopGesture)\n一个丝滑的全屏滑动返回手势,相关博客文章点击[这里](http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/)\n* [TKSubmitTransition](https://github.com/Jvaeyhcd/TKSubmitTransition)\n非常漂亮的一个登录转场动画\n* [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n非常方便的对一些没有数据的UITableView或者UIScrollView加上提示图片和文字。\n\n* [iRate](https://github.com/nicklockwood/iRate)\n一个开源的评分控件，能够非常友好的设置提醒用户去评论我们的app\n\n* [iVersion](https://github.com/nicklockwood/iVersion)\n和iRate一样出自同一个人之手，，这个是提示用户更新版本。\n\n* [PureLayout](https://github.com/PureLayout/PureLayout)\n自动布局\n\n### 文本相关\n\n* [SlackTextViewController](https://github.com/slackhq/SlackTextViewController)\n你曾经用过Slack iOS应用吗？如果你在较大的软件公司工作，也许会用过。对那些没用过的人呢？—?Slack令人激动。用到Slack的应用也是这样，尤其是用作极佳、定制的文本输入控制时。这时你有了一个现成可用在应用中的代码。自适应文本区域？试一下。手势识别、自动填充、多媒体合并？试一下。快速drop-in解决方案？试一下。其他还想要什么？SlackTextViewController 可以替代 UITableViewController & UICollectionViewController。\n\n* [RTLabel](https://github.com/honcheng/RTLabel)\n用于显示html的Label\n\n* [Shimmer](https://github.com/facebook/Shimmer)\n滑动解锁效果的界面\n\n* [DDRichText](https://github.com/daiweilai/DDRichText)\n为图文混排提供了一个思路\n\n### 进度条\n\n* [NJKWebViewProgress](https://github.com/ninjinkun/NJKWebViewProgress)\nweb界面加载进度条\n\n* [MBProgressHUD](https://github.com/jdg/MBProgressHUD)\nMBProgressHUD 使用非常广泛，网上很多基于ta的封装\n\n* [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)\nNavigation的扩展，强烈推荐\n\n* [Toast](https://github.com/scalessec/Toast)\n\n### 导航栏\n\n* [LTNavigationbar](https://github.com/ltebean/LTNavigationbar)\n上下滑动动态改变导航栏颜色\n\n* [JZNavigationExtension](https://github.com/JazysYu/JZNavigationExtension)\n\n### 键盘类\n\n* [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\n* [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding)\n这个我用得很多，界面上如果有输入框可以界面会跟着键盘动，而不被键盘挡住。\n\n### 基础工具类以及Category\n\n* [BFKit OC版本](https://github.com/FabrizioBrancati/BFKit)\n国外的一个大神写的很好用的分类，比较齐全\n\n* [DateTools](https://github.com/MatthewYork/DateTools)\n很强大的日期工具类\n\n* [iOS-Categories](https://github.com/shaojiankui/iOS-Categories)\n很是全面的一个扩展 iOS中的各种objc Category, a collection of useful objc Categories extending iOS Frameworks such as Foundation,UIKit,CoreData,QuartzCore,CoreLocation,MapKit Etc.\n\n* [Material-Controls-For-iOS](https://github.com/fpt-software/Material-Controls-For-iOS)\n大神模仿谷歌做的iOS原生特效控件\n\n* [BlocksKit](https://github.com/zwaldowski/BlocksKit)\n为基础类提供Block支持，很好用\n\n### 弹出框\n\n* [STPopup](https://github.com/kevin0571/STPopup)\n很方便的弹出框\n\n* [MMPopupView](https://github.com/adad184/MMPopupView)\n里脊串的弹出框\n\n* [NYAlertViewController](https://github.com/nealyoung/NYAlertViewController)\n非常强大的弹出框\n\n* [TYAlertController](https://github.com/12207480/TYAlertController)\n很好很强大的弹出框，多种样式满足你的需求\n\n* [JKPopMenuView](https://github.com/UncleJoke/JKPopMenuView)\n一个简单的弹出菜单\n\n### 其它\n\n* [SWTableViewCell](https://github.com/CEWendel/SWTableViewCell)\n自定义侧滑\n\n* [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell)\n同上自定义侧滑\n\n* [FDFullscreenPopGesture](https://github.com/forkingdog/FDFullscreenPopGesture)\n全屏滑动返回上级页面\n\n* [PDTSimpleCalendar](https://github.com/jivesoftware/PDTSimpleCalendar)\n一款日历控件，可以看看","source":"_posts/Github上优秀的Objective-C项目简介.md","raw":"---\ntitle: Github上优秀的objc项目简介\ndate: 2016-02-20 17:15:47\ntags:\n  - iOS\ncategories: 知识积累\nabbrlink: 2d92c93946db5207\n---\n\n主要对当前Github排名靠前的项目做一个简单的简介，方便自己快速了解 objc的一些优秀的开源框架。\n\n* <a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"AFNetworking\">AFNetworking</a>\n作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest\n* <a href=\"https://github.com/gavinkwoe/BeeFramework\">BeeFramework</a>\nBeeFramework是一个iOS应用开发框架，由国内开发者郭虹宇创立并且在Github上开源。经过一年多的发展，BeeFramework在Github上，得到了广泛关注，有1000多的star数和400多的fork数\n* <a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a>\n一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 SO 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果\n\n<!-- more -->\n\n* <a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a>\n作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单\n* <a href=\"https://github.com/RestKit/RestKit\">RestKit</a>\n主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上\n* <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a>\n由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 \"An open source project that exemplifies this brave new era for objc\", 也有人说它是 Cocoa 的未来,GitHub自家的函数式响应式编程范式的objc实现，名字听着很高大上，学习曲线确实也比较陡，但是绝对会改变你对iOS编程的认知\n* <a href=\"https://github.com/facebookarchive/three20\">three20</a>\n由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 PR 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 Nimbus, 算是 three20 的一个替代品\n* <a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a>\n作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)\n* <a href=\"https://github.com/magicalpanda/MagicalRecord\">MagicalRecord</a>\n作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作\n* <a href=\"https://github.com/ccgus/fmdb\">FMDB</a>\n一个对 SQLite 进行封装的库, 使用起来方便, 简单\n* <a href=\"https://github.com/Mantle/Mantle\">Mantle</a>\n作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了。GitHub自家的产物，轻量级建模的首选，也可以很好的配合CoreData工作\n* <a href=\"https://github.com/Grouper/FlatUIKit\">FlatUIKit</a>\n收集了很多扁平化 UI 的 iOS 组件, 方便使用\n* <a href=\"https://github.com/pokeb/asi-http-request\">ASIHTTPRequest</a>\n一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)\n* <a href=\"https://github.com/path/FastImageCache\">FastImageCache</a>\nPath 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点\n* <a href=\"https://github.com/SnapKit/Masonry\">Masonry</a>\n一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备\n* <a href=\"https://github.com/facebook/Shimmer\">Shimmer</a>\nFacebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单\n* <a href=\"https://github.com/TransitApp/SVProgressHUD\">SVProgressHUD</a>\n又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用\n* <a href=\"https://github.com/johnezang/JSONKit\">JSONKit</a>\n主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了\n* <a href=\"https://github.com/jverkoey/nimbus\">Nimbus</a>\n作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全\n* <a href=\"https://github.com/facebook/facebook-ios-sdk\"> Facebook SDK for iOS</a>\nFacebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面\n* <a href=\"https://github.com/facebook/AsyncDisplayKit\">AsyncDisplayKit</a>\nFacebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎\n* <a href=\"https://github.com/supermarin/Alcatraz\">Alcatraz</a>\nAlcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传\n* <a href=\"https://github.com/jessesquires/JSQMessagesViewController\">JSQMessagesViewController</a>\n优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高\n* <a href=\"https://github.com/facebook/xctool\">Xctool</a>\n是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, Travis CI, OCLint 等测试工具\n* <a href=\"https://github.com/OpenEmu/OpenEmu\">OpenEmu</a>\n超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错\n* <a href=\"https://github.com/nicklockwood/iCarousel\">iCarousel</a>\n作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果\n* <a href=\"https://github.com/romaonthego/RESideMenu\">RESideMenu</a>\n作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8\n* <a href=\"https://github.com/kevinzhow/PNChart\">PNChart</a>\n作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱\n* <a href=\"https://github.com/square/PonyDebugger\">PonyDebugger</a>\n由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试\n* <a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a>\n作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本\n* <a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a>\nUITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮\n* <a href=\"https://github.com/levey/AwesomeMenu\">AwesomeMenu</a>\n作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果\n* <a href=\"https://github.com/tonymillion/Reachability\">Reachability</a>\nReachablity 是用于检测 iOS 设备网络环境的库,Beeframeowrk中使用过的库\n* <a href=\"https://github.com/onevcat/VVDocumenter-Xcode\"> VVDocumenter-Xcode</a>\n作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞\n* <a href=\"https://github.com/google/physical-web\">The Physical Web</a>\n由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段\n* <a href=\"https://github.com/samuelclay/NewsBlur\">NewsBlur</a>\n作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码\n* <a href=\"https://github.com/cocos2d/cocos2d-objc\">Cocos2D-SpriteBuilder</a>\n一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁\n* <a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a>\nUILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能\n* <a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\">CocoaAsyncSocket</a>\n一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师\n* <a href=\"https://github.com/devinross/tapkulibrary\">TapkuLibrary</a>\n作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</a>\n* <a href=\"https://github.com/CanvasPod/Canvas\">Canvas</a>\n无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手\n* <a href=\"https://github.com/square/SocketRocket\">SocketRocket</a>\nSquare 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱\n* <a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\">ECSlidingViewController</a>\n一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工\n* <a href=\"https://github.com/stig/json-framework\">Json Framework</a>\n用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了\n* <a href=\"https://github.com/facebook/Tweaks\">Tweaks</a>\nFacebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了\n* <a href=\"https://github.com/realm/realm-cocoa\">realm-cocoa</a>\nRealm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库\n* <a href=\"https://github.com/icanzilb/JSONModel\">JSONModel</a>\n一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换\n* <a href=\"https://github.com/facebook/KVOController\">KVOController</a>\n一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一\n* <a href=\"https://github.com/mwaterfall/MWPhotoBrowser\">MWPhotoBrowser</a>\n一款简单的 iOS 照片浏览控件\n* <a href=\"https://github.com/samvermette/SVPullToRefresh\">SVPullToRefresh</a>\n<b>一款只需一行代码便可集成上拉刷新和下拉加载的组件</b>\n* <a href=\"https://github.com/facebook/pop\">POP</a>\nfacebook出品的paper，动画效果太好了，赶超apple的原生app一大截。pop就是paper的动画库！\n* <a href=\"https://github.com/dennisreimann/ioctocat\">ioctocat</a>\ngithub的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载\n* <a href=\"https://github.com/ChatSecure/ChatSecure-iOS\">ChatSecure</a>\n使用XMPP协议的IM开源软件，很强大，在appstore上可以下载\n* [FDFullscreenPopGesture](https://github.com/forkingdog/FDFullscreenPopGesture)\n一个丝滑的全屏滑动返回手势,相关博客文章点击[这里](http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/)\n* [TKSubmitTransition](https://github.com/Jvaeyhcd/TKSubmitTransition)\n非常漂亮的一个登录转场动画\n* [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n非常方便的对一些没有数据的UITableView或者UIScrollView加上提示图片和文字。\n\n* [iRate](https://github.com/nicklockwood/iRate)\n一个开源的评分控件，能够非常友好的设置提醒用户去评论我们的app\n\n* [iVersion](https://github.com/nicklockwood/iVersion)\n和iRate一样出自同一个人之手，，这个是提示用户更新版本。\n\n* [PureLayout](https://github.com/PureLayout/PureLayout)\n自动布局\n\n### 文本相关\n\n* [SlackTextViewController](https://github.com/slackhq/SlackTextViewController)\n你曾经用过Slack iOS应用吗？如果你在较大的软件公司工作，也许会用过。对那些没用过的人呢？—?Slack令人激动。用到Slack的应用也是这样，尤其是用作极佳、定制的文本输入控制时。这时你有了一个现成可用在应用中的代码。自适应文本区域？试一下。手势识别、自动填充、多媒体合并？试一下。快速drop-in解决方案？试一下。其他还想要什么？SlackTextViewController 可以替代 UITableViewController & UICollectionViewController。\n\n* [RTLabel](https://github.com/honcheng/RTLabel)\n用于显示html的Label\n\n* [Shimmer](https://github.com/facebook/Shimmer)\n滑动解锁效果的界面\n\n* [DDRichText](https://github.com/daiweilai/DDRichText)\n为图文混排提供了一个思路\n\n### 进度条\n\n* [NJKWebViewProgress](https://github.com/ninjinkun/NJKWebViewProgress)\nweb界面加载进度条\n\n* [MBProgressHUD](https://github.com/jdg/MBProgressHUD)\nMBProgressHUD 使用非常广泛，网上很多基于ta的封装\n\n* [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)\nNavigation的扩展，强烈推荐\n\n* [Toast](https://github.com/scalessec/Toast)\n\n### 导航栏\n\n* [LTNavigationbar](https://github.com/ltebean/LTNavigationbar)\n上下滑动动态改变导航栏颜色\n\n* [JZNavigationExtension](https://github.com/JazysYu/JZNavigationExtension)\n\n### 键盘类\n\n* [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\n* [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding)\n这个我用得很多，界面上如果有输入框可以界面会跟着键盘动，而不被键盘挡住。\n\n### 基础工具类以及Category\n\n* [BFKit OC版本](https://github.com/FabrizioBrancati/BFKit)\n国外的一个大神写的很好用的分类，比较齐全\n\n* [DateTools](https://github.com/MatthewYork/DateTools)\n很强大的日期工具类\n\n* [iOS-Categories](https://github.com/shaojiankui/iOS-Categories)\n很是全面的一个扩展 iOS中的各种objc Category, a collection of useful objc Categories extending iOS Frameworks such as Foundation,UIKit,CoreData,QuartzCore,CoreLocation,MapKit Etc.\n\n* [Material-Controls-For-iOS](https://github.com/fpt-software/Material-Controls-For-iOS)\n大神模仿谷歌做的iOS原生特效控件\n\n* [BlocksKit](https://github.com/zwaldowski/BlocksKit)\n为基础类提供Block支持，很好用\n\n### 弹出框\n\n* [STPopup](https://github.com/kevin0571/STPopup)\n很方便的弹出框\n\n* [MMPopupView](https://github.com/adad184/MMPopupView)\n里脊串的弹出框\n\n* [NYAlertViewController](https://github.com/nealyoung/NYAlertViewController)\n非常强大的弹出框\n\n* [TYAlertController](https://github.com/12207480/TYAlertController)\n很好很强大的弹出框，多种样式满足你的需求\n\n* [JKPopMenuView](https://github.com/UncleJoke/JKPopMenuView)\n一个简单的弹出菜单\n\n### 其它\n\n* [SWTableViewCell](https://github.com/CEWendel/SWTableViewCell)\n自定义侧滑\n\n* [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell)\n同上自定义侧滑\n\n* [FDFullscreenPopGesture](https://github.com/forkingdog/FDFullscreenPopGesture)\n全屏滑动返回上级页面\n\n* [PDTSimpleCalendar](https://github.com/jivesoftware/PDTSimpleCalendar)\n一款日历控件，可以看看","slug":"Github上优秀的Objective-C项目简介","published":1,"updated":"2022-05-19T03:13:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenn000yl1l3a1imcpgq","content":"<p>主要对当前Github排名靠前的项目做一个简单的简介，方便自己快速了解 objc的一些优秀的开源框架。</p>\n<ul>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"AFNetworking\">AFNetworking</a><br>作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest</li>\n<li><a href=\"https://github.com/gavinkwoe/BeeFramework\">BeeFramework</a><br>BeeFramework是一个iOS应用开发框架，由国内开发者郭虹宇创立并且在Github上开源。经过一年多的发展，BeeFramework在Github上，得到了广泛关注，有1000多的star数和400多的fork数</li>\n<li><a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a><br>一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 SO 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p><a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a><br>作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</p>\n</li>\n<li><p><a href=\"https://github.com/RestKit/RestKit\">RestKit</a><br>主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上</p>\n</li>\n<li><p><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a><br>由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 “An open source project that exemplifies this brave new era for objc”, 也有人说它是 Cocoa 的未来,GitHub自家的函数式响应式编程范式的objc实现，名字听着很高大上，学习曲线确实也比较陡，但是绝对会改变你对iOS编程的认知</p>\n</li>\n<li><p><a href=\"https://github.com/facebookarchive/three20\">three20</a><br>由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 PR 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 Nimbus, 算是 three20 的一个替代品</p>\n</li>\n<li><p><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a><br>作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)</p>\n</li>\n<li><p><a href=\"https://github.com/magicalpanda/MagicalRecord\">MagicalRecord</a><br>作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作</p>\n</li>\n<li><p><a href=\"https://github.com/ccgus/fmdb\">FMDB</a><br>一个对 SQLite 进行封装的库, 使用起来方便, 简单</p>\n</li>\n<li><p><a href=\"https://github.com/Mantle/Mantle\">Mantle</a><br>作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了。GitHub自家的产物，轻量级建模的首选，也可以很好的配合CoreData工作</p>\n</li>\n<li><p><a href=\"https://github.com/Grouper/FlatUIKit\">FlatUIKit</a><br>收集了很多扁平化 UI 的 iOS 组件, 方便使用</p>\n</li>\n<li><p><a href=\"https://github.com/pokeb/asi-http-request\">ASIHTTPRequest</a><br>一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)</p>\n</li>\n<li><p><a href=\"https://github.com/path/FastImageCache\">FastImageCache</a><br>Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点</p>\n</li>\n<li><p><a href=\"https://github.com/SnapKit/Masonry\">Masonry</a><br>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Shimmer\">Shimmer</a><br>Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单</p>\n</li>\n<li><p><a href=\"https://github.com/TransitApp/SVProgressHUD\">SVProgressHUD</a><br>又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用</p>\n</li>\n<li><p><a href=\"https://github.com/johnezang/JSONKit\">JSONKit</a><br>主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了</p>\n</li>\n<li><p><a href=\"https://github.com/jverkoey/nimbus\">Nimbus</a><br>作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/facebook-ios-sdk\"> Facebook SDK for iOS</a><br>Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/AsyncDisplayKit\">AsyncDisplayKit</a><br>Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎</p>\n</li>\n<li><p><a href=\"https://github.com/supermarin/Alcatraz\">Alcatraz</a><br>Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传</p>\n</li>\n<li><p><a href=\"https://github.com/jessesquires/JSQMessagesViewController\">JSQMessagesViewController</a><br>优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/xctool\">Xctool</a><br>是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, Travis CI, OCLint 等测试工具</p>\n</li>\n<li><p><a href=\"https://github.com/OpenEmu/OpenEmu\">OpenEmu</a><br>超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iCarousel\">iCarousel</a><br>作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果</p>\n</li>\n<li><p><a href=\"https://github.com/romaonthego/RESideMenu\">RESideMenu</a><br>作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8</p>\n</li>\n<li><p><a href=\"https://github.com/kevinzhow/PNChart\">PNChart</a><br>作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱</p>\n</li>\n<li><p><a href=\"https://github.com/square/PonyDebugger\">PonyDebugger</a><br>由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试</p>\n</li>\n<li><p><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a><br>作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本</p>\n</li>\n<li><p><a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a><br>UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮</p>\n</li>\n<li><p><a href=\"https://github.com/levey/AwesomeMenu\">AwesomeMenu</a><br>作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果</p>\n</li>\n<li><p><a href=\"https://github.com/tonymillion/Reachability\">Reachability</a><br>Reachablity 是用于检测 iOS 设备网络环境的库,Beeframeowrk中使用过的库</p>\n</li>\n<li><p><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\"> VVDocumenter-Xcode</a><br>作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞</p>\n</li>\n<li><p><a href=\"https://github.com/google/physical-web\">The Physical Web</a><br>由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段</p>\n</li>\n<li><p><a href=\"https://github.com/samuelclay/NewsBlur\">NewsBlur</a><br>作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码</p>\n</li>\n<li><p><a href=\"https://github.com/cocos2d/cocos2d-objc\">Cocos2D-SpriteBuilder</a><br>一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁</p>\n</li>\n<li><p><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a><br>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</p>\n</li>\n<li><p><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\">CocoaAsyncSocket</a><br>一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师</p>\n</li>\n<li><p><a href=\"https://github.com/devinross/tapkulibrary\">TapkuLibrary</a><br>作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</a></p>\n</li>\n<li><p><a href=\"https://github.com/CanvasPod/Canvas\">Canvas</a><br>无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手</p>\n</li>\n<li><p><a href=\"https://github.com/square/SocketRocket\">SocketRocket</a><br>Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱</p>\n</li>\n<li><p><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\">ECSlidingViewController</a><br>一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工</p>\n</li>\n<li><p><a href=\"https://github.com/stig/json-framework\">Json Framework</a><br>用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Tweaks\">Tweaks</a><br>Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了</p>\n</li>\n<li><p><a href=\"https://github.com/realm/realm-cocoa\">realm-cocoa</a><br>Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库</p>\n</li>\n<li><p><a href=\"https://github.com/icanzilb/JSONModel\">JSONModel</a><br>一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/KVOController\">KVOController</a><br>一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一</p>\n</li>\n<li><p><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\">MWPhotoBrowser</a><br>一款简单的 iOS 照片浏览控件</p>\n</li>\n<li><p><a href=\"https://github.com/samvermette/SVPullToRefresh\">SVPullToRefresh</a><br><b>一款只需一行代码便可集成上拉刷新和下拉加载的组件</b></p>\n</li>\n<li><p><a href=\"https://github.com/facebook/pop\">POP</a><br>facebook出品的paper，动画效果太好了，赶超apple的原生app一大截。pop就是paper的动画库！</p>\n</li>\n<li><p><a href=\"https://github.com/dennisreimann/ioctocat\">ioctocat</a><br>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</p>\n</li>\n<li><p><a href=\"https://github.com/ChatSecure/ChatSecure-iOS\">ChatSecure</a><br>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</p>\n</li>\n<li><p><a href=\"https://github.com/forkingdog/FDFullscreenPopGesture\">FDFullscreenPopGesture</a><br>一个丝滑的全屏滑动返回手势,相关博客文章点击<a href=\"http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/\">这里</a></p>\n</li>\n<li><p><a href=\"https://github.com/Jvaeyhcd/TKSubmitTransition\">TKSubmitTransition</a><br>非常漂亮的一个登录转场动画</p>\n</li>\n<li><p><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\">DZNEmptyDataSet</a><br>非常方便的对一些没有数据的UITableView或者UIScrollView加上提示图片和文字。</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iRate\">iRate</a><br>一个开源的评分控件，能够非常友好的设置提醒用户去评论我们的app</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iVersion\">iVersion</a><br>和iRate一样出自同一个人之手，，这个是提示用户更新版本。</p>\n</li>\n<li><p><a href=\"https://github.com/PureLayout/PureLayout\">PureLayout</a><br>自动布局</p>\n</li>\n</ul>\n<h3 id=\"文本相关\"><a href=\"#文本相关\" class=\"headerlink\" title=\"文本相关\"></a>文本相关</h3><ul>\n<li><p><a href=\"https://github.com/slackhq/SlackTextViewController\">SlackTextViewController</a><br>你曾经用过Slack iOS应用吗？如果你在较大的软件公司工作，也许会用过。对那些没用过的人呢？—?Slack令人激动。用到Slack的应用也是这样，尤其是用作极佳、定制的文本输入控制时。这时你有了一个现成可用在应用中的代码。自适应文本区域？试一下。手势识别、自动填充、多媒体合并？试一下。快速drop-in解决方案？试一下。其他还想要什么？SlackTextViewController 可以替代 UITableViewController &amp; UICollectionViewController。</p>\n</li>\n<li><p><a href=\"https://github.com/honcheng/RTLabel\">RTLabel</a><br>用于显示html的Label</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Shimmer\">Shimmer</a><br>滑动解锁效果的界面</p>\n</li>\n<li><p><a href=\"https://github.com/daiweilai/DDRichText\">DDRichText</a><br>为图文混排提供了一个思路</p>\n</li>\n</ul>\n<h3 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h3><ul>\n<li><p><a href=\"https://github.com/ninjinkun/NJKWebViewProgress\">NJKWebViewProgress</a><br>web界面加载进度条</p>\n</li>\n<li><p><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a><br>MBProgressHUD 使用非常广泛，网上很多基于ta的封装</p>\n</li>\n<li><p><a href=\"https://github.com/SVProgressHUD/SVProgressHUD\">SVProgressHUD</a><br>Navigation的扩展，强烈推荐</p>\n</li>\n<li><p><a href=\"https://github.com/scalessec/Toast\">Toast</a></p>\n</li>\n</ul>\n<h3 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h3><ul>\n<li><p><a href=\"https://github.com/ltebean/LTNavigationbar\">LTNavigationbar</a><br>上下滑动动态改变导航栏颜色</p>\n</li>\n<li><p><a href=\"https://github.com/JazysYu/JZNavigationExtension\">JZNavigationExtension</a></p>\n</li>\n</ul>\n<h3 id=\"键盘类\"><a href=\"#键盘类\" class=\"headerlink\" title=\"键盘类\"></a>键盘类</h3><ul>\n<li><p><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\">IQKeyboardManager</a></p>\n</li>\n<li><p><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\">TPKeyboardAvoiding</a><br>这个我用得很多，界面上如果有输入框可以界面会跟着键盘动，而不被键盘挡住。</p>\n</li>\n</ul>\n<h3 id=\"基础工具类以及Category\"><a href=\"#基础工具类以及Category\" class=\"headerlink\" title=\"基础工具类以及Category\"></a>基础工具类以及Category</h3><ul>\n<li><p><a href=\"https://github.com/FabrizioBrancati/BFKit\">BFKit OC版本</a><br>国外的一个大神写的很好用的分类，比较齐全</p>\n</li>\n<li><p><a href=\"https://github.com/MatthewYork/DateTools\">DateTools</a><br>很强大的日期工具类</p>\n</li>\n<li><p><a href=\"https://github.com/shaojiankui/iOS-Categories\">iOS-Categories</a><br>很是全面的一个扩展 iOS中的各种objc Category, a collection of useful objc Categories extending iOS Frameworks such as Foundation,UIKit,CoreData,QuartzCore,CoreLocation,MapKit Etc.</p>\n</li>\n<li><p><a href=\"https://github.com/fpt-software/Material-Controls-For-iOS\">Material-Controls-For-iOS</a><br>大神模仿谷歌做的iOS原生特效控件</p>\n</li>\n<li><p><a href=\"https://github.com/zwaldowski/BlocksKit\">BlocksKit</a><br>为基础类提供Block支持，很好用</p>\n</li>\n</ul>\n<h3 id=\"弹出框\"><a href=\"#弹出框\" class=\"headerlink\" title=\"弹出框\"></a>弹出框</h3><ul>\n<li><p><a href=\"https://github.com/kevin0571/STPopup\">STPopup</a><br>很方便的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/adad184/MMPopupView\">MMPopupView</a><br>里脊串的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/nealyoung/NYAlertViewController\">NYAlertViewController</a><br>非常强大的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/12207480/TYAlertController\">TYAlertController</a><br>很好很强大的弹出框，多种样式满足你的需求</p>\n</li>\n<li><p><a href=\"https://github.com/UncleJoke/JKPopMenuView\">JKPopMenuView</a><br>一个简单的弹出菜单</p>\n</li>\n</ul>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><p><a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a><br>自定义侧滑</p>\n</li>\n<li><p><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\">MGSwipeTableCell</a><br>同上自定义侧滑</p>\n</li>\n<li><p><a href=\"https://github.com/forkingdog/FDFullscreenPopGesture\">FDFullscreenPopGesture</a><br>全屏滑动返回上级页面</p>\n</li>\n<li><p><a href=\"https://github.com/jivesoftware/PDTSimpleCalendar\">PDTSimpleCalendar</a><br>一款日历控件，可以看看</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>主要对当前Github排名靠前的项目做一个简单的简介，方便自己快速了解 objc的一些优秀的开源框架。</p>\n<ul>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"AFNetworking\">AFNetworking</a><br>作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest</li>\n<li><a href=\"https://github.com/gavinkwoe/BeeFramework\">BeeFramework</a><br>BeeFramework是一个iOS应用开发框架，由国内开发者郭虹宇创立并且在Github上开源。经过一年多的发展，BeeFramework在Github上，得到了广泛关注，有1000多的star数和400多的fork数</li>\n<li><a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a><br>一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 SO 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果</li>\n</ul>","more":"<ul>\n<li><p><a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a><br>作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</p>\n</li>\n<li><p><a href=\"https://github.com/RestKit/RestKit\">RestKit</a><br>主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上</p>\n</li>\n<li><p><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a><br>由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 “An open source project that exemplifies this brave new era for objc”, 也有人说它是 Cocoa 的未来,GitHub自家的函数式响应式编程范式的objc实现，名字听着很高大上，学习曲线确实也比较陡，但是绝对会改变你对iOS编程的认知</p>\n</li>\n<li><p><a href=\"https://github.com/facebookarchive/three20\">three20</a><br>由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 PR 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 Nimbus, 算是 three20 的一个替代品</p>\n</li>\n<li><p><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a><br>作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)</p>\n</li>\n<li><p><a href=\"https://github.com/magicalpanda/MagicalRecord\">MagicalRecord</a><br>作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作</p>\n</li>\n<li><p><a href=\"https://github.com/ccgus/fmdb\">FMDB</a><br>一个对 SQLite 进行封装的库, 使用起来方便, 简单</p>\n</li>\n<li><p><a href=\"https://github.com/Mantle/Mantle\">Mantle</a><br>作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了。GitHub自家的产物，轻量级建模的首选，也可以很好的配合CoreData工作</p>\n</li>\n<li><p><a href=\"https://github.com/Grouper/FlatUIKit\">FlatUIKit</a><br>收集了很多扁平化 UI 的 iOS 组件, 方便使用</p>\n</li>\n<li><p><a href=\"https://github.com/pokeb/asi-http-request\">ASIHTTPRequest</a><br>一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)</p>\n</li>\n<li><p><a href=\"https://github.com/path/FastImageCache\">FastImageCache</a><br>Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点</p>\n</li>\n<li><p><a href=\"https://github.com/SnapKit/Masonry\">Masonry</a><br>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Shimmer\">Shimmer</a><br>Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单</p>\n</li>\n<li><p><a href=\"https://github.com/TransitApp/SVProgressHUD\">SVProgressHUD</a><br>又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用</p>\n</li>\n<li><p><a href=\"https://github.com/johnezang/JSONKit\">JSONKit</a><br>主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了</p>\n</li>\n<li><p><a href=\"https://github.com/jverkoey/nimbus\">Nimbus</a><br>作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/facebook-ios-sdk\"> Facebook SDK for iOS</a><br>Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/AsyncDisplayKit\">AsyncDisplayKit</a><br>Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎</p>\n</li>\n<li><p><a href=\"https://github.com/supermarin/Alcatraz\">Alcatraz</a><br>Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传</p>\n</li>\n<li><p><a href=\"https://github.com/jessesquires/JSQMessagesViewController\">JSQMessagesViewController</a><br>优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/xctool\">Xctool</a><br>是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, Travis CI, OCLint 等测试工具</p>\n</li>\n<li><p><a href=\"https://github.com/OpenEmu/OpenEmu\">OpenEmu</a><br>超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iCarousel\">iCarousel</a><br>作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果</p>\n</li>\n<li><p><a href=\"https://github.com/romaonthego/RESideMenu\">RESideMenu</a><br>作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8</p>\n</li>\n<li><p><a href=\"https://github.com/kevinzhow/PNChart\">PNChart</a><br>作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱</p>\n</li>\n<li><p><a href=\"https://github.com/square/PonyDebugger\">PonyDebugger</a><br>由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试</p>\n</li>\n<li><p><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a><br>作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本</p>\n</li>\n<li><p><a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a><br>UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮</p>\n</li>\n<li><p><a href=\"https://github.com/levey/AwesomeMenu\">AwesomeMenu</a><br>作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果</p>\n</li>\n<li><p><a href=\"https://github.com/tonymillion/Reachability\">Reachability</a><br>Reachablity 是用于检测 iOS 设备网络环境的库,Beeframeowrk中使用过的库</p>\n</li>\n<li><p><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\"> VVDocumenter-Xcode</a><br>作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞</p>\n</li>\n<li><p><a href=\"https://github.com/google/physical-web\">The Physical Web</a><br>由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段</p>\n</li>\n<li><p><a href=\"https://github.com/samuelclay/NewsBlur\">NewsBlur</a><br>作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码</p>\n</li>\n<li><p><a href=\"https://github.com/cocos2d/cocos2d-objc\">Cocos2D-SpriteBuilder</a><br>一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁</p>\n</li>\n<li><p><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a><br>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</p>\n</li>\n<li><p><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\">CocoaAsyncSocket</a><br>一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师</p>\n</li>\n<li><p><a href=\"https://github.com/devinross/tapkulibrary\">TapkuLibrary</a><br>作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</a></p>\n</li>\n<li><p><a href=\"https://github.com/CanvasPod/Canvas\">Canvas</a><br>无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手</p>\n</li>\n<li><p><a href=\"https://github.com/square/SocketRocket\">SocketRocket</a><br>Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱</p>\n</li>\n<li><p><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\">ECSlidingViewController</a><br>一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工</p>\n</li>\n<li><p><a href=\"https://github.com/stig/json-framework\">Json Framework</a><br>用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Tweaks\">Tweaks</a><br>Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了</p>\n</li>\n<li><p><a href=\"https://github.com/realm/realm-cocoa\">realm-cocoa</a><br>Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库</p>\n</li>\n<li><p><a href=\"https://github.com/icanzilb/JSONModel\">JSONModel</a><br>一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/KVOController\">KVOController</a><br>一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一</p>\n</li>\n<li><p><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\">MWPhotoBrowser</a><br>一款简单的 iOS 照片浏览控件</p>\n</li>\n<li><p><a href=\"https://github.com/samvermette/SVPullToRefresh\">SVPullToRefresh</a><br><b>一款只需一行代码便可集成上拉刷新和下拉加载的组件</b></p>\n</li>\n<li><p><a href=\"https://github.com/facebook/pop\">POP</a><br>facebook出品的paper，动画效果太好了，赶超apple的原生app一大截。pop就是paper的动画库！</p>\n</li>\n<li><p><a href=\"https://github.com/dennisreimann/ioctocat\">ioctocat</a><br>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</p>\n</li>\n<li><p><a href=\"https://github.com/ChatSecure/ChatSecure-iOS\">ChatSecure</a><br>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</p>\n</li>\n<li><p><a href=\"https://github.com/forkingdog/FDFullscreenPopGesture\">FDFullscreenPopGesture</a><br>一个丝滑的全屏滑动返回手势,相关博客文章点击<a href=\"http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/\">这里</a></p>\n</li>\n<li><p><a href=\"https://github.com/Jvaeyhcd/TKSubmitTransition\">TKSubmitTransition</a><br>非常漂亮的一个登录转场动画</p>\n</li>\n<li><p><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\">DZNEmptyDataSet</a><br>非常方便的对一些没有数据的UITableView或者UIScrollView加上提示图片和文字。</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iRate\">iRate</a><br>一个开源的评分控件，能够非常友好的设置提醒用户去评论我们的app</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iVersion\">iVersion</a><br>和iRate一样出自同一个人之手，，这个是提示用户更新版本。</p>\n</li>\n<li><p><a href=\"https://github.com/PureLayout/PureLayout\">PureLayout</a><br>自动布局</p>\n</li>\n</ul>\n<h3 id=\"文本相关\"><a href=\"#文本相关\" class=\"headerlink\" title=\"文本相关\"></a>文本相关</h3><ul>\n<li><p><a href=\"https://github.com/slackhq/SlackTextViewController\">SlackTextViewController</a><br>你曾经用过Slack iOS应用吗？如果你在较大的软件公司工作，也许会用过。对那些没用过的人呢？—?Slack令人激动。用到Slack的应用也是这样，尤其是用作极佳、定制的文本输入控制时。这时你有了一个现成可用在应用中的代码。自适应文本区域？试一下。手势识别、自动填充、多媒体合并？试一下。快速drop-in解决方案？试一下。其他还想要什么？SlackTextViewController 可以替代 UITableViewController &amp; UICollectionViewController。</p>\n</li>\n<li><p><a href=\"https://github.com/honcheng/RTLabel\">RTLabel</a><br>用于显示html的Label</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Shimmer\">Shimmer</a><br>滑动解锁效果的界面</p>\n</li>\n<li><p><a href=\"https://github.com/daiweilai/DDRichText\">DDRichText</a><br>为图文混排提供了一个思路</p>\n</li>\n</ul>\n<h3 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h3><ul>\n<li><p><a href=\"https://github.com/ninjinkun/NJKWebViewProgress\">NJKWebViewProgress</a><br>web界面加载进度条</p>\n</li>\n<li><p><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a><br>MBProgressHUD 使用非常广泛，网上很多基于ta的封装</p>\n</li>\n<li><p><a href=\"https://github.com/SVProgressHUD/SVProgressHUD\">SVProgressHUD</a><br>Navigation的扩展，强烈推荐</p>\n</li>\n<li><p><a href=\"https://github.com/scalessec/Toast\">Toast</a></p>\n</li>\n</ul>\n<h3 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h3><ul>\n<li><p><a href=\"https://github.com/ltebean/LTNavigationbar\">LTNavigationbar</a><br>上下滑动动态改变导航栏颜色</p>\n</li>\n<li><p><a href=\"https://github.com/JazysYu/JZNavigationExtension\">JZNavigationExtension</a></p>\n</li>\n</ul>\n<h3 id=\"键盘类\"><a href=\"#键盘类\" class=\"headerlink\" title=\"键盘类\"></a>键盘类</h3><ul>\n<li><p><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\">IQKeyboardManager</a></p>\n</li>\n<li><p><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\">TPKeyboardAvoiding</a><br>这个我用得很多，界面上如果有输入框可以界面会跟着键盘动，而不被键盘挡住。</p>\n</li>\n</ul>\n<h3 id=\"基础工具类以及Category\"><a href=\"#基础工具类以及Category\" class=\"headerlink\" title=\"基础工具类以及Category\"></a>基础工具类以及Category</h3><ul>\n<li><p><a href=\"https://github.com/FabrizioBrancati/BFKit\">BFKit OC版本</a><br>国外的一个大神写的很好用的分类，比较齐全</p>\n</li>\n<li><p><a href=\"https://github.com/MatthewYork/DateTools\">DateTools</a><br>很强大的日期工具类</p>\n</li>\n<li><p><a href=\"https://github.com/shaojiankui/iOS-Categories\">iOS-Categories</a><br>很是全面的一个扩展 iOS中的各种objc Category, a collection of useful objc Categories extending iOS Frameworks such as Foundation,UIKit,CoreData,QuartzCore,CoreLocation,MapKit Etc.</p>\n</li>\n<li><p><a href=\"https://github.com/fpt-software/Material-Controls-For-iOS\">Material-Controls-For-iOS</a><br>大神模仿谷歌做的iOS原生特效控件</p>\n</li>\n<li><p><a href=\"https://github.com/zwaldowski/BlocksKit\">BlocksKit</a><br>为基础类提供Block支持，很好用</p>\n</li>\n</ul>\n<h3 id=\"弹出框\"><a href=\"#弹出框\" class=\"headerlink\" title=\"弹出框\"></a>弹出框</h3><ul>\n<li><p><a href=\"https://github.com/kevin0571/STPopup\">STPopup</a><br>很方便的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/adad184/MMPopupView\">MMPopupView</a><br>里脊串的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/nealyoung/NYAlertViewController\">NYAlertViewController</a><br>非常强大的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/12207480/TYAlertController\">TYAlertController</a><br>很好很强大的弹出框，多种样式满足你的需求</p>\n</li>\n<li><p><a href=\"https://github.com/UncleJoke/JKPopMenuView\">JKPopMenuView</a><br>一个简单的弹出菜单</p>\n</li>\n</ul>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><p><a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a><br>自定义侧滑</p>\n</li>\n<li><p><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\">MGSwipeTableCell</a><br>同上自定义侧滑</p>\n</li>\n<li><p><a href=\"https://github.com/forkingdog/FDFullscreenPopGesture\">FDFullscreenPopGesture</a><br>全屏滑动返回上级页面</p>\n</li>\n<li><p><a href=\"https://github.com/jivesoftware/PDTSimpleCalendar\">PDTSimpleCalendar</a><br>一款日历控件，可以看看</p>\n</li>\n</ul>"},{"title":"Hexo在github上构建免费的博客","date":"2016-02-20T04:07:20.000Z","abbrlink":"cb862b3c407bcbf2","_content":"\n\n很多次想搭建一个自己的博客，彻底从csdn上转移到自己的博客站点中，但是一直由于时间的原因耽搁了。之前也使用过Wordpress来搭建自己的博客，但是发现Wordpress使用起来不是太方便。后来再接触了markdown语法写文章后，喜欢上了markdown。再后来了解到了hexo，一个基于Node的博客框架，同样可以实现基于github的博客，而且更轻更快，更适合Node的开发程序员。\n\n## Hexo介绍\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n<!-- more -->\n\n## Hexo安装\n\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n* [Node.js](http://nodejs.org/)\n* [git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash\n$ npm install -g hexo-cli\n```\n如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n>Mac用户在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\n### 安装 Git\n* Windows：下载并安装 [git](https://git-scm.com/download/win)\n* Mac：使用 [Homebrew](http://brew.sh/), [MacPorts](http://www.macports.org/) 或下载 安装程序 安装。\n* Linux (Ubuntu, Debian)：sudo apt-get install git-core\n* Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n\n### 安装 Node.js\n安装 Node.js 的最佳方式是使用[nvm](https://github.com/creationix/nvm)\ncURL:\n``` bash\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\nWget:\n``` bash\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n``` bash\nnvm install 5.0\n```\n或者您也可以下载 [安装程序](https://nodejs.org/en/) 来安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo,Hexo安装，要用全局安装，加-g参数。\n``` bash\n$ npm install -g hexo-cli\n$ npm install -g hexo\n```\n查看hexo的版本\n``` bash\n$ hexo version\nhexo-cli: 1.0.1\nos: Darwin 15.3.0 darwin x64\nhttp_parser: 2.5.0\nnode: 4.2.1\nv8: 4.5.103.35\nuv: 1.7.5\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2d\n```\n\n## Hexo创建项目\n\n我的系统环境：\n* Mac OS X EI Capitan\n* node v4.2.1\n* npm 2.14.7\n\n安装好后，我们就可以使用Hexo创建项目了。\n``` bash\nhexo init nodejs-hexo \n```\n我们看到当前在目录下，出现了一个文件夹，包括初始化的文件。\n\n进入目录，并启动Hexo服务器。\n\n``` bash\n# 进入目录\n$ cd nodejs-hexo\n# 启动hexo服务器\n$ hexo server\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n这时端口4000被打开了，我们能过浏览器打开地址，http://0.0.0.0:4000/ \nps:Mac上的地址是[http://0.0.0.0:4000/](http://0.0.0.0:4000/)， windows上的地址是http://localhost:4000/\n\n## Hexo结构解析\n接下来，我们需要对Hexo做全面的了解，才能做出个性化的博客。\n### 目录和文件\n{% asset_img hexo-dict.png Hexo目录结构示意图 %}\n* .deploy_git 发布到github上生成的静态文件夹\n* node_modules mode的modules\n* scaffolds 脚手架，也就是一个工具模板\n* scripts 写文件的js，扩展hexo的功能\n* source 存放博客正文内容\n* source/_drafts 草稿箱\n* source/_posts 文件箱\n* themes 存放皮肤的目录\n* themes/landscape 默认的皮肤\n* _config.yml 全局的配置文件\n* db.json 静态常量\n\n_posts目录：我们每次创建的文章都放在了_posts目录下面，Hexo是一个静态博客框架，没有数据库，文章内容都是以文本文件的方式进行存储的，直接存储在_posts的目录。\n\nthemes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。\n\n### 全局配置\n_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。\n* 站点信息: 定义标题，作者，语言\n* URL: URL访问路径\n* 文件目录: 正文的存储目录\n* 写博客配置：文章标题，文章类型，外部链接等\n* 目录和标签：默认分类，分类图，标签图\n* 归档设置：归档的类型\n* 服务器设置：IP，访问端口，日志输出\n* 时间和日期格式： 时间显示格式，日期显示格式\n* 分页设置：每页显示数量\n* 评论：外挂的Disqus评论系统\n* 插件和皮肤：换皮肤，安装插件\n* Markdown语言：markdown的标准\n* CSS的stylus格式：是否允许压缩\n* 部署配置：主要是github发布\n\n附上我本地的_config.yml配置\n``` bash\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site 站点信息\ntitle: Salvador\nsubtitle:\ndescription:\nauthor: Salvador\nlanguage: en\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory 文件目录\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing 写博客配置\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag 目录和标签\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format 时间和日期格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination 分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions 插件和皮肤\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n# theme: landscape\ntheme: apollo\n\n# Deployment 部署配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy: \n  type: git \n  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git\n```\n\n## Hexo使用\n\n### 创建新文章\n\n接下来，我们可以开始创建博客了。Hexo建议通过命令来创建文章，当然你也可以直接在_posts目录下创建文件。\n通过命令创建新的文章\n``` bash\n$ hexo new post Hexo在github上构建免费的\nINFO  Created: ~/hexo-blog/source/_posts/Hexo在github上构建免费的.md\n```\n创建完成后在_posts目录下，就会生成文件“Hexo在github上构建免费的.md”\n\n{% asset_img hexo-new.png Hexo创建新的文章 %}\n\n然后，我们编辑文件：”Hexo在github上构建免费的.md”，以markdown语法写文章，然后保存。\n\n在命令行，启动服务器。\n``` bash\n$ sudo hexo server\n```\n\n### 文章的语法\n我们在写文章时，有一些语法的要求。\n语法包括3部分：\n* 基本信息：标题，发布日期，分类目录，标签，类型，固定发布链接\n* 正文：markdown语法和Swig语法(掌握一个就行)\n* 特殊标记：引用，链接，图片，代码块，iframe，youtube视频\n\n#### 基本信息\n必须在文件的顶部，---的行之前的部分。如：\n``` bash\n---\ntitle: Hexo在github上构建免费的博客\ndate: 2016-02-20 12:07:20\ntags:\n---\n```\n#### 正文\nhexo的正文要求使用markdown的语法，markdown的语法可以参考 [此处](http://www.markdown.cn/).\n\n#### 特殊标记\nhexo对于一些有特殊标记 文字块，做了特殊的定义。\n\n** 引用 **\n``` bash\n# Swig语法\n{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}\nEvery interaction is both precious and an opportunity to delight.\n{% endblockquote %}\n\n# Markdown语法\n> Every interaction is both precious and an opportunity to delight.\n```\n\n** 代码块 **\n``` bash\n# Swig语法\n{% codeblock .compact http://underscorejs.org/#compact Underscore.js %}\n.compact([0, 1, false, 2, ‘’, 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n\n# Markdown语法\n'```{bash}\n.compact([0, 1, false, 2, ‘’, 3]);\n=> [1, 2, 3]\n```'\n\n```\n\n** 链接 **\n``` bash\n# Swig语法\n{% link 粉丝日志 http://blog.fens.me true 粉丝日志 %}\n\n# Markdown语法\n[粉丝日志](http://blog.fens.me)\n```\n\n** 图片 **\n对于本地图片，需要在_config.yml文件中配置\"post_asset_folder: true\"。\n``` bash\n# Writing 写博客配置\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n```\n这样在\"hexo new\"创建文章的时候hexo会自动会在_posts文件夹下面生成一个与文章同名的文件夹存放图片资源,如下图所示\n{% asset_img hexo-new.png Hexo创建新的文章 %}\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n``` bash\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n比如说：当你打开文章资源文件夹功能后，你把一个 \"example.jpg\" 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 它将 不会 出现在页面上。正确的引用本地图片方式是使用下面的标签而不是 markdown ：\n``` bash\n{% asset_img example.jpg This is an example image %}\n```\n\n## 发布到github\n\n### 静态化处理\n写完了文章，我们就可以发布了。要说明的一点是hexo的静态博客框架，那什么是静态博客呢？静态博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。\n\n** 静态化命令 **\n``` bash\n$ hexo generate\n```\n运行完命令后，在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。\n\n### 上传到github\n\n接下来，我们把这个博客发布到github。\n首先在github上创建一个项目“你的用户名.github.io”,我创建的项目是[jvaeyhcd.github.io](https://github.com/Jvaeyhcd/jvaeyhcd.github.io)\n编辑全局配置文件：_config.yml，找到deploy的部分，设置github的项目地址。\n``` bash\n# Deployment 部署配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy: \n  type: git #这里必须是git，以前是github\n  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git\n```\n然后，通过命令进行部署。\n``` bash\n$ sudo hexo d\n```\n部署完成后，打开你在github上创建的工程，你会看到\n{% asset_img github.png github %}\n然后访问[http://jvaeyhcd.github.io/](http://jvaeyhcd.github.io/)就能看到你发布到github上的博客了。\n","source":"_posts/Hexo在github上构建免费的博客.md","raw":"---\ntitle: Hexo在github上构建免费的博客\ndate: 2016-02-20 12:07:20\ntags:\n  - iOS\ncategories: 经验积累\nabbrlink: cb862b3c407bcbf2\n---\n\n\n很多次想搭建一个自己的博客，彻底从csdn上转移到自己的博客站点中，但是一直由于时间的原因耽搁了。之前也使用过Wordpress来搭建自己的博客，但是发现Wordpress使用起来不是太方便。后来再接触了markdown语法写文章后，喜欢上了markdown。再后来了解到了hexo，一个基于Node的博客框架，同样可以实现基于github的博客，而且更轻更快，更适合Node的开发程序员。\n\n## Hexo介绍\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n<!-- more -->\n\n## Hexo安装\n\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n* [Node.js](http://nodejs.org/)\n* [git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash\n$ npm install -g hexo-cli\n```\n如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n>Mac用户在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。\n\n### 安装 Git\n* Windows：下载并安装 [git](https://git-scm.com/download/win)\n* Mac：使用 [Homebrew](http://brew.sh/), [MacPorts](http://www.macports.org/) 或下载 安装程序 安装。\n* Linux (Ubuntu, Debian)：sudo apt-get install git-core\n* Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n\n### 安装 Node.js\n安装 Node.js 的最佳方式是使用[nvm](https://github.com/creationix/nvm)\ncURL:\n``` bash\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\nWget:\n``` bash\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n``` bash\nnvm install 5.0\n```\n或者您也可以下载 [安装程序](https://nodejs.org/en/) 来安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo,Hexo安装，要用全局安装，加-g参数。\n``` bash\n$ npm install -g hexo-cli\n$ npm install -g hexo\n```\n查看hexo的版本\n``` bash\n$ hexo version\nhexo-cli: 1.0.1\nos: Darwin 15.3.0 darwin x64\nhttp_parser: 2.5.0\nnode: 4.2.1\nv8: 4.5.103.35\nuv: 1.7.5\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2d\n```\n\n## Hexo创建项目\n\n我的系统环境：\n* Mac OS X EI Capitan\n* node v4.2.1\n* npm 2.14.7\n\n安装好后，我们就可以使用Hexo创建项目了。\n``` bash\nhexo init nodejs-hexo \n```\n我们看到当前在目录下，出现了一个文件夹，包括初始化的文件。\n\n进入目录，并启动Hexo服务器。\n\n``` bash\n# 进入目录\n$ cd nodejs-hexo\n# 启动hexo服务器\n$ hexo server\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n这时端口4000被打开了，我们能过浏览器打开地址，http://0.0.0.0:4000/ \nps:Mac上的地址是[http://0.0.0.0:4000/](http://0.0.0.0:4000/)， windows上的地址是http://localhost:4000/\n\n## Hexo结构解析\n接下来，我们需要对Hexo做全面的了解，才能做出个性化的博客。\n### 目录和文件\n{% asset_img hexo-dict.png Hexo目录结构示意图 %}\n* .deploy_git 发布到github上生成的静态文件夹\n* node_modules mode的modules\n* scaffolds 脚手架，也就是一个工具模板\n* scripts 写文件的js，扩展hexo的功能\n* source 存放博客正文内容\n* source/_drafts 草稿箱\n* source/_posts 文件箱\n* themes 存放皮肤的目录\n* themes/landscape 默认的皮肤\n* _config.yml 全局的配置文件\n* db.json 静态常量\n\n_posts目录：我们每次创建的文章都放在了_posts目录下面，Hexo是一个静态博客框架，没有数据库，文章内容都是以文本文件的方式进行存储的，直接存储在_posts的目录。\n\nthemes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。\n\n### 全局配置\n_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。\n* 站点信息: 定义标题，作者，语言\n* URL: URL访问路径\n* 文件目录: 正文的存储目录\n* 写博客配置：文章标题，文章类型，外部链接等\n* 目录和标签：默认分类，分类图，标签图\n* 归档设置：归档的类型\n* 服务器设置：IP，访问端口，日志输出\n* 时间和日期格式： 时间显示格式，日期显示格式\n* 分页设置：每页显示数量\n* 评论：外挂的Disqus评论系统\n* 插件和皮肤：换皮肤，安装插件\n* Markdown语言：markdown的标准\n* CSS的stylus格式：是否允许压缩\n* 部署配置：主要是github发布\n\n附上我本地的_config.yml配置\n``` bash\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site 站点信息\ntitle: Salvador\nsubtitle:\ndescription:\nauthor: Salvador\nlanguage: en\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory 文件目录\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing 写博客配置\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag 目录和标签\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format 时间和日期格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination 分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions 插件和皮肤\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n# theme: landscape\ntheme: apollo\n\n# Deployment 部署配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy: \n  type: git \n  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git\n```\n\n## Hexo使用\n\n### 创建新文章\n\n接下来，我们可以开始创建博客了。Hexo建议通过命令来创建文章，当然你也可以直接在_posts目录下创建文件。\n通过命令创建新的文章\n``` bash\n$ hexo new post Hexo在github上构建免费的\nINFO  Created: ~/hexo-blog/source/_posts/Hexo在github上构建免费的.md\n```\n创建完成后在_posts目录下，就会生成文件“Hexo在github上构建免费的.md”\n\n{% asset_img hexo-new.png Hexo创建新的文章 %}\n\n然后，我们编辑文件：”Hexo在github上构建免费的.md”，以markdown语法写文章，然后保存。\n\n在命令行，启动服务器。\n``` bash\n$ sudo hexo server\n```\n\n### 文章的语法\n我们在写文章时，有一些语法的要求。\n语法包括3部分：\n* 基本信息：标题，发布日期，分类目录，标签，类型，固定发布链接\n* 正文：markdown语法和Swig语法(掌握一个就行)\n* 特殊标记：引用，链接，图片，代码块，iframe，youtube视频\n\n#### 基本信息\n必须在文件的顶部，---的行之前的部分。如：\n``` bash\n---\ntitle: Hexo在github上构建免费的博客\ndate: 2016-02-20 12:07:20\ntags:\n---\n```\n#### 正文\nhexo的正文要求使用markdown的语法，markdown的语法可以参考 [此处](http://www.markdown.cn/).\n\n#### 特殊标记\nhexo对于一些有特殊标记 文字块，做了特殊的定义。\n\n** 引用 **\n``` bash\n# Swig语法\n{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}\nEvery interaction is both precious and an opportunity to delight.\n{% endblockquote %}\n\n# Markdown语法\n> Every interaction is both precious and an opportunity to delight.\n```\n\n** 代码块 **\n``` bash\n# Swig语法\n{% codeblock .compact http://underscorejs.org/#compact Underscore.js %}\n.compact([0, 1, false, 2, ‘’, 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n\n# Markdown语法\n'```{bash}\n.compact([0, 1, false, 2, ‘’, 3]);\n=> [1, 2, 3]\n```'\n\n```\n\n** 链接 **\n``` bash\n# Swig语法\n{% link 粉丝日志 http://blog.fens.me true 粉丝日志 %}\n\n# Markdown语法\n[粉丝日志](http://blog.fens.me)\n```\n\n** 图片 **\n对于本地图片，需要在_config.yml文件中配置\"post_asset_folder: true\"。\n``` bash\n# Writing 写博客配置\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n```\n这样在\"hexo new\"创建文章的时候hexo会自动会在_posts文件夹下面生成一个与文章同名的文件夹存放图片资源,如下图所示\n{% asset_img hexo-new.png Hexo创建新的文章 %}\n\n通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。\n\n``` bash\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n比如说：当你打开文章资源文件夹功能后，你把一个 \"example.jpg\" 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 它将 不会 出现在页面上。正确的引用本地图片方式是使用下面的标签而不是 markdown ：\n``` bash\n{% asset_img example.jpg This is an example image %}\n```\n\n## 发布到github\n\n### 静态化处理\n写完了文章，我们就可以发布了。要说明的一点是hexo的静态博客框架，那什么是静态博客呢？静态博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。\n\n** 静态化命令 **\n``` bash\n$ hexo generate\n```\n运行完命令后，在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。\n\n### 上传到github\n\n接下来，我们把这个博客发布到github。\n首先在github上创建一个项目“你的用户名.github.io”,我创建的项目是[jvaeyhcd.github.io](https://github.com/Jvaeyhcd/jvaeyhcd.github.io)\n编辑全局配置文件：_config.yml，找到deploy的部分，设置github的项目地址。\n``` bash\n# Deployment 部署配置\n## Docs: https://hexo.io/docs/deployment.html\ndeploy: \n  type: git #这里必须是git，以前是github\n  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git\n```\n然后，通过命令进行部署。\n``` bash\n$ sudo hexo d\n```\n部署完成后，打开你在github上创建的工程，你会看到\n{% asset_img github.png github %}\n然后访问[http://jvaeyhcd.github.io/](http://jvaeyhcd.github.io/)就能看到你发布到github上的博客了。\n","slug":"Hexo在github上构建免费的博客","published":1,"updated":"2022-05-19T03:13:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceno0014l1l3ekkb1w31","content":"<p>很多次想搭建一个自己的博客，彻底从csdn上转移到自己的博客站点中，但是一直由于时间的原因耽搁了。之前也使用过Wordpress来搭建自己的博客，但是发现Wordpress使用起来不是太方便。后来再接触了markdown语法写文章后，喜欢上了markdown。再后来了解到了hexo，一个基于Node的博客框架，同样可以实现基于github的博客，而且更轻更快，更适合Node的开发程序员。</p>\n<h2 id=\"Hexo介绍\"><a href=\"#Hexo介绍\" class=\"headerlink\" title=\"Hexo介绍\"></a>Hexo介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a></li>\n<li><a href=\"http://git-scm.com/\">git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac用户在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\">git</a></li>\n<li>Mac：使用 <a href=\"http://brew.sh/\">Homebrew</a>, <a href=\"http://www.macports.org/\">MacPorts</a> 或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用<a href=\"https://github.com/creationix/nvm\">nvm</a><br>cURL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 5.0</span><br></pre></td></tr></table></figure>\n<p>或者您也可以下载 <a href=\"https://nodejs.org/en/\">安装程序</a> 来安装。</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo,Hexo安装，要用全局安装，加-g参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>查看hexo的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br><span class=\"line\">hexo-cli: 1.0.1</span><br><span class=\"line\">os: Darwin 15.3.0 darwin x64</span><br><span class=\"line\">http_parser: 2.5.0</span><br><span class=\"line\">node: 4.2.1</span><br><span class=\"line\">v8: 4.5.103.35</span><br><span class=\"line\">uv: 1.7.5</span><br><span class=\"line\">zlib: 1.2.8</span><br><span class=\"line\">ares: 1.10.1-DEV</span><br><span class=\"line\">icu: 56.1</span><br><span class=\"line\">modules: 46</span><br><span class=\"line\">openssl: 1.0.2d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo创建项目\"><a href=\"#Hexo创建项目\" class=\"headerlink\" title=\"Hexo创建项目\"></a>Hexo创建项目</h2><p>我的系统环境：</p>\n<ul>\n<li>Mac OS X EI Capitan</li>\n<li>node v4.2.1</li>\n<li>npm 2.14.7</li>\n</ul>\n<p>安装好后，我们就可以使用Hexo创建项目了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init nodejs-hexo </span><br></pre></td></tr></table></figure>\n<p>我们看到当前在目录下，出现了一个文件夹，包括初始化的文件。</p>\n<p>进入目录，并启动Hexo服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nodejs-hexo</span><br><span class=\"line\"><span class=\"comment\"># 启动hexo服务器</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href=\"http://0.0.0.0:4000/\">http://0.0.0.0:4000/</a><br>ps:Mac上的地址是<a href=\"http://0.0.0.0:4000/\">http://0.0.0.0:4000/</a>， windows上的地址是<a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<h2 id=\"Hexo结构解析\"><a href=\"#Hexo结构解析\" class=\"headerlink\" title=\"Hexo结构解析\"></a>Hexo结构解析</h2><p>接下来，我们需要对Hexo做全面的了解，才能做出个性化的博客。</p>\n<h3 id=\"目录和文件\"><a href=\"#目录和文件\" class=\"headerlink\" title=\"目录和文件\"></a>目录和文件</h3><img src=\"/posts/cb862b3c407bcbf2/hexo-dict.png\" class=\"\" title=\"Hexo目录结构示意图\">\n<ul>\n<li>.deploy_git 发布到github上生成的静态文件夹</li>\n<li>node_modules mode的modules</li>\n<li>scaffolds 脚手架，也就是一个工具模板</li>\n<li>scripts 写文件的js，扩展hexo的功能</li>\n<li>source 存放博客正文内容</li>\n<li>source/_drafts 草稿箱</li>\n<li>source/_posts 文件箱</li>\n<li>themes 存放皮肤的目录</li>\n<li>themes/landscape 默认的皮肤</li>\n<li>_config.yml 全局的配置文件</li>\n<li>db.json 静态常量</li>\n</ul>\n<p>_posts目录：我们每次创建的文章都放在了_posts目录下面，Hexo是一个静态博客框架，没有数据库，文章内容都是以文本文件的方式进行存储的，直接存储在_posts的目录。</p>\n<p>themes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。</p>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。</p>\n<ul>\n<li>站点信息: 定义标题，作者，语言</li>\n<li>URL: URL访问路径</li>\n<li>文件目录: 正文的存储目录</li>\n<li>写博客配置：文章标题，文章类型，外部链接等</li>\n<li>目录和标签：默认分类，分类图，标签图</li>\n<li>归档设置：归档的类型</li>\n<li>服务器设置：IP，访问端口，日志输出</li>\n<li>时间和日期格式： 时间显示格式，日期显示格式</li>\n<li>分页设置：每页显示数量</li>\n<li>评论：外挂的Disqus评论系统</li>\n<li>插件和皮肤：换皮肤，安装插件</li>\n<li>Markdown语言：markdown的标准</li>\n<li>CSS的stylus格式：是否允许压缩</li>\n<li>部署配置：主要是github发布</li>\n</ul>\n<p>附上我本地的_config.yml配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site 站点信息</span></span><br><span class=\"line\">title: Salvador</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">author: Salvador</span><br><span class=\"line\">language: en</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Directory 文件目录</span></span><br><span class=\"line\">source_dir: <span class=\"built_in\">source</span></span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing 写博客配置</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\">relative_link: <span class=\"literal\">false</span></span><br><span class=\"line\">future: <span class=\"literal\">true</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  auto_detect: <span class=\"literal\">false</span></span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Category &amp; Tag 目录和标签</span></span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date / Time format 时间和日期格式</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pagination 分页设置</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extensions 插件和皮肤</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># theme: landscape</span></span><br><span class=\"line\">theme: apollo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment 部署配置</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git </span><br><span class=\"line\">  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h2><h3 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h3><p>接下来，我们可以开始创建博客了。Hexo建议通过命令来创建文章，当然你也可以直接在_posts目录下创建文件。<br>通过命令创建新的文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post Hexo在github上构建免费的</span><br><span class=\"line\">INFO  Created: ~/hexo-blog/source/_posts/Hexo在github上构建免费的.md</span><br></pre></td></tr></table></figure>\n<p>创建完成后在_posts目录下，就会生成文件“Hexo在github上构建免费的.md”</p>\n<img src=\"/posts/cb862b3c407bcbf2/hexo-new.png\" class=\"\" title=\"Hexo创建新的文章\">\n\n<p>然后，我们编辑文件：”Hexo在github上构建免费的.md”，以markdown语法写文章，然后保存。</p>\n<p>在命令行，启动服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文章的语法\"><a href=\"#文章的语法\" class=\"headerlink\" title=\"文章的语法\"></a>文章的语法</h3><p>我们在写文章时，有一些语法的要求。<br>语法包括3部分：</p>\n<ul>\n<li>基本信息：标题，发布日期，分类目录，标签，类型，固定发布链接</li>\n<li>正文：markdown语法和Swig语法(掌握一个就行)</li>\n<li>特殊标记：引用，链接，图片，代码块，iframe，youtube视频</li>\n</ul>\n<h4 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h4><p>必须在文件的顶部，—的行之前的部分。如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo在github上构建免费的博客</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2016-02-20 12:07:20</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>hexo的正文要求使用markdown的语法，markdown的语法可以参考 <a href=\"http://www.markdown.cn/\">此处</a>.</p>\n<h4 id=\"特殊标记\"><a href=\"#特殊标记\" class=\"headerlink\" title=\"特殊标记\"></a>特殊标记</h4><p>hexo对于一些有特殊标记 文字块，做了特殊的定义。</p>\n<p>** 引用 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class=\"line\">Every interaction is both precious and an opportunity to delight.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\">&gt; Every interaction is both precious and an opportunity to delight.</span><br></pre></td></tr></table></figure>\n\n<p>** 代码块 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% codeblock .compact http://underscorejs.org/<span class=\"comment\">#compact Underscore.js %&#125;</span></span><br><span class=\"line\">.compact([0, 1, <span class=\"literal\">false</span>, 2, ‘’, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\"><span class=\"string\">&#x27;```&#123;bash&#125;</span></span><br><span class=\"line\"><span class=\"string\">.compact([0, 1, false, 2, ‘’, 3]);</span></span><br><span class=\"line\"><span class=\"string\">=&gt; [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"string\">```&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>** 链接 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% <span class=\"built_in\">link</span> 粉丝日志 http://blog.fens.me <span class=\"literal\">true</span> 粉丝日志 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\">[粉丝日志](http://blog.fens.me)</span><br></pre></td></tr></table></figure>\n\n<p>** 图片 **<br>对于本地图片，需要在_config.yml文件中配置”post_asset_folder: true”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Writing 写博客配置</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\">relative_link: <span class=\"literal\">false</span></span><br><span class=\"line\">future: <span class=\"literal\">true</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  auto_detect: <span class=\"literal\">false</span></span><br><span class=\"line\">  tab_replace:</span><br></pre></td></tr></table></figure>\n<p>这样在”hexo new”创建文章的时候hexo会自动会在_posts文件夹下面生成一个与文章同名的文件夹存放图片资源,如下图所示</p>\n<img src=\"/posts/cb862b3c407bcbf2/hexo-new.png\" class=\"\" title=\"Hexo创建新的文章\">\n\n<p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 “example.jpg” 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 它将 不会 出现在页面上。正确的引用本地图片方式是使用下面的标签而不是 markdown ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布到github\"><a href=\"#发布到github\" class=\"headerlink\" title=\"发布到github\"></a>发布到github</h2><h3 id=\"静态化处理\"><a href=\"#静态化处理\" class=\"headerlink\" title=\"静态化处理\"></a>静态化处理</h3><p>写完了文章，我们就可以发布了。要说明的一点是hexo的静态博客框架，那什么是静态博客呢？静态博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。</p>\n<p>** 静态化命令 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>运行完命令后，在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>\n<h3 id=\"上传到github\"><a href=\"#上传到github\" class=\"headerlink\" title=\"上传到github\"></a>上传到github</h3><p>接下来，我们把这个博客发布到github。<br>首先在github上创建一个项目“你的用户名.github.io”,我创建的项目是<a href=\"https://github.com/Jvaeyhcd/jvaeyhcd.github.io\">jvaeyhcd.github.io</a><br>编辑全局配置文件：_config.yml，找到deploy的部分，设置github的项目地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment 部署配置</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git <span class=\"comment\">#这里必须是git，以前是github</span></span><br><span class=\"line\">  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git</span><br></pre></td></tr></table></figure>\n<p>然后，通过命令进行部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo d</span><br></pre></td></tr></table></figure>\n<p>部署完成后，打开你在github上创建的工程，你会看到</p>\n<img src=\"/posts/cb862b3c407bcbf2/github.png\" class=\"\" title=\"github\">\n<p>然后访问<a href=\"http://jvaeyhcd.github.io/\">http://jvaeyhcd.github.io/</a>就能看到你发布到github上的博客了。</p>\n","site":{"data":{}},"excerpt":"<p>很多次想搭建一个自己的博客，彻底从csdn上转移到自己的博客站点中，但是一直由于时间的原因耽搁了。之前也使用过Wordpress来搭建自己的博客，但是发现Wordpress使用起来不是太方便。后来再接触了markdown语法写文章后，喜欢上了markdown。再后来了解到了hexo，一个基于Node的博客框架，同样可以实现基于github的博客，而且更轻更快，更适合Node的开发程序员。</p>\n<h2 id=\"Hexo介绍\"><a href=\"#Hexo介绍\" class=\"headerlink\" title=\"Hexo介绍\"></a>Hexo介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>","more":"<h2 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a></li>\n<li><a href=\"http://git-scm.com/\">git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac用户在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\">git</a></li>\n<li>Mac：使用 <a href=\"http://brew.sh/\">Homebrew</a>, <a href=\"http://www.macports.org/\">MacPorts</a> 或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用<a href=\"https://github.com/creationix/nvm\">nvm</a><br>cURL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>Wget:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 5.0</span><br></pre></td></tr></table></figure>\n<p>或者您也可以下载 <a href=\"https://nodejs.org/en/\">安装程序</a> 来安装。</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo,Hexo安装，要用全局安装，加-g参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>查看hexo的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br><span class=\"line\">hexo-cli: 1.0.1</span><br><span class=\"line\">os: Darwin 15.3.0 darwin x64</span><br><span class=\"line\">http_parser: 2.5.0</span><br><span class=\"line\">node: 4.2.1</span><br><span class=\"line\">v8: 4.5.103.35</span><br><span class=\"line\">uv: 1.7.5</span><br><span class=\"line\">zlib: 1.2.8</span><br><span class=\"line\">ares: 1.10.1-DEV</span><br><span class=\"line\">icu: 56.1</span><br><span class=\"line\">modules: 46</span><br><span class=\"line\">openssl: 1.0.2d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo创建项目\"><a href=\"#Hexo创建项目\" class=\"headerlink\" title=\"Hexo创建项目\"></a>Hexo创建项目</h2><p>我的系统环境：</p>\n<ul>\n<li>Mac OS X EI Capitan</li>\n<li>node v4.2.1</li>\n<li>npm 2.14.7</li>\n</ul>\n<p>安装好后，我们就可以使用Hexo创建项目了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init nodejs-hexo </span><br></pre></td></tr></table></figure>\n<p>我们看到当前在目录下，出现了一个文件夹，包括初始化的文件。</p>\n<p>进入目录，并启动Hexo服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nodejs-hexo</span><br><span class=\"line\"><span class=\"comment\"># 启动hexo服务器</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href=\"http://0.0.0.0:4000/\">http://0.0.0.0:4000/</a><br>ps:Mac上的地址是<a href=\"http://0.0.0.0:4000/\">http://0.0.0.0:4000/</a>， windows上的地址是<a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<h2 id=\"Hexo结构解析\"><a href=\"#Hexo结构解析\" class=\"headerlink\" title=\"Hexo结构解析\"></a>Hexo结构解析</h2><p>接下来，我们需要对Hexo做全面的了解，才能做出个性化的博客。</p>\n<h3 id=\"目录和文件\"><a href=\"#目录和文件\" class=\"headerlink\" title=\"目录和文件\"></a>目录和文件</h3><img src=\"/posts/cb862b3c407bcbf2/hexo-dict.png\" class=\"\" title=\"Hexo目录结构示意图\">\n<ul>\n<li>.deploy_git 发布到github上生成的静态文件夹</li>\n<li>node_modules mode的modules</li>\n<li>scaffolds 脚手架，也就是一个工具模板</li>\n<li>scripts 写文件的js，扩展hexo的功能</li>\n<li>source 存放博客正文内容</li>\n<li>source/_drafts 草稿箱</li>\n<li>source/_posts 文件箱</li>\n<li>themes 存放皮肤的目录</li>\n<li>themes/landscape 默认的皮肤</li>\n<li>_config.yml 全局的配置文件</li>\n<li>db.json 静态常量</li>\n</ul>\n<p>_posts目录：我们每次创建的文章都放在了_posts目录下面，Hexo是一个静态博客框架，没有数据库，文章内容都是以文本文件的方式进行存储的，直接存储在_posts的目录。</p>\n<p>themes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。</p>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。</p>\n<ul>\n<li>站点信息: 定义标题，作者，语言</li>\n<li>URL: URL访问路径</li>\n<li>文件目录: 正文的存储目录</li>\n<li>写博客配置：文章标题，文章类型，外部链接等</li>\n<li>目录和标签：默认分类，分类图，标签图</li>\n<li>归档设置：归档的类型</li>\n<li>服务器设置：IP，访问端口，日志输出</li>\n<li>时间和日期格式： 时间显示格式，日期显示格式</li>\n<li>分页设置：每页显示数量</li>\n<li>评论：外挂的Disqus评论系统</li>\n<li>插件和皮肤：换皮肤，安装插件</li>\n<li>Markdown语言：markdown的标准</li>\n<li>CSS的stylus格式：是否允许压缩</li>\n<li>部署配置：主要是github发布</li>\n</ul>\n<p>附上我本地的_config.yml配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site 站点信息</span></span><br><span class=\"line\">title: Salvador</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">author: Salvador</span><br><span class=\"line\">language: en</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Directory 文件目录</span></span><br><span class=\"line\">source_dir: <span class=\"built_in\">source</span></span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing 写博客配置</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\">relative_link: <span class=\"literal\">false</span></span><br><span class=\"line\">future: <span class=\"literal\">true</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  auto_detect: <span class=\"literal\">false</span></span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Category &amp; Tag 目录和标签</span></span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date / Time format 时间和日期格式</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pagination 分页设置</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extensions 插件和皮肤</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># theme: landscape</span></span><br><span class=\"line\">theme: apollo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment 部署配置</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git </span><br><span class=\"line\">  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h2><h3 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h3><p>接下来，我们可以开始创建博客了。Hexo建议通过命令来创建文章，当然你也可以直接在_posts目录下创建文件。<br>通过命令创建新的文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post Hexo在github上构建免费的</span><br><span class=\"line\">INFO  Created: ~/hexo-blog/source/_posts/Hexo在github上构建免费的.md</span><br></pre></td></tr></table></figure>\n<p>创建完成后在_posts目录下，就会生成文件“Hexo在github上构建免费的.md”</p>\n<img src=\"/posts/cb862b3c407bcbf2/hexo-new.png\" class=\"\" title=\"Hexo创建新的文章\">\n\n<p>然后，我们编辑文件：”Hexo在github上构建免费的.md”，以markdown语法写文章，然后保存。</p>\n<p>在命令行，启动服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文章的语法\"><a href=\"#文章的语法\" class=\"headerlink\" title=\"文章的语法\"></a>文章的语法</h3><p>我们在写文章时，有一些语法的要求。<br>语法包括3部分：</p>\n<ul>\n<li>基本信息：标题，发布日期，分类目录，标签，类型，固定发布链接</li>\n<li>正文：markdown语法和Swig语法(掌握一个就行)</li>\n<li>特殊标记：引用，链接，图片，代码块，iframe，youtube视频</li>\n</ul>\n<h4 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h4><p>必须在文件的顶部，—的行之前的部分。如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo在github上构建免费的博客</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2016-02-20 12:07:20</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>hexo的正文要求使用markdown的语法，markdown的语法可以参考 <a href=\"http://www.markdown.cn/\">此处</a>.</p>\n<h4 id=\"特殊标记\"><a href=\"#特殊标记\" class=\"headerlink\" title=\"特殊标记\"></a>特殊标记</h4><p>hexo对于一些有特殊标记 文字块，做了特殊的定义。</p>\n<p>** 引用 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class=\"line\">Every interaction is both precious and an opportunity to delight.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\">&gt; Every interaction is both precious and an opportunity to delight.</span><br></pre></td></tr></table></figure>\n\n<p>** 代码块 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% codeblock .compact http://underscorejs.org/<span class=\"comment\">#compact Underscore.js %&#125;</span></span><br><span class=\"line\">.compact([0, 1, <span class=\"literal\">false</span>, 2, ‘’, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\"><span class=\"string\">&#x27;```&#123;bash&#125;</span></span><br><span class=\"line\"><span class=\"string\">.compact([0, 1, false, 2, ‘’, 3]);</span></span><br><span class=\"line\"><span class=\"string\">=&gt; [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"string\">```&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>** 链接 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% <span class=\"built_in\">link</span> 粉丝日志 http://blog.fens.me <span class=\"literal\">true</span> 粉丝日志 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\">[粉丝日志](http://blog.fens.me)</span><br></pre></td></tr></table></figure>\n\n<p>** 图片 **<br>对于本地图片，需要在_config.yml文件中配置”post_asset_folder: true”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Writing 写博客配置</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\">relative_link: <span class=\"literal\">false</span></span><br><span class=\"line\">future: <span class=\"literal\">true</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  auto_detect: <span class=\"literal\">false</span></span><br><span class=\"line\">  tab_replace:</span><br></pre></td></tr></table></figure>\n<p>这样在”hexo new”创建文章的时候hexo会自动会在_posts文件夹下面生成一个与文章同名的文件夹存放图片资源,如下图所示</p>\n<img src=\"/posts/cb862b3c407bcbf2/hexo-new.png\" class=\"\" title=\"Hexo创建新的文章\">\n\n<p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 “example.jpg” 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 它将 不会 出现在页面上。正确的引用本地图片方式是使用下面的标签而不是 markdown ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布到github\"><a href=\"#发布到github\" class=\"headerlink\" title=\"发布到github\"></a>发布到github</h2><h3 id=\"静态化处理\"><a href=\"#静态化处理\" class=\"headerlink\" title=\"静态化处理\"></a>静态化处理</h3><p>写完了文章，我们就可以发布了。要说明的一点是hexo的静态博客框架，那什么是静态博客呢？静态博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。</p>\n<p>** 静态化命令 **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>运行完命令后，在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>\n<h3 id=\"上传到github\"><a href=\"#上传到github\" class=\"headerlink\" title=\"上传到github\"></a>上传到github</h3><p>接下来，我们把这个博客发布到github。<br>首先在github上创建一个项目“你的用户名.github.io”,我创建的项目是<a href=\"https://github.com/Jvaeyhcd/jvaeyhcd.github.io\">jvaeyhcd.github.io</a><br>编辑全局配置文件：_config.yml，找到deploy的部分，设置github的项目地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment 部署配置</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git <span class=\"comment\">#这里必须是git，以前是github</span></span><br><span class=\"line\">  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git</span><br></pre></td></tr></table></figure>\n<p>然后，通过命令进行部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo d</span><br></pre></td></tr></table></figure>\n<p>部署完成后，打开你在github上创建的工程，你会看到</p>\n<img src=\"/posts/cb862b3c407bcbf2/github.png\" class=\"\" title=\"github\">\n<p>然后访问<a href=\"http://jvaeyhcd.github.io/\">http://jvaeyhcd.github.io/</a>就能看到你发布到github上的博客了。</p>"},{"title":"Hexo安装新主题apollo","date":"2016-02-20T08:15:35.000Z","abbrlink":"3931c38f78b5e094","_content":"\nHexo博客系统的流行原因，是因为他的个人性，而皮肤就是个人性的一种体现。Hexo换皮肤还是比较简单的,既可以自己根据默认的主题来修改，也可以到[https://hexo.io/themes/](https://hexo.io/themes/)上去找主题。\n\n下面简单描述一下我安装apollo主题的过程。\n\n<!-- more -->\n\n## 安装\ngithub上的文档给出了详细的安装命令\n``` bash\nhexo init #blogname#\ncd #blogname# \nnpm install\nnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\ngit clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo\n```\n\n## 启用\n安装成功后就可以开始启用主题，主题的启用需要修改_config.yml 的 theme 配置项为 apollo：\n``` bash\n# Extensions 插件和皮肤\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n# theme: landscape\ntheme: apollo\n```\n\n启动hexo后修改成功后的皮肤如图所示\n{% asset_img apollo.png apollo主题 %}","source":"_posts/Hexo安装新主题apollo.md","raw":"---\ntitle: Hexo安装新主题apollo\ndate: 2016-02-20 16:15:35\ntags:\n  - Hexo\ncategories: 经验积累\nabbrlink: 3931c38f78b5e094\n---\n\nHexo博客系统的流行原因，是因为他的个人性，而皮肤就是个人性的一种体现。Hexo换皮肤还是比较简单的,既可以自己根据默认的主题来修改，也可以到[https://hexo.io/themes/](https://hexo.io/themes/)上去找主题。\n\n下面简单描述一下我安装apollo主题的过程。\n\n<!-- more -->\n\n## 安装\ngithub上的文档给出了详细的安装命令\n``` bash\nhexo init #blogname#\ncd #blogname# \nnpm install\nnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive\ngit clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo\n```\n\n## 启用\n安装成功后就可以开始启用主题，主题的启用需要修改_config.yml 的 theme 配置项为 apollo：\n``` bash\n# Extensions 插件和皮肤\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n# theme: landscape\ntheme: apollo\n```\n\n启动hexo后修改成功后的皮肤如图所示\n{% asset_img apollo.png apollo主题 %}","slug":"Hexo安装新主题apollo","published":1,"updated":"2022-05-19T03:13:11.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenp0016l1l32rgle48x","content":"<p>Hexo博客系统的流行原因，是因为他的个人性，而皮肤就是个人性的一种体现。Hexo换皮肤还是比较简单的,既可以自己根据默认的主题来修改，也可以到<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a>上去找主题。</p>\n<p>下面简单描述一下我安装apollo主题的过程。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>github上的文档给出了详细的安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init <span class=\"comment\">#blogname#</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"comment\">#blogname# </span></span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用\"><a href=\"#启用\" class=\"headerlink\" title=\"启用\"></a>启用</h2><p>安装成功后就可以开始启用主题，主题的启用需要修改_config.yml 的 theme 配置项为 apollo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions 插件和皮肤</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># theme: landscape</span></span><br><span class=\"line\">theme: apollo</span><br></pre></td></tr></table></figure>\n\n<p>启动hexo后修改成功后的皮肤如图所示</p>\n<img src=\"/posts/3931c38f78b5e094/apollo.png\" class=\"\" title=\"apollo主题\">","site":{"data":{}},"excerpt":"<p>Hexo博客系统的流行原因，是因为他的个人性，而皮肤就是个人性的一种体现。Hexo换皮肤还是比较简单的,既可以自己根据默认的主题来修改，也可以到<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a>上去找主题。</p>\n<p>下面简单描述一下我安装apollo主题的过程。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>github上的文档给出了详细的安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init <span class=\"comment\">#blogname#</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"comment\">#blogname# </span></span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用\"><a href=\"#启用\" class=\"headerlink\" title=\"启用\"></a>启用</h2><p>安装成功后就可以开始启用主题，主题的启用需要修改_config.yml 的 theme 配置项为 apollo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions 插件和皮肤</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># theme: landscape</span></span><br><span class=\"line\">theme: apollo</span><br></pre></td></tr></table></figure>\n\n<p>启动hexo后修改成功后的皮肤如图所示</p>\n<img src=\"/posts/3931c38f78b5e094/apollo.png\" class=\"\" title=\"apollo主题\">"},{"title":"Mac基础：如何让Finder显示隐藏文件和文件夹","date":"2016-04-28T01:43:25.000Z","abbrlink":"348ede5553fda841","_content":"有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？\n\n## 让Finder显示隐藏文件和文件夹\n\n* <b>第一步：</b>打开「终端」应用程序（我推荐使用[iTerm](https://www.iterm2.com/),他比Mac自带终端好用很多）。\n\n<!-- more -->\n\n* <b>第二步：</b>输入如下命令，如图一所示：\n{% asset_img bash.png 图一%}\n```bash\ndefaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder\n//OS X Mountain Lion 和早期版本命令如下：\ndefaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder\n```\n* <b>第三步：</b>按下「Return」键确认。\n现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。如图二所示：\n{% asset_img finder.png 图二%}\n\n\n## 让Finder隐藏隐藏文件和文件夹\n* 只需要一步\n如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成（图三）即可。\n{% asset_img show.png 图三%}\n```bash\ndefaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder\n//OS X Mountain Lion 和早期版本命令如下：\ndefaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder\n```\n\n* 最后看到的效果如图四所示：\n{% asset_img hidefinder.png 图四%}","source":"_posts/Mac基础：如何让Finder显示隐藏文件和文件夹.md","raw":"---\ntitle: Mac基础：如何让Finder显示隐藏文件和文件夹\ndate: 2016-04-28 09:43:25\ntags:\n  - Mac\ncategories: Mac基础\nabbrlink: 348ede5553fda841\n---\n有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？\n\n## 让Finder显示隐藏文件和文件夹\n\n* <b>第一步：</b>打开「终端」应用程序（我推荐使用[iTerm](https://www.iterm2.com/),他比Mac自带终端好用很多）。\n\n<!-- more -->\n\n* <b>第二步：</b>输入如下命令，如图一所示：\n{% asset_img bash.png 图一%}\n```bash\ndefaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder\n//OS X Mountain Lion 和早期版本命令如下：\ndefaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder\n```\n* <b>第三步：</b>按下「Return」键确认。\n现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。如图二所示：\n{% asset_img finder.png 图二%}\n\n\n## 让Finder隐藏隐藏文件和文件夹\n* 只需要一步\n如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成（图三）即可。\n{% asset_img show.png 图三%}\n```bash\ndefaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder\n//OS X Mountain Lion 和早期版本命令如下：\ndefaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder\n```\n\n* 最后看到的效果如图四所示：\n{% asset_img hidefinder.png 图四%}","slug":"Mac基础：如何让Finder显示隐藏文件和文件夹","published":1,"updated":"2022-05-19T03:13:11.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenp001bl1l3btfq4dsp","content":"<p>有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？</p>\n<h2 id=\"让Finder显示隐藏文件和文件夹\"><a href=\"#让Finder显示隐藏文件和文件夹\" class=\"headerlink\" title=\"让Finder显示隐藏文件和文件夹\"></a>让Finder显示隐藏文件和文件夹</h2><ul>\n<li><b>第一步：</b>打开「终端」应用程序（我推荐使用<a href=\"https://www.iterm2.com/\">iTerm</a>,他比Mac自带终端好用很多）。</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><b>第二步：</b>输入如下命令，如图一所示：<img src=\"/posts/348ede5553fda841/bash.png\" class=\"\" title=\"图一\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">true</span> ; killall Finder</span><br><span class=\"line\">//OS X Mountain Lion 和早期版本命令如下：</span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder</span><br></pre></td></tr></table></figure></li>\n<li><b>第三步：</b>按下「Return」键确认。<br>现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。如图二所示：<img src=\"/posts/348ede5553fda841/finder.png\" class=\"\" title=\"图二\"></li>\n</ul>\n<h2 id=\"让Finder隐藏隐藏文件和文件夹\"><a href=\"#让Finder隐藏隐藏文件和文件夹\" class=\"headerlink\" title=\"让Finder隐藏隐藏文件和文件夹\"></a>让Finder隐藏隐藏文件和文件夹</h2><ul>\n<li><p>只需要一步<br>如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成（图三）即可。</p>\n<img src=\"/posts/348ede5553fda841/show.png\" class=\"\" title=\"图三\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">false</span> ; killall Finder</span><br><span class=\"line\">//OS X Mountain Lion 和早期版本命令如下：</span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder</span><br></pre></td></tr></table></figure></li>\n<li><p>最后看到的效果如图四所示：</p>\n<img src=\"/posts/348ede5553fda841/hidefinder.png\" class=\"\" title=\"图四\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？</p>\n<h2 id=\"让Finder显示隐藏文件和文件夹\"><a href=\"#让Finder显示隐藏文件和文件夹\" class=\"headerlink\" title=\"让Finder显示隐藏文件和文件夹\"></a>让Finder显示隐藏文件和文件夹</h2><ul>\n<li><b>第一步：</b>打开「终端」应用程序（我推荐使用<a href=\"https://www.iterm2.com/\">iTerm</a>,他比Mac自带终端好用很多）。</li>\n</ul>","more":"<ul>\n<li><b>第二步：</b>输入如下命令，如图一所示：<img src=\"/posts/348ede5553fda841/bash.png\" class=\"\" title=\"图一\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">true</span> ; killall Finder</span><br><span class=\"line\">//OS X Mountain Lion 和早期版本命令如下：</span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder</span><br></pre></td></tr></table></figure></li>\n<li><b>第三步：</b>按下「Return」键确认。<br>现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。如图二所示：<img src=\"/posts/348ede5553fda841/finder.png\" class=\"\" title=\"图二\"></li>\n</ul>\n<h2 id=\"让Finder隐藏隐藏文件和文件夹\"><a href=\"#让Finder隐藏隐藏文件和文件夹\" class=\"headerlink\" title=\"让Finder隐藏隐藏文件和文件夹\"></a>让Finder隐藏隐藏文件和文件夹</h2><ul>\n<li><p>只需要一步<br>如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成（图三）即可。</p>\n<img src=\"/posts/348ede5553fda841/show.png\" class=\"\" title=\"图三\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">false</span> ; killall Finder</span><br><span class=\"line\">//OS X Mountain Lion 和早期版本命令如下：</span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder</span><br></pre></td></tr></table></figure></li>\n<li><p>最后看到的效果如图四所示：</p>\n<img src=\"/posts/348ede5553fda841/hidefinder.png\" class=\"\" title=\"图四\"></li>\n</ul>"},{"title":"Jenkins+gradle+coding Android持续集成","date":"2016-08-08T09:27:36.000Z","abbrlink":"dffc5afb10488f2f","_content":"\n等待更新,基本步骤与iOS配置相似。\n\n<!-- more -->","source":"_posts/Jenkins-gradle-coding-Android持续集成.md","raw":"---\ntitle: Jenkins+gradle+coding Android持续集成\ndate: 2016-08-08 17:27:36\ntags:\n  - Jenkins\n  - Android\ncategories: 经验积累\nabbrlink: dffc5afb10488f2f\n---\n\n等待更新,基本步骤与iOS配置相似。\n\n<!-- more -->","slug":"Jenkins-gradle-coding-Android持续集成","published":1,"updated":"2022-05-19T03:13:11.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenp001el1l3fexu29h7","content":"<p>等待更新,基本步骤与iOS配置相似。</p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>等待更新,基本步骤与iOS配置相似。</p>","more":""},{"title":"Jenkins+iOS集成常见错误及解决办法","date":"2016-08-04T01:36:07.000Z","abbrlink":"0324c45dc635e1ed","_content":"\n### 问题一: failed to import bridging header\n\n#### 问题详情\n\n``` bash\nHeader.h:7:9: error: 'HcdGuideView/HcdGuideView.h' file not found\n#import <HcdGuideView/HcdGuideView.h>\n^\n<unknown>:0: error: failed to import bridging header '/Users/polesapp/.jenkins/workspace/qiangtoubao/qiangtoubao/OCFile/qiangtoubao-Bridging-Header.h'\n\n** BUILD FAILED **\n```\n\n集成项目是Swift项目，使用了Cocoapods导入一个自己写的一个Objective-C第三方库，所以需要用到桥接文件。在Xcode中运行没有任何问题，但是用Jenkins集成的时候却报错了。\n<!-- more -->\n#### 解决办法\n\n上述所报的错误已经写得十分明显了，错误的原因出在`#import <HcdGuideView/HcdGuideView.h>`这一句，桥接文件中找不到`HcdGuideView.h`这个文件。\n\n所以最后的解决办法如下：\n\n1. 选择target-BuildSettings-Search Paths下的User Header Search Paths，点击空白处，并且点击“＋”号添加一项，然后输入`$(PODS_ROOT)`,选择：recursive（会在相应的目录递归搜索文件）,如下图所示：\n\n{% asset_img error_example_1.png failed to import bridging header%}\n\n这样就需要将`#import <HcdGuideView/HcdGuideView.h>`替换成`#import \"HcdGuideView.h\"`就可以了。\n","source":"_posts/Jenkins-iOS集成常见错误及解决办法.md","raw":"---\ntitle: Jenkins+iOS集成常见错误及解决办法\ndate: 2016-08-04 09:36:07\ntags:\n - 常见错误\n - Jenkins\n - iOS\ncategories: 经验积累\nabbrlink: 0324c45dc635e1ed\n---\n\n### 问题一: failed to import bridging header\n\n#### 问题详情\n\n``` bash\nHeader.h:7:9: error: 'HcdGuideView/HcdGuideView.h' file not found\n#import <HcdGuideView/HcdGuideView.h>\n^\n<unknown>:0: error: failed to import bridging header '/Users/polesapp/.jenkins/workspace/qiangtoubao/qiangtoubao/OCFile/qiangtoubao-Bridging-Header.h'\n\n** BUILD FAILED **\n```\n\n集成项目是Swift项目，使用了Cocoapods导入一个自己写的一个Objective-C第三方库，所以需要用到桥接文件。在Xcode中运行没有任何问题，但是用Jenkins集成的时候却报错了。\n<!-- more -->\n#### 解决办法\n\n上述所报的错误已经写得十分明显了，错误的原因出在`#import <HcdGuideView/HcdGuideView.h>`这一句，桥接文件中找不到`HcdGuideView.h`这个文件。\n\n所以最后的解决办法如下：\n\n1. 选择target-BuildSettings-Search Paths下的User Header Search Paths，点击空白处，并且点击“＋”号添加一项，然后输入`$(PODS_ROOT)`,选择：recursive（会在相应的目录递归搜索文件）,如下图所示：\n\n{% asset_img error_example_1.png failed to import bridging header%}\n\n这样就需要将`#import <HcdGuideView/HcdGuideView.h>`替换成`#import \"HcdGuideView.h\"`就可以了。\n","slug":"Jenkins-iOS集成常见错误及解决办法","published":1,"updated":"2022-05-19T03:13:11.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenq001hl1l38mvs2sm5","content":"<h3 id=\"问题一-failed-to-import-bridging-header\"><a href=\"#问题一-failed-to-import-bridging-header\" class=\"headerlink\" title=\"问题一: failed to import bridging header\"></a>问题一: failed to import bridging header</h3><h4 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.h:7:9: error: <span class=\"string\">&#x27;HcdGuideView/HcdGuideView.h&#x27;</span> file not found</span><br><span class=\"line\"><span class=\"comment\">#import &lt;HcdGuideView/HcdGuideView.h&gt;</span></span><br><span class=\"line\">^</span><br><span class=\"line\">&lt;unknown&gt;:0: error: failed to import bridging header <span class=\"string\">&#x27;/Users/polesapp/.jenkins/workspace/qiangtoubao/qiangtoubao/OCFile/qiangtoubao-Bridging-Header.h&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">** BUILD FAILED **</span><br></pre></td></tr></table></figure>\n\n<p>集成项目是Swift项目，使用了Cocoapods导入一个自己写的一个Objective-C第三方库，所以需要用到桥接文件。在Xcode中运行没有任何问题，但是用Jenkins集成的时候却报错了。</p>\n<span id=\"more\"></span>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>上述所报的错误已经写得十分明显了，错误的原因出在<code>#import &lt;HcdGuideView/HcdGuideView.h&gt;</code>这一句，桥接文件中找不到<code>HcdGuideView.h</code>这个文件。</p>\n<p>所以最后的解决办法如下：</p>\n<ol>\n<li>选择target-BuildSettings-Search Paths下的User Header Search Paths，点击空白处，并且点击“＋”号添加一项，然后输入<code>$(PODS_ROOT)</code>,选择：recursive（会在相应的目录递归搜索文件）,如下图所示：</li>\n</ol>\n<img src=\"/posts/0324c45dc635e1ed/error_example_1.png\" class=\"\" title=\"failed to import bridging header\">\n\n<p>这样就需要将<code>#import &lt;HcdGuideView/HcdGuideView.h&gt;</code>替换成<code>#import &quot;HcdGuideView.h&quot;</code>就可以了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题一-failed-to-import-bridging-header\"><a href=\"#问题一-failed-to-import-bridging-header\" class=\"headerlink\" title=\"问题一: failed to import bridging header\"></a>问题一: failed to import bridging header</h3><h4 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.h:7:9: error: <span class=\"string\">&#x27;HcdGuideView/HcdGuideView.h&#x27;</span> file not found</span><br><span class=\"line\"><span class=\"comment\">#import &lt;HcdGuideView/HcdGuideView.h&gt;</span></span><br><span class=\"line\">^</span><br><span class=\"line\">&lt;unknown&gt;:0: error: failed to import bridging header <span class=\"string\">&#x27;/Users/polesapp/.jenkins/workspace/qiangtoubao/qiangtoubao/OCFile/qiangtoubao-Bridging-Header.h&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">** BUILD FAILED **</span><br></pre></td></tr></table></figure>\n\n<p>集成项目是Swift项目，使用了Cocoapods导入一个自己写的一个Objective-C第三方库，所以需要用到桥接文件。在Xcode中运行没有任何问题，但是用Jenkins集成的时候却报错了。</p>","more":"<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>上述所报的错误已经写得十分明显了，错误的原因出在<code>#import &lt;HcdGuideView/HcdGuideView.h&gt;</code>这一句，桥接文件中找不到<code>HcdGuideView.h</code>这个文件。</p>\n<p>所以最后的解决办法如下：</p>\n<ol>\n<li>选择target-BuildSettings-Search Paths下的User Header Search Paths，点击空白处，并且点击“＋”号添加一项，然后输入<code>$(PODS_ROOT)</code>,选择：recursive（会在相应的目录递归搜索文件）,如下图所示：</li>\n</ol>\n<img src=\"/posts/0324c45dc635e1ed/error_example_1.png\" class=\"\" title=\"failed to import bridging header\">\n\n<p>这样就需要将<code>#import &lt;HcdGuideView/HcdGuideView.h&gt;</code>替换成<code>#import &quot;HcdGuideView.h&quot;</code>就可以了。</p>"},{"title":"Mac环境中Jenkins停止和启动命令","date":"2016-08-02T04:02:06.000Z","abbrlink":"e4250f7a7414ce80","_content":"\n### 启动\n``` bash\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n```\n\n### 停止\n``` bash\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n```\n<!-- more -->\n","source":"_posts/Mac环境中Jenkins停止和启动命令.md","raw":"---\ntitle: Mac环境中Jenkins停止和启动命令\ndate: 2016-08-02 12:02:06\ntags:\n  - Jenkins\ncategories: 经验积累\nabbrlink: e4250f7a7414ce80\n---\n\n### 启动\n``` bash\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n```\n\n### 停止\n``` bash\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n```\n<!-- more -->\n","slug":"Mac环境中Jenkins停止和启动命令","published":1,"updated":"2022-05-19T03:13:11.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenq001ll1l3h7yyg20h","content":"<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>","more":""},{"title":"NSURLErrorDomain Code=-1002 “Unsupported URL”","date":"2016-06-30T07:13:42.000Z","abbrlink":"11fd5d6a13a7f99e","_content":"\n在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。\n\n## 问题概述\n我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。\n\n<!-- more -->\n\n## 问题分析\n通过对比发现（分析问题常见的方法），当这个接口传入了中文后将会报错，如果不传中文接口并不会报错，所以我基本上就可以锁定问题就出在中文字符的问题上。\n\n## 解决方法\n找到了问题出现的原因后其它的一切都变得简单了，因为传入中文字符会出现服务器不能解析然后报错的情况，所以我们应该将传入的中文字符用UTF8编码一下后再通过接口传递给服务器。（问题轻松解决～～～就是这么简单）\n``` objc\n//text为传入参数\ntext = [text stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n```\n","source":"_posts/NSURLErrorDomain-Code-1002-“unsupported-URL”.md","raw":"---\ntitle: NSURLErrorDomain Code=-1002 “unsupported URL”\ndate: 2016-06-30 15:13:42\ntags:\n  - iOS\ncategories: 常见错误\nabbrlink: 11fd5d6a13a7f99e\n---\n\n在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。\n\n## 问题概述\n我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。\n\n<!-- more -->\n\n## 问题分析\n通过对比发现（分析问题常见的方法），当这个接口传入了中文后将会报错，如果不传中文接口并不会报错，所以我基本上就可以锁定问题就出在中文字符的问题上。\n\n## 解决方法\n找到了问题出现的原因后其它的一切都变得简单了，因为传入中文字符会出现服务器不能解析然后报错的情况，所以我们应该将传入的中文字符用UTF8编码一下后再通过接口传递给服务器。（问题轻松解决～～～就是这么简单）\n``` objc\n//text为传入参数\ntext = [text stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n```\n","slug":"NSURLErrorDomain-Code-1002-“unsupported-URL”","published":1,"updated":"2022-05-19T03:13:11.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenr001pl1l341qy0lts","content":"<p>在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。</p>\n<h2 id=\"问题概述\"><a href=\"#问题概述\" class=\"headerlink\" title=\"问题概述\"></a>问题概述</h2><p>我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>通过对比发现（分析问题常见的方法），当这个接口传入了中文后将会报错，如果不传中文接口并不会报错，所以我基本上就可以锁定问题就出在中文字符的问题上。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>找到了问题出现的原因后其它的一切都变得简单了，因为传入中文字符会出现服务器不能解析然后报错的情况，所以我们应该将传入的中文字符用UTF8编码一下后再通过接口传递给服务器。（问题轻松解决～～～就是这么简单）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//text为传入参数</span></span><br><span class=\"line\">text = [text stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。</p>\n<h2 id=\"问题概述\"><a href=\"#问题概述\" class=\"headerlink\" title=\"问题概述\"></a>问题概述</h2><p>我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。</p>","more":"<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>通过对比发现（分析问题常见的方法），当这个接口传入了中文后将会报错，如果不传中文接口并不会报错，所以我基本上就可以锁定问题就出在中文字符的问题上。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>找到了问题出现的原因后其它的一切都变得简单了，因为传入中文字符会出现服务器不能解析然后报错的情况，所以我们应该将传入的中文字符用UTF8编码一下后再通过接口传递给服务器。（问题轻松解决～～～就是这么简单）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//text为传入参数</span></span><br><span class=\"line\">text = [text stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br></pre></td></tr></table></figure>"},{"title":"objc过滤NSString中的HTML标签","date":"2016-05-04T03:17:29.000Z","abbrlink":"cba4703cb24c0232","_content":"\n开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。\n\n## 解决办法\n\n对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：\n\n### 方法一\n用NSScanner扫描来处理\n\n<!-- more -->\n\nNSString+Jvaeyhcd.h\n``` objc\n#import <Foundation/Foundation.h>\n\n@interface NSString (Jvaeyhcd)\n\n- (NSString *)removeHTML;\n\n@end\n```\n\nNSString+Jvaeyhcd.m\n``` objc\n- (NSString *)removeHTML {\n    \n    NSScanner *theScanner;\n    NSString *text = nil;\n    \n    theScanner = [NSScanner scannerWithString:self];\n\n    while ([theScanner isAtEnd] == NO) {\n        // find start of tag\n        [theScanner scanUpToString:@\"<\" intoString:NULL] ;\n        // find end of tag\n        [theScanner scanUpToString:@\">\" intoString:&text] ;\n        \n        // replace the found tag with a space\n        \n        //(you can filter multi-spaces out later if you wish)\n        \n        self = [self stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@\"%@>\", text] withString:@\" \"];\n    }\n    \n    return self;\n}\n\n```\n\n### 方法二\n用NSString自带的Seprated自截断方法\n\nNSString+Jvaeyhcd.h\n``` objc\n#import <Foundation/Foundation.h>\n\n@interface NSString (Jvaeyhcd)\n\n- (NSString *)removeHTML2;\n\n@end\n```\n\nNSString+Jvaeyhcd.m\n``` objc\n- (NSString *)removeHTML2 {\n    NSArray *components = [self componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"<>\"]];\n    NSMutableArray *componentsToKeep = [NSMutableArray array];\n    \n    for (int i = 0; i < [components count]; i = i + 2) {\n        [componentsToKeep addObject:[components objectAtIndex:i]];\n    }\n    \n    NSString *plainText = [componentsToKeep componentsJoinedByString:@\"\"];\n    \n    return plainText;\n}\n```","source":"_posts/Objective-C过滤NSString中的HTML标签.md","raw":"---\ntitle: objc过滤NSString中的HTML标签\ndate: 2016-05-04 11:17:29\ntags:\n  - objc\ncategories: 经验积累\nabbrlink: cba4703cb24c0232\n---\n\n开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。\n\n## 解决办法\n\n对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：\n\n### 方法一\n用NSScanner扫描来处理\n\n<!-- more -->\n\nNSString+Jvaeyhcd.h\n``` objc\n#import <Foundation/Foundation.h>\n\n@interface NSString (Jvaeyhcd)\n\n- (NSString *)removeHTML;\n\n@end\n```\n\nNSString+Jvaeyhcd.m\n``` objc\n- (NSString *)removeHTML {\n    \n    NSScanner *theScanner;\n    NSString *text = nil;\n    \n    theScanner = [NSScanner scannerWithString:self];\n\n    while ([theScanner isAtEnd] == NO) {\n        // find start of tag\n        [theScanner scanUpToString:@\"<\" intoString:NULL] ;\n        // find end of tag\n        [theScanner scanUpToString:@\">\" intoString:&text] ;\n        \n        // replace the found tag with a space\n        \n        //(you can filter multi-spaces out later if you wish)\n        \n        self = [self stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@\"%@>\", text] withString:@\" \"];\n    }\n    \n    return self;\n}\n\n```\n\n### 方法二\n用NSString自带的Seprated自截断方法\n\nNSString+Jvaeyhcd.h\n``` objc\n#import <Foundation/Foundation.h>\n\n@interface NSString (Jvaeyhcd)\n\n- (NSString *)removeHTML2;\n\n@end\n```\n\nNSString+Jvaeyhcd.m\n``` objc\n- (NSString *)removeHTML2 {\n    NSArray *components = [self componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"<>\"]];\n    NSMutableArray *componentsToKeep = [NSMutableArray array];\n    \n    for (int i = 0; i < [components count]; i = i + 2) {\n        [componentsToKeep addObject:[components objectAtIndex:i]];\n    }\n    \n    NSString *plainText = [componentsToKeep componentsJoinedByString:@\"\"];\n    \n    return plainText;\n}\n```","slug":"Objective-C过滤NSString中的HTML标签","published":1,"updated":"2022-05-19T03:13:11.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenr001tl1l30br3aar3","content":"<p>开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>用NSScanner扫描来处理</p>\n<span id=\"more\"></span>\n\n<p>NSString+Jvaeyhcd.h</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">Jvaeyhcd</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>NSString+Jvaeyhcd.m</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSScanner</span> *theScanner;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *text = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    theScanner = [<span class=\"built_in\">NSScanner</span> scannerWithString:<span class=\"keyword\">self</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ([theScanner isAtEnd] == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// find start of tag</span></span><br><span class=\"line\">        [theScanner scanUpToString:<span class=\"string\">@&quot;&lt;&quot;</span> intoString:<span class=\"literal\">NULL</span>] ;</span><br><span class=\"line\">        <span class=\"comment\">// find end of tag</span></span><br><span class=\"line\">        [theScanner scanUpToString:<span class=\"string\">@&quot;&gt;&quot;</span> intoString:&amp;text] ;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// replace the found tag with a space</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//(you can filter multi-spaces out later if you wish)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> stringByReplacingOccurrencesOfString:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@&gt;&quot;</span>, text] withString:<span class=\"string\">@&quot; &quot;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>用NSString自带的Seprated自截断方法</p>\n<p>NSString+Jvaeyhcd.h</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">Jvaeyhcd</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>NSString+Jvaeyhcd.m</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML2 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *components = [<span class=\"keyword\">self</span> componentsSeparatedByCharactersInSet:[<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@&quot;&lt;&gt;&quot;</span>]];</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *componentsToKeep = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; [components count]; i = i + <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        [componentsToKeep addObject:[components objectAtIndex:i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *plainText = [componentsToKeep componentsJoinedByString:<span class=\"string\">@&quot;&quot;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> plainText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>用NSScanner扫描来处理</p>","more":"<p>NSString+Jvaeyhcd.h</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">Jvaeyhcd</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>NSString+Jvaeyhcd.m</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSScanner</span> *theScanner;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *text = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    theScanner = [<span class=\"built_in\">NSScanner</span> scannerWithString:<span class=\"keyword\">self</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ([theScanner isAtEnd] == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// find start of tag</span></span><br><span class=\"line\">        [theScanner scanUpToString:<span class=\"string\">@&quot;&lt;&quot;</span> intoString:<span class=\"literal\">NULL</span>] ;</span><br><span class=\"line\">        <span class=\"comment\">// find end of tag</span></span><br><span class=\"line\">        [theScanner scanUpToString:<span class=\"string\">@&quot;&gt;&quot;</span> intoString:&amp;text] ;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// replace the found tag with a space</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//(you can filter multi-spaces out later if you wish)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> stringByReplacingOccurrencesOfString:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@&gt;&quot;</span>, text] withString:<span class=\"string\">@&quot; &quot;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>用NSString自带的Seprated自截断方法</p>\n<p>NSString+Jvaeyhcd.h</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">Jvaeyhcd</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>NSString+Jvaeyhcd.m</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML2 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *components = [<span class=\"keyword\">self</span> componentsSeparatedByCharactersInSet:[<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@&quot;&lt;&gt;&quot;</span>]];</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *componentsToKeep = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; [components count]; i = i + <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        [componentsToKeep addObject:[components objectAtIndex:i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *plainText = [componentsToKeep componentsJoinedByString:<span class=\"string\">@&quot;&quot;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> plainText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"RXSwift基础","date":"2016-06-08T01:32:44.000Z","abbrlink":"1cdda3c06a430c09","_content":"\n## 概念\n\n一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应\n\n## 为什么发用RxSwift\n一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式\n\n* Observable的创建和订阅\n* Subjects的使用\n* Combination：Observable的混合操作\n* Transforming：Observable的转换操作\n* Filtering：Observable消息元素的过滤操作\n* 对Observable元素做运算操作\n* Connectable操作\n* 错误处理\n* debug\n\n<!-- more -->\n\n## 消息的订阅方式\n这些都是Observable的方法，参数都是闭包，闭包是观察者\n1. subscribe(on:(Event) -> void)：订阅所有消息(Next, Error, and Completed)\n2. subscribeNext((Element) -> void)：只订阅Next\n3. subscribeError((ErrorType) -> void)：只订阅Error\n4. subscribeCompleted(() -> Void)：只订阅Completed\n5. subscribe(onNext:(Element) -> void, onError:(ErrorType) -> void, onCompleted:() -> Void, onDisposed:() -> Void)订阅多个消息\n\n## 释放分配的资源\n订阅者可以通过调用.dispose()来释放分配的资源，但通过DisposeBag来管理或者通过takeUntil来自动释放更好\n\n``` swift\nlet disposeBag = DisposeBag()\nsubscription.addDisposableTo(disposeBag)\n```\n或\n\n``` swift\nsequence\n    .takeUntil(self.rx_deallocated)\n    .subscribe {\n        print($0)\n    }\n```\n## Observable的创建和订阅\nObservable序列分为两类：\n* 冷：只有当有观察者订阅这个序列时，序列才发射值\n* 热：序列创建时就开始发射值\n\n### never()创建即不会完成也不会发消息的Observable\n``` swift\nlet disposeBag = DisposeBag()\nlet neverSequence = Observable<String>.never()\n\nlet neverSequenceSubscription = neverSequence\n        .subscribe { _ in\n            print(\"This will never be printed\")\n    }\n\nneverSequenceSubscription.addDisposableTo(disposeBag)\n```\n<img src='./never.png' width=400/>\n\n### empty()创建只会发送一次完成消息的Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable<Int>.empty()\n        .subscribe { event in\n            print(event)\n        }\n        .addDisposableTo(disposeBag)\n```\n`output:`\nCompleted\n\n<img src='./empty.png' width=400>\n\n### just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.just(\"🔴\")\n    .subscribe { event in\n        print(event)\n    }\n    .addDisposableTo(disposeBag)        \n```\n> 注：如果传递null给just，它将返回一个发送null消息的Observable，不要传入错误的参数，否则将会得到一个空的Observable\n\n`output:`\nNext(🔴)\nCompleted\n<br/>\n<img src='./just.png' width=400>\n\n\n### of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略\n``` swift\n let disposeBag = DisposeBag()\n\n Observable.of(\"🐶\", \"🐱\", \"🐭\", \"🐹\")\n        .subscribeNext { element in\n            print(element)\n        }\n        .addDisposableTo(disposeBag)\n```\n`output:`\n🐶\n🐱\n🐭\n🐹\n\n### create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nlet myJust = { (element: String) -> Observable<String> in\n        return Observable.create { observer in\n            observer.on(.Next(element))\n            observer.on(.Completed)\n            return NopDisposable.instance\n        }\n    }\n\n myJust(\"🔴\")\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\nNext(🔴)\nCompleted\n<br/>\n<img src='./create.png' width=400>\n<br/>\n\n### range()创建一个发送一个范围的整数的Observable，发送完后发送Completed\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.range(start: 1, count: 10)\n        .subscribe { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(5)\nNext(6)\nNext(7)\nNext(8)\nNext(9)\nNext(10)\nCompleted\n\n### repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.repeatElement(\"🔴\")\n        .take(3)\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\n🔴\n🔴\n🔴\n> 注：take可以用于所有Observable指定限制元素个数\n\n### generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素\n``` swift\nlet disposeBag = DisposeBag()\n\n Observable.generate(\n            initialState: 0,\n            condition: { $0 < 3 },\n            iterate: { $0 + 1 }\n        )\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n**iterate：每次condition之后都会对当前值做一次相应迭代运算**\n\n`output:`<br/>\n0\n1\n2\n\n### deferred()序列为每一个订阅者创建一个全新的Observable\n``` swift\nlet disposeBag = DisposeBag()\nvar count = 1\n\nlet deferredSequence = Observable<String>.deferred {\n        print(\"Creating \\(count)\")\n        count += 1\n        return Observable.create { observer in\n            print(\"Emitting...\")\n            observer.onNext(\"🐶\")\n            observer.onNext(\"🐱\")\n            observer.onNext(\"🐵\")\n            return NopDisposable.instance\n        }\n    }\n\ndeferredSequence\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\ndeferredSequence\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n> 注：deferred序列只有在一个观察者订阅它的时候才执行它的创建Observable方法，产生一个全新的Observable**\n\n`output:`\nCreating 1\nEmitting...\n🐶\n🐱\n🐵\nCreating 2\nEmitting...\n🐶\n🐱\n🐵\n<img src='./deferred.png' width=400>\n<br/>\n\n### error()创建一个不发送元素的Observable，然后立即发送error并终止\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable<Int>.error(Error.Test)\n        .subscribe { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\nError(Test)\n\n### doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🍎\", \"🍐\", \"🍊\", \"🍋\")\n        .doOn { print(\"Intercepted:\", $0) }\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n> 注： doOn(onNext:onError:onCompleted:)为不同订阅方式分别指定\n\n`output:`\nIntercepted: Next(🍎)\n🍎\nIntercepted: Next(🍐)\n🍐\nIntercepted: Next(🍊)\n🍊\nIntercepted: Next(🍋)\n🍋\nIntercepted: Completed\n\n<img src='./doOn.png' width=400>\n<br/>\n\n### toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable\n<br/>\n## Subjects的使用\n\nSubjects理解为observer和Observable之间的桥梁或代理，即扮演着observer又扮演着Observable，规定了添加的observer如何接收消息\n\n### PublishSubject向所有订阅者广播从订阅之后的事件\n``` swift\nlet disposeBag = DisposeBag()\nlet subject = PublishSubject<String>()\n\nsubject.addObserver(\"1\").addDisposableTo(disposeBag)\nsubject.onNext(\"🐶\")\nsubject.onNext(\"🐱\")\n\nsubject.addObserver(\"2\").addDisposableTo(disposeBag)\nsubject.onNext(\"🅰️\")\nsubject.onNext(\"🅱️\")\n```\n`output:`\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\n\n### ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\n``` swift\n let disposeBag = DisposeBag()\n let subject = ReplaySubject<String>.create(bufferSize: 1)\n\n subject.addObserver(\"1\").addDisposableTo(disposeBag)\n subject.onNext(\"🐶\")\n subject.onNext(\"🐱\")\n\n subject.addObserver(\"2\").addDisposableTo(disposeBag)\n subject.onNext(\"🅰️\")\n subject.onNext(\"🅱️\")\n```\n`output:`\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 2 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\n\n### BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\n``` swift\nlet disposeBag = DisposeBag()\nlet subject = BehaviorSubject(value: \"🔴\")\n\nsubject.addObserver(\"1\").addDisposableTo(disposeBag)\nsubject.onNext(\"🐶\")\nsubject.onNext(\"🐱\")\n\nsubject.addObserver(\"2\").addDisposableTo(disposeBag)\nsubject.onNext(\"🅰️\")\nsubject.onNext(\"🅱️\")\n\nsubject.addObserver(\"3\").addDisposableTo(disposeBag)\nsubject.onNext(\"🍐\")\nsubject.onNext(\"🍊\")\n```\n**note：以上都不会自动发送Completed当它们被释放的时候**\n\n`output:`\nSubscription: 1 Event: Next(🔴)\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 2 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\nSubscription: 3 Event: Next(🅱️)\nSubscription: 1 Event: Next(🍐)\nSubscription: 2 Event: Next(🍐)\nSubscription: 3 Event: Next(🍐)\nSubscription: 1 Event: Next(🍊)\nSubscription: 2 Event: Next(🍊)\nSubscription: 3 Event: Next(🍊)\n\n### Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\n``` swift\n  let disposeBag = DisposeBag()\n  let variable = Variable(\"🔴\")\n\n  variable.asObservable().addObserver(\"1\").addDisposableTo(disposeBag)\n  variable.value = \"🐶\"\n  variable.value = \"🐱\"\n\n  variable.asObservable().addObserver(\"2\").addDisposableTo(disposeBag)\n  variable.value = \"🅰️\"\n  variable.value = \"🅱️\"\n```\n> 注:variable.asObservable()实际是获取variable中的BehaviorSubject。variable也没有onNext，而是通过value来获取或添加元素，它会添加元素到BehaviorSubject\n\n`output:`\nSubscription: 1 Event: Next(🔴)\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 2 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\nSubscription: 1 Event: Completed\nSubscription: 2 Event: Completed\n\n## Combination：Observable的混合操作\n\n### startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\n``` swift\n   let disposeBag = DisposeBag()\n\n    Observable.of(\"🐶\", \"🐱\", \"🐭\", \"🐹\")\n        .startWith(\"1️⃣\")\n        .startWith(\"2️⃣\")\n        .startWith(\"3️⃣\", \"🅰️\", \"🅱️\")\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\n3️⃣\n🅰️\n🅱️\n2️⃣\n1️⃣\n🐶\n🐱\n🐭\n🐹\n<http://reactivex.io/documentation/operators/startwith.html>\n\n\n### merge()按顺序混合多个Observable为一个新Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nlet subject1 = PublishSubject<String>()\nlet subject2 = PublishSubject<String>()\nlet subject3 = PublishSubject<String>()\n\nObservable.of(subject1, subject2, subject3)\n    .merge()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nsubject1.onNext(\"🅰️\")\n\nsubject1.onNext(\"🅱️\")\n\nsubject2.onNext(\"①\")\n\nsubject2.onNext(\"②\")\n\nsubject1.onNext(\"🆎\")\n\nsubject3.onNext(\"🐱\")\n\nsubject2.onNext(\"③\")\n```\n`output:`\n🅰️\n🅱️\n①\n②\n🆎\n③\n<http://reactivex.io/documentation/operators/merge.html>\n\n\n### zip()相当于并排的将多个Observable合并成一个新Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nlet stringSubject = PublishSubject<String>()\nlet intSubject = PublishSubject<Int>()\n\nObservable.zip(stringSubject, intSubject) { stringElement, intElement in\n    \"\\(stringElement) \\(intElement)\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nstringSubject.onNext(\"🅰️\")\nstringSubject.onNext(\"🅱️\")\n\nintSubject.onNext(1)\n\nintSubject.onNext(2)\n\nstringSubject.onNext(\"🆎\")\nintSubject.onNext(3)\n```\n`output:`\n🅰️ 1\n🅱️ 2\n🆎 3\n\n<http://reactivex.io/documentation/operators/zip.html>\n</br>\n### combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\n``` swift\nlet disposeBag = DisposeBag()\n\nlet stringSubject = PublishSubject<String>()\nlet intSubject = PublishSubject<Int>()\n\nObservable.combineLatest(stringSubject, intSubject) { stringElement, intElement in\n        \"\\(stringElement) \\(intElement)\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nstringSubject.onNext(\"🅰️\")\n\nstringSubject.onNext(\"🅱️\")\nintSubject.onNext(1)\n\nintSubject.onNext(2)\n\nstringSubject.onNext(\"🆎\")\n```\n`output:`\n🅱️ 1\n🅱️ 2\n🆎 2\n<http://reactivex.io/documentation/operators/combinelatest.html>\n\n在数组上的应用：\n\n``` swift\nlet disposeBag = DisposeBag()\n\nlet stringObservable = Observable.just(\"❤️\")\nlet fruitObservable = [\"🍎\", \"🍐\", \"🍊\"].toObservable()\nlet animalObservable = Observable.of(\"🐶\", \"🐱\", \"🐭\", \"🐹\")\n\n[stringObservable, fruitObservable, animalObservable].combineLatest {\n        \"\\($0[0]) \\($0[1]) \\($0[2])\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n**note：所有集合的类型必须一样**\n\n`output:`\n❤️ 🍊 🐶\n❤️ 🍊 🐱\n❤️ 🍊 🐭\n❤️ 🍊 🐹\n\n### switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\n``` swift\nlet disposeBag = DisposeBag()\n\nlet subject1 = BehaviorSubject(value: \"⚽️\")\nlet subject2 = BehaviorSubject(value: \"🍎\")\n\nlet variable = Variable(subject1)\n\nvariable.asObservable()\n    .switchLatest()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nsubject1.onNext(\"🏈\")\nsubject1.onNext(\"🏀\")\n\nvariable.value = subject2\n\nsubject1.onNext(\"⚾️\")\nsubject1.onNext(\"🎾\")\n\nsubject2.onNext(\"🍐\")\n\nvariable.value = subject1\n```\n`output:`\n⚽️\n🏈\n🏀\n🍎\n🍐\n🎾\n**note：⚽️ 被忽略**\n<br/>\n<img src='./switch.png' width=400>\n<br/>\n\n## Transforming：Observable的转换操作 \n\n### map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\n``` swift\nlet disposeBag = DisposeBag()\nObservable.of(1, 2, 3)\n    .map { $0 * $0 }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n1\n4\n9\n<http://reactivex.io/documentation/operators/map.html>\n\n\n### scan()可以迭代的操作，并且可以设置一个初始的迭代值\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(10, 100, 1000)\n    .scan(1) { aggregateValue, newValue in\n        aggregateValue + newValue\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n11\n111\n1111\n<http://reactivex.io/documentation/operators/scan.html>\n\n## Filtering：Observable消息元素的过滤操作\n\n### filter()发出满足bool条件的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\n    \"🐱\", \"🐰\", \"🐶\",\n    \"🐸\", \"🐱\", \"🐰\",\n    \"🐹\", \"🐸\", \"🐱\")\n    .filter {\n        $0 == \"🐱\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐱\n🐱\n🐱\n<http://reactivex.io/documentation/operators/filter.html>\n\n### distinctUntilChanged()过滤掉连续的相同元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐷\", \"🐱\", \"🐱\", \"🐱\", \"🐵\", \"🐱\")\n    .distinctUntilChanged()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐱\n🐷\n🐱\n🐵\n🐱\n<http://reactivex.io/documentation/operators/distinct.html>\n\n### elementAt()只发送指定下标的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .elementAt(3)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐸\n<http://reactivex.io/documentation/operators/elementat.html>\n\n### single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .single{ $0 <= 6}//如果是==这种确切的判断，将没有Error消息而是Completed消息\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\nNext(1)\nError(Sequence contains more than one element.)\n\n### take()仅发送从第一个元素开始指定个数的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .take(3)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐱\n🐰\n🐶\n<http://reactivex.io/documentation/operators/take.html>\n\n### takeLast()与take不同的是takeLast是从末尾开始\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .takeLast(3)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐸\n🐷\n🐵\n<http://reactivex.io/documentation/operators/takelast.html>\n\n### takeWhile()发送从头开始的满足条件的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(1, 2, 3, 4, 5, 6)\n    .takeWhile { $0 < 4 }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n1\n2\n3\n<img src='./takeWhile.png' width=400>\n<br/>\n\n### takeUntil：在与之关联的另一Observable发送元素前发送元素\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sourceSequence = PublishSubject<String>()\nlet referenceSequence = PublishSubject<String>()\n\nsourceSequence\n    .takeUntil(referenceSequence)\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsourceSequence.onNext(\"🐱\")\nsourceSequence.onNext(\"🐰\")\nsourceSequence.onNext(\"🐶\")\n\nreferenceSequence.onNext(\"🔴\")\n\nsourceSequence.onNext(\"🐸\")\nsourceSequence.onNext(\"🐷\")\nsourceSequence.onNext(\"🐵\")\n```\n`output:`\nNext(🐱)\nNext(🐰)\nNext(🐶)\nCompleted<br/>\n<http://reactivex.io/documentation/operators/takeuntil.html>\n\n### skip()与take相反，它是不发送\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .skip(2)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐶\n🐸\n🐷\n🐵\n<http://reactivex.io/documentation/operators/skip.html>\n\n### skipWhile()与takeWhile相反，它是不发送\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(1, 2, 3, 4, 5, 6)\n    .skipWhile { $0 < 4 }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n4\n5\n6\n<br/>\n<img src='./skipWhile.png' width=400>\n<br/>\n\n### skipWhileWithIndex()只是skipWhile基础上增加了一个下标index\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .skipWhileWithIndex { element, index in\n        index < 3\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐸\n🐷\n🐵\n\n### skipUntil()与takeUntil相反，它是之后发送\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sourceSequence = PublishSubject<String>()\nlet referenceSequence = PublishSubject<String>()\n\nsourceSequence\n    .skipUntil(referenceSequence)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nsourceSequence.onNext(\"🐱\")\nsourceSequence.onNext(\"🐰\")\nsourceSequence.onNext(\"🐶\")\n\nreferenceSequence.onNext(\"🔴\")\n\nsourceSequence.onNext(\"🐸\")\nsourceSequence.onNext(\"🐷\")\nsourceSequence.onNext(\"🐵\")\n```\n`output:`\n🐸\n🐷\n🐵\n<http://reactivex.io/documentation/operators/skipuntil.html>\n\n## 对Observable元素做运算操作\n\n### toArray()将Observable序列转换成array并发送，然后终止\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.range(start: 1, count: 10)\n    .toArray()\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\nNext([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nCompleted\n<br/>\n<img src='./toArray.png' width=400>\n<br/>\n\n### reduce()迭代运算，通过指定初始迭代值和运算符\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(10, 100, 1000)\n    .reduce(1, accumulator: +)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`=\n1111\n<http://reactivex.io/documentation/operators/reduce.html>\n\n### concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nlet subject1 = BehaviorSubject(value: \"🍎\")\nlet subject2 = BehaviorSubject(value: \"🐶\")\n\nlet variable = Variable(subject1)\n\nvariable.asObservable()\n    .concat()\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsubject1.onNext(\"🍐\")\nsubject1.onNext(\"🍊\")\n\nvariable.value = subject2\n\nsubject2.onNext(\"I would be ignored\")\nsubject2.onNext(\"🐱\")\n\nsubject1.onNext(\"🍹\")\nsubject1.onCompleted()\n\nsubject2.onNext(\"🐭\")\n```\n`output:`\nNext(🍎)\nNext(🍐)\nNext(🍊)\nNext(🍹)\nNext(🐱)\nNext(🐭)\n<http://reactivex.io/documentation/operators/concat.html>\n\n## Connectable操作\n\nConnectable操作，Connectable Observable操作跟普通的Observable区别在于，Connectable Observable只有在它们的connect()方法调用后才开始发送元素，因此可以等到所有订阅者都订阅后才开始发送元素，有点像事务一样\n\n### publish()将一个普通序列转换成Connectable Observable序列\n``` swift\nprintExampleHeader(#function)\n\nlet intSequence = Observable<Int>.interval(1, scheduler: MainScheduler.instance)\n    .publish()\n\n_ = intSequence\n    .subscribeNext { print(\"Subscription 1:, Event: \\($0)\") }\n\ndelay(2) { intSequence.connect() }\n\ndelay(4) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 2:, Event: \\($0)\") }\n\n}\n\ndelay(6) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 3:, Event: \\($0)\") }\n```\n`output:`\n\ndelay 2\n\nSubscription 1:, Event: 0\nSubscription 1:, Event: 1\nSubscription 2:, Event: 1\nSubscription 1:, Event: 2\nSubscription 2:, Event: 2\nSubscription 1:, Event: 3\nSubscription 2:, Event: 3\nSubscription 3:, Event: 3\nSubscription 1:, Event: 4\nSubscription 2:, Event: 4\nSubscription 3:, Event: 4\n<br/>\n<img src='./publish.png' width=400>\n<br/>\n\n### replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\n``` swift\nprintExampleHeader(#function)\n\nlet intSequence = Observable<Int>.interval(1, scheduler: MainScheduler.instance)\n    .replay(5)\n\n_ = intSequence\n    .subscribeNext { print(\"Subscription 1:, Event: \\($0)\") }\n\ndelay(2) { intSequence.connect() }\n\ndelay(4) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 2:, Event: \\($0)\") }\n}\n\ndelay(8) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 3:, Event: \\($0)\") }\n}\n```\n`output:`\n\ndelay 2\n\nSubscription 1:, Event: 0\nSubscription 2:, Event: 0\nSubscription 1:, Event: 1\nSubscription 2:, Event: 1\nSubscription 1:, Event: 2\nSubscription 2:, Event: 2\nSubscription 1:, Event: 3\nSubscription 2:, Event: 3\nSubscription 1:, Event: 4\nSubscription 2:, Event: 4\nSubscription 3:, Event: 0\nSubscription 3:, Event: 1\nSubscription 3:, Event: 2\nSubscription 3:, Event: 3\nSubscription 3:, Event: 4\nSubscription 1:, Event: 5\nSubscription 2:, Event: 5\nSubscription 3:, Event: 5\n<br/>\n<img src='./replay.png' width=400>\n<br/>\n\n### multicast()需要传入一个subject，通过subject来管理向订阅者发送消息\n``` swift\nprintExampleHeader(#function)\n\nlet subject = PublishSubject<Int>()\n\n_ = subject\n    .subscribeNext { print(\"Subject: \\($0)\") }\n\nlet intSequence = Observable<Int>.interval(1, scheduler: MainScheduler.instance)\n    .multicast(subject)\n\n_ = intSequence\n    .subscribeNext { print(\"\\tSubscription 1:, Event: \\($0)\") }\n\ndelay(2) { intSequence.connect() }\n\ndelay(4) {\n     _ = intSequence\n        .subscribeNext { print(\"\\tSubscription 2:, Event: \\($0)\") }\n}\n\ndelay(6) {\n     _ = intSequence\n        .subscribeNext { print(\"\\tSubscription 3:, Event: \\($0)\") }\n}\n```\n`output:`\n\ndelay 2\n\nSubject: 0\nSubscription 1:, Event: 0\n Subject: 1\nSubscription 1:, Event: 1\nSubscription 2:, Event: 1\n Subject: 2\nSubscription 1:, Event: 2\nSubscription 2:, Event: 2\n Subject: 3\nSubscription 1:, Event: 3\nSubscription 2:, Event: 3\nSubscription 3:, Event: 3\n Subject: 4\nSubscription 1:, Event: 4\nSubscription 2:, Event: 4\nSubscription 3:, Event: 4\n Subject: 5\nSubscription 1:, Event: 5\nSubscription 2:, Event: 5\nSubscription 3:, Event: 5\n\n## 错误处理\n\n### catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sequenceThatFails = PublishSubject<String>()\n\nsequenceThatFails\n    .catchErrorJustReturn(\"😊\")\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsequenceThatFails.onNext(\"😬\")\nsequenceThatFails.onNext(\"😨\")\nsequenceThatFails.onNext(\"😡\")\nsequenceThatFails.onNext(\"🔴\")\nsequenceThatFails.onError(Error.Test)\n```\n`output:`\nNext(😬)\nNext(😨)\nNext(😡)\nNext(🔴)\nNext(😊)\nCompleted\n\n### catchError()当捕获错误后会返回一个正常的Observable序列与之合并\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sequenceThatErrors = PublishSubject<String>()\nlet recoverySequence = PublishSubject<String>()\n\nsequenceThatErrors\n    .catchError {\n        print(\"Error:\", $0)\n        return recoverySequence\n    }\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsequenceThatErrors.onNext(\"😬\")\nsequenceThatErrors.onNext(\"😨\")\nsequenceThatErrors.onNext(\"😡\")\nsequenceThatErrors.onNext(\"🔴\")\nsequenceThatErrors.onError(Error.Test)\n\nrecoverySequence.onNext(\"😊\")\n```\n`output:`\nNext(😬)\nNext(😨)\nNext(😡)\nNext(🔴)\nError: Test\nNext(😊)\n<br/>\n<img src='./catch.png' width=400>\n<br/>\n\n### retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\n``` swift\nlet disposeBag = DisposeBag()\n    var count = 1\n\nlet sequenceThatErrors = Observable<String>.create { observer in\n    observer.onNext(\"🍎\")\n    observer.onNext(\"🍐\")\n    observer.onNext(\"🍊\")\n\n    if count == 1 {\n        observer.onError(Error.Test)\n        print(\"Error encountered\")\n        count += 1\n    }\n\n    observer.onNext(\"🐶\")\n    observer.onNext(\"🐱\")\n    observer.onNext(\"🐭\")\n    observer.onCompleted()\n\n    return NopDisposable.instance\n}\n\nsequenceThatErrors\n    .retry()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🍎\n🍐\n🍊\nError encountered\n🍎\n🍐\n🍊\n🐶\n🐱\n🐭\n<br/>\n<img src='./retry.png' width=400>\n<br/>\n\n## debug\n\n1. debug()会打印详细的信息\n2. RxSwift.resourceCount()打印资源分配计数\n\n> 注：不要在Release builds中使用","source":"_posts/RXSwift基础.md","raw":"---\ntitle: RXSwift基础\ndate: 2016-06-08 09:32:44\ntags:\n   - RXSwift\ncategories: 知识积累\nabbrlink: 1cdda3c06a430c09\n---\n\n## 概念\n\n一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应\n\n## 为什么发用RxSwift\n一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式\n\n* Observable的创建和订阅\n* Subjects的使用\n* Combination：Observable的混合操作\n* Transforming：Observable的转换操作\n* Filtering：Observable消息元素的过滤操作\n* 对Observable元素做运算操作\n* Connectable操作\n* 错误处理\n* debug\n\n<!-- more -->\n\n## 消息的订阅方式\n这些都是Observable的方法，参数都是闭包，闭包是观察者\n1. subscribe(on:(Event) -> void)：订阅所有消息(Next, Error, and Completed)\n2. subscribeNext((Element) -> void)：只订阅Next\n3. subscribeError((ErrorType) -> void)：只订阅Error\n4. subscribeCompleted(() -> Void)：只订阅Completed\n5. subscribe(onNext:(Element) -> void, onError:(ErrorType) -> void, onCompleted:() -> Void, onDisposed:() -> Void)订阅多个消息\n\n## 释放分配的资源\n订阅者可以通过调用.dispose()来释放分配的资源，但通过DisposeBag来管理或者通过takeUntil来自动释放更好\n\n``` swift\nlet disposeBag = DisposeBag()\nsubscription.addDisposableTo(disposeBag)\n```\n或\n\n``` swift\nsequence\n    .takeUntil(self.rx_deallocated)\n    .subscribe {\n        print($0)\n    }\n```\n## Observable的创建和订阅\nObservable序列分为两类：\n* 冷：只有当有观察者订阅这个序列时，序列才发射值\n* 热：序列创建时就开始发射值\n\n### never()创建即不会完成也不会发消息的Observable\n``` swift\nlet disposeBag = DisposeBag()\nlet neverSequence = Observable<String>.never()\n\nlet neverSequenceSubscription = neverSequence\n        .subscribe { _ in\n            print(\"This will never be printed\")\n    }\n\nneverSequenceSubscription.addDisposableTo(disposeBag)\n```\n<img src='./never.png' width=400/>\n\n### empty()创建只会发送一次完成消息的Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable<Int>.empty()\n        .subscribe { event in\n            print(event)\n        }\n        .addDisposableTo(disposeBag)\n```\n`output:`\nCompleted\n\n<img src='./empty.png' width=400>\n\n### just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.just(\"🔴\")\n    .subscribe { event in\n        print(event)\n    }\n    .addDisposableTo(disposeBag)        \n```\n> 注：如果传递null给just，它将返回一个发送null消息的Observable，不要传入错误的参数，否则将会得到一个空的Observable\n\n`output:`\nNext(🔴)\nCompleted\n<br/>\n<img src='./just.png' width=400>\n\n\n### of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略\n``` swift\n let disposeBag = DisposeBag()\n\n Observable.of(\"🐶\", \"🐱\", \"🐭\", \"🐹\")\n        .subscribeNext { element in\n            print(element)\n        }\n        .addDisposableTo(disposeBag)\n```\n`output:`\n🐶\n🐱\n🐭\n🐹\n\n### create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nlet myJust = { (element: String) -> Observable<String> in\n        return Observable.create { observer in\n            observer.on(.Next(element))\n            observer.on(.Completed)\n            return NopDisposable.instance\n        }\n    }\n\n myJust(\"🔴\")\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\nNext(🔴)\nCompleted\n<br/>\n<img src='./create.png' width=400>\n<br/>\n\n### range()创建一个发送一个范围的整数的Observable，发送完后发送Completed\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.range(start: 1, count: 10)\n        .subscribe { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(5)\nNext(6)\nNext(7)\nNext(8)\nNext(9)\nNext(10)\nCompleted\n\n### repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.repeatElement(\"🔴\")\n        .take(3)\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\n🔴\n🔴\n🔴\n> 注：take可以用于所有Observable指定限制元素个数\n\n### generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素\n``` swift\nlet disposeBag = DisposeBag()\n\n Observable.generate(\n            initialState: 0,\n            condition: { $0 < 3 },\n            iterate: { $0 + 1 }\n        )\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n**iterate：每次condition之后都会对当前值做一次相应迭代运算**\n\n`output:`<br/>\n0\n1\n2\n\n### deferred()序列为每一个订阅者创建一个全新的Observable\n``` swift\nlet disposeBag = DisposeBag()\nvar count = 1\n\nlet deferredSequence = Observable<String>.deferred {\n        print(\"Creating \\(count)\")\n        count += 1\n        return Observable.create { observer in\n            print(\"Emitting...\")\n            observer.onNext(\"🐶\")\n            observer.onNext(\"🐱\")\n            observer.onNext(\"🐵\")\n            return NopDisposable.instance\n        }\n    }\n\ndeferredSequence\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\ndeferredSequence\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n> 注：deferred序列只有在一个观察者订阅它的时候才执行它的创建Observable方法，产生一个全新的Observable**\n\n`output:`\nCreating 1\nEmitting...\n🐶\n🐱\n🐵\nCreating 2\nEmitting...\n🐶\n🐱\n🐵\n<img src='./deferred.png' width=400>\n<br/>\n\n### error()创建一个不发送元素的Observable，然后立即发送error并终止\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable<Int>.error(Error.Test)\n        .subscribe { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\nError(Test)\n\n### doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🍎\", \"🍐\", \"🍊\", \"🍋\")\n        .doOn { print(\"Intercepted:\", $0) }\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n> 注： doOn(onNext:onError:onCompleted:)为不同订阅方式分别指定\n\n`output:`\nIntercepted: Next(🍎)\n🍎\nIntercepted: Next(🍐)\n🍐\nIntercepted: Next(🍊)\n🍊\nIntercepted: Next(🍋)\n🍋\nIntercepted: Completed\n\n<img src='./doOn.png' width=400>\n<br/>\n\n### toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable\n<br/>\n## Subjects的使用\n\nSubjects理解为observer和Observable之间的桥梁或代理，即扮演着observer又扮演着Observable，规定了添加的observer如何接收消息\n\n### PublishSubject向所有订阅者广播从订阅之后的事件\n``` swift\nlet disposeBag = DisposeBag()\nlet subject = PublishSubject<String>()\n\nsubject.addObserver(\"1\").addDisposableTo(disposeBag)\nsubject.onNext(\"🐶\")\nsubject.onNext(\"🐱\")\n\nsubject.addObserver(\"2\").addDisposableTo(disposeBag)\nsubject.onNext(\"🅰️\")\nsubject.onNext(\"🅱️\")\n```\n`output:`\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\n\n### ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\n``` swift\n let disposeBag = DisposeBag()\n let subject = ReplaySubject<String>.create(bufferSize: 1)\n\n subject.addObserver(\"1\").addDisposableTo(disposeBag)\n subject.onNext(\"🐶\")\n subject.onNext(\"🐱\")\n\n subject.addObserver(\"2\").addDisposableTo(disposeBag)\n subject.onNext(\"🅰️\")\n subject.onNext(\"🅱️\")\n```\n`output:`\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 2 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\n\n### BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\n``` swift\nlet disposeBag = DisposeBag()\nlet subject = BehaviorSubject(value: \"🔴\")\n\nsubject.addObserver(\"1\").addDisposableTo(disposeBag)\nsubject.onNext(\"🐶\")\nsubject.onNext(\"🐱\")\n\nsubject.addObserver(\"2\").addDisposableTo(disposeBag)\nsubject.onNext(\"🅰️\")\nsubject.onNext(\"🅱️\")\n\nsubject.addObserver(\"3\").addDisposableTo(disposeBag)\nsubject.onNext(\"🍐\")\nsubject.onNext(\"🍊\")\n```\n**note：以上都不会自动发送Completed当它们被释放的时候**\n\n`output:`\nSubscription: 1 Event: Next(🔴)\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 2 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\nSubscription: 3 Event: Next(🅱️)\nSubscription: 1 Event: Next(🍐)\nSubscription: 2 Event: Next(🍐)\nSubscription: 3 Event: Next(🍐)\nSubscription: 1 Event: Next(🍊)\nSubscription: 2 Event: Next(🍊)\nSubscription: 3 Event: Next(🍊)\n\n### Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\n``` swift\n  let disposeBag = DisposeBag()\n  let variable = Variable(\"🔴\")\n\n  variable.asObservable().addObserver(\"1\").addDisposableTo(disposeBag)\n  variable.value = \"🐶\"\n  variable.value = \"🐱\"\n\n  variable.asObservable().addObserver(\"2\").addDisposableTo(disposeBag)\n  variable.value = \"🅰️\"\n  variable.value = \"🅱️\"\n```\n> 注:variable.asObservable()实际是获取variable中的BehaviorSubject。variable也没有onNext，而是通过value来获取或添加元素，它会添加元素到BehaviorSubject\n\n`output:`\nSubscription: 1 Event: Next(🔴)\nSubscription: 1 Event: Next(🐶)\nSubscription: 1 Event: Next(🐱)\nSubscription: 2 Event: Next(🐱)\nSubscription: 1 Event: Next(🅰️)\nSubscription: 2 Event: Next(🅰️)\nSubscription: 1 Event: Next(🅱️)\nSubscription: 2 Event: Next(🅱️)\nSubscription: 1 Event: Completed\nSubscription: 2 Event: Completed\n\n## Combination：Observable的混合操作\n\n### startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\n``` swift\n   let disposeBag = DisposeBag()\n\n    Observable.of(\"🐶\", \"🐱\", \"🐭\", \"🐹\")\n        .startWith(\"1️⃣\")\n        .startWith(\"2️⃣\")\n        .startWith(\"3️⃣\", \"🅰️\", \"🅱️\")\n        .subscribeNext { print($0) }\n        .addDisposableTo(disposeBag)\n```\n`output:`\n3️⃣\n🅰️\n🅱️\n2️⃣\n1️⃣\n🐶\n🐱\n🐭\n🐹\n<http://reactivex.io/documentation/operators/startwith.html>\n\n\n### merge()按顺序混合多个Observable为一个新Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nlet subject1 = PublishSubject<String>()\nlet subject2 = PublishSubject<String>()\nlet subject3 = PublishSubject<String>()\n\nObservable.of(subject1, subject2, subject3)\n    .merge()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nsubject1.onNext(\"🅰️\")\n\nsubject1.onNext(\"🅱️\")\n\nsubject2.onNext(\"①\")\n\nsubject2.onNext(\"②\")\n\nsubject1.onNext(\"🆎\")\n\nsubject3.onNext(\"🐱\")\n\nsubject2.onNext(\"③\")\n```\n`output:`\n🅰️\n🅱️\n①\n②\n🆎\n③\n<http://reactivex.io/documentation/operators/merge.html>\n\n\n### zip()相当于并排的将多个Observable合并成一个新Observable\n``` swift\nlet disposeBag = DisposeBag()\n\nlet stringSubject = PublishSubject<String>()\nlet intSubject = PublishSubject<Int>()\n\nObservable.zip(stringSubject, intSubject) { stringElement, intElement in\n    \"\\(stringElement) \\(intElement)\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nstringSubject.onNext(\"🅰️\")\nstringSubject.onNext(\"🅱️\")\n\nintSubject.onNext(1)\n\nintSubject.onNext(2)\n\nstringSubject.onNext(\"🆎\")\nintSubject.onNext(3)\n```\n`output:`\n🅰️ 1\n🅱️ 2\n🆎 3\n\n<http://reactivex.io/documentation/operators/zip.html>\n</br>\n### combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\n``` swift\nlet disposeBag = DisposeBag()\n\nlet stringSubject = PublishSubject<String>()\nlet intSubject = PublishSubject<Int>()\n\nObservable.combineLatest(stringSubject, intSubject) { stringElement, intElement in\n        \"\\(stringElement) \\(intElement)\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nstringSubject.onNext(\"🅰️\")\n\nstringSubject.onNext(\"🅱️\")\nintSubject.onNext(1)\n\nintSubject.onNext(2)\n\nstringSubject.onNext(\"🆎\")\n```\n`output:`\n🅱️ 1\n🅱️ 2\n🆎 2\n<http://reactivex.io/documentation/operators/combinelatest.html>\n\n在数组上的应用：\n\n``` swift\nlet disposeBag = DisposeBag()\n\nlet stringObservable = Observable.just(\"❤️\")\nlet fruitObservable = [\"🍎\", \"🍐\", \"🍊\"].toObservable()\nlet animalObservable = Observable.of(\"🐶\", \"🐱\", \"🐭\", \"🐹\")\n\n[stringObservable, fruitObservable, animalObservable].combineLatest {\n        \"\\($0[0]) \\($0[1]) \\($0[2])\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n**note：所有集合的类型必须一样**\n\n`output:`\n❤️ 🍊 🐶\n❤️ 🍊 🐱\n❤️ 🍊 🐭\n❤️ 🍊 🐹\n\n### switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\n``` swift\nlet disposeBag = DisposeBag()\n\nlet subject1 = BehaviorSubject(value: \"⚽️\")\nlet subject2 = BehaviorSubject(value: \"🍎\")\n\nlet variable = Variable(subject1)\n\nvariable.asObservable()\n    .switchLatest()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nsubject1.onNext(\"🏈\")\nsubject1.onNext(\"🏀\")\n\nvariable.value = subject2\n\nsubject1.onNext(\"⚾️\")\nsubject1.onNext(\"🎾\")\n\nsubject2.onNext(\"🍐\")\n\nvariable.value = subject1\n```\n`output:`\n⚽️\n🏈\n🏀\n🍎\n🍐\n🎾\n**note：⚽️ 被忽略**\n<br/>\n<img src='./switch.png' width=400>\n<br/>\n\n## Transforming：Observable的转换操作 \n\n### map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\n``` swift\nlet disposeBag = DisposeBag()\nObservable.of(1, 2, 3)\n    .map { $0 * $0 }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n1\n4\n9\n<http://reactivex.io/documentation/operators/map.html>\n\n\n### scan()可以迭代的操作，并且可以设置一个初始的迭代值\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(10, 100, 1000)\n    .scan(1) { aggregateValue, newValue in\n        aggregateValue + newValue\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n11\n111\n1111\n<http://reactivex.io/documentation/operators/scan.html>\n\n## Filtering：Observable消息元素的过滤操作\n\n### filter()发出满足bool条件的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\n    \"🐱\", \"🐰\", \"🐶\",\n    \"🐸\", \"🐱\", \"🐰\",\n    \"🐹\", \"🐸\", \"🐱\")\n    .filter {\n        $0 == \"🐱\"\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐱\n🐱\n🐱\n<http://reactivex.io/documentation/operators/filter.html>\n\n### distinctUntilChanged()过滤掉连续的相同元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐷\", \"🐱\", \"🐱\", \"🐱\", \"🐵\", \"🐱\")\n    .distinctUntilChanged()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐱\n🐷\n🐱\n🐵\n🐱\n<http://reactivex.io/documentation/operators/distinct.html>\n\n### elementAt()只发送指定下标的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .elementAt(3)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐸\n<http://reactivex.io/documentation/operators/elementat.html>\n\n### single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .single{ $0 <= 6}//如果是==这种确切的判断，将没有Error消息而是Completed消息\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\nNext(1)\nError(Sequence contains more than one element.)\n\n### take()仅发送从第一个元素开始指定个数的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .take(3)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐱\n🐰\n🐶\n<http://reactivex.io/documentation/operators/take.html>\n\n### takeLast()与take不同的是takeLast是从末尾开始\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .takeLast(3)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐸\n🐷\n🐵\n<http://reactivex.io/documentation/operators/takelast.html>\n\n### takeWhile()发送从头开始的满足条件的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(1, 2, 3, 4, 5, 6)\n    .takeWhile { $0 < 4 }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n1\n2\n3\n<img src='./takeWhile.png' width=400>\n<br/>\n\n### takeUntil：在与之关联的另一Observable发送元素前发送元素\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sourceSequence = PublishSubject<String>()\nlet referenceSequence = PublishSubject<String>()\n\nsourceSequence\n    .takeUntil(referenceSequence)\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsourceSequence.onNext(\"🐱\")\nsourceSequence.onNext(\"🐰\")\nsourceSequence.onNext(\"🐶\")\n\nreferenceSequence.onNext(\"🔴\")\n\nsourceSequence.onNext(\"🐸\")\nsourceSequence.onNext(\"🐷\")\nsourceSequence.onNext(\"🐵\")\n```\n`output:`\nNext(🐱)\nNext(🐰)\nNext(🐶)\nCompleted<br/>\n<http://reactivex.io/documentation/operators/takeuntil.html>\n\n### skip()与take相反，它是不发送\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .skip(2)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐶\n🐸\n🐷\n🐵\n<http://reactivex.io/documentation/operators/skip.html>\n\n### skipWhile()与takeWhile相反，它是不发送\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(1, 2, 3, 4, 5, 6)\n    .skipWhile { $0 < 4 }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n4\n5\n6\n<br/>\n<img src='./skipWhile.png' width=400>\n<br/>\n\n### skipWhileWithIndex()只是skipWhile基础上增加了一个下标index\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(\"🐱\", \"🐰\", \"🐶\", \"🐸\", \"🐷\", \"🐵\")\n    .skipWhileWithIndex { element, index in\n        index < 3\n    }\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🐸\n🐷\n🐵\n\n### skipUntil()与takeUntil相反，它是之后发送\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sourceSequence = PublishSubject<String>()\nlet referenceSequence = PublishSubject<String>()\n\nsourceSequence\n    .skipUntil(referenceSequence)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n\nsourceSequence.onNext(\"🐱\")\nsourceSequence.onNext(\"🐰\")\nsourceSequence.onNext(\"🐶\")\n\nreferenceSequence.onNext(\"🔴\")\n\nsourceSequence.onNext(\"🐸\")\nsourceSequence.onNext(\"🐷\")\nsourceSequence.onNext(\"🐵\")\n```\n`output:`\n🐸\n🐷\n🐵\n<http://reactivex.io/documentation/operators/skipuntil.html>\n\n## 对Observable元素做运算操作\n\n### toArray()将Observable序列转换成array并发送，然后终止\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.range(start: 1, count: 10)\n    .toArray()\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\nNext([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nCompleted\n<br/>\n<img src='./toArray.png' width=400>\n<br/>\n\n### reduce()迭代运算，通过指定初始迭代值和运算符\n``` swift\nlet disposeBag = DisposeBag()\n\nObservable.of(10, 100, 1000)\n    .reduce(1, accumulator: +)\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`=\n1111\n<http://reactivex.io/documentation/operators/reduce.html>\n\n### concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\n``` swift\nlet disposeBag = DisposeBag()\n\nlet subject1 = BehaviorSubject(value: \"🍎\")\nlet subject2 = BehaviorSubject(value: \"🐶\")\n\nlet variable = Variable(subject1)\n\nvariable.asObservable()\n    .concat()\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsubject1.onNext(\"🍐\")\nsubject1.onNext(\"🍊\")\n\nvariable.value = subject2\n\nsubject2.onNext(\"I would be ignored\")\nsubject2.onNext(\"🐱\")\n\nsubject1.onNext(\"🍹\")\nsubject1.onCompleted()\n\nsubject2.onNext(\"🐭\")\n```\n`output:`\nNext(🍎)\nNext(🍐)\nNext(🍊)\nNext(🍹)\nNext(🐱)\nNext(🐭)\n<http://reactivex.io/documentation/operators/concat.html>\n\n## Connectable操作\n\nConnectable操作，Connectable Observable操作跟普通的Observable区别在于，Connectable Observable只有在它们的connect()方法调用后才开始发送元素，因此可以等到所有订阅者都订阅后才开始发送元素，有点像事务一样\n\n### publish()将一个普通序列转换成Connectable Observable序列\n``` swift\nprintExampleHeader(#function)\n\nlet intSequence = Observable<Int>.interval(1, scheduler: MainScheduler.instance)\n    .publish()\n\n_ = intSequence\n    .subscribeNext { print(\"Subscription 1:, Event: \\($0)\") }\n\ndelay(2) { intSequence.connect() }\n\ndelay(4) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 2:, Event: \\($0)\") }\n\n}\n\ndelay(6) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 3:, Event: \\($0)\") }\n```\n`output:`\n\ndelay 2\n\nSubscription 1:, Event: 0\nSubscription 1:, Event: 1\nSubscription 2:, Event: 1\nSubscription 1:, Event: 2\nSubscription 2:, Event: 2\nSubscription 1:, Event: 3\nSubscription 2:, Event: 3\nSubscription 3:, Event: 3\nSubscription 1:, Event: 4\nSubscription 2:, Event: 4\nSubscription 3:, Event: 4\n<br/>\n<img src='./publish.png' width=400>\n<br/>\n\n### replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\n``` swift\nprintExampleHeader(#function)\n\nlet intSequence = Observable<Int>.interval(1, scheduler: MainScheduler.instance)\n    .replay(5)\n\n_ = intSequence\n    .subscribeNext { print(\"Subscription 1:, Event: \\($0)\") }\n\ndelay(2) { intSequence.connect() }\n\ndelay(4) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 2:, Event: \\($0)\") }\n}\n\ndelay(8) {\n    _ = intSequence\n        .subscribeNext { print(\"Subscription 3:, Event: \\($0)\") }\n}\n```\n`output:`\n\ndelay 2\n\nSubscription 1:, Event: 0\nSubscription 2:, Event: 0\nSubscription 1:, Event: 1\nSubscription 2:, Event: 1\nSubscription 1:, Event: 2\nSubscription 2:, Event: 2\nSubscription 1:, Event: 3\nSubscription 2:, Event: 3\nSubscription 1:, Event: 4\nSubscription 2:, Event: 4\nSubscription 3:, Event: 0\nSubscription 3:, Event: 1\nSubscription 3:, Event: 2\nSubscription 3:, Event: 3\nSubscription 3:, Event: 4\nSubscription 1:, Event: 5\nSubscription 2:, Event: 5\nSubscription 3:, Event: 5\n<br/>\n<img src='./replay.png' width=400>\n<br/>\n\n### multicast()需要传入一个subject，通过subject来管理向订阅者发送消息\n``` swift\nprintExampleHeader(#function)\n\nlet subject = PublishSubject<Int>()\n\n_ = subject\n    .subscribeNext { print(\"Subject: \\($0)\") }\n\nlet intSequence = Observable<Int>.interval(1, scheduler: MainScheduler.instance)\n    .multicast(subject)\n\n_ = intSequence\n    .subscribeNext { print(\"\\tSubscription 1:, Event: \\($0)\") }\n\ndelay(2) { intSequence.connect() }\n\ndelay(4) {\n     _ = intSequence\n        .subscribeNext { print(\"\\tSubscription 2:, Event: \\($0)\") }\n}\n\ndelay(6) {\n     _ = intSequence\n        .subscribeNext { print(\"\\tSubscription 3:, Event: \\($0)\") }\n}\n```\n`output:`\n\ndelay 2\n\nSubject: 0\nSubscription 1:, Event: 0\n Subject: 1\nSubscription 1:, Event: 1\nSubscription 2:, Event: 1\n Subject: 2\nSubscription 1:, Event: 2\nSubscription 2:, Event: 2\n Subject: 3\nSubscription 1:, Event: 3\nSubscription 2:, Event: 3\nSubscription 3:, Event: 3\n Subject: 4\nSubscription 1:, Event: 4\nSubscription 2:, Event: 4\nSubscription 3:, Event: 4\n Subject: 5\nSubscription 1:, Event: 5\nSubscription 2:, Event: 5\nSubscription 3:, Event: 5\n\n## 错误处理\n\n### catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sequenceThatFails = PublishSubject<String>()\n\nsequenceThatFails\n    .catchErrorJustReturn(\"😊\")\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsequenceThatFails.onNext(\"😬\")\nsequenceThatFails.onNext(\"😨\")\nsequenceThatFails.onNext(\"😡\")\nsequenceThatFails.onNext(\"🔴\")\nsequenceThatFails.onError(Error.Test)\n```\n`output:`\nNext(😬)\nNext(😨)\nNext(😡)\nNext(🔴)\nNext(😊)\nCompleted\n\n### catchError()当捕获错误后会返回一个正常的Observable序列与之合并\n``` swift\nlet disposeBag = DisposeBag()\n\nlet sequenceThatErrors = PublishSubject<String>()\nlet recoverySequence = PublishSubject<String>()\n\nsequenceThatErrors\n    .catchError {\n        print(\"Error:\", $0)\n        return recoverySequence\n    }\n    .subscribe { print($0) }\n    .addDisposableTo(disposeBag)\n\nsequenceThatErrors.onNext(\"😬\")\nsequenceThatErrors.onNext(\"😨\")\nsequenceThatErrors.onNext(\"😡\")\nsequenceThatErrors.onNext(\"🔴\")\nsequenceThatErrors.onError(Error.Test)\n\nrecoverySequence.onNext(\"😊\")\n```\n`output:`\nNext(😬)\nNext(😨)\nNext(😡)\nNext(🔴)\nError: Test\nNext(😊)\n<br/>\n<img src='./catch.png' width=400>\n<br/>\n\n### retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\n``` swift\nlet disposeBag = DisposeBag()\n    var count = 1\n\nlet sequenceThatErrors = Observable<String>.create { observer in\n    observer.onNext(\"🍎\")\n    observer.onNext(\"🍐\")\n    observer.onNext(\"🍊\")\n\n    if count == 1 {\n        observer.onError(Error.Test)\n        print(\"Error encountered\")\n        count += 1\n    }\n\n    observer.onNext(\"🐶\")\n    observer.onNext(\"🐱\")\n    observer.onNext(\"🐭\")\n    observer.onCompleted()\n\n    return NopDisposable.instance\n}\n\nsequenceThatErrors\n    .retry()\n    .subscribeNext { print($0) }\n    .addDisposableTo(disposeBag)\n```\n`output:`\n🍎\n🍐\n🍊\nError encountered\n🍎\n🍐\n🍊\n🐶\n🐱\n🐭\n<br/>\n<img src='./retry.png' width=400>\n<br/>\n\n## debug\n\n1. debug()会打印详细的信息\n2. RxSwift.resourceCount()打印资源分配计数\n\n> 注：不要在Release builds中使用","slug":"RXSwift基础","published":1,"updated":"2022-05-19T03:13:11.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcens001xl1l35yra44i9","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应</p>\n<h2 id=\"为什么发用RxSwift\"><a href=\"#为什么发用RxSwift\" class=\"headerlink\" title=\"为什么发用RxSwift\"></a>为什么发用RxSwift</h2><p>一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式</p>\n<ul>\n<li>Observable的创建和订阅</li>\n<li>Subjects的使用</li>\n<li>Combination：Observable的混合操作</li>\n<li>Transforming：Observable的转换操作</li>\n<li>Filtering：Observable消息元素的过滤操作</li>\n<li>对Observable元素做运算操作</li>\n<li>Connectable操作</li>\n<li>错误处理</li>\n<li>debug</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"消息的订阅方式\"><a href=\"#消息的订阅方式\" class=\"headerlink\" title=\"消息的订阅方式\"></a>消息的订阅方式</h2><p>这些都是Observable的方法，参数都是闭包，闭包是观察者</p>\n<ol>\n<li>subscribe(on:(Event) -&gt; void)：订阅所有消息(Next, Error, and Completed)</li>\n<li>subscribeNext((Element) -&gt; void)：只订阅Next</li>\n<li>subscribeError((ErrorType) -&gt; void)：只订阅Error</li>\n<li>subscribeCompleted(() -&gt; Void)：只订阅Completed</li>\n<li>subscribe(onNext:(Element) -&gt; void, onError:(ErrorType) -&gt; void, onCompleted:() -&gt; Void, onDisposed:() -&gt; Void)订阅多个消息</li>\n</ol>\n<h2 id=\"释放分配的资源\"><a href=\"#释放分配的资源\" class=\"headerlink\" title=\"释放分配的资源\"></a>释放分配的资源</h2><p>订阅者可以通过调用.dispose()来释放分配的资源，但通过DisposeBag来管理或者通过takeUntil来自动释放更好</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">subscription.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequence</span><br><span class=\"line\">    .takeUntil(<span class=\"keyword\">self</span>.rx_deallocated)</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Observable的创建和订阅\"><a href=\"#Observable的创建和订阅\" class=\"headerlink\" title=\"Observable的创建和订阅\"></a>Observable的创建和订阅</h2><p>Observable序列分为两类：</p>\n<ul>\n<li>冷：只有当有观察者订阅这个序列时，序列才发射值</li>\n<li>热：序列创建时就开始发射值</li>\n</ul>\n<h3 id=\"never-创建即不会完成也不会发消息的Observable\"><a href=\"#never-创建即不会完成也不会发消息的Observable\" class=\"headerlink\" title=\"never()创建即不会完成也不会发消息的Observable\"></a>never()创建即不会完成也不会发消息的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> neverSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.never()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> neverSequenceSubscription <span class=\"operator\">=</span> neverSequence</span><br><span class=\"line\">        .subscribe &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This will never be printed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">neverSequenceSubscription.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<img src='./never.png' width=400/>\n\n<h3 id=\"empty-创建只会发送一次完成消息的Observable\"><a href=\"#empty-创建只会发送一次完成消息的Observable\" class=\"headerlink\" title=\"empty()创建只会发送一次完成消息的Observable\"></a>empty()创建只会发送一次完成消息的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Completed</p>\n<img src='./empty.png' width=400>\n\n<h3 id=\"just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\"><a href=\"#just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\" class=\"headerlink\" title=\"just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\"></a>just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.just(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)        </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果传递null给just，它将返回一个发送null消息的Observable，不要传入错误的参数，否则将会得到一个空的Observable</p>\n</blockquote>\n<p><code>output:</code><br>Next(🔴)<br>Completed<br><br/><br><img src='./just.png' width=400></p>\n<h3 id=\"of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略\"><a href=\"#of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略\" class=\"headerlink\" title=\"of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略\"></a>of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐭&quot;</span>, <span class=\"string\">&quot;🐹&quot;</span>)</span><br><span class=\"line\">       .subscribeNext &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐶<br>🐱<br>🐭<br>🐹</p>\n<h3 id=\"create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable\"><a href=\"#create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable\" class=\"headerlink\" title=\"create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable\"></a>create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myJust <span class=\"operator\">=</span> &#123; (element: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            observer.on(.<span class=\"type\">Next</span>(element))</span><br><span class=\"line\">            observer.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> myJust(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🔴)<br>Completed<br><br/><br><img src='./create.png' width=400><br><br/></p>\n<h3 id=\"range-创建一个发送一个范围的整数的Observable，发送完后发送Completed\"><a href=\"#range-创建一个发送一个范围的整数的Observable，发送完后发送Completed\" class=\"headerlink\" title=\"range()创建一个发送一个范围的整数的Observable，发送完后发送Completed\"></a>range()创建一个发送一个范围的整数的Observable，发送完后发送Completed</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(1)<br>Next(2)<br>Next(3)<br>Next(4)<br>Next(5)<br>Next(6)<br>Next(7)<br>Next(8)<br>Next(9)<br>Next(10)<br>Completed</p>\n<h3 id=\"repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\"><a href=\"#repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\" class=\"headerlink\" title=\"repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\"></a>repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">        .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🔴<br>🔴<br>🔴</p>\n<blockquote>\n<p>注：take可以用于所有Observable指定限制元素个数</p>\n</blockquote>\n<h3 id=\"generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素\"><a href=\"#generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素\" class=\"headerlink\" title=\"generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素\"></a>generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">Observable</span>.generate(</span><br><span class=\"line\">            initialState: <span class=\"number\">0</span>,</span><br><span class=\"line\">            condition: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">            iterate: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><strong>iterate：每次condition之后都会对当前值做一次相应迭代运算</strong></p>\n<p><code>output:</code><br/><br>0<br>1<br>2</p>\n<h3 id=\"deferred-序列为每一个订阅者创建一个全新的Observable\"><a href=\"#deferred-序列为每一个订阅者创建一个全新的Observable\" class=\"headerlink\" title=\"deferred()序列为每一个订阅者创建一个全新的Observable\"></a>deferred()序列为每一个订阅者创建一个全新的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> deferredSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.deferred &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Creating <span class=\"subst\">\\(count)</span>&quot;</span>)</span><br><span class=\"line\">        count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Emitting...&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">deferredSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">deferredSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：deferred序列只有在一个观察者订阅它的时候才执行它的创建Observable方法，产生一个全新的Observable**</p>\n</blockquote>\n<p><code>output:</code><br>Creating 1<br>Emitting…<br>🐶<br>🐱<br>🐵<br>Creating 2<br>Emitting…<br>🐶<br>🐱<br>🐵<br><img src='./deferred.png' width=400><br><br/></p>\n<h3 id=\"error-创建一个不发送元素的Observable，然后立即发送error并终止\"><a href=\"#error-创建一个不发送元素的Observable，然后立即发送error并终止\" class=\"headerlink\" title=\"error()创建一个不发送元素的Observable，然后立即发送error并终止\"></a>error()创建一个不发送元素的Observable，然后立即发送error并终止</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.error(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Error(Test)</p>\n<h3 id=\"doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\"><a href=\"#doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\" class=\"headerlink\" title=\"doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\"></a>doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🍎&quot;</span>, <span class=\"string\">&quot;🍐&quot;</span>, <span class=\"string\">&quot;🍊&quot;</span>, <span class=\"string\">&quot;🍋&quot;</span>)</span><br><span class=\"line\">        .doOn &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Intercepted:&quot;</span>, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注： doOn(onNext:onError:onCompleted:)为不同订阅方式分别指定</p>\n</blockquote>\n<p><code>output:</code><br>Intercepted: Next(🍎)<br>🍎<br>Intercepted: Next(🍐)<br>🍐<br>Intercepted: Next(🍊)<br>🍊<br>Intercepted: Next(🍋)<br>🍋<br>Intercepted: Completed</p>\n<img src='./doOn.png' width=400>\n<br/>\n\n<h3 id=\"toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable\"><a href=\"#toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable\" class=\"headerlink\" title=\"toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable\"></a>toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable</h3><br/>\n## Subjects的使用\n\n<p>Subjects理解为observer和Observable之间的桥梁或代理，即扮演着observer又扮演着Observable，规定了添加的observer如何接收消息</p>\n<h3 id=\"PublishSubject向所有订阅者广播从订阅之后的事件\"><a href=\"#PublishSubject向所有订阅者广播从订阅之后的事件\" class=\"headerlink\" title=\"PublishSubject向所有订阅者广播从订阅之后的事件\"></a>PublishSubject向所有订阅者广播从订阅之后的事件</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)</p>\n<h3 id=\"ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\"><a href=\"#ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\" class=\"headerlink\" title=\"ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\"></a>ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)</p>\n<h3 id=\"BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\"><a href=\"#BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\" class=\"headerlink\" title=\"BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\"></a>BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;3&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🍊&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>note：以上都不会自动发送Completed当它们被释放的时候</strong></p>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🔴)<br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)<br>Subscription: 3 Event: Next(🅱️)<br>Subscription: 1 Event: Next(🍐)<br>Subscription: 2 Event: Next(🍐)<br>Subscription: 3 Event: Next(🍐)<br>Subscription: 1 Event: Next(🍊)<br>Subscription: 2 Event: Next(🍊)<br>Subscription: 3 Event: Next(🍊)</p>\n<h3 id=\"Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\"><a href=\"#Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\" class=\"headerlink\" title=\"Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\"></a>Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable().addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🐶&quot;</span></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🐱&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable().addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🅰️&quot;</span></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🅱️&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注:variable.asObservable()实际是获取variable中的BehaviorSubject。variable也没有onNext，而是通过value来获取或添加元素，它会添加元素到BehaviorSubject</p>\n</blockquote>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🔴)<br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)<br>Subscription: 1 Event: Completed<br>Subscription: 2 Event: Completed</p>\n<h2 id=\"Combination：Observable的混合操作\"><a href=\"#Combination：Observable的混合操作\" class=\"headerlink\" title=\"Combination：Observable的混合操作\"></a>Combination：Observable的混合操作</h2><h3 id=\"startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\"><a href=\"#startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\" class=\"headerlink\" title=\"startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\"></a>startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐭&quot;</span>, <span class=\"string\">&quot;🐹&quot;</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">&quot;1️⃣&quot;</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">&quot;2️⃣&quot;</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">&quot;3️⃣&quot;</span>, <span class=\"string\">&quot;🅰️&quot;</span>, <span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">     .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">     .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>3️⃣<br>🅰️<br>🅱️<br>2️⃣<br>1️⃣<br>🐶<br>🐱<br>🐭<br>🐹<br><a href=\"http://reactivex.io/documentation/operators/startwith.html\">http://reactivex.io/documentation/operators/startwith.html</a></p>\n<h3 id=\"merge-按顺序混合多个Observable为一个新Observable\"><a href=\"#merge-按顺序混合多个Observable为一个新Observable\" class=\"headerlink\" title=\"merge()按顺序混合多个Observable为一个新Observable\"></a>merge()按顺序混合多个Observable为一个新Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject3 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(subject1, subject2, subject3)</span><br><span class=\"line\">    .merge()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;①&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;②&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🆎&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject3.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;③&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅰️<br>🅱️<br>①<br>②<br>🆎<br>③<br><a href=\"http://reactivex.io/documentation/operators/merge.html\">http://reactivex.io/documentation/operators/merge.html</a></p>\n<h3 id=\"zip-相当于并排的将多个Observable合并成一个新Observable\"><a href=\"#zip-相当于并排的将多个Observable合并成一个新Observable\" class=\"headerlink\" title=\"zip()相当于并排的将多个Observable合并成一个新Observable\"></a>zip()相当于并排的将多个Observable合并成一个新Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.zip(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🆎&quot;</span>)</span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅰️ 1<br>🅱️ 2<br>🆎 3</p>\n<p><a href=\"http://reactivex.io/documentation/operators/zip.html\">http://reactivex.io/documentation/operators/zip.html</a><br></br></p>\n<h3 id=\"combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\"><a href=\"#combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\" class=\"headerlink\" title=\"combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\"></a>combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.combineLatest(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🆎&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅱️ 1<br>🅱️ 2<br>🆎 2<br><a href=\"http://reactivex.io/documentation/operators/combinelatest.html\">http://reactivex.io/documentation/operators/combinelatest.html</a></p>\n<p>在数组上的应用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringObservable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.just(<span class=\"string\">&quot;❤️&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> fruitObservable <span class=\"operator\">=</span> [<span class=\"string\">&quot;🍎&quot;</span>, <span class=\"string\">&quot;🍐&quot;</span>, <span class=\"string\">&quot;🍊&quot;</span>].toObservable()</span><br><span class=\"line\"><span class=\"keyword\">let</span> animalObservable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐭&quot;</span>, <span class=\"string\">&quot;🐹&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[stringObservable, fruitObservable, animalObservable].combineLatest &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>[<span class=\"number\">0</span>])</span> <span class=\"subst\">\\(<span class=\"variable\">$0</span>[<span class=\"number\">1</span>])</span> <span class=\"subst\">\\(<span class=\"variable\">$0</span>[<span class=\"number\">2</span>])</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><strong>note：所有集合的类型必须一样</strong></p>\n<p><code>output:</code><br>❤️ 🍊 🐶<br>❤️ 🍊 🐱<br>❤️ 🍊 🐭<br>❤️ 🍊 🐹</p>\n<h3 id=\"switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\"><a href=\"#switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\" class=\"headerlink\" title=\"switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\"></a>switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;⚽️&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🍎&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable()</span><br><span class=\"line\">    .switchLatest()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🏈&quot;</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🏀&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> subject2</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;⚾️&quot;</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🎾&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> subject1</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>⚽️<br>🏈<br>🏀<br>🍎<br>🍐<br>🎾<br><strong>note：⚽️ 被忽略</strong><br><br/><br><img src='./switch.png' width=400><br><br/></p>\n<h2 id=\"Transforming：Observable的转换操作\"><a href=\"#Transforming：Observable的转换操作\" class=\"headerlink\" title=\"Transforming：Observable的转换操作\"></a>Transforming：Observable的转换操作</h2><h3 id=\"map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\"><a href=\"#map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\" class=\"headerlink\" title=\"map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\"></a>map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    .map &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>1<br>4<br>9<br><a href=\"http://reactivex.io/documentation/operators/map.html\">http://reactivex.io/documentation/operators/map.html</a></p>\n<h3 id=\"scan-可以迭代的操作，并且可以设置一个初始的迭代值\"><a href=\"#scan-可以迭代的操作，并且可以设置一个初始的迭代值\" class=\"headerlink\" title=\"scan()可以迭代的操作，并且可以设置一个初始的迭代值\"></a>scan()可以迭代的操作，并且可以设置一个初始的迭代值</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .scan(<span class=\"number\">1</span>) &#123; aggregateValue, newValue <span class=\"keyword\">in</span></span><br><span class=\"line\">        aggregateValue <span class=\"operator\">+</span> newValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>11<br>111<br>1111<br><a href=\"http://reactivex.io/documentation/operators/scan.html\">http://reactivex.io/documentation/operators/scan.html</a></p>\n<h2 id=\"Filtering：Observable消息元素的过滤操作\"><a href=\"#Filtering：Observable消息元素的过滤操作\" class=\"headerlink\" title=\"Filtering：Observable消息元素的过滤操作\"></a>Filtering：Observable消息元素的过滤操作</h2><h3 id=\"filter-发出满足bool条件的元素\"><a href=\"#filter-发出满足bool条件的元素\" class=\"headerlink\" title=\"filter()发出满足bool条件的元素\"></a>filter()发出满足bool条件的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(</span><br><span class=\"line\">    <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;🐹&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span> <span class=\"operator\">==</span> <span class=\"string\">&quot;🐱&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐱<br>🐱<br><a href=\"http://reactivex.io/documentation/operators/filter.html\">http://reactivex.io/documentation/operators/filter.html</a></p>\n<h3 id=\"distinctUntilChanged-过滤掉连续的相同元素\"><a href=\"#distinctUntilChanged-过滤掉连续的相同元素\" class=\"headerlink\" title=\"distinctUntilChanged()过滤掉连续的相同元素\"></a>distinctUntilChanged()过滤掉连续的相同元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">    .distinctUntilChanged()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐷<br>🐱<br>🐵<br>🐱<br><a href=\"http://reactivex.io/documentation/operators/distinct.html\">http://reactivex.io/documentation/operators/distinct.html</a></p>\n<h3 id=\"elementAt-只发送指定下标的元素\"><a href=\"#elementAt-只发送指定下标的元素\" class=\"headerlink\" title=\"elementAt()只发送指定下标的元素\"></a>elementAt()只发送指定下标的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .elementAt(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br><a href=\"http://reactivex.io/documentation/operators/elementat.html\">http://reactivex.io/documentation/operators/elementat.html</a></p>\n<h3 id=\"single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息\"><a href=\"#single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息\" class=\"headerlink\" title=\"single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息\"></a>single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .single&#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">6</span>&#125;<span class=\"comment\">//如果是==这种确切的判断，将没有Error消息而是Completed消息</span></span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(1)<br>Error(Sequence contains more than one element.)</p>\n<h3 id=\"take-仅发送从第一个元素开始指定个数的元素\"><a href=\"#take-仅发送从第一个元素开始指定个数的元素\" class=\"headerlink\" title=\"take()仅发送从第一个元素开始指定个数的元素\"></a>take()仅发送从第一个元素开始指定个数的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐰<br>🐶<br><a href=\"http://reactivex.io/documentation/operators/take.html\">http://reactivex.io/documentation/operators/take.html</a></p>\n<h3 id=\"takeLast-与take不同的是takeLast是从末尾开始\"><a href=\"#takeLast-与take不同的是takeLast是从末尾开始\" class=\"headerlink\" title=\"takeLast()与take不同的是takeLast是从末尾开始\"></a>takeLast()与take不同的是takeLast是从末尾开始</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .takeLast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/takelast.html\">http://reactivex.io/documentation/operators/takelast.html</a></p>\n<h3 id=\"takeWhile-发送从头开始的满足条件的元素\"><a href=\"#takeWhile-发送从头开始的满足条件的元素\" class=\"headerlink\" title=\"takeWhile()发送从头开始的满足条件的元素\"></a>takeWhile()发送从头开始的满足条件的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .takeWhile &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>1<br>2<br>3<br><img src='./takeWhile.png' width=400><br><br/></p>\n<h3 id=\"takeUntil：在与之关联的另一Observable发送元素前发送元素\"><a href=\"#takeUntil：在与之关联的另一Observable发送元素前发送元素\" class=\"headerlink\" title=\"takeUntil：在与之关联的另一Observable发送元素前发送元素\"></a>takeUntil：在与之关联的另一Observable发送元素前发送元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence</span><br><span class=\"line\">    .takeUntil(referenceSequence)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐰&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">referenceSequence.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐸&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐷&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐵&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🐱)<br>Next(🐰)<br>Next(🐶)<br>Completed<br/><br><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\">http://reactivex.io/documentation/operators/takeuntil.html</a></p>\n<h3 id=\"skip-与take相反，它是不发送\"><a href=\"#skip-与take相反，它是不发送\" class=\"headerlink\" title=\"skip()与take相反，它是不发送\"></a>skip()与take相反，它是不发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .skip(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐶<br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/skip.html\">http://reactivex.io/documentation/operators/skip.html</a></p>\n<h3 id=\"skipWhile-与takeWhile相反，它是不发送\"><a href=\"#skipWhile-与takeWhile相反，它是不发送\" class=\"headerlink\" title=\"skipWhile()与takeWhile相反，它是不发送\"></a>skipWhile()与takeWhile相反，它是不发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .skipWhile &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>4<br>5<br>6<br><br/><br><img src='./skipWhile.png' width=400><br><br/></p>\n<h3 id=\"skipWhileWithIndex-只是skipWhile基础上增加了一个下标index\"><a href=\"#skipWhileWithIndex-只是skipWhile基础上增加了一个下标index\" class=\"headerlink\" title=\"skipWhileWithIndex()只是skipWhile基础上增加了一个下标index\"></a>skipWhileWithIndex()只是skipWhile基础上增加了一个下标index</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .skipWhileWithIndex &#123; element, index <span class=\"keyword\">in</span></span><br><span class=\"line\">        index <span class=\"operator\">&lt;</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵</p>\n<h3 id=\"skipUntil-与takeUntil相反，它是之后发送\"><a href=\"#skipUntil-与takeUntil相反，它是之后发送\" class=\"headerlink\" title=\"skipUntil()与takeUntil相反，它是之后发送\"></a>skipUntil()与takeUntil相反，它是之后发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence</span><br><span class=\"line\">    .skipUntil(referenceSequence)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐰&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">referenceSequence.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐸&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐷&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐵&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\">http://reactivex.io/documentation/operators/skipuntil.html</a></p>\n<h2 id=\"对Observable元素做运算操作\"><a href=\"#对Observable元素做运算操作\" class=\"headerlink\" title=\"对Observable元素做运算操作\"></a>对Observable元素做运算操作</h2><h3 id=\"toArray-将Observable序列转换成array并发送，然后终止\"><a href=\"#toArray-将Observable序列转换成array并发送，然后终止\" class=\"headerlink\" title=\"toArray()将Observable序列转换成array并发送，然后终止\"></a>toArray()将Observable序列转换成array并发送，然后终止</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<br>Completed<br><br/><br><img src='./toArray.png' width=400><br><br/></p>\n<h3 id=\"reduce-迭代运算，通过指定初始迭代值和运算符\"><a href=\"#reduce-迭代运算，通过指定初始迭代值和运算符\" class=\"headerlink\" title=\"reduce()迭代运算，通过指定初始迭代值和运算符\"></a>reduce()迭代运算，通过指定初始迭代值和运算符</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .reduce(<span class=\"number\">1</span>, accumulator: <span class=\"operator\">+</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code>=<br>1111<br><a href=\"http://reactivex.io/documentation/operators/reduce.html\">http://reactivex.io/documentation/operators/reduce.html</a></p>\n<h3 id=\"concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\"><a href=\"#concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\" class=\"headerlink\" title=\"concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\"></a>concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🍎&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable()</span><br><span class=\"line\">    .concat()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🍊&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> subject2</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;I would be ignored&quot;</span>)</span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🍹&quot;</span>)</span><br><span class=\"line\">subject1.onCompleted()</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;🐭&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🍎)<br>Next(🍐)<br>Next(🍊)<br>Next(🍹)<br>Next(🐱)<br>Next(🐭)<br><a href=\"http://reactivex.io/documentation/operators/concat.html\">http://reactivex.io/documentation/operators/concat.html</a></p>\n<h2 id=\"Connectable操作\"><a href=\"#Connectable操作\" class=\"headerlink\" title=\"Connectable操作\"></a>Connectable操作</h2><p>Connectable操作，Connectable Observable操作跟普通的Observable区别在于，Connectable Observable只有在它们的connect()方法调用后才开始发送元素，因此可以等到所有订阅者都订阅后才开始发送元素，有点像事务一样</p>\n<h3 id=\"publish-将一个普通序列转换成Connectable-Observable序列\"><a href=\"#publish-将一个普通序列转换成Connectable-Observable序列\" class=\"headerlink\" title=\"publish()将一个普通序列转换成Connectable Observable序列\"></a>publish()将一个普通序列转换成Connectable Observable序列</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(<span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .publish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 1:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 2:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 3:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subscription 1:, Event: 0<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 3:, Event: 3<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 4<br><br/><br><img src='./publish.png' width=400><br><br/></p>\n<h3 id=\"replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\"><a href=\"#replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\" class=\"headerlink\" title=\"replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\"></a>replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(<span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .replay(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 1:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 2:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 3:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subscription 1:, Event: 0<br>Subscription 2:, Event: 0<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 0<br>Subscription 3:, Event: 1<br>Subscription 3:, Event: 2<br>Subscription 3:, Event: 3<br>Subscription 3:, Event: 4<br>Subscription 1:, Event: 5<br>Subscription 2:, Event: 5<br>Subscription 3:, Event: 5<br><br/><br><img src='./replay.png' width=400><br><br/></p>\n<h3 id=\"multicast-需要传入一个subject，通过subject来管理向订阅者发送消息\"><a href=\"#multicast-需要传入一个subject，通过subject来管理向订阅者发送消息\" class=\"headerlink\" title=\"multicast()需要传入一个subject，通过subject来管理向订阅者发送消息\"></a>multicast()需要传入一个subject，通过subject来管理向订阅者发送消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(<span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> subject</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subject: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .multicast(subject)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\t</span>Subscription 1:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\t</span>Subscription 2:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\t</span>Subscription 3:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subject: 0<br>Subscription 1:, Event: 0<br> Subject: 1<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br> Subject: 2<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br> Subject: 3<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 3:, Event: 3<br> Subject: 4<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 4<br> Subject: 5<br>Subscription 1:, Event: 5<br>Subscription 2:, Event: 5<br>Subscription 3:, Event: 5</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed\"><a href=\"#catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed\" class=\"headerlink\" title=\"catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed\"></a>catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatFails <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatFails</span><br><span class=\"line\">    .catchErrorJustReturn(<span class=\"string\">&quot;😊&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;😬&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;😨&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;😡&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(😬)<br>Next(😨)<br>Next(😡)<br>Next(🔴)<br>Next(😊)<br>Completed</p>\n<h3 id=\"catchError-当捕获错误后会返回一个正常的Observable序列与之合并\"><a href=\"#catchError-当捕获错误后会返回一个正常的Observable序列与之合并\" class=\"headerlink\" title=\"catchError()当捕获错误后会返回一个正常的Observable序列与之合并\"></a>catchError()当捕获错误后会返回一个正常的Observable序列与之合并</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatErrors <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> recoverySequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors</span><br><span class=\"line\">    .catchError &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error:&quot;</span>, <span class=\"variable\">$0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recoverySequence</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;😬&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;😨&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;😡&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">recoverySequence.onNext(<span class=\"string\">&quot;😊&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(😬)<br>Next(😨)<br>Next(😡)<br>Next(🔴)<br>Error: Test<br>Next(😊)<br><br/><br><img src='./catch.png' width=400><br><br/></p>\n<h3 id=\"retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\"><a href=\"#retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\" class=\"headerlink\" title=\"retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\"></a>retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatErrors <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🍎&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🍊&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> count <span class=\"operator\">==</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        observer.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error encountered&quot;</span>)</span><br><span class=\"line\">        count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🐭&quot;</span>)</span><br><span class=\"line\">    observer.onCompleted()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors</span><br><span class=\"line\">    .retry()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🍎<br>🍐<br>🍊<br>Error encountered<br>🍎<br>🍐<br>🍊<br>🐶<br>🐱<br>🐭<br><br/><br><img src='./retry.png' width=400><br><br/></p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><ol>\n<li>debug()会打印详细的信息</li>\n<li>RxSwift.resourceCount()打印资源分配计数</li>\n</ol>\n<blockquote>\n<p>注：不要在Release builds中使用</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应</p>\n<h2 id=\"为什么发用RxSwift\"><a href=\"#为什么发用RxSwift\" class=\"headerlink\" title=\"为什么发用RxSwift\"></a>为什么发用RxSwift</h2><p>一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式</p>\n<ul>\n<li>Observable的创建和订阅</li>\n<li>Subjects的使用</li>\n<li>Combination：Observable的混合操作</li>\n<li>Transforming：Observable的转换操作</li>\n<li>Filtering：Observable消息元素的过滤操作</li>\n<li>对Observable元素做运算操作</li>\n<li>Connectable操作</li>\n<li>错误处理</li>\n<li>debug</li>\n</ul>","more":"<h2 id=\"消息的订阅方式\"><a href=\"#消息的订阅方式\" class=\"headerlink\" title=\"消息的订阅方式\"></a>消息的订阅方式</h2><p>这些都是Observable的方法，参数都是闭包，闭包是观察者</p>\n<ol>\n<li>subscribe(on:(Event) -&gt; void)：订阅所有消息(Next, Error, and Completed)</li>\n<li>subscribeNext((Element) -&gt; void)：只订阅Next</li>\n<li>subscribeError((ErrorType) -&gt; void)：只订阅Error</li>\n<li>subscribeCompleted(() -&gt; Void)：只订阅Completed</li>\n<li>subscribe(onNext:(Element) -&gt; void, onError:(ErrorType) -&gt; void, onCompleted:() -&gt; Void, onDisposed:() -&gt; Void)订阅多个消息</li>\n</ol>\n<h2 id=\"释放分配的资源\"><a href=\"#释放分配的资源\" class=\"headerlink\" title=\"释放分配的资源\"></a>释放分配的资源</h2><p>订阅者可以通过调用.dispose()来释放分配的资源，但通过DisposeBag来管理或者通过takeUntil来自动释放更好</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">subscription.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequence</span><br><span class=\"line\">    .takeUntil(<span class=\"keyword\">self</span>.rx_deallocated)</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Observable的创建和订阅\"><a href=\"#Observable的创建和订阅\" class=\"headerlink\" title=\"Observable的创建和订阅\"></a>Observable的创建和订阅</h2><p>Observable序列分为两类：</p>\n<ul>\n<li>冷：只有当有观察者订阅这个序列时，序列才发射值</li>\n<li>热：序列创建时就开始发射值</li>\n</ul>\n<h3 id=\"never-创建即不会完成也不会发消息的Observable\"><a href=\"#never-创建即不会完成也不会发消息的Observable\" class=\"headerlink\" title=\"never()创建即不会完成也不会发消息的Observable\"></a>never()创建即不会完成也不会发消息的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> neverSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.never()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> neverSequenceSubscription <span class=\"operator\">=</span> neverSequence</span><br><span class=\"line\">        .subscribe &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This will never be printed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">neverSequenceSubscription.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<img src='./never.png' width=400/>\n\n<h3 id=\"empty-创建只会发送一次完成消息的Observable\"><a href=\"#empty-创建只会发送一次完成消息的Observable\" class=\"headerlink\" title=\"empty()创建只会发送一次完成消息的Observable\"></a>empty()创建只会发送一次完成消息的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Completed</p>\n<img src='./empty.png' width=400>\n\n<h3 id=\"just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\"><a href=\"#just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\" class=\"headerlink\" title=\"just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\"></a>just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.just(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)        </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果传递null给just，它将返回一个发送null消息的Observable，不要传入错误的参数，否则将会得到一个空的Observable</p>\n</blockquote>\n<p><code>output:</code><br>Next(🔴)<br>Completed<br><br/><br><img src='./just.png' width=400></p>\n<h3 id=\"of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略\"><a href=\"#of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略\" class=\"headerlink\" title=\"of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略\"></a>of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐭&quot;</span>, <span class=\"string\">&quot;🐹&quot;</span>)</span><br><span class=\"line\">       .subscribeNext &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐶<br>🐱<br>🐭<br>🐹</p>\n<h3 id=\"create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable\"><a href=\"#create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable\" class=\"headerlink\" title=\"create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable\"></a>create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myJust <span class=\"operator\">=</span> &#123; (element: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            observer.on(.<span class=\"type\">Next</span>(element))</span><br><span class=\"line\">            observer.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> myJust(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🔴)<br>Completed<br><br/><br><img src='./create.png' width=400><br><br/></p>\n<h3 id=\"range-创建一个发送一个范围的整数的Observable，发送完后发送Completed\"><a href=\"#range-创建一个发送一个范围的整数的Observable，发送完后发送Completed\" class=\"headerlink\" title=\"range()创建一个发送一个范围的整数的Observable，发送完后发送Completed\"></a>range()创建一个发送一个范围的整数的Observable，发送完后发送Completed</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(1)<br>Next(2)<br>Next(3)<br>Next(4)<br>Next(5)<br>Next(6)<br>Next(7)<br>Next(8)<br>Next(9)<br>Next(10)<br>Completed</p>\n<h3 id=\"repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\"><a href=\"#repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\" class=\"headerlink\" title=\"repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\"></a>repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">        .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🔴<br>🔴<br>🔴</p>\n<blockquote>\n<p>注：take可以用于所有Observable指定限制元素个数</p>\n</blockquote>\n<h3 id=\"generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素\"><a href=\"#generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素\" class=\"headerlink\" title=\"generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素\"></a>generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">Observable</span>.generate(</span><br><span class=\"line\">            initialState: <span class=\"number\">0</span>,</span><br><span class=\"line\">            condition: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">            iterate: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><strong>iterate：每次condition之后都会对当前值做一次相应迭代运算</strong></p>\n<p><code>output:</code><br/><br>0<br>1<br>2</p>\n<h3 id=\"deferred-序列为每一个订阅者创建一个全新的Observable\"><a href=\"#deferred-序列为每一个订阅者创建一个全新的Observable\" class=\"headerlink\" title=\"deferred()序列为每一个订阅者创建一个全新的Observable\"></a>deferred()序列为每一个订阅者创建一个全新的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> deferredSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.deferred &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Creating <span class=\"subst\">\\(count)</span>&quot;</span>)</span><br><span class=\"line\">        count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Emitting...&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">deferredSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">deferredSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：deferred序列只有在一个观察者订阅它的时候才执行它的创建Observable方法，产生一个全新的Observable**</p>\n</blockquote>\n<p><code>output:</code><br>Creating 1<br>Emitting…<br>🐶<br>🐱<br>🐵<br>Creating 2<br>Emitting…<br>🐶<br>🐱<br>🐵<br><img src='./deferred.png' width=400><br><br/></p>\n<h3 id=\"error-创建一个不发送元素的Observable，然后立即发送error并终止\"><a href=\"#error-创建一个不发送元素的Observable，然后立即发送error并终止\" class=\"headerlink\" title=\"error()创建一个不发送元素的Observable，然后立即发送error并终止\"></a>error()创建一个不发送元素的Observable，然后立即发送error并终止</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.error(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Error(Test)</p>\n<h3 id=\"doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\"><a href=\"#doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\" class=\"headerlink\" title=\"doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\"></a>doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🍎&quot;</span>, <span class=\"string\">&quot;🍐&quot;</span>, <span class=\"string\">&quot;🍊&quot;</span>, <span class=\"string\">&quot;🍋&quot;</span>)</span><br><span class=\"line\">        .doOn &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Intercepted:&quot;</span>, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注： doOn(onNext:onError:onCompleted:)为不同订阅方式分别指定</p>\n</blockquote>\n<p><code>output:</code><br>Intercepted: Next(🍎)<br>🍎<br>Intercepted: Next(🍐)<br>🍐<br>Intercepted: Next(🍊)<br>🍊<br>Intercepted: Next(🍋)<br>🍋<br>Intercepted: Completed</p>\n<img src='./doOn.png' width=400>\n<br/>\n\n<h3 id=\"toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable\"><a href=\"#toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable\" class=\"headerlink\" title=\"toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable\"></a>toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable</h3><br/>\n## Subjects的使用\n\n<p>Subjects理解为observer和Observable之间的桥梁或代理，即扮演着observer又扮演着Observable，规定了添加的observer如何接收消息</p>\n<h3 id=\"PublishSubject向所有订阅者广播从订阅之后的事件\"><a href=\"#PublishSubject向所有订阅者广播从订阅之后的事件\" class=\"headerlink\" title=\"PublishSubject向所有订阅者广播从订阅之后的事件\"></a>PublishSubject向所有订阅者广播从订阅之后的事件</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)</p>\n<h3 id=\"ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\"><a href=\"#ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\" class=\"headerlink\" title=\"ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\"></a>ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)</p>\n<h3 id=\"BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\"><a href=\"#BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\" class=\"headerlink\" title=\"BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\"></a>BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">&quot;3&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">&quot;🍊&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>note：以上都不会自动发送Completed当它们被释放的时候</strong></p>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🔴)<br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)<br>Subscription: 3 Event: Next(🅱️)<br>Subscription: 1 Event: Next(🍐)<br>Subscription: 2 Event: Next(🍐)<br>Subscription: 3 Event: Next(🍐)<br>Subscription: 1 Event: Next(🍊)<br>Subscription: 2 Event: Next(🍊)<br>Subscription: 3 Event: Next(🍊)</p>\n<h3 id=\"Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\"><a href=\"#Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\" class=\"headerlink\" title=\"Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\"></a>Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable().addObserver(<span class=\"string\">&quot;1&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🐶&quot;</span></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🐱&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable().addObserver(<span class=\"string\">&quot;2&quot;</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🅰️&quot;</span></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> <span class=\"string\">&quot;🅱️&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注:variable.asObservable()实际是获取variable中的BehaviorSubject。variable也没有onNext，而是通过value来获取或添加元素，它会添加元素到BehaviorSubject</p>\n</blockquote>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🔴)<br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)<br>Subscription: 1 Event: Completed<br>Subscription: 2 Event: Completed</p>\n<h2 id=\"Combination：Observable的混合操作\"><a href=\"#Combination：Observable的混合操作\" class=\"headerlink\" title=\"Combination：Observable的混合操作\"></a>Combination：Observable的混合操作</h2><h3 id=\"startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\"><a href=\"#startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\" class=\"headerlink\" title=\"startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\"></a>startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐭&quot;</span>, <span class=\"string\">&quot;🐹&quot;</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">&quot;1️⃣&quot;</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">&quot;2️⃣&quot;</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">&quot;3️⃣&quot;</span>, <span class=\"string\">&quot;🅰️&quot;</span>, <span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">     .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">     .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>3️⃣<br>🅰️<br>🅱️<br>2️⃣<br>1️⃣<br>🐶<br>🐱<br>🐭<br>🐹<br><a href=\"http://reactivex.io/documentation/operators/startwith.html\">http://reactivex.io/documentation/operators/startwith.html</a></p>\n<h3 id=\"merge-按顺序混合多个Observable为一个新Observable\"><a href=\"#merge-按顺序混合多个Observable为一个新Observable\" class=\"headerlink\" title=\"merge()按顺序混合多个Observable为一个新Observable\"></a>merge()按顺序混合多个Observable为一个新Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject3 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(subject1, subject2, subject3)</span><br><span class=\"line\">    .merge()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;①&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;②&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🆎&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject3.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;③&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅰️<br>🅱️<br>①<br>②<br>🆎<br>③<br><a href=\"http://reactivex.io/documentation/operators/merge.html\">http://reactivex.io/documentation/operators/merge.html</a></p>\n<h3 id=\"zip-相当于并排的将多个Observable合并成一个新Observable\"><a href=\"#zip-相当于并排的将多个Observable合并成一个新Observable\" class=\"headerlink\" title=\"zip()相当于并排的将多个Observable合并成一个新Observable\"></a>zip()相当于并排的将多个Observable合并成一个新Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.zip(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🆎&quot;</span>)</span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅰️ 1<br>🅱️ 2<br>🆎 3</p>\n<p><a href=\"http://reactivex.io/documentation/operators/zip.html\">http://reactivex.io/documentation/operators/zip.html</a><br></br></p>\n<h3 id=\"combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\"><a href=\"#combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\" class=\"headerlink\" title=\"combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\"></a>combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.combineLatest(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">&quot;🆎&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅱️ 1<br>🅱️ 2<br>🆎 2<br><a href=\"http://reactivex.io/documentation/operators/combinelatest.html\">http://reactivex.io/documentation/operators/combinelatest.html</a></p>\n<p>在数组上的应用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringObservable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.just(<span class=\"string\">&quot;❤️&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> fruitObservable <span class=\"operator\">=</span> [<span class=\"string\">&quot;🍎&quot;</span>, <span class=\"string\">&quot;🍐&quot;</span>, <span class=\"string\">&quot;🍊&quot;</span>].toObservable()</span><br><span class=\"line\"><span class=\"keyword\">let</span> animalObservable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐭&quot;</span>, <span class=\"string\">&quot;🐹&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[stringObservable, fruitObservable, animalObservable].combineLatest &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>[<span class=\"number\">0</span>])</span> <span class=\"subst\">\\(<span class=\"variable\">$0</span>[<span class=\"number\">1</span>])</span> <span class=\"subst\">\\(<span class=\"variable\">$0</span>[<span class=\"number\">2</span>])</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><strong>note：所有集合的类型必须一样</strong></p>\n<p><code>output:</code><br>❤️ 🍊 🐶<br>❤️ 🍊 🐱<br>❤️ 🍊 🐭<br>❤️ 🍊 🐹</p>\n<h3 id=\"switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\"><a href=\"#switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\" class=\"headerlink\" title=\"switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\"></a>switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;⚽️&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🍎&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable()</span><br><span class=\"line\">    .switchLatest()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🏈&quot;</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🏀&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> subject2</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;⚾️&quot;</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🎾&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> subject1</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>⚽️<br>🏈<br>🏀<br>🍎<br>🍐<br>🎾<br><strong>note：⚽️ 被忽略</strong><br><br/><br><img src='./switch.png' width=400><br><br/></p>\n<h2 id=\"Transforming：Observable的转换操作\"><a href=\"#Transforming：Observable的转换操作\" class=\"headerlink\" title=\"Transforming：Observable的转换操作\"></a>Transforming：Observable的转换操作</h2><h3 id=\"map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\"><a href=\"#map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\" class=\"headerlink\" title=\"map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\"></a>map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    .map &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>1<br>4<br>9<br><a href=\"http://reactivex.io/documentation/operators/map.html\">http://reactivex.io/documentation/operators/map.html</a></p>\n<h3 id=\"scan-可以迭代的操作，并且可以设置一个初始的迭代值\"><a href=\"#scan-可以迭代的操作，并且可以设置一个初始的迭代值\" class=\"headerlink\" title=\"scan()可以迭代的操作，并且可以设置一个初始的迭代值\"></a>scan()可以迭代的操作，并且可以设置一个初始的迭代值</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .scan(<span class=\"number\">1</span>) &#123; aggregateValue, newValue <span class=\"keyword\">in</span></span><br><span class=\"line\">        aggregateValue <span class=\"operator\">+</span> newValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>11<br>111<br>1111<br><a href=\"http://reactivex.io/documentation/operators/scan.html\">http://reactivex.io/documentation/operators/scan.html</a></p>\n<h2 id=\"Filtering：Observable消息元素的过滤操作\"><a href=\"#Filtering：Observable消息元素的过滤操作\" class=\"headerlink\" title=\"Filtering：Observable消息元素的过滤操作\"></a>Filtering：Observable消息元素的过滤操作</h2><h3 id=\"filter-发出满足bool条件的元素\"><a href=\"#filter-发出满足bool条件的元素\" class=\"headerlink\" title=\"filter()发出满足bool条件的元素\"></a>filter()发出满足bool条件的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(</span><br><span class=\"line\">    <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;🐹&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span> <span class=\"operator\">==</span> <span class=\"string\">&quot;🐱&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐱<br>🐱<br><a href=\"http://reactivex.io/documentation/operators/filter.html\">http://reactivex.io/documentation/operators/filter.html</a></p>\n<h3 id=\"distinctUntilChanged-过滤掉连续的相同元素\"><a href=\"#distinctUntilChanged-过滤掉连续的相同元素\" class=\"headerlink\" title=\"distinctUntilChanged()过滤掉连续的相同元素\"></a>distinctUntilChanged()过滤掉连续的相同元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>, <span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">    .distinctUntilChanged()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐷<br>🐱<br>🐵<br>🐱<br><a href=\"http://reactivex.io/documentation/operators/distinct.html\">http://reactivex.io/documentation/operators/distinct.html</a></p>\n<h3 id=\"elementAt-只发送指定下标的元素\"><a href=\"#elementAt-只发送指定下标的元素\" class=\"headerlink\" title=\"elementAt()只发送指定下标的元素\"></a>elementAt()只发送指定下标的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .elementAt(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br><a href=\"http://reactivex.io/documentation/operators/elementat.html\">http://reactivex.io/documentation/operators/elementat.html</a></p>\n<h3 id=\"single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息\"><a href=\"#single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息\" class=\"headerlink\" title=\"single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息\"></a>single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .single&#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">6</span>&#125;<span class=\"comment\">//如果是==这种确切的判断，将没有Error消息而是Completed消息</span></span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(1)<br>Error(Sequence contains more than one element.)</p>\n<h3 id=\"take-仅发送从第一个元素开始指定个数的元素\"><a href=\"#take-仅发送从第一个元素开始指定个数的元素\" class=\"headerlink\" title=\"take()仅发送从第一个元素开始指定个数的元素\"></a>take()仅发送从第一个元素开始指定个数的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐰<br>🐶<br><a href=\"http://reactivex.io/documentation/operators/take.html\">http://reactivex.io/documentation/operators/take.html</a></p>\n<h3 id=\"takeLast-与take不同的是takeLast是从末尾开始\"><a href=\"#takeLast-与take不同的是takeLast是从末尾开始\" class=\"headerlink\" title=\"takeLast()与take不同的是takeLast是从末尾开始\"></a>takeLast()与take不同的是takeLast是从末尾开始</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .takeLast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/takelast.html\">http://reactivex.io/documentation/operators/takelast.html</a></p>\n<h3 id=\"takeWhile-发送从头开始的满足条件的元素\"><a href=\"#takeWhile-发送从头开始的满足条件的元素\" class=\"headerlink\" title=\"takeWhile()发送从头开始的满足条件的元素\"></a>takeWhile()发送从头开始的满足条件的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .takeWhile &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>1<br>2<br>3<br><img src='./takeWhile.png' width=400><br><br/></p>\n<h3 id=\"takeUntil：在与之关联的另一Observable发送元素前发送元素\"><a href=\"#takeUntil：在与之关联的另一Observable发送元素前发送元素\" class=\"headerlink\" title=\"takeUntil：在与之关联的另一Observable发送元素前发送元素\"></a>takeUntil：在与之关联的另一Observable发送元素前发送元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence</span><br><span class=\"line\">    .takeUntil(referenceSequence)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐰&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">referenceSequence.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐸&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐷&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐵&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🐱)<br>Next(🐰)<br>Next(🐶)<br>Completed<br/><br><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\">http://reactivex.io/documentation/operators/takeuntil.html</a></p>\n<h3 id=\"skip-与take相反，它是不发送\"><a href=\"#skip-与take相反，它是不发送\" class=\"headerlink\" title=\"skip()与take相反，它是不发送\"></a>skip()与take相反，它是不发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .skip(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐶<br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/skip.html\">http://reactivex.io/documentation/operators/skip.html</a></p>\n<h3 id=\"skipWhile-与takeWhile相反，它是不发送\"><a href=\"#skipWhile-与takeWhile相反，它是不发送\" class=\"headerlink\" title=\"skipWhile()与takeWhile相反，它是不发送\"></a>skipWhile()与takeWhile相反，它是不发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .skipWhile &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>4<br>5<br>6<br><br/><br><img src='./skipWhile.png' width=400><br><br/></p>\n<h3 id=\"skipWhileWithIndex-只是skipWhile基础上增加了一个下标index\"><a href=\"#skipWhileWithIndex-只是skipWhile基础上增加了一个下标index\" class=\"headerlink\" title=\"skipWhileWithIndex()只是skipWhile基础上增加了一个下标index\"></a>skipWhileWithIndex()只是skipWhile基础上增加了一个下标index</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;🐱&quot;</span>, <span class=\"string\">&quot;🐰&quot;</span>, <span class=\"string\">&quot;🐶&quot;</span>, <span class=\"string\">&quot;🐸&quot;</span>, <span class=\"string\">&quot;🐷&quot;</span>, <span class=\"string\">&quot;🐵&quot;</span>)</span><br><span class=\"line\">    .skipWhileWithIndex &#123; element, index <span class=\"keyword\">in</span></span><br><span class=\"line\">        index <span class=\"operator\">&lt;</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵</p>\n<h3 id=\"skipUntil-与takeUntil相反，它是之后发送\"><a href=\"#skipUntil-与takeUntil相反，它是之后发送\" class=\"headerlink\" title=\"skipUntil()与takeUntil相反，它是之后发送\"></a>skipUntil()与takeUntil相反，它是之后发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence</span><br><span class=\"line\">    .skipUntil(referenceSequence)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐰&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">referenceSequence.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐸&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐷&quot;</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">&quot;🐵&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\">http://reactivex.io/documentation/operators/skipuntil.html</a></p>\n<h2 id=\"对Observable元素做运算操作\"><a href=\"#对Observable元素做运算操作\" class=\"headerlink\" title=\"对Observable元素做运算操作\"></a>对Observable元素做运算操作</h2><h3 id=\"toArray-将Observable序列转换成array并发送，然后终止\"><a href=\"#toArray-将Observable序列转换成array并发送，然后终止\" class=\"headerlink\" title=\"toArray()将Observable序列转换成array并发送，然后终止\"></a>toArray()将Observable序列转换成array并发送，然后终止</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<br>Completed<br><br/><br><img src='./toArray.png' width=400><br><br/></p>\n<h3 id=\"reduce-迭代运算，通过指定初始迭代值和运算符\"><a href=\"#reduce-迭代运算，通过指定初始迭代值和运算符\" class=\"headerlink\" title=\"reduce()迭代运算，通过指定初始迭代值和运算符\"></a>reduce()迭代运算，通过指定初始迭代值和运算符</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .reduce(<span class=\"number\">1</span>, accumulator: <span class=\"operator\">+</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code>=<br>1111<br><a href=\"http://reactivex.io/documentation/operators/reduce.html\">http://reactivex.io/documentation/operators/reduce.html</a></p>\n<h3 id=\"concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\"><a href=\"#concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\" class=\"headerlink\" title=\"concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\"></a>concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🍎&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable()</span><br><span class=\"line\">    .concat()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🍊&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value <span class=\"operator\">=</span> subject2</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;I would be ignored&quot;</span>)</span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">&quot;🍹&quot;</span>)</span><br><span class=\"line\">subject1.onCompleted()</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">&quot;🐭&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🍎)<br>Next(🍐)<br>Next(🍊)<br>Next(🍹)<br>Next(🐱)<br>Next(🐭)<br><a href=\"http://reactivex.io/documentation/operators/concat.html\">http://reactivex.io/documentation/operators/concat.html</a></p>\n<h2 id=\"Connectable操作\"><a href=\"#Connectable操作\" class=\"headerlink\" title=\"Connectable操作\"></a>Connectable操作</h2><p>Connectable操作，Connectable Observable操作跟普通的Observable区别在于，Connectable Observable只有在它们的connect()方法调用后才开始发送元素，因此可以等到所有订阅者都订阅后才开始发送元素，有点像事务一样</p>\n<h3 id=\"publish-将一个普通序列转换成Connectable-Observable序列\"><a href=\"#publish-将一个普通序列转换成Connectable-Observable序列\" class=\"headerlink\" title=\"publish()将一个普通序列转换成Connectable Observable序列\"></a>publish()将一个普通序列转换成Connectable Observable序列</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(<span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .publish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 1:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 2:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 3:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subscription 1:, Event: 0<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 3:, Event: 3<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 4<br><br/><br><img src='./publish.png' width=400><br><br/></p>\n<h3 id=\"replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\"><a href=\"#replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\" class=\"headerlink\" title=\"replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\"></a>replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(<span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .replay(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 1:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 2:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription 3:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subscription 1:, Event: 0<br>Subscription 2:, Event: 0<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 0<br>Subscription 3:, Event: 1<br>Subscription 3:, Event: 2<br>Subscription 3:, Event: 3<br>Subscription 3:, Event: 4<br>Subscription 1:, Event: 5<br>Subscription 2:, Event: 5<br>Subscription 3:, Event: 5<br><br/><br><img src='./replay.png' width=400><br><br/></p>\n<h3 id=\"multicast-需要传入一个subject，通过subject来管理向订阅者发送消息\"><a href=\"#multicast-需要传入一个subject，通过subject来管理向订阅者发送消息\" class=\"headerlink\" title=\"multicast()需要传入一个subject，通过subject来管理向订阅者发送消息\"></a>multicast()需要传入一个subject，通过subject来管理向订阅者发送消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(<span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> subject</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subject: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .multicast(subject)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\t</span>Subscription 1:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\t</span>Subscription 2:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">_</span> <span class=\"operator\">=</span> intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\t</span>Subscription 3:, Event: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subject: 0<br>Subscription 1:, Event: 0<br> Subject: 1<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br> Subject: 2<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br> Subject: 3<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 3:, Event: 3<br> Subject: 4<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 4<br> Subject: 5<br>Subscription 1:, Event: 5<br>Subscription 2:, Event: 5<br>Subscription 3:, Event: 5</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed\"><a href=\"#catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed\" class=\"headerlink\" title=\"catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed\"></a>catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatFails <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatFails</span><br><span class=\"line\">    .catchErrorJustReturn(<span class=\"string\">&quot;😊&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;😬&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;😨&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;😡&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">sequenceThatFails.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(😬)<br>Next(😨)<br>Next(😡)<br>Next(🔴)<br>Next(😊)<br>Completed</p>\n<h3 id=\"catchError-当捕获错误后会返回一个正常的Observable序列与之合并\"><a href=\"#catchError-当捕获错误后会返回一个正常的Observable序列与之合并\" class=\"headerlink\" title=\"catchError()当捕获错误后会返回一个正常的Observable序列与之合并\"></a>catchError()当捕获错误后会返回一个正常的Observable序列与之合并</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatErrors <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> recoverySequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors</span><br><span class=\"line\">    .catchError &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error:&quot;</span>, <span class=\"variable\">$0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recoverySequence</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;😬&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;😨&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;😡&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\">sequenceThatErrors.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">recoverySequence.onNext(<span class=\"string\">&quot;😊&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(😬)<br>Next(😨)<br>Next(😡)<br>Next(🔴)<br>Error: Test<br>Next(😊)<br><br/><br><img src='./catch.png' width=400><br><br/></p>\n<h3 id=\"retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\"><a href=\"#retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\" class=\"headerlink\" title=\"retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\"></a>retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatErrors <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🍎&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🍐&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🍊&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> count <span class=\"operator\">==</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        observer.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error encountered&quot;</span>)</span><br><span class=\"line\">        count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">&quot;🐭&quot;</span>)</span><br><span class=\"line\">    observer.onCompleted()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors</span><br><span class=\"line\">    .retry()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🍎<br>🍐<br>🍊<br>Error encountered<br>🍎<br>🍐<br>🍊<br>🐶<br>🐱<br>🐭<br><br/><br><img src='./retry.png' width=400><br><br/></p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><ol>\n<li>debug()会打印详细的信息</li>\n<li>RxSwift.resourceCount()打印资源分配计数</li>\n</ol>\n<blockquote>\n<p>注：不要在Release builds中使用</p>\n</blockquote>"},{"title":"React Native报错'config.h' File Not Found","date":"2018-11-12T05:47:23.000Z","abbrlink":"6c8932d6101bb275","_content":"\n打开Xcode编译react native的iOS程序出现了如下的错误：\n\n{% asset_img 20171205145336037.jpeg 'config.h' file not found%}\n\n<!-- more -->\n\n解决方法：\n\n``` bash\ncd node_modules/react-native/third-party/glog-{version}\n../../scripts/ios-configure-glog.sh\n```\n\n其实执行 .sh 命令之后Terminal界面的一些处理流程，我们不难看出，这个命令是check .h头文件的引用情况，然后建立关联关系。","source":"_posts/React-Native报错-config-h-file-not-found.md","raw":"---\ntitle: React Native报错'config.h' file not found\ndate: 2018-11-12 13:47:23\ntags:\n  - React Native\n  - iOS\ncategories: 经验积累\nabbrlink: 6c8932d6101bb275\n---\n\n打开Xcode编译react native的iOS程序出现了如下的错误：\n\n{% asset_img 20171205145336037.jpeg 'config.h' file not found%}\n\n<!-- more -->\n\n解决方法：\n\n``` bash\ncd node_modules/react-native/third-party/glog-{version}\n../../scripts/ios-configure-glog.sh\n```\n\n其实执行 .sh 命令之后Terminal界面的一些处理流程，我们不难看出，这个命令是check .h头文件的引用情况，然后建立关联关系。","slug":"React-Native报错-config-h-file-not-found","published":1,"updated":"2022-05-19T03:13:11.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcens0021l1l3dzcnbzrq","content":"<p>打开Xcode编译react native的iOS程序出现了如下的错误：</p>\n<img src=\"/posts/6c8932d6101bb275/20171205145336037.jpeg\" class=\"\" title=\"config.h file not found\">\n\n<span id=\"more\"></span>\n\n<p>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node_modules/react-native/third-party/glog-&#123;version&#125;</span><br><span class=\"line\">../../scripts/ios-configure-glog.sh</span><br></pre></td></tr></table></figure>\n\n<p>其实执行 .sh 命令之后Terminal界面的一些处理流程，我们不难看出，这个命令是check .h头文件的引用情况，然后建立关联关系。</p>\n","site":{"data":{}},"excerpt":"<p>打开Xcode编译react native的iOS程序出现了如下的错误：</p>\n<img src=\"/posts/6c8932d6101bb275/20171205145336037.jpeg\" class=\"\" title=\"config.h file not found\">","more":"<p>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node_modules/react-native/third-party/glog-&#123;version&#125;</span><br><span class=\"line\">../../scripts/ios-configure-glog.sh</span><br></pre></td></tr></table></figure>\n\n<p>其实执行 .sh 命令之后Terminal界面的一些处理流程，我们不难看出，这个命令是check .h头文件的引用情况，然后建立关联关系。</p>"},{"title":"Objective-C身份证验证实现","date":"2016-06-15T04:04:58.000Z","abbrlink":"2d244d693a41ec5f","_content":"\n最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。\n\n直接上代码\n\n<!-- more -->\n\n``` objc\n- (BOOL)isValidIdCardNum\n{\n    NSString *value = [self copy];\n    value = [value stringByReplacingOccurrencesOfString:@\"X\" withString:@\"x\"];\n    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n    int length = 0;\n    if (!value) {\n        return NO;\n    }else {\n        length = (int)value.length;\n        if (length != 15 && length !=18) {\n            return NO;\n        }\n    }\n    // 省份代码\n    NSArray *areasArray =@[@\"11\", @\"12\", @\"13\", @\"14\", @\"15\", @\"21\", @\"22\", @\"23\", @\"31\", @\"32\", @\"33\", @\"34\", @\"35\", @\"36\", @\"37\", @\"41\", @\"42\", @\"43\", @\"44\", @\"45\", @\"46\", @\"50\", @\"51\", @\"52\", @\"53\", @\"54\", @\"61\", @\"62\", @\"63\", @\"64\", @\"65\", @\"71\", @\"81\", @\"82\", @\"91\"];\n    NSString *valueStart2 = [value substringToIndex:2];\n    BOOL areaFlag = NO;\n    for (NSString *areaCode in areasArray) {\n        if ([areaCode isEqualToString:valueStart2]) {\n            areaFlag = YES;\n            break;\n        }\n    }\n    if (!areaFlag) {\n        return NO;\n    }\n    NSRegularExpression *regularExpression;\n    NSUInteger numberofMatch;\n    int year = 0;\n    switch (length) {\n        case 15:\n            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;\n            if (year % 4 ==0 || (year % 100 ==0 && year % 4 ==0)) {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$\"                   options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n            }else {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$\"           options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n            }\n            numberofMatch = [regularExpression numberOfMatchesInString:value options:NSMatchingReportProgress range:NSMakeRange(0, value.length)];\n            if(numberofMatch > 0) {\n                return YES;\n            }else {\n                return NO;\n            }\n        case 18:\n            year = [value substringWithRange:NSMakeRange(6,4)].intValue;\n            if (year % 4 ==0 || (year % 100 ==0 && year % 4 ==0)) {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}19|20[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$\"options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n                \n            }else {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}19|20[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$\"\n                                                                         options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n            }\n            numberofMatch = [regularExpression numberOfMatchesInString:value options:NSMatchingReportProgress range:NSMakeRange(0, value.length)];\n            if(numberofMatch > 0) {\n                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;\n                int Y = S % 11;\n                NSString *M = @\"F\";\n                NSString *JYM = @\"10X98765432\";\n                M = [JYM substringWithRange:NSMakeRange(Y,1)]; // 判断校验位\n                if ([M isEqualToString:[[value substringWithRange:NSMakeRange(17,1)] uppercaseString]]) {\n                    return YES;// 检测ID的校验位\n                }else {\n                    return NO;\n                }\n            }else {\n                return NO;\n            }\n            \n        default:\n            return NO;\n    }\n    return NO;\n}\n```\n\n上面的代码验证十分全面。","source":"_posts/Objective-C身份证验证实现.md","raw":"---\ntitle: Objective-C身份证验证实现\ndate: 2016-06-15 12:04:58\ntags:\n  - 算法\n  - iOS\ncategories: 经验积累\nabbrlink: 2d244d693a41ec5f\n---\n\n最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。\n\n直接上代码\n\n<!-- more -->\n\n``` objc\n- (BOOL)isValidIdCardNum\n{\n    NSString *value = [self copy];\n    value = [value stringByReplacingOccurrencesOfString:@\"X\" withString:@\"x\"];\n    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];\n    int length = 0;\n    if (!value) {\n        return NO;\n    }else {\n        length = (int)value.length;\n        if (length != 15 && length !=18) {\n            return NO;\n        }\n    }\n    // 省份代码\n    NSArray *areasArray =@[@\"11\", @\"12\", @\"13\", @\"14\", @\"15\", @\"21\", @\"22\", @\"23\", @\"31\", @\"32\", @\"33\", @\"34\", @\"35\", @\"36\", @\"37\", @\"41\", @\"42\", @\"43\", @\"44\", @\"45\", @\"46\", @\"50\", @\"51\", @\"52\", @\"53\", @\"54\", @\"61\", @\"62\", @\"63\", @\"64\", @\"65\", @\"71\", @\"81\", @\"82\", @\"91\"];\n    NSString *valueStart2 = [value substringToIndex:2];\n    BOOL areaFlag = NO;\n    for (NSString *areaCode in areasArray) {\n        if ([areaCode isEqualToString:valueStart2]) {\n            areaFlag = YES;\n            break;\n        }\n    }\n    if (!areaFlag) {\n        return NO;\n    }\n    NSRegularExpression *regularExpression;\n    NSUInteger numberofMatch;\n    int year = 0;\n    switch (length) {\n        case 15:\n            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;\n            if (year % 4 ==0 || (year % 100 ==0 && year % 4 ==0)) {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$\"                   options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n            }else {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$\"           options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n            }\n            numberofMatch = [regularExpression numberOfMatchesInString:value options:NSMatchingReportProgress range:NSMakeRange(0, value.length)];\n            if(numberofMatch > 0) {\n                return YES;\n            }else {\n                return NO;\n            }\n        case 18:\n            year = [value substringWithRange:NSMakeRange(6,4)].intValue;\n            if (year % 4 ==0 || (year % 100 ==0 && year % 4 ==0)) {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}19|20[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$\"options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n                \n            }else {\n                regularExpression = [[NSRegularExpression alloc] initWithPattern:@\"^[1-9][0-9]{5}19|20[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$\"\n                                                                         options:NSRegularExpressionCaseInsensitive error:nil];// 测试出生日期的合法性\n            }\n            numberofMatch = [regularExpression numberOfMatchesInString:value options:NSMatchingReportProgress range:NSMakeRange(0, value.length)];\n            if(numberofMatch > 0) {\n                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;\n                int Y = S % 11;\n                NSString *M = @\"F\";\n                NSString *JYM = @\"10X98765432\";\n                M = [JYM substringWithRange:NSMakeRange(Y,1)]; // 判断校验位\n                if ([M isEqualToString:[[value substringWithRange:NSMakeRange(17,1)] uppercaseString]]) {\n                    return YES;// 检测ID的校验位\n                }else {\n                    return NO;\n                }\n            }else {\n                return NO;\n            }\n            \n        default:\n            return NO;\n    }\n    return NO;\n}\n```\n\n上面的代码验证十分全面。","slug":"Objective-C身份证验证实现","published":1,"updated":"2022-05-19T03:13:11.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenu0024l1l318y1hjre","content":"<p>最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。</p>\n<p>直接上代码</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">BOOL</span>)isValidIdCardNum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *value = [<span class=\"keyword\">self</span> <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    value = [value stringByReplacingOccurrencesOfString:<span class=\"string\">@&quot;X&quot;</span> withString:<span class=\"string\">@&quot;x&quot;</span>];</span><br><span class=\"line\">    value = [value stringByTrimmingCharactersInSet:[<span class=\"built_in\">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]];</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        length = (<span class=\"type\">int</span>)value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length != <span class=\"number\">15</span> &amp;&amp; length !=<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省份代码</span></span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *areasArray =@[<span class=\"string\">@&quot;11&quot;</span>, <span class=\"string\">@&quot;12&quot;</span>, <span class=\"string\">@&quot;13&quot;</span>, <span class=\"string\">@&quot;14&quot;</span>, <span class=\"string\">@&quot;15&quot;</span>, <span class=\"string\">@&quot;21&quot;</span>, <span class=\"string\">@&quot;22&quot;</span>, <span class=\"string\">@&quot;23&quot;</span>, <span class=\"string\">@&quot;31&quot;</span>, <span class=\"string\">@&quot;32&quot;</span>, <span class=\"string\">@&quot;33&quot;</span>, <span class=\"string\">@&quot;34&quot;</span>, <span class=\"string\">@&quot;35&quot;</span>, <span class=\"string\">@&quot;36&quot;</span>, <span class=\"string\">@&quot;37&quot;</span>, <span class=\"string\">@&quot;41&quot;</span>, <span class=\"string\">@&quot;42&quot;</span>, <span class=\"string\">@&quot;43&quot;</span>, <span class=\"string\">@&quot;44&quot;</span>, <span class=\"string\">@&quot;45&quot;</span>, <span class=\"string\">@&quot;46&quot;</span>, <span class=\"string\">@&quot;50&quot;</span>, <span class=\"string\">@&quot;51&quot;</span>, <span class=\"string\">@&quot;52&quot;</span>, <span class=\"string\">@&quot;53&quot;</span>, <span class=\"string\">@&quot;54&quot;</span>, <span class=\"string\">@&quot;61&quot;</span>, <span class=\"string\">@&quot;62&quot;</span>, <span class=\"string\">@&quot;63&quot;</span>, <span class=\"string\">@&quot;64&quot;</span>, <span class=\"string\">@&quot;65&quot;</span>, <span class=\"string\">@&quot;71&quot;</span>, <span class=\"string\">@&quot;81&quot;</span>, <span class=\"string\">@&quot;82&quot;</span>, <span class=\"string\">@&quot;91&quot;</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *valueStart2 = [value substringToIndex:<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> areaFlag = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *areaCode <span class=\"keyword\">in</span> areasArray) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class=\"line\">            areaFlag = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areaFlag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">NSRegularExpression</span> *regularExpression;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> numberofMatch;</span><br><span class=\"line\">    <span class=\"type\">int</span> year = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">15</span>:</span><br><span class=\"line\">            year = [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">2</span>)].intValue +<span class=\"number\">1900</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> ==<span class=\"number\">0</span> || (year % <span class=\"number\">100</span> ==<span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">4</span> ==<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</span>                   options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</span>           options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class=\"built_in\">NSMatchingReportProgress</span> range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, value.length)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numberofMatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">18</span>:</span><br><span class=\"line\">            year = [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">4</span>)].intValue;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> ==<span class=\"number\">0</span> || (year % <span class=\"number\">100</span> ==<span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">4</span> ==<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;19|20[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span>options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;19|20[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span></span><br><span class=\"line\">                                                                         options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class=\"built_in\">NSMatchingReportProgress</span> range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, value.length)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numberofMatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> S = ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">10</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">7</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">11</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">9</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">12</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">10</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">3</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">13</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">5</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">4</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">14</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">8</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">15</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">4</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">16</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">2</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">7</span>,<span class=\"number\">1</span>)].intValue *<span class=\"number\">1</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>,<span class=\"number\">1</span>)].intValue *<span class=\"number\">6</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">9</span>,<span class=\"number\">1</span>)].intValue *<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> Y = S % <span class=\"number\">11</span>;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *M = <span class=\"string\">@&quot;F&quot;</span>;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *JYM = <span class=\"string\">@&quot;10X98765432&quot;</span>;</span><br><span class=\"line\">                M = [JYM substringWithRange:<span class=\"built_in\">NSMakeRange</span>(Y,<span class=\"number\">1</span>)]; <span class=\"comment\">// 判断校验位</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ([M isEqualToString:[[value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">17</span>,<span class=\"number\">1</span>)] uppercaseString]]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;<span class=\"comment\">// 检测ID的校验位</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码验证十分全面。</p>\n","site":{"data":{}},"excerpt":"<p>最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。</p>\n<p>直接上代码</p>","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">BOOL</span>)isValidIdCardNum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *value = [<span class=\"keyword\">self</span> <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    value = [value stringByReplacingOccurrencesOfString:<span class=\"string\">@&quot;X&quot;</span> withString:<span class=\"string\">@&quot;x&quot;</span>];</span><br><span class=\"line\">    value = [value stringByTrimmingCharactersInSet:[<span class=\"built_in\">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]];</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        length = (<span class=\"type\">int</span>)value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length != <span class=\"number\">15</span> &amp;&amp; length !=<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省份代码</span></span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *areasArray =@[<span class=\"string\">@&quot;11&quot;</span>, <span class=\"string\">@&quot;12&quot;</span>, <span class=\"string\">@&quot;13&quot;</span>, <span class=\"string\">@&quot;14&quot;</span>, <span class=\"string\">@&quot;15&quot;</span>, <span class=\"string\">@&quot;21&quot;</span>, <span class=\"string\">@&quot;22&quot;</span>, <span class=\"string\">@&quot;23&quot;</span>, <span class=\"string\">@&quot;31&quot;</span>, <span class=\"string\">@&quot;32&quot;</span>, <span class=\"string\">@&quot;33&quot;</span>, <span class=\"string\">@&quot;34&quot;</span>, <span class=\"string\">@&quot;35&quot;</span>, <span class=\"string\">@&quot;36&quot;</span>, <span class=\"string\">@&quot;37&quot;</span>, <span class=\"string\">@&quot;41&quot;</span>, <span class=\"string\">@&quot;42&quot;</span>, <span class=\"string\">@&quot;43&quot;</span>, <span class=\"string\">@&quot;44&quot;</span>, <span class=\"string\">@&quot;45&quot;</span>, <span class=\"string\">@&quot;46&quot;</span>, <span class=\"string\">@&quot;50&quot;</span>, <span class=\"string\">@&quot;51&quot;</span>, <span class=\"string\">@&quot;52&quot;</span>, <span class=\"string\">@&quot;53&quot;</span>, <span class=\"string\">@&quot;54&quot;</span>, <span class=\"string\">@&quot;61&quot;</span>, <span class=\"string\">@&quot;62&quot;</span>, <span class=\"string\">@&quot;63&quot;</span>, <span class=\"string\">@&quot;64&quot;</span>, <span class=\"string\">@&quot;65&quot;</span>, <span class=\"string\">@&quot;71&quot;</span>, <span class=\"string\">@&quot;81&quot;</span>, <span class=\"string\">@&quot;82&quot;</span>, <span class=\"string\">@&quot;91&quot;</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *valueStart2 = [value substringToIndex:<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> areaFlag = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *areaCode <span class=\"keyword\">in</span> areasArray) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class=\"line\">            areaFlag = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areaFlag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">NSRegularExpression</span> *regularExpression;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> numberofMatch;</span><br><span class=\"line\">    <span class=\"type\">int</span> year = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">15</span>:</span><br><span class=\"line\">            year = [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">2</span>)].intValue +<span class=\"number\">1900</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> ==<span class=\"number\">0</span> || (year % <span class=\"number\">100</span> ==<span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">4</span> ==<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</span>                   options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</span>           options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class=\"built_in\">NSMatchingReportProgress</span> range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, value.length)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numberofMatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">18</span>:</span><br><span class=\"line\">            year = [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">4</span>)].intValue;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> ==<span class=\"number\">0</span> || (year % <span class=\"number\">100</span> ==<span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">4</span> ==<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;19|20[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span>options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@&quot;^[1-9][0-9]&#123;5&#125;19|20[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</span></span><br><span class=\"line\">                                                                         options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class=\"built_in\">NSMatchingReportProgress</span> range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, value.length)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numberofMatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> S = ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">10</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">7</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">11</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">9</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">12</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">10</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">3</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">13</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">5</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">4</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">14</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">8</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">15</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">4</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">1</span>)].intValue + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">16</span>,<span class=\"number\">1</span>)].intValue) *<span class=\"number\">2</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">7</span>,<span class=\"number\">1</span>)].intValue *<span class=\"number\">1</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>,<span class=\"number\">1</span>)].intValue *<span class=\"number\">6</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">9</span>,<span class=\"number\">1</span>)].intValue *<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> Y = S % <span class=\"number\">11</span>;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *M = <span class=\"string\">@&quot;F&quot;</span>;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *JYM = <span class=\"string\">@&quot;10X98765432&quot;</span>;</span><br><span class=\"line\">                M = [JYM substringWithRange:<span class=\"built_in\">NSMakeRange</span>(Y,<span class=\"number\">1</span>)]; <span class=\"comment\">// 判断校验位</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ([M isEqualToString:[[value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">17</span>,<span class=\"number\">1</span>)] uppercaseString]]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;<span class=\"comment\">// 检测ID的校验位</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码验证十分全面。</p>"},{"title":"Objc常用关键字的使用与区别","date":"2016-03-23T02:17:12.000Z","abbrlink":"3e1fbb3521ce224a","_content":"\n虽然接触iOS已经很久了，但是对于objc中常见的关键字还经常处于傻傻分不清楚的状态。遇到最多的情况就是在申明一个属性的时候，比如：\n``` objc\n@propperty (?,?) ?*!;\n...............\n............\n.........\n......\n```\n就是这里，每次在这里的时候都不知道，怎么去申明他的关键字。这个看起来简单（弄明白了确实也是很简单的），但是如果没有系统的去区分这些关键字很容易混淆。\n所以今天通过自己的一些积累以及在网上总结的一些资料，给自己总结一下，主要作为自己对iOS学习的一个小小的总结。\n\nOC中常见的关键字有copy,assign,strong,retain,weak,readonly,nonatomic,atomic。\n这篇文章主要从这几个关键字的含义和简单的使用以及iOS开发中使用的时候的一些区别来进行总结。（看似简单但却非常重要）\n\n<!-- more -->\n\n## 含义\n### copy\n创建一个索引计数为1的对象,释放掉原来的对象。复制内容（深复制），如果调用copy的是数组，则为指针复制（浅复制），仅仅复制子元素的指针。copy常常用来修饰NSString，NSMutableArray和Block。\n``` objc\n@property  (nonatomic,copy) NSString  *title;\n@property (nonatomic, copy) NSMutableArray *myArray;\n@property (nonatomic, copy) void(^myBlock)();\n```\n### assign \n简单的赋值，不会更改索引计数，主要是对基本数据类型使用。eg：（NSInteger，CGFloat和C语言的int,float, double,char等）\n``` objc\n@property (nonatomic, assign) int n;\n@property (nonatomic, assign) BOOL isOK;\n@property (nonatomic, assign) CGFloat width;\n@property (nonatomic, assign) CGPoint height;\n```\n### retain\n释放旧的对象，将旧对象的值赋予输入对象并将输入对象的索引计数＋1，主要应用与NSObject与其子类中。 retain是指针复制（浅复制），引用计数加1，而不会导致内容被复制。\n``` objc\n@property  (nonatomic, retain) UIColor *myColor;\n\n- (void)setName:(NSString *)newName {\n    [newName retain];\n    [name release];  \n    name = newName;  \n}\n\n```\n\n### strong\n相当于retain，strong在ARC环境下为默认属性类型。\n``` objc\n@property (nonatomic,readwrite,strong) NSString *title;\n@property (strong, nonatomic) UIViewController *viewController;\n@property (nonatomic,  strong) id childObject;\n```\n\n### weak\n取代之前的assign，对象销毁之后会自动置为nil，防止野指针。\nassign不能自动置为nil，需要手动置为nil。\ndelegate基本总是使用weak，以防止循环引用。特殊情况是，如果希望在dealloc中调用delegate的某些方法进行释放，此时如果使用weak将引起异常，因为此时已经是nil了，那么采用assign更为合适。\n``` objc\n@property  (weak, nonatomic) IBOutlet UIButton *myButton;//处于最顶层的IBOutlet应该为strong\n@property (nonatomic, weak) id parentObject;\n@property(nonatomic, readwrite, weak) id  <MyDelegate> delegate;\n@property (nonatomic, weak) NSObject <SomeDelegate> *delegate;\n```\n\n### readonly\n此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在@implementation中只需要一个读取器。或者如果你使用@synthesize关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。\n\n### readwrite\n此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在@implementation中实现。如果使用@synthesize关键字，读取器和设置器都会被解析。\n\n## 使用区别\n\n### copy和retain\n1. copy其实是建立了一个相同的对象，而retain不是；\n2. copy是内容拷贝，retain是指针拷贝；\n3. copy是内容的拷贝 ,对于像NSString的确是这样，但是如果copy的是一个NSArray呢?这时只是copy了指向array中相对应元素的指针.这便是所谓的\"浅复制\".\n4. copy的情况：NSString *newPt = [pt copy];\n此时会在堆上重新开辟一段内存存放@\"abc\" 比如0X1122 内容为@\"abc 同时会在栈上为newPt分配空间 比如地址：0Xaacc 内容为0X1122 因此retainCount增加1供newPt来管理0X1122这段内存；\n\n### assign与retain\n1. assign: 简单赋值，不更改索引计数；\n2. assign的情况：NSString *newPt = [pt assing];\n此时newPt和pt完全相同 地址都是0Xaaaa 内容为0X1111 即newPt只是pt的别名，对任何一个操作就等于对另一个操作， 因此retainCount不需要增加；\n3. assign就是直接赋值；\n4. retain使用了引用计数，retain引起引用计数加1, release引起引用计数减1，当引用计数为0时，dealloc函数被调用，内存被回收；\n5. retain的情况：NSString *newPt = [pt retain];\n此时newPt的地址不再为0Xaaaa，可能为0Xaabb 但是内容依然为0X1111。 因此newPt 和 pt 都可以管理\"abc\"所在的内存，因此 retainCount需要增加1；\n\n### readonly与readwrite\n1. readonly：只产生简单的getter,没有setter。\n2. readwrite：同时产生setter\\getter方法\n\n### nonatomic与atomic\n1. nonatomic非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问；\n2. 成员变量的@property属性时，默认为atomic，提供多线程安全。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果；\n### weak and strong property (强引用和弱引用的区别)\n3. 比如setter函数里面改变两个成员变量，如果你用nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态，这样取到的东西会有问题，就是不完整的。当然如果不需要多线程支持的话，用nonatomic就够了，因为不涉及到线程锁的操作，所以它执行率相对快些。\n4. atomic的意思就是setter/getter这个函数，是一个原语操作。如果有多个线程同时调用setter的话，不会出现某一个线程执行完setter全部语句之前，另一个线程开始执行setter情况，相当于函数头尾加了锁一样，可以保证数据的完整性。nonatomic不保证setter/getter的原语行，所以你可能会取到不完整的东西。因此，在多线程的环境下原子操作是非常必要的，否则有可能会引起错误的结果。\n\n### weak与strong\n1. weak 和 strong 属性只有在你打开ARC时才会被要求使用，这时你是不能使用retain release autorelease 操作的，因为ARC会自动为你做好这些操作，但是你需要在对象属性上使用weak 和strong,其中strong就相当于retain属性，而weak相当于assign。\n2. 只有一种情况你需要使用weak（默认是strong），就是为了避免retain cycles（就是父类中含有子类{父类retain了子类}，子类中又调用了父类{子类又retain了父类}，这样都无法release）\n3. 声明为weak的指针，指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。","source":"_posts/Objective-C常用关键字的使用与区别.md","raw":"---\ntitle: objc常用关键字的使用与区别\ndate: 2016-03-23 10:17:12\ntags:\n  - objc\ncategories: 经验积累\nabbrlink: 3e1fbb3521ce224a\n---\n\n虽然接触iOS已经很久了，但是对于objc中常见的关键字还经常处于傻傻分不清楚的状态。遇到最多的情况就是在申明一个属性的时候，比如：\n``` objc\n@propperty (?,?) ?*!;\n...............\n............\n.........\n......\n```\n就是这里，每次在这里的时候都不知道，怎么去申明他的关键字。这个看起来简单（弄明白了确实也是很简单的），但是如果没有系统的去区分这些关键字很容易混淆。\n所以今天通过自己的一些积累以及在网上总结的一些资料，给自己总结一下，主要作为自己对iOS学习的一个小小的总结。\n\nOC中常见的关键字有copy,assign,strong,retain,weak,readonly,nonatomic,atomic。\n这篇文章主要从这几个关键字的含义和简单的使用以及iOS开发中使用的时候的一些区别来进行总结。（看似简单但却非常重要）\n\n<!-- more -->\n\n## 含义\n### copy\n创建一个索引计数为1的对象,释放掉原来的对象。复制内容（深复制），如果调用copy的是数组，则为指针复制（浅复制），仅仅复制子元素的指针。copy常常用来修饰NSString，NSMutableArray和Block。\n``` objc\n@property  (nonatomic,copy) NSString  *title;\n@property (nonatomic, copy) NSMutableArray *myArray;\n@property (nonatomic, copy) void(^myBlock)();\n```\n### assign \n简单的赋值，不会更改索引计数，主要是对基本数据类型使用。eg：（NSInteger，CGFloat和C语言的int,float, double,char等）\n``` objc\n@property (nonatomic, assign) int n;\n@property (nonatomic, assign) BOOL isOK;\n@property (nonatomic, assign) CGFloat width;\n@property (nonatomic, assign) CGPoint height;\n```\n### retain\n释放旧的对象，将旧对象的值赋予输入对象并将输入对象的索引计数＋1，主要应用与NSObject与其子类中。 retain是指针复制（浅复制），引用计数加1，而不会导致内容被复制。\n``` objc\n@property  (nonatomic, retain) UIColor *myColor;\n\n- (void)setName:(NSString *)newName {\n    [newName retain];\n    [name release];  \n    name = newName;  \n}\n\n```\n\n### strong\n相当于retain，strong在ARC环境下为默认属性类型。\n``` objc\n@property (nonatomic,readwrite,strong) NSString *title;\n@property (strong, nonatomic) UIViewController *viewController;\n@property (nonatomic,  strong) id childObject;\n```\n\n### weak\n取代之前的assign，对象销毁之后会自动置为nil，防止野指针。\nassign不能自动置为nil，需要手动置为nil。\ndelegate基本总是使用weak，以防止循环引用。特殊情况是，如果希望在dealloc中调用delegate的某些方法进行释放，此时如果使用weak将引起异常，因为此时已经是nil了，那么采用assign更为合适。\n``` objc\n@property  (weak, nonatomic) IBOutlet UIButton *myButton;//处于最顶层的IBOutlet应该为strong\n@property (nonatomic, weak) id parentObject;\n@property(nonatomic, readwrite, weak) id  <MyDelegate> delegate;\n@property (nonatomic, weak) NSObject <SomeDelegate> *delegate;\n```\n\n### readonly\n此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在@implementation中只需要一个读取器。或者如果你使用@synthesize关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。\n\n### readwrite\n此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在@implementation中实现。如果使用@synthesize关键字，读取器和设置器都会被解析。\n\n## 使用区别\n\n### copy和retain\n1. copy其实是建立了一个相同的对象，而retain不是；\n2. copy是内容拷贝，retain是指针拷贝；\n3. copy是内容的拷贝 ,对于像NSString的确是这样，但是如果copy的是一个NSArray呢?这时只是copy了指向array中相对应元素的指针.这便是所谓的\"浅复制\".\n4. copy的情况：NSString *newPt = [pt copy];\n此时会在堆上重新开辟一段内存存放@\"abc\" 比如0X1122 内容为@\"abc 同时会在栈上为newPt分配空间 比如地址：0Xaacc 内容为0X1122 因此retainCount增加1供newPt来管理0X1122这段内存；\n\n### assign与retain\n1. assign: 简单赋值，不更改索引计数；\n2. assign的情况：NSString *newPt = [pt assing];\n此时newPt和pt完全相同 地址都是0Xaaaa 内容为0X1111 即newPt只是pt的别名，对任何一个操作就等于对另一个操作， 因此retainCount不需要增加；\n3. assign就是直接赋值；\n4. retain使用了引用计数，retain引起引用计数加1, release引起引用计数减1，当引用计数为0时，dealloc函数被调用，内存被回收；\n5. retain的情况：NSString *newPt = [pt retain];\n此时newPt的地址不再为0Xaaaa，可能为0Xaabb 但是内容依然为0X1111。 因此newPt 和 pt 都可以管理\"abc\"所在的内存，因此 retainCount需要增加1；\n\n### readonly与readwrite\n1. readonly：只产生简单的getter,没有setter。\n2. readwrite：同时产生setter\\getter方法\n\n### nonatomic与atomic\n1. nonatomic非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问；\n2. 成员变量的@property属性时，默认为atomic，提供多线程安全。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果；\n### weak and strong property (强引用和弱引用的区别)\n3. 比如setter函数里面改变两个成员变量，如果你用nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态，这样取到的东西会有问题，就是不完整的。当然如果不需要多线程支持的话，用nonatomic就够了，因为不涉及到线程锁的操作，所以它执行率相对快些。\n4. atomic的意思就是setter/getter这个函数，是一个原语操作。如果有多个线程同时调用setter的话，不会出现某一个线程执行完setter全部语句之前，另一个线程开始执行setter情况，相当于函数头尾加了锁一样，可以保证数据的完整性。nonatomic不保证setter/getter的原语行，所以你可能会取到不完整的东西。因此，在多线程的环境下原子操作是非常必要的，否则有可能会引起错误的结果。\n\n### weak与strong\n1. weak 和 strong 属性只有在你打开ARC时才会被要求使用，这时你是不能使用retain release autorelease 操作的，因为ARC会自动为你做好这些操作，但是你需要在对象属性上使用weak 和strong,其中strong就相当于retain属性，而weak相当于assign。\n2. 只有一种情况你需要使用weak（默认是strong），就是为了避免retain cycles（就是父类中含有子类{父类retain了子类}，子类中又调用了父类{子类又retain了父类}，这样都无法release）\n3. 声明为weak的指针，指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。","slug":"Objective-C常用关键字的使用与区别","published":1,"updated":"2022-05-19T03:13:11.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenu0028l1l38fiva7gy","content":"<p>虽然接触iOS已经很久了，但是对于objc中常见的关键字还经常处于傻傻分不清楚的状态。遇到最多的情况就是在申明一个属性的时候，比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@propperty (?,?) ?*!;</span><br><span class=\"line\">...............</span><br><span class=\"line\">............</span><br><span class=\"line\">.........</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>就是这里，每次在这里的时候都不知道，怎么去申明他的关键字。这个看起来简单（弄明白了确实也是很简单的），但是如果没有系统的去区分这些关键字很容易混淆。<br>所以今天通过自己的一些积累以及在网上总结的一些资料，给自己总结一下，主要作为自己对iOS学习的一个小小的总结。</p>\n<p>OC中常见的关键字有copy,assign,strong,retain,weak,readonly,nonatomic,atomic。<br>这篇文章主要从这几个关键字的含义和简单的使用以及iOS开发中使用的时候的一些区别来进行总结。（看似简单但却非常重要）</p>\n<span id=\"more\"></span>\n\n<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>创建一个索引计数为1的对象,释放掉原来的对象。复制内容（深复制），如果调用copy的是数组，则为指针复制（浅复制），仅仅复制子元素的指针。copy常常用来修饰NSString，NSMutableArray和Block。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span>  *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSMutableArray</span> *myArray;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"type\">void</span>(^myBlock)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h3><p>简单的赋值，不会更改索引计数，主要是对基本数据类型使用。eg：（NSInteger，CGFloat和C语言的int,float, double,char等）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"type\">BOOL</span> isOK;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> width;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGPoint</span> height;</span><br></pre></td></tr></table></figure>\n<h3 id=\"retain\"><a href=\"#retain\" class=\"headerlink\" title=\"retain\"></a>retain</h3><p>释放旧的对象，将旧对象的值赋予输入对象并将输入对象的索引计数＋1，主要应用与NSObject与其子类中。 retain是指针复制（浅复制），引用计数加1，而不会导致内容被复制。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">UIColor</span> *myColor;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)newName &#123;</span><br><span class=\"line\">    [newName <span class=\"keyword\">retain</span>];</span><br><span class=\"line\">    [name release];  </span><br><span class=\"line\">    name = newName;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"strong\"><a href=\"#strong\" class=\"headerlink\" title=\"strong\"></a>strong</h3><p>相当于retain，strong在ARC环境下为默认属性类型。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readwrite</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIViewController</span> *viewController;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,  <span class=\"keyword\">strong</span>) <span class=\"type\">id</span> childObject;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>取代之前的assign，对象销毁之后会自动置为nil，防止野指针。<br>assign不能自动置为nil，需要手动置为nil。<br>delegate基本总是使用weak，以防止循环引用。特殊情况是，如果希望在dealloc中调用delegate的某些方法进行释放，此时如果使用weak将引起异常，因为此时已经是nil了，那么采用assign更为合适。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *myButton;<span class=\"comment\">//处于最顶层的IBOutlet应该为strong</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"type\">id</span> parentObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readwrite</span>, <span class=\"keyword\">weak</span>) <span class=\"type\">id</span>  &lt;MyDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">NSObject</span> &lt;SomeDelegate&gt; *delegate;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><p>此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在@implementation中只需要一个读取器。或者如果你使用@synthesize关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。</p>\n<h3 id=\"readwrite\"><a href=\"#readwrite\" class=\"headerlink\" title=\"readwrite\"></a>readwrite</h3><p>此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在@implementation中实现。如果使用@synthesize关键字，读取器和设置器都会被解析。</p>\n<h2 id=\"使用区别\"><a href=\"#使用区别\" class=\"headerlink\" title=\"使用区别\"></a>使用区别</h2><h3 id=\"copy和retain\"><a href=\"#copy和retain\" class=\"headerlink\" title=\"copy和retain\"></a>copy和retain</h3><ol>\n<li>copy其实是建立了一个相同的对象，而retain不是；</li>\n<li>copy是内容拷贝，retain是指针拷贝；</li>\n<li>copy是内容的拷贝 ,对于像NSString的确是这样，但是如果copy的是一个NSArray呢?这时只是copy了指向array中相对应元素的指针.这便是所谓的”浅复制”.</li>\n<li>copy的情况：NSString *newPt = [pt copy];<br>此时会在堆上重新开辟一段内存存放@”abc” 比如0X1122 内容为@”abc 同时会在栈上为newPt分配空间 比如地址：0Xaacc 内容为0X1122 因此retainCount增加1供newPt来管理0X1122这段内存；</li>\n</ol>\n<h3 id=\"assign与retain\"><a href=\"#assign与retain\" class=\"headerlink\" title=\"assign与retain\"></a>assign与retain</h3><ol>\n<li>assign: 简单赋值，不更改索引计数；</li>\n<li>assign的情况：NSString *newPt = [pt assing];<br>此时newPt和pt完全相同 地址都是0Xaaaa 内容为0X1111 即newPt只是pt的别名，对任何一个操作就等于对另一个操作， 因此retainCount不需要增加；</li>\n<li>assign就是直接赋值；</li>\n<li>retain使用了引用计数，retain引起引用计数加1, release引起引用计数减1，当引用计数为0时，dealloc函数被调用，内存被回收；</li>\n<li>retain的情况：NSString *newPt = [pt retain];<br>此时newPt的地址不再为0Xaaaa，可能为0Xaabb 但是内容依然为0X1111。 因此newPt 和 pt 都可以管理”abc”所在的内存，因此 retainCount需要增加1；</li>\n</ol>\n<h3 id=\"readonly与readwrite\"><a href=\"#readonly与readwrite\" class=\"headerlink\" title=\"readonly与readwrite\"></a>readonly与readwrite</h3><ol>\n<li>readonly：只产生简单的getter,没有setter。</li>\n<li>readwrite：同时产生setter\\getter方法</li>\n</ol>\n<h3 id=\"nonatomic与atomic\"><a href=\"#nonatomic与atomic\" class=\"headerlink\" title=\"nonatomic与atomic\"></a>nonatomic与atomic</h3><ol>\n<li>nonatomic非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问；</li>\n<li>成员变量的@property属性时，默认为atomic，提供多线程安全。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果；<h3 id=\"weak-and-strong-property-强引用和弱引用的区别\"><a href=\"#weak-and-strong-property-强引用和弱引用的区别\" class=\"headerlink\" title=\"weak and strong property (强引用和弱引用的区别)\"></a>weak and strong property (强引用和弱引用的区别)</h3></li>\n<li>比如setter函数里面改变两个成员变量，如果你用nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态，这样取到的东西会有问题，就是不完整的。当然如果不需要多线程支持的话，用nonatomic就够了，因为不涉及到线程锁的操作，所以它执行率相对快些。</li>\n<li>atomic的意思就是setter/getter这个函数，是一个原语操作。如果有多个线程同时调用setter的话，不会出现某一个线程执行完setter全部语句之前，另一个线程开始执行setter情况，相当于函数头尾加了锁一样，可以保证数据的完整性。nonatomic不保证setter/getter的原语行，所以你可能会取到不完整的东西。因此，在多线程的环境下原子操作是非常必要的，否则有可能会引起错误的结果。</li>\n</ol>\n<h3 id=\"weak与strong\"><a href=\"#weak与strong\" class=\"headerlink\" title=\"weak与strong\"></a>weak与strong</h3><ol>\n<li>weak 和 strong 属性只有在你打开ARC时才会被要求使用，这时你是不能使用retain release autorelease 操作的，因为ARC会自动为你做好这些操作，但是你需要在对象属性上使用weak 和strong,其中strong就相当于retain属性，而weak相当于assign。</li>\n<li>只有一种情况你需要使用weak（默认是strong），就是为了避免retain cycles（就是父类中含有子类{父类retain了子类}，子类中又调用了父类{子类又retain了父类}，这样都无法release）</li>\n<li>声明为weak的指针，指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>虽然接触iOS已经很久了，但是对于objc中常见的关键字还经常处于傻傻分不清楚的状态。遇到最多的情况就是在申明一个属性的时候，比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@propperty (?,?) ?*!;</span><br><span class=\"line\">...............</span><br><span class=\"line\">............</span><br><span class=\"line\">.........</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>就是这里，每次在这里的时候都不知道，怎么去申明他的关键字。这个看起来简单（弄明白了确实也是很简单的），但是如果没有系统的去区分这些关键字很容易混淆。<br>所以今天通过自己的一些积累以及在网上总结的一些资料，给自己总结一下，主要作为自己对iOS学习的一个小小的总结。</p>\n<p>OC中常见的关键字有copy,assign,strong,retain,weak,readonly,nonatomic,atomic。<br>这篇文章主要从这几个关键字的含义和简单的使用以及iOS开发中使用的时候的一些区别来进行总结。（看似简单但却非常重要）</p>","more":"<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>创建一个索引计数为1的对象,释放掉原来的对象。复制内容（深复制），如果调用copy的是数组，则为指针复制（浅复制），仅仅复制子元素的指针。copy常常用来修饰NSString，NSMutableArray和Block。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span>  *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSMutableArray</span> *myArray;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"type\">void</span>(^myBlock)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h3><p>简单的赋值，不会更改索引计数，主要是对基本数据类型使用。eg：（NSInteger，CGFloat和C语言的int,float, double,char等）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"type\">BOOL</span> isOK;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> width;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGPoint</span> height;</span><br></pre></td></tr></table></figure>\n<h3 id=\"retain\"><a href=\"#retain\" class=\"headerlink\" title=\"retain\"></a>retain</h3><p>释放旧的对象，将旧对象的值赋予输入对象并将输入对象的索引计数＋1，主要应用与NSObject与其子类中。 retain是指针复制（浅复制），引用计数加1，而不会导致内容被复制。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">UIColor</span> *myColor;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)newName &#123;</span><br><span class=\"line\">    [newName <span class=\"keyword\">retain</span>];</span><br><span class=\"line\">    [name release];  </span><br><span class=\"line\">    name = newName;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"strong\"><a href=\"#strong\" class=\"headerlink\" title=\"strong\"></a>strong</h3><p>相当于retain，strong在ARC环境下为默认属性类型。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readwrite</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIViewController</span> *viewController;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,  <span class=\"keyword\">strong</span>) <span class=\"type\">id</span> childObject;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>取代之前的assign，对象销毁之后会自动置为nil，防止野指针。<br>assign不能自动置为nil，需要手动置为nil。<br>delegate基本总是使用weak，以防止循环引用。特殊情况是，如果希望在dealloc中调用delegate的某些方法进行释放，此时如果使用weak将引起异常，因为此时已经是nil了，那么采用assign更为合适。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *myButton;<span class=\"comment\">//处于最顶层的IBOutlet应该为strong</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"type\">id</span> parentObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readwrite</span>, <span class=\"keyword\">weak</span>) <span class=\"type\">id</span>  &lt;MyDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">NSObject</span> &lt;SomeDelegate&gt; *delegate;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><p>此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在@implementation中只需要一个读取器。或者如果你使用@synthesize关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。</p>\n<h3 id=\"readwrite\"><a href=\"#readwrite\" class=\"headerlink\" title=\"readwrite\"></a>readwrite</h3><p>此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在@implementation中实现。如果使用@synthesize关键字，读取器和设置器都会被解析。</p>\n<h2 id=\"使用区别\"><a href=\"#使用区别\" class=\"headerlink\" title=\"使用区别\"></a>使用区别</h2><h3 id=\"copy和retain\"><a href=\"#copy和retain\" class=\"headerlink\" title=\"copy和retain\"></a>copy和retain</h3><ol>\n<li>copy其实是建立了一个相同的对象，而retain不是；</li>\n<li>copy是内容拷贝，retain是指针拷贝；</li>\n<li>copy是内容的拷贝 ,对于像NSString的确是这样，但是如果copy的是一个NSArray呢?这时只是copy了指向array中相对应元素的指针.这便是所谓的”浅复制”.</li>\n<li>copy的情况：NSString *newPt = [pt copy];<br>此时会在堆上重新开辟一段内存存放@”abc” 比如0X1122 内容为@”abc 同时会在栈上为newPt分配空间 比如地址：0Xaacc 内容为0X1122 因此retainCount增加1供newPt来管理0X1122这段内存；</li>\n</ol>\n<h3 id=\"assign与retain\"><a href=\"#assign与retain\" class=\"headerlink\" title=\"assign与retain\"></a>assign与retain</h3><ol>\n<li>assign: 简单赋值，不更改索引计数；</li>\n<li>assign的情况：NSString *newPt = [pt assing];<br>此时newPt和pt完全相同 地址都是0Xaaaa 内容为0X1111 即newPt只是pt的别名，对任何一个操作就等于对另一个操作， 因此retainCount不需要增加；</li>\n<li>assign就是直接赋值；</li>\n<li>retain使用了引用计数，retain引起引用计数加1, release引起引用计数减1，当引用计数为0时，dealloc函数被调用，内存被回收；</li>\n<li>retain的情况：NSString *newPt = [pt retain];<br>此时newPt的地址不再为0Xaaaa，可能为0Xaabb 但是内容依然为0X1111。 因此newPt 和 pt 都可以管理”abc”所在的内存，因此 retainCount需要增加1；</li>\n</ol>\n<h3 id=\"readonly与readwrite\"><a href=\"#readonly与readwrite\" class=\"headerlink\" title=\"readonly与readwrite\"></a>readonly与readwrite</h3><ol>\n<li>readonly：只产生简单的getter,没有setter。</li>\n<li>readwrite：同时产生setter\\getter方法</li>\n</ol>\n<h3 id=\"nonatomic与atomic\"><a href=\"#nonatomic与atomic\" class=\"headerlink\" title=\"nonatomic与atomic\"></a>nonatomic与atomic</h3><ol>\n<li>nonatomic非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问；</li>\n<li>成员变量的@property属性时，默认为atomic，提供多线程安全。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果；<h3 id=\"weak-and-strong-property-强引用和弱引用的区别\"><a href=\"#weak-and-strong-property-强引用和弱引用的区别\" class=\"headerlink\" title=\"weak and strong property (强引用和弱引用的区别)\"></a>weak and strong property (强引用和弱引用的区别)</h3></li>\n<li>比如setter函数里面改变两个成员变量，如果你用nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态，这样取到的东西会有问题，就是不完整的。当然如果不需要多线程支持的话，用nonatomic就够了，因为不涉及到线程锁的操作，所以它执行率相对快些。</li>\n<li>atomic的意思就是setter/getter这个函数，是一个原语操作。如果有多个线程同时调用setter的话，不会出现某一个线程执行完setter全部语句之前，另一个线程开始执行setter情况，相当于函数头尾加了锁一样，可以保证数据的完整性。nonatomic不保证setter/getter的原语行，所以你可能会取到不完整的东西。因此，在多线程的环境下原子操作是非常必要的，否则有可能会引起错误的结果。</li>\n</ol>\n<h3 id=\"weak与strong\"><a href=\"#weak与strong\" class=\"headerlink\" title=\"weak与strong\"></a>weak与strong</h3><ol>\n<li>weak 和 strong 属性只有在你打开ARC时才会被要求使用，这时你是不能使用retain release autorelease 操作的，因为ARC会自动为你做好这些操作，但是你需要在对象属性上使用weak 和strong,其中strong就相当于retain属性，而weak相当于assign。</li>\n<li>只有一种情况你需要使用weak（默认是strong），就是为了避免retain cycles（就是父类中含有子类{父类retain了子类}，子类中又调用了父类{子类又retain了父类}，这样都无法release）</li>\n<li>声明为weak的指针，指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。</li>\n</ol>"},{"title":"Swift学习笔记之函数","date":"2016-05-31T10:19:17.000Z","abbrlink":"f3708cd2fbea5c86","_content":"\n函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。\n\nSwift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。\n\n在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。\n\n<!-- more -->\n\n## 函数的定义与调用\n当你定义一个函数时，你可以定义一个或多个有名字和类型的值，作为函数的输入（称为参数），也可以定义某种类型的值作为函数执行结束的输出（称为返回类型）。\n\n每个函数有个函数名，用来描述函数执行的任务，要使用一个函数时，你用函数名“调用”，并传给它匹配的输入值（称作实参）。一个函数的实参必须与函数表里的顺序一致。\n\n下面有个例子函数叫做`sayHello(_:)`,之所以叫这个名字，是因为这个函数用一个人的名字当做输入，并返回给这个人的问候语。为了完成这个任务，你定义一个输入参数，一个叫做`personName`的`String`值，和一个包含给这个人的问候语的`String`类型的返回值。\n\n``` swift\nfunc sayHello(personName: String) -> String {\n    let greeting = \"Hello, \" + personName + \"!\"\n    return greeting\n}\n```\n所有这些信息汇总起来成为函数的定义，并以`func`作为前缀。指定函数返回类型时，用返回箭头`->`后跟返回类型的名称的方式来表示。\n\n该定义描述了函数做什么，它期望接受什么和执行结束时它返回的结果类型是什么，这样的定义使得函数可以在别的地方以一种清晰的方式被调用：\n``` swift\nprint(sayHello(\"Anna\"))\n// prints \"Hello, Anna!\"\nprint(sayHello(\"Brian\"))\n// prints \"Hello, Brian!\"\n```\n### 函数参数和返回值\n函数参数与返回值在Swift中极为灵活，你可以定义任何类型的函数，包括从只带一个未名参数的简单函数到复杂的带有表达性参数名和不同参数选项的复杂函数。\n\n### 无参函数\n函数可以没有参数。下面这个函数就是一个无参函数，当被调用时，它返回固定的 `String` 消息：\n``` swift\nfunc sayHelloWorld() -> String {\n    return \"hello, world\"\n}\nprint(sayHelloWorld())\n// prints \"hello, world\"\n```\n> 尽管这个函数没有参数，但是定义中在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。\n\n### 多参函数\n函数可以有多种输入参数，这些参数被包含在函数的括号之中，以逗号分隔。\n这个函数用一个人名和是否已经打过招呼作为输入，并返回对这个人的适当问候语:\n``` swift\nfunc sayHello(personName: String, alreadyGreeted: Bool) -> String {\n    if alreadyGreeted {\n        return sayHelloAgain(personName)\n    } else {\n        return sayHello(personName)\n    }\n}\nprint(sayHello(\"Tim\", alreadyGreeted: true))\n// prints \"Hello again, Tim!\"\n```\n### 无返回值函数\n函数可以没有返回值。下面是`sayHello(_:)`函数的另一个版本，叫`sayGoodbye(_:)`，这个函数直接输出`String`值，而不是返回它：\n``` swift\nfunc sayGoodbye(personName: String) {\n    print(\"Goodbye, \\(personName)!\")\n}\nsayGoodbye(\"Dave\")\n// prints \"Goodbye, Dave!\"\n```\n因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头`->`和返回类型。\n> 注：严格上来说，虽然没有返回值被定义，`sayGoodbye(_:)`函数依然返回了值。没有定义返回类型的函数会返回特殊的值，叫做`Void`。它是一个空的元组，没有任何元素，可以写成`()`。","source":"_posts/Swift学习笔记之函数.md","raw":"---\ntitle: Swift学习笔记之函数\ndate: 2016-05-31 18:19:17\ntags:\n  - Swift\ncategories: Swift学习笔记\nabbrlink: f3708cd2fbea5c86\n---\n\n函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。\n\nSwift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。\n\n在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。\n\n<!-- more -->\n\n## 函数的定义与调用\n当你定义一个函数时，你可以定义一个或多个有名字和类型的值，作为函数的输入（称为参数），也可以定义某种类型的值作为函数执行结束的输出（称为返回类型）。\n\n每个函数有个函数名，用来描述函数执行的任务，要使用一个函数时，你用函数名“调用”，并传给它匹配的输入值（称作实参）。一个函数的实参必须与函数表里的顺序一致。\n\n下面有个例子函数叫做`sayHello(_:)`,之所以叫这个名字，是因为这个函数用一个人的名字当做输入，并返回给这个人的问候语。为了完成这个任务，你定义一个输入参数，一个叫做`personName`的`String`值，和一个包含给这个人的问候语的`String`类型的返回值。\n\n``` swift\nfunc sayHello(personName: String) -> String {\n    let greeting = \"Hello, \" + personName + \"!\"\n    return greeting\n}\n```\n所有这些信息汇总起来成为函数的定义，并以`func`作为前缀。指定函数返回类型时，用返回箭头`->`后跟返回类型的名称的方式来表示。\n\n该定义描述了函数做什么，它期望接受什么和执行结束时它返回的结果类型是什么，这样的定义使得函数可以在别的地方以一种清晰的方式被调用：\n``` swift\nprint(sayHello(\"Anna\"))\n// prints \"Hello, Anna!\"\nprint(sayHello(\"Brian\"))\n// prints \"Hello, Brian!\"\n```\n### 函数参数和返回值\n函数参数与返回值在Swift中极为灵活，你可以定义任何类型的函数，包括从只带一个未名参数的简单函数到复杂的带有表达性参数名和不同参数选项的复杂函数。\n\n### 无参函数\n函数可以没有参数。下面这个函数就是一个无参函数，当被调用时，它返回固定的 `String` 消息：\n``` swift\nfunc sayHelloWorld() -> String {\n    return \"hello, world\"\n}\nprint(sayHelloWorld())\n// prints \"hello, world\"\n```\n> 尽管这个函数没有参数，但是定义中在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。\n\n### 多参函数\n函数可以有多种输入参数，这些参数被包含在函数的括号之中，以逗号分隔。\n这个函数用一个人名和是否已经打过招呼作为输入，并返回对这个人的适当问候语:\n``` swift\nfunc sayHello(personName: String, alreadyGreeted: Bool) -> String {\n    if alreadyGreeted {\n        return sayHelloAgain(personName)\n    } else {\n        return sayHello(personName)\n    }\n}\nprint(sayHello(\"Tim\", alreadyGreeted: true))\n// prints \"Hello again, Tim!\"\n```\n### 无返回值函数\n函数可以没有返回值。下面是`sayHello(_:)`函数的另一个版本，叫`sayGoodbye(_:)`，这个函数直接输出`String`值，而不是返回它：\n``` swift\nfunc sayGoodbye(personName: String) {\n    print(\"Goodbye, \\(personName)!\")\n}\nsayGoodbye(\"Dave\")\n// prints \"Goodbye, Dave!\"\n```\n因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头`->`和返回类型。\n> 注：严格上来说，虽然没有返回值被定义，`sayGoodbye(_:)`函数依然返回了值。没有定义返回类型的函数会返回特殊的值，叫做`Void`。它是一个空的元组，没有任何元素，可以写成`()`。","slug":"Swift学习笔记之函数","published":1,"updated":"2022-05-19T03:13:11.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenv002bl1l3b11u4eom","content":"<p>函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。</p>\n<p>Swift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。</p>\n<p>在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"函数的定义与调用\"><a href=\"#函数的定义与调用\" class=\"headerlink\" title=\"函数的定义与调用\"></a>函数的定义与调用</h2><p>当你定义一个函数时，你可以定义一个或多个有名字和类型的值，作为函数的输入（称为参数），也可以定义某种类型的值作为函数执行结束的输出（称为返回类型）。</p>\n<p>每个函数有个函数名，用来描述函数执行的任务，要使用一个函数时，你用函数名“调用”，并传给它匹配的输入值（称作实参）。一个函数的实参必须与函数表里的顺序一致。</p>\n<p>下面有个例子函数叫做<code>sayHello(_:)</code>,之所以叫这个名字，是因为这个函数用一个人的名字当做输入，并返回给这个人的问候语。为了完成这个任务，你定义一个输入参数，一个叫做<code>personName</code>的<code>String</code>值，和一个包含给这个人的问候语的<code>String</code>类型的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">personName</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> greeting <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, &quot;</span> <span class=\"operator\">+</span> personName <span class=\"operator\">+</span> <span class=\"string\">&quot;!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> greeting</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有这些信息汇总起来成为函数的定义，并以<code>func</code>作为前缀。指定函数返回类型时，用返回箭头<code>-&gt;</code>后跟返回类型的名称的方式来表示。</p>\n<p>该定义描述了函数做什么，它期望接受什么和执行结束时它返回的结果类型是什么，这样的定义使得函数可以在别的地方以一种清晰的方式被调用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">&quot;Anna&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello, Anna!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">&quot;Brian&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello, Brian!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数参数和返回值\"><a href=\"#函数参数和返回值\" class=\"headerlink\" title=\"函数参数和返回值\"></a>函数参数和返回值</h3><p>函数参数与返回值在Swift中极为灵活，你可以定义任何类型的函数，包括从只带一个未名参数的简单函数到复杂的带有表达性参数名和不同参数选项的复杂函数。</p>\n<h3 id=\"无参函数\"><a href=\"#无参函数\" class=\"headerlink\" title=\"无参函数\"></a>无参函数</h3><p>函数可以没有参数。下面这个函数就是一个无参函数，当被调用时，它返回固定的 <code>String</code> 消息：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayHelloWorld</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello, world&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHelloWorld())</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>尽管这个函数没有参数，但是定义中在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。</p>\n</blockquote>\n<h3 id=\"多参函数\"><a href=\"#多参函数\" class=\"headerlink\" title=\"多参函数\"></a>多参函数</h3><p>函数可以有多种输入参数，这些参数被包含在函数的括号之中，以逗号分隔。<br>这个函数用一个人名和是否已经打过招呼作为输入，并返回对这个人的适当问候语:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">personName</span>: <span class=\"type\">String</span>, <span class=\"params\">alreadyGreeted</span>: <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> alreadyGreeted &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sayHelloAgain(personName)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sayHello(personName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">&quot;Tim&quot;</span>, alreadyGreeted: <span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello again, Tim!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"无返回值函数\"><a href=\"#无返回值函数\" class=\"headerlink\" title=\"无返回值函数\"></a>无返回值函数</h3><p>函数可以没有返回值。下面是<code>sayHello(_:)</code>函数的另一个版本，叫<code>sayGoodbye(_:)</code>，这个函数直接输出<code>String</code>值，而不是返回它：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayGoodbye</span>(<span class=\"params\">personName</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Goodbye, <span class=\"subst\">\\(personName)</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayGoodbye(<span class=\"string\">&quot;Dave&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Goodbye, Dave!&quot;</span></span><br></pre></td></tr></table></figure>\n<p>因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头<code>-&gt;</code>和返回类型。</p>\n<blockquote>\n<p>注：严格上来说，虽然没有返回值被定义，<code>sayGoodbye(_:)</code>函数依然返回了值。没有定义返回类型的函数会返回特殊的值，叫做<code>Void</code>。它是一个空的元组，没有任何元素，可以写成<code>()</code>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。</p>\n<p>Swift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。</p>\n<p>在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。</p>","more":"<h2 id=\"函数的定义与调用\"><a href=\"#函数的定义与调用\" class=\"headerlink\" title=\"函数的定义与调用\"></a>函数的定义与调用</h2><p>当你定义一个函数时，你可以定义一个或多个有名字和类型的值，作为函数的输入（称为参数），也可以定义某种类型的值作为函数执行结束的输出（称为返回类型）。</p>\n<p>每个函数有个函数名，用来描述函数执行的任务，要使用一个函数时，你用函数名“调用”，并传给它匹配的输入值（称作实参）。一个函数的实参必须与函数表里的顺序一致。</p>\n<p>下面有个例子函数叫做<code>sayHello(_:)</code>,之所以叫这个名字，是因为这个函数用一个人的名字当做输入，并返回给这个人的问候语。为了完成这个任务，你定义一个输入参数，一个叫做<code>personName</code>的<code>String</code>值，和一个包含给这个人的问候语的<code>String</code>类型的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">personName</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> greeting <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, &quot;</span> <span class=\"operator\">+</span> personName <span class=\"operator\">+</span> <span class=\"string\">&quot;!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> greeting</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有这些信息汇总起来成为函数的定义，并以<code>func</code>作为前缀。指定函数返回类型时，用返回箭头<code>-&gt;</code>后跟返回类型的名称的方式来表示。</p>\n<p>该定义描述了函数做什么，它期望接受什么和执行结束时它返回的结果类型是什么，这样的定义使得函数可以在别的地方以一种清晰的方式被调用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">&quot;Anna&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello, Anna!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">&quot;Brian&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello, Brian!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数参数和返回值\"><a href=\"#函数参数和返回值\" class=\"headerlink\" title=\"函数参数和返回值\"></a>函数参数和返回值</h3><p>函数参数与返回值在Swift中极为灵活，你可以定义任何类型的函数，包括从只带一个未名参数的简单函数到复杂的带有表达性参数名和不同参数选项的复杂函数。</p>\n<h3 id=\"无参函数\"><a href=\"#无参函数\" class=\"headerlink\" title=\"无参函数\"></a>无参函数</h3><p>函数可以没有参数。下面这个函数就是一个无参函数，当被调用时，它返回固定的 <code>String</code> 消息：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayHelloWorld</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello, world&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHelloWorld())</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>尽管这个函数没有参数，但是定义中在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。</p>\n</blockquote>\n<h3 id=\"多参函数\"><a href=\"#多参函数\" class=\"headerlink\" title=\"多参函数\"></a>多参函数</h3><p>函数可以有多种输入参数，这些参数被包含在函数的括号之中，以逗号分隔。<br>这个函数用一个人名和是否已经打过招呼作为输入，并返回对这个人的适当问候语:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">personName</span>: <span class=\"type\">String</span>, <span class=\"params\">alreadyGreeted</span>: <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> alreadyGreeted &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sayHelloAgain(personName)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sayHello(personName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">&quot;Tim&quot;</span>, alreadyGreeted: <span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello again, Tim!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"无返回值函数\"><a href=\"#无返回值函数\" class=\"headerlink\" title=\"无返回值函数\"></a>无返回值函数</h3><p>函数可以没有返回值。下面是<code>sayHello(_:)</code>函数的另一个版本，叫<code>sayGoodbye(_:)</code>，这个函数直接输出<code>String</code>值，而不是返回它：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sayGoodbye</span>(<span class=\"params\">personName</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Goodbye, <span class=\"subst\">\\(personName)</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayGoodbye(<span class=\"string\">&quot;Dave&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Goodbye, Dave!&quot;</span></span><br></pre></td></tr></table></figure>\n<p>因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头<code>-&gt;</code>和返回类型。</p>\n<blockquote>\n<p>注：严格上来说，虽然没有返回值被定义，<code>sayGoodbye(_:)</code>函数依然返回了值。没有定义返回类型的函数会返回特殊的值，叫做<code>Void</code>。它是一个空的元组，没有任何元素，可以写成<code>()</code>。</p>\n</blockquote>"},{"title":"Swift开源项目汇总","date":"2016-04-11T07:06:52.000Z","abbrlink":"e312d27d3094f3c7","_content":"> 拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。\n\n虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。\n\n## 界面类\n\n* [TextFieldEffects](https://github.com/raulriera/TextFieldEffects)\n你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！\n\n* [FloatLabelFields](https://github.com/FahimF/FloatLabelFields)\n带浮动标签的输入框\n\n<!-- more -->\n* [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell)\n另一个UI组件，在很多app里都常见，苹果应该考虑在iOS标准库里加入类似的东西。可滑动的table cell，这是这个pod最好的描述。\n\n* [LTMorphingLabel](https://github.com/lexrus/LTMorphingLabel)\n有超赞特效效果的Label\n\n* [Instructions](https://github.com/ephread/Instructions)\n操作指引框架\n\n* [Onboard](https://github.com/mamaral/Onboard)\n启动导航界面，很方便的集成\n\n* [SnapKit](https://github.com/SnapKit/SnapKit)\nSwift布局框架 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了\n\n## 工具类\n* [PermissionScope](https://github.com/nickoneill/PermissionScope)\n用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高\n\n* [Quick](https://github.com/Quick/Quick)\nSwift里的单元测试。\n\n* [IAPHelper](https://github.com/saturngod/IAPHelper)\napp内购带给我们很多陈词滥调的代码，用这个库就不需要了，把最有关交易金钱的普遍的任务从iOS用户到你的（或者你的公司的）钱包简单包装起来。\n\n* [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)\nGitHub上最为开发者认可的JSON解析类\n\n* [Dollar](https://github.com/ankurp/Dollar)\nSwift版Lo-Dash(或underscore)函数式工具库\n\n* [XCGLogger](https://github.com/DaveWoodCom/XCGLogger)\n功能完整的日志管理类库\n\n* [Surge](https://github.com/mattt/Surge)\n基于苹果Accelerate高性能计算框架封装库\n\n* [Async](https://github.com/duemunk/Async)\n简洁的后台执行代码封装库\n\n* [Siren](https://github.com/ArtSabintsev/Siren)\n当应用更新时，通知用户并提供App Store链接\n\n* [BrightFutures](https://github.com/Thomvis/BrightFutures)\n漫长或复杂计算由独立线程异步来完成\n\n* [AEXML](https://github.com/tadija/AEXML)\n简单又易于的XML解析类及示例\n\n* [AMScrollingNavbar](https://github.com/andreamazz/AMScrollingNavbar)\nswift语言编写 上下滑动时动态隐藏标题栏\n\n## 存储类\n\n* [SQLite.swift](https://github.com/stephencelis/SQLite.swift)\nswift版本简单、轻量，使用上最SQL的SQLite封装库\n\n## 网络类\n\n* [Alamofire](https://github.com/Alamofire/Alamofire)\nAFNetworking网络基础库Swift语言版\n\n* [RxAlamofire](https://github.com/RxSwiftCommunity/RxAlamofire)\n对 Alamofire的封装，很是强大\n\n## 基础工具类以及Category\n\n* [BFKit Swift版本](https://github.com/FabrizioBrancati/BFKit-Swift)\n国外的一个大神写的很好用的分类，比较齐全\n\n## 图片类\n\n* [AlamofireImage](https://github.com/Alamofire/AlamofireImage)\nswift版本的SDWebImage\n\n* [ImageScout](https://github.com/kaishin/ImageScout)\n最小网络代价获得图片大小及类型\n\n* [DominantColor](https://github.com/indragiek/DominantColor)\n提取图片主色示例项目\n\n* [Toucan](https://github.com/gavinbunney/Toucan)\n小而美的图片变换及处理类\n\n* [gifu](https://github.com/kaishin/gifu)\n高性能GIF显示类库\n\n* [HanekeSwift](https://github.com/Haneke/HanekeSwift)\n轻量带缓存高性能图片加载组件\n\n## 框架类\n\n* [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)\nReactiveCocoa带给我们一种完全不同的编程方式/结构，基于值的信号和流。这是完全的头脑风暴，首先你需要忘记你曾经学习的来理解它是如何工作的。这不是一个简单的任务，但是是有回报的。\n\n* [Spring](https://github.com/MengTo/Spring)\n\n* [Cartography](https://github.com/robb/Cartography)\n基于代码级的自动布局封装框架\n\n* [MMWormhole](https://github.com/mutualmobile/MMWormhole)\niOS扩展与宿主应用的通讯框架\n\n## 示例项目\n\n* [Design-Patterns-In-Swift](https://github.com/ochococo/Design-Patterns-In-Swift)\n如何使用常用设计模式及示例\n\n* [hamburger-button](https://github.com/robb/hamburger-button)\n无论设计还是代码，都进行了精雕细琢\n\n## 完整项目\n\n* [edhita](https://github.com/tnantoka/edhita)\n支持Markdown, HTML预览的文本编辑器\n\n* [firefox-ios](https://github.com/mozilla/firefox-ios)\n来自Mozilla开发团队大型纯Swift项目\n\n* [SwiftWeather](https://github.com/JakeLin/SwiftWeather)\n清新淡雅持续改进天气预报项目\nhcd是脑残","source":"_posts/Swift开源项目汇总.md","raw":"---\ntitle: Swift开源项目汇总\ndate: 2016-04-11 15:06:52\ntags:\n  - iOS\n  - Swift\ncategories: 技术杂谈\nabbrlink: e312d27d3094f3c7\n---\n> 拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。\n\n虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。\n\n## 界面类\n\n* [TextFieldEffects](https://github.com/raulriera/TextFieldEffects)\n你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！\n\n* [FloatLabelFields](https://github.com/FahimF/FloatLabelFields)\n带浮动标签的输入框\n\n<!-- more -->\n* [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell)\n另一个UI组件，在很多app里都常见，苹果应该考虑在iOS标准库里加入类似的东西。可滑动的table cell，这是这个pod最好的描述。\n\n* [LTMorphingLabel](https://github.com/lexrus/LTMorphingLabel)\n有超赞特效效果的Label\n\n* [Instructions](https://github.com/ephread/Instructions)\n操作指引框架\n\n* [Onboard](https://github.com/mamaral/Onboard)\n启动导航界面，很方便的集成\n\n* [SnapKit](https://github.com/SnapKit/SnapKit)\nSwift布局框架 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了\n\n## 工具类\n* [PermissionScope](https://github.com/nickoneill/PermissionScope)\n用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高\n\n* [Quick](https://github.com/Quick/Quick)\nSwift里的单元测试。\n\n* [IAPHelper](https://github.com/saturngod/IAPHelper)\napp内购带给我们很多陈词滥调的代码，用这个库就不需要了，把最有关交易金钱的普遍的任务从iOS用户到你的（或者你的公司的）钱包简单包装起来。\n\n* [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)\nGitHub上最为开发者认可的JSON解析类\n\n* [Dollar](https://github.com/ankurp/Dollar)\nSwift版Lo-Dash(或underscore)函数式工具库\n\n* [XCGLogger](https://github.com/DaveWoodCom/XCGLogger)\n功能完整的日志管理类库\n\n* [Surge](https://github.com/mattt/Surge)\n基于苹果Accelerate高性能计算框架封装库\n\n* [Async](https://github.com/duemunk/Async)\n简洁的后台执行代码封装库\n\n* [Siren](https://github.com/ArtSabintsev/Siren)\n当应用更新时，通知用户并提供App Store链接\n\n* [BrightFutures](https://github.com/Thomvis/BrightFutures)\n漫长或复杂计算由独立线程异步来完成\n\n* [AEXML](https://github.com/tadija/AEXML)\n简单又易于的XML解析类及示例\n\n* [AMScrollingNavbar](https://github.com/andreamazz/AMScrollingNavbar)\nswift语言编写 上下滑动时动态隐藏标题栏\n\n## 存储类\n\n* [SQLite.swift](https://github.com/stephencelis/SQLite.swift)\nswift版本简单、轻量，使用上最SQL的SQLite封装库\n\n## 网络类\n\n* [Alamofire](https://github.com/Alamofire/Alamofire)\nAFNetworking网络基础库Swift语言版\n\n* [RxAlamofire](https://github.com/RxSwiftCommunity/RxAlamofire)\n对 Alamofire的封装，很是强大\n\n## 基础工具类以及Category\n\n* [BFKit Swift版本](https://github.com/FabrizioBrancati/BFKit-Swift)\n国外的一个大神写的很好用的分类，比较齐全\n\n## 图片类\n\n* [AlamofireImage](https://github.com/Alamofire/AlamofireImage)\nswift版本的SDWebImage\n\n* [ImageScout](https://github.com/kaishin/ImageScout)\n最小网络代价获得图片大小及类型\n\n* [DominantColor](https://github.com/indragiek/DominantColor)\n提取图片主色示例项目\n\n* [Toucan](https://github.com/gavinbunney/Toucan)\n小而美的图片变换及处理类\n\n* [gifu](https://github.com/kaishin/gifu)\n高性能GIF显示类库\n\n* [HanekeSwift](https://github.com/Haneke/HanekeSwift)\n轻量带缓存高性能图片加载组件\n\n## 框架类\n\n* [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)\nReactiveCocoa带给我们一种完全不同的编程方式/结构，基于值的信号和流。这是完全的头脑风暴，首先你需要忘记你曾经学习的来理解它是如何工作的。这不是一个简单的任务，但是是有回报的。\n\n* [Spring](https://github.com/MengTo/Spring)\n\n* [Cartography](https://github.com/robb/Cartography)\n基于代码级的自动布局封装框架\n\n* [MMWormhole](https://github.com/mutualmobile/MMWormhole)\niOS扩展与宿主应用的通讯框架\n\n## 示例项目\n\n* [Design-Patterns-In-Swift](https://github.com/ochococo/Design-Patterns-In-Swift)\n如何使用常用设计模式及示例\n\n* [hamburger-button](https://github.com/robb/hamburger-button)\n无论设计还是代码，都进行了精雕细琢\n\n## 完整项目\n\n* [edhita](https://github.com/tnantoka/edhita)\n支持Markdown, HTML预览的文本编辑器\n\n* [firefox-ios](https://github.com/mozilla/firefox-ios)\n来自Mozilla开发团队大型纯Swift项目\n\n* [SwiftWeather](https://github.com/JakeLin/SwiftWeather)\n清新淡雅持续改进天气预报项目\nhcd是脑残","slug":"Swift开源项目汇总","published":1,"updated":"2022-05-19T03:13:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenv002gl1l3frs6b37t","content":"<blockquote>\n<p>拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。</p>\n</blockquote>\n<p>虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。</p>\n<h2 id=\"界面类\"><a href=\"#界面类\" class=\"headerlink\" title=\"界面类\"></a>界面类</h2><ul>\n<li><p><a href=\"https://github.com/raulriera/TextFieldEffects\">TextFieldEffects</a><br>你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！</p>\n</li>\n<li><p><a href=\"https://github.com/FahimF/FloatLabelFields\">FloatLabelFields</a><br>带浮动标签的输入框</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><p><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\">MGSwipeTableCell</a><br>另一个UI组件，在很多app里都常见，苹果应该考虑在iOS标准库里加入类似的东西。可滑动的table cell，这是这个pod最好的描述。</p>\n</li>\n<li><p><a href=\"https://github.com/lexrus/LTMorphingLabel\">LTMorphingLabel</a><br>有超赞特效效果的Label</p>\n</li>\n<li><p><a href=\"https://github.com/ephread/Instructions\">Instructions</a><br>操作指引框架</p>\n</li>\n<li><p><a href=\"https://github.com/mamaral/Onboard\">Onboard</a><br>启动导航界面，很方便的集成</p>\n</li>\n<li><p><a href=\"https://github.com/SnapKit/SnapKit\">SnapKit</a><br>Swift布局框架 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了</p>\n</li>\n</ul>\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><ul>\n<li><p><a href=\"https://github.com/nickoneill/PermissionScope\">PermissionScope</a><br>用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高</p>\n</li>\n<li><p><a href=\"https://github.com/Quick/Quick\">Quick</a><br>Swift里的单元测试。</p>\n</li>\n<li><p><a href=\"https://github.com/saturngod/IAPHelper\">IAPHelper</a><br>app内购带给我们很多陈词滥调的代码，用这个库就不需要了，把最有关交易金钱的普遍的任务从iOS用户到你的（或者你的公司的）钱包简单包装起来。</p>\n</li>\n<li><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">SwiftyJSON</a><br>GitHub上最为开发者认可的JSON解析类</p>\n</li>\n<li><p><a href=\"https://github.com/ankurp/Dollar\">Dollar</a><br>Swift版Lo-Dash(或underscore)函数式工具库</p>\n</li>\n<li><p><a href=\"https://github.com/DaveWoodCom/XCGLogger\">XCGLogger</a><br>功能完整的日志管理类库</p>\n</li>\n<li><p><a href=\"https://github.com/mattt/Surge\">Surge</a><br>基于苹果Accelerate高性能计算框架封装库</p>\n</li>\n<li><p><a href=\"https://github.com/duemunk/Async\">Async</a><br>简洁的后台执行代码封装库</p>\n</li>\n<li><p><a href=\"https://github.com/ArtSabintsev/Siren\">Siren</a><br>当应用更新时，通知用户并提供App Store链接</p>\n</li>\n<li><p><a href=\"https://github.com/Thomvis/BrightFutures\">BrightFutures</a><br>漫长或复杂计算由独立线程异步来完成</p>\n</li>\n<li><p><a href=\"https://github.com/tadija/AEXML\">AEXML</a><br>简单又易于的XML解析类及示例</p>\n</li>\n<li><p><a href=\"https://github.com/andreamazz/AMScrollingNavbar\">AMScrollingNavbar</a><br>swift语言编写 上下滑动时动态隐藏标题栏</p>\n</li>\n</ul>\n<h2 id=\"存储类\"><a href=\"#存储类\" class=\"headerlink\" title=\"存储类\"></a>存储类</h2><ul>\n<li><a href=\"https://github.com/stephencelis/SQLite.swift\">SQLite.swift</a><br>swift版本简单、轻量，使用上最SQL的SQLite封装库</li>\n</ul>\n<h2 id=\"网络类\"><a href=\"#网络类\" class=\"headerlink\" title=\"网络类\"></a>网络类</h2><ul>\n<li><p><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a><br>AFNetworking网络基础库Swift语言版</p>\n</li>\n<li><p><a href=\"https://github.com/RxSwiftCommunity/RxAlamofire\">RxAlamofire</a><br>对 Alamofire的封装，很是强大</p>\n</li>\n</ul>\n<h2 id=\"基础工具类以及Category\"><a href=\"#基础工具类以及Category\" class=\"headerlink\" title=\"基础工具类以及Category\"></a>基础工具类以及Category</h2><ul>\n<li><a href=\"https://github.com/FabrizioBrancati/BFKit-Swift\">BFKit Swift版本</a><br>国外的一个大神写的很好用的分类，比较齐全</li>\n</ul>\n<h2 id=\"图片类\"><a href=\"#图片类\" class=\"headerlink\" title=\"图片类\"></a>图片类</h2><ul>\n<li><p><a href=\"https://github.com/Alamofire/AlamofireImage\">AlamofireImage</a><br>swift版本的SDWebImage</p>\n</li>\n<li><p><a href=\"https://github.com/kaishin/ImageScout\">ImageScout</a><br>最小网络代价获得图片大小及类型</p>\n</li>\n<li><p><a href=\"https://github.com/indragiek/DominantColor\">DominantColor</a><br>提取图片主色示例项目</p>\n</li>\n<li><p><a href=\"https://github.com/gavinbunney/Toucan\">Toucan</a><br>小而美的图片变换及处理类</p>\n</li>\n<li><p><a href=\"https://github.com/kaishin/gifu\">gifu</a><br>高性能GIF显示类库</p>\n</li>\n<li><p><a href=\"https://github.com/Haneke/HanekeSwift\">HanekeSwift</a><br>轻量带缓存高性能图片加载组件</p>\n</li>\n</ul>\n<h2 id=\"框架类\"><a href=\"#框架类\" class=\"headerlink\" title=\"框架类\"></a>框架类</h2><ul>\n<li><p><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a><br>ReactiveCocoa带给我们一种完全不同的编程方式/结构，基于值的信号和流。这是完全的头脑风暴，首先你需要忘记你曾经学习的来理解它是如何工作的。这不是一个简单的任务，但是是有回报的。</p>\n</li>\n<li><p><a href=\"https://github.com/MengTo/Spring\">Spring</a></p>\n</li>\n<li><p><a href=\"https://github.com/robb/Cartography\">Cartography</a><br>基于代码级的自动布局封装框架</p>\n</li>\n<li><p><a href=\"https://github.com/mutualmobile/MMWormhole\">MMWormhole</a><br>iOS扩展与宿主应用的通讯框架</p>\n</li>\n</ul>\n<h2 id=\"示例项目\"><a href=\"#示例项目\" class=\"headerlink\" title=\"示例项目\"></a>示例项目</h2><ul>\n<li><p><a href=\"https://github.com/ochococo/Design-Patterns-In-Swift\">Design-Patterns-In-Swift</a><br>如何使用常用设计模式及示例</p>\n</li>\n<li><p><a href=\"https://github.com/robb/hamburger-button\">hamburger-button</a><br>无论设计还是代码，都进行了精雕细琢</p>\n</li>\n</ul>\n<h2 id=\"完整项目\"><a href=\"#完整项目\" class=\"headerlink\" title=\"完整项目\"></a>完整项目</h2><ul>\n<li><p><a href=\"https://github.com/tnantoka/edhita\">edhita</a><br>支持Markdown, HTML预览的文本编辑器</p>\n</li>\n<li><p><a href=\"https://github.com/mozilla/firefox-ios\">firefox-ios</a><br>来自Mozilla开发团队大型纯Swift项目</p>\n</li>\n<li><p><a href=\"https://github.com/JakeLin/SwiftWeather\">SwiftWeather</a><br>清新淡雅持续改进天气预报项目<br>hcd是脑残</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。</p>\n</blockquote>\n<p>虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。</p>\n<h2 id=\"界面类\"><a href=\"#界面类\" class=\"headerlink\" title=\"界面类\"></a>界面类</h2><ul>\n<li><p><a href=\"https://github.com/raulriera/TextFieldEffects\">TextFieldEffects</a><br>你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！</p>\n</li>\n<li><p><a href=\"https://github.com/FahimF/FloatLabelFields\">FloatLabelFields</a><br>带浮动标签的输入框</p>\n</li>\n</ul>","more":"<ul>\n<li><p><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\">MGSwipeTableCell</a><br>另一个UI组件，在很多app里都常见，苹果应该考虑在iOS标准库里加入类似的东西。可滑动的table cell，这是这个pod最好的描述。</p>\n</li>\n<li><p><a href=\"https://github.com/lexrus/LTMorphingLabel\">LTMorphingLabel</a><br>有超赞特效效果的Label</p>\n</li>\n<li><p><a href=\"https://github.com/ephread/Instructions\">Instructions</a><br>操作指引框架</p>\n</li>\n<li><p><a href=\"https://github.com/mamaral/Onboard\">Onboard</a><br>启动导航界面，很方便的集成</p>\n</li>\n<li><p><a href=\"https://github.com/SnapKit/SnapKit\">SnapKit</a><br>Swift布局框架 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了</p>\n</li>\n</ul>\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><ul>\n<li><p><a href=\"https://github.com/nickoneill/PermissionScope\">PermissionScope</a><br>用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高</p>\n</li>\n<li><p><a href=\"https://github.com/Quick/Quick\">Quick</a><br>Swift里的单元测试。</p>\n</li>\n<li><p><a href=\"https://github.com/saturngod/IAPHelper\">IAPHelper</a><br>app内购带给我们很多陈词滥调的代码，用这个库就不需要了，把最有关交易金钱的普遍的任务从iOS用户到你的（或者你的公司的）钱包简单包装起来。</p>\n</li>\n<li><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">SwiftyJSON</a><br>GitHub上最为开发者认可的JSON解析类</p>\n</li>\n<li><p><a href=\"https://github.com/ankurp/Dollar\">Dollar</a><br>Swift版Lo-Dash(或underscore)函数式工具库</p>\n</li>\n<li><p><a href=\"https://github.com/DaveWoodCom/XCGLogger\">XCGLogger</a><br>功能完整的日志管理类库</p>\n</li>\n<li><p><a href=\"https://github.com/mattt/Surge\">Surge</a><br>基于苹果Accelerate高性能计算框架封装库</p>\n</li>\n<li><p><a href=\"https://github.com/duemunk/Async\">Async</a><br>简洁的后台执行代码封装库</p>\n</li>\n<li><p><a href=\"https://github.com/ArtSabintsev/Siren\">Siren</a><br>当应用更新时，通知用户并提供App Store链接</p>\n</li>\n<li><p><a href=\"https://github.com/Thomvis/BrightFutures\">BrightFutures</a><br>漫长或复杂计算由独立线程异步来完成</p>\n</li>\n<li><p><a href=\"https://github.com/tadija/AEXML\">AEXML</a><br>简单又易于的XML解析类及示例</p>\n</li>\n<li><p><a href=\"https://github.com/andreamazz/AMScrollingNavbar\">AMScrollingNavbar</a><br>swift语言编写 上下滑动时动态隐藏标题栏</p>\n</li>\n</ul>\n<h2 id=\"存储类\"><a href=\"#存储类\" class=\"headerlink\" title=\"存储类\"></a>存储类</h2><ul>\n<li><a href=\"https://github.com/stephencelis/SQLite.swift\">SQLite.swift</a><br>swift版本简单、轻量，使用上最SQL的SQLite封装库</li>\n</ul>\n<h2 id=\"网络类\"><a href=\"#网络类\" class=\"headerlink\" title=\"网络类\"></a>网络类</h2><ul>\n<li><p><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a><br>AFNetworking网络基础库Swift语言版</p>\n</li>\n<li><p><a href=\"https://github.com/RxSwiftCommunity/RxAlamofire\">RxAlamofire</a><br>对 Alamofire的封装，很是强大</p>\n</li>\n</ul>\n<h2 id=\"基础工具类以及Category\"><a href=\"#基础工具类以及Category\" class=\"headerlink\" title=\"基础工具类以及Category\"></a>基础工具类以及Category</h2><ul>\n<li><a href=\"https://github.com/FabrizioBrancati/BFKit-Swift\">BFKit Swift版本</a><br>国外的一个大神写的很好用的分类，比较齐全</li>\n</ul>\n<h2 id=\"图片类\"><a href=\"#图片类\" class=\"headerlink\" title=\"图片类\"></a>图片类</h2><ul>\n<li><p><a href=\"https://github.com/Alamofire/AlamofireImage\">AlamofireImage</a><br>swift版本的SDWebImage</p>\n</li>\n<li><p><a href=\"https://github.com/kaishin/ImageScout\">ImageScout</a><br>最小网络代价获得图片大小及类型</p>\n</li>\n<li><p><a href=\"https://github.com/indragiek/DominantColor\">DominantColor</a><br>提取图片主色示例项目</p>\n</li>\n<li><p><a href=\"https://github.com/gavinbunney/Toucan\">Toucan</a><br>小而美的图片变换及处理类</p>\n</li>\n<li><p><a href=\"https://github.com/kaishin/gifu\">gifu</a><br>高性能GIF显示类库</p>\n</li>\n<li><p><a href=\"https://github.com/Haneke/HanekeSwift\">HanekeSwift</a><br>轻量带缓存高性能图片加载组件</p>\n</li>\n</ul>\n<h2 id=\"框架类\"><a href=\"#框架类\" class=\"headerlink\" title=\"框架类\"></a>框架类</h2><ul>\n<li><p><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a><br>ReactiveCocoa带给我们一种完全不同的编程方式/结构，基于值的信号和流。这是完全的头脑风暴，首先你需要忘记你曾经学习的来理解它是如何工作的。这不是一个简单的任务，但是是有回报的。</p>\n</li>\n<li><p><a href=\"https://github.com/MengTo/Spring\">Spring</a></p>\n</li>\n<li><p><a href=\"https://github.com/robb/Cartography\">Cartography</a><br>基于代码级的自动布局封装框架</p>\n</li>\n<li><p><a href=\"https://github.com/mutualmobile/MMWormhole\">MMWormhole</a><br>iOS扩展与宿主应用的通讯框架</p>\n</li>\n</ul>\n<h2 id=\"示例项目\"><a href=\"#示例项目\" class=\"headerlink\" title=\"示例项目\"></a>示例项目</h2><ul>\n<li><p><a href=\"https://github.com/ochococo/Design-Patterns-In-Swift\">Design-Patterns-In-Swift</a><br>如何使用常用设计模式及示例</p>\n</li>\n<li><p><a href=\"https://github.com/robb/hamburger-button\">hamburger-button</a><br>无论设计还是代码，都进行了精雕细琢</p>\n</li>\n</ul>\n<h2 id=\"完整项目\"><a href=\"#完整项目\" class=\"headerlink\" title=\"完整项目\"></a>完整项目</h2><ul>\n<li><p><a href=\"https://github.com/tnantoka/edhita\">edhita</a><br>支持Markdown, HTML预览的文本编辑器</p>\n</li>\n<li><p><a href=\"https://github.com/mozilla/firefox-ios\">firefox-ios</a><br>来自Mozilla开发团队大型纯Swift项目</p>\n</li>\n<li><p><a href=\"https://github.com/JakeLin/SwiftWeather\">SwiftWeather</a><br>清新淡雅持续改进天气预报项目<br>hcd是脑残</p>\n</li>\n</ul>"},{"title":"Swift学习笔记之基础部分","date":"2016-04-29T02:07:32.000Z","abbrlink":"93ae863d100e0fb4","_content":"\n\n> 本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。\n\n## 概述\nSwift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。\n\n<!-- more -->\nSwift包含了C 和objc上所有的数据类型，`Int`表示整型值；`Double`和`Float`表示浮点型值；`Bool`是布尔型值；`String`是字符串型值。此外Swift还提供了三个基本的集合类型，`Array`，`Set`和`Dictionary`。\n除了我们熟悉的类型，Swift 还增加了 objc 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。\n\nSwift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示“那儿有一个值，并且它等于 x ”或者“那儿没有值”。可选有点像在 objc 中使用`nil`，但是它可以用在任何类型上，不仅仅是类。可选类型比 objc 中的nil指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。\n\nSwift 是一门类型安全的语言，可选类型就是一个很好的例子。Swift 可以让你清楚地知道值的类型。如果你的代码期望得到一个String，类型安全会阻止你不小心传入一个`Int`。你可以在开发阶段尽早发现并修正错误。\n\n## 常量和变量\n常量的值一旦设定就不能改变，而变量的值可以随意更改。\n\n## 声明常量和变量\n常量和变量必须在使用前声明，用`let`来声明常量，用`var`来声明变量。下面的例子展示了如何用常量和变量\n\n``` swift\nlet maxNumberOfLoginTimes = 10\nvar currentLoginTimes = 0\n```\n\n这两行代码可以理解为：\n`maxNumberOfLoginTimes`声明为一个常量，它的值是10并且不可再被改变，`currentLoginAttempt`申明为一个初始值为0的变量。\n我们可以在一行中声明多个常量或者多个变量，用逗号隔开：\n``` swift\nvar x = 0.0, y = 0.0\nlet a = 1, b = 2\n```\n> 注意：如果你的代码中有不需要改变的值，请使用`let`关键字将它声明为常量。只将需要改变的值声明为变量。与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：\n\n``` swift\nlet languageName = \"Swift\"\nlanguageName = \"Swift++\"\n// 这会报编译时错误 - languageName 不可改变\n```\n\n## 类型标注\n\n当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。\n这个例子给`welcomeMessage`变量添加了类型标注，表示这个变量可以存储`String`类型的值：\n``` swift\nvar welcomeMessage: String\n```\n声明中的冒号代表着“是...类型”，所以这行代码可以被理解为：\n“声明一个类型为`String`，名字为`welcomeMessage`的变量。”\n“类型为`String`”的意思是“可以存储任意`String`类型的值。”\n`welcomeMessage`变量现在可以被设置成任意字符串：\n``` swift\nwelcomeMessage = \"Hello\"\n```\n你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型标注：\n``` swift\nvar red, green, blue: Double\n```\n> 注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给`welcomeMessage`赋初始值，所以变量`welcomeMessage`的类型是通过一个类型标注指定的，而不是通过初始值推断的。\n\n## 常量和变量的命名\n你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：\n``` swift\nlet π = 3.14159\nlet 你好 = \"你好世界\"\nlet 🐶🐮 = \"dogcow\"\n```\n常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。\n\n一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。\n> 注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。\n\n## 输出常量和变量\n你可以用`print(_:separator:terminator:)`函数来输出当前常量或变量的值:\n``` swift\nvar friendlyWelcome = \"Bonjour!\"\nprint(friendlyWelcome)\n// 输出 \"Bonjour!\"\n```\n`print(_:separator:terminator:)`是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，`print(_:separator:terminator:)`将会输出内容到“console”面板上。separator和terminator参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给terminator参数--例如，`print(someValue, terminator:\"\")`。\n\nSwift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：\n``` swift\nprint(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")\n// 输出 \"The current value of friendlyWelcome is Bonjour!\n```\n\n## 注释\n请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。\n与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：\n``` swift\n/* 这是第一个多行注释的开头\n/* 这是第二个被嵌套的多行注释 */\n这是第一个多行注释的结尾 */\n```\n通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。\n当然Swift的单行注释和多行注释和C语言的类似。\n``` swift\n// 这是一个单行注释\n/* 这是一个,\n多行注释 */\n```\n\n## 分号\n与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：\n``` swift\nlet cat = \"🐱\"; print(cat)\n// 输出 \"🐱\"\n```\n## 整数\n整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。\n\nSwift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是`UInt8`，32位有符号整数类型是`Int32`。就像 Swift 的其他类型一样，整数类型采用大写命名法。\n\n## 整数范围\n你可以访问不同整数类型的`min`和`max`属性来获取对应类型的最小值和最大值：\n``` swift\nlet minValue = UInt8.min  // minValue 为 0，是 UInt8 类型\nlet maxValue = UInt8.max  // maxValue 为 255，是 UInt8 类型\n```\n`min`和`max`所传回值的类型，正是其所对的整数类型(如上例`UInt8`, 所传回的类型是`UInt8`)，可用在表达式中相同类型值旁。\n\n## Int\n一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：\n* 在32位平台上，`Int`和`Int32`长度相同。\n* 在64位平台上，`Int`和`Int64`长度相同。\n除非你需要特定长度的整数，一般来说使用`Int`就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，`Int`可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。\n\n## UInt\nSwift 也提供了一个特殊的无符号类型`UInt`，长度与当前平台的原生字长相同：\n* 在32位平台上，`UInt`和`UInt32`长度相同。\n* 在64位平台上，`UInt`和`UInt64`长度相同。\n> 注意：尽量不要使用`UInt`，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用`Int`，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断\n\n## 浮点数\n浮点数是有小数部分的数字，比如`3.14159`，`0.1`和`-273.15`。\n\n浮点类型比整数类型表示的范围更大，可以存储比`Int`类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：\n* `Double`表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。\n* `Float`表示32位浮点数。精度要求不高的话可以使用此类型。\n\n## 类型安全和类型推断\nSwift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个`String`，你绝对不可能不小心传进去一个`Int`。\n\n由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。\n\n当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。\n\n因为有类型推断，和 C 或者 objc 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。\n\n当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如`42`和`3.14159`。）\n\n例如，如果你给一个新常量赋值`42`并且没有标明类型，Swift 可以推断出常量类型是Int，因为你给它赋的初始值看起来像一个整数：\n``` swift\nlet meaningOfLife = 42\n// meaningOfLife 会被推测为 Int 类型\n```\n同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是`Double`：\n``` swift\nlet pi = 3.14159\n// pi 会被推测为 Double 类型\n```\n当推断浮点数的类型时，Swift 总是会选择`Double`而不是`Float`。\n如果表达式中同时出现了整数和浮点数，会被推断为`Double`类型：\n``` swift\nlet anotherPi = 3 + 0.14159\n// anotherPi 会被推测为 Double 类型\n```\n原始值`3`没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为`Double`类型。\n\n## 数值型字面量\n整数字面量可以被写作：\n* 一个十进制数，没有前缀\n* 一个二进制数，前缀是`0b`\n* 一个八进制数，前缀是`0o`\n* 一个十六进制数，前缀是`0x`\n\n下面的所有整数字面量的十进制值都是16:\n``` swift\nlet decimalInteger = 16\nlet binaryInteger = 0b10000       // 二进制的16\nlet octalInteger = 0o20           // 八进制的16\nlet hexadecimalInteger = 0x10     // 十六进制的16\n```\n浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是`0x`）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 `e` 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 `p` 来指定。\n如果一个十进制数的指数为`exp`，那这个数相当于基数和10^exp的乘积：\n* `1.25e2` 表示 1.25 × 10^2，等于 `125.0`。\n* `1.25e-2` 表示 1.25 × 10^-2，等于 `0.0125`。\n\n如果一个十六进制数的指数为`exp`，那这个数相当于基数和2^exp的乘积：\n* `0xFp2` 表示 15 × 2^2，等于 `60.0`。\n* `0xFp-2` 表示 15 × 2^-2，等于 `3.75`。\n\n下面的这些浮点字面量都等于十进制的`12.1875`：\n``` swift\nlet decimalDouble = 12.1875\nlet exponentDouble = 1.21875e1\nlet hexadecimalDouble = 0xC.3p0\n```\n数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：\n``` swift\nlet paddedDouble = 000123.456\nlet oneMillion = 1_000_000\nlet justOverOneMillion = 1_000_000.000_000_1\n```\n\n## 数值型类型转换\n\n通常来讲，即使代码中的整数常量和变量已知非负，也请使用`Int`类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。\n\n只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。\n\n## 整数转换\n不同整数类型的变量和常量可以存储不同范围的数字。`Int8`类型的常量或者变量可以存储的数字范围是-128~127，而`UInt8`类型的常量或者变量能存储的数字范围是0~255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：\n``` swift\nlet cannotBeNegative: UInt8 = -1\n// UInt8 类型不能存储负数，所以会报错\nlet tooBig: Int8 = Int8.max + 1\n// Int8 类型不能存储超过最大值的数，所以会报错\n```\n由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。\n\n要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量`twoThousand`是`UInt16`类型，然而常量`one`是`UInt8`类型。它们不能直接相加，因为它们类型不同。所以要调用`UInt16(one)`来创建一个新的`UInt16`数字并用`one`的值来初始化，然后使用这个新数字来计算：\n``` swift\nlet twoThousand: UInt16 = 2_000\nlet one: UInt8 = 1\nlet twoThousandAndOne = twoThousand + UInt16(one)\n```\n现在两个数字的类型都是`UInt16`，可以进行相加。目标常量`twoThousandAndOne`的类型被推断为`UInt16`，因为它是两个`UInt16`值的和。\n\n`SomeType(ofInitialValue)`是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，`UInt16`有一个构造器，可以接受一个`UInt8`类型的值，所以这个构造器可以用现有的`UInt8`来创建一个新的`UInt16`。注意，你并不能传入任意类型的值，只能传入`UInt16`内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型）。\n\n## 整数和浮点数转换\n整数和浮点数的转换必须显式指定类型：\n``` swift\nlet three = 3\nlet pointOneFourOneFiveNine = 0.14159\nlet pi = Double(three) + pointOneFourOneFiveNine\n// pi 等于 3.14159，所以被推测为 Double 类型\n```\n这个例子中，常量`three`的值被用来创建一个`Double`类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。\n浮点数到整数的反向转换同样行，整数类型可以用`Double`或者`Float`类型来初始化：\n``` swift\nlet integerPi = Int(pi)\n// integerPi 等于 3，所以被推测为 Int 类型\n```\n当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说`4.75`会变成`4`，`-3.9`会变成`-3`。\n> 注意：结合数字类常量和变量不同于结合数字类字面量。字面量`3`可以直接和字面量`0.14159`相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。\n\n## 类型别名\n\n类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用`typealias`关键字来定义类型别名。\n\n当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：\n``` swift\ntypealias AudioSample = UInt16\n```\n定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：\n``` swift\nvar maxAmplitudeFound = AudioSample.min\n// maxAmplitudeFound 现在是 0\n```\n本例中，`AudioSample`被定义为`UInt16`的一个别名。因为它是别名，`AudioSample.min`实际上是`UInt16.min`，所以会给`maxAmplitudeFound`赋一个初值`0`。\n\n## 布尔值\nSwift 有一个基本的布尔（Boolean）类型，叫做`Bool`。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，`true`和`false`：\n``` swift\nlet orangesAreOrange = true\nlet turnipsAreDelicious = false\n```\n`orangesAreOrange`和`turnipsAreDelicious`的类型会被推断为`Bool`，因为它们的初值是布尔字面量。就像之前提到的`Int`和`Double`一样，如果你创建变量的时候给它们赋值`true`或者`false`，那你不需要将常量或者变量声明为`Bool`类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。\n当你编写条件语句比如`if`语句的时候，布尔值非常有用：\n``` swift\nif turnipsAreDelicious {\n    print(\"Mmm, tasty turnips!\")\n} else {\n    print(\"Eww, turnips are horrible.\")\n}\n// 输出 \"Eww, turnips are horrible.\"\n```\n如果你在需要使用`Bool`类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：\n``` swift\nlet i = 1\nif i {\n    // 这个例子不会通过编译，会报错\n}\n```\n然而，下面的例子是合法的：\n``` swift\nlet i = 1\nif i == 1 {\n    // 这个例子会编译成功\n}\n```\n`i == 1`的比较结果是`Bool`类型，所以第二个例子可以通过类型检查。\n\n和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。\n\n## 元组\n\n元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。\n\n下面这个例子中，`(404, \"Not Found\")`是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个`404 Not Found`状态码。\n``` swift\nlet http404Error = (404, \"Not Found\")\n// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\")\n```\n`(404, \"Not Found\")`元组把一个`Int`值和一个`String`值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为`(Int, String)`的元组”。\n你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为`(Int, Int, Int)`或者`(String, Bool)`或者其他任何你想要的组合的元组。\n你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：\n``` swift\nlet (statusCode, statusMessage) = http404Error\nprint(\"The status code is \\(statusCode)\")\n// 输出 \"The status code is 404\"\nprint(\"The status message is \\(statusMessage)\")\n// 输出 \"The status message is Not Found\"\n```\n如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（`_`）标记：\n``` swift\nlet (justTheStatusCode, _) = http404Error\nprint(\"The status code is \\(justTheStatusCode)\")\n// 输出 \"The status code is 404\"\n```\n此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：\n``` swift\nprint(\"The status code is \\(http404Error.0)\")\n// 输出 \"The status code is 404\"\nprint(\"The status message is \\(http404Error.1)\")\n// 输出 \"The status message is Not Found\"\n```\n你可以在定义元组的时候给单个元素命名：\n``` swift\nlet http200Status = (statusCode: 200, description: \"OK\")\n```\n给元组中的元素命名后，你可以通过名字来获取这些元素的值：\n``` swift\nprint(\"The status code is \\(http200Status.statusCode)\")\n// 输出 \"The status code is 200\"\nprint(\"The status message is \\(http200Status.description)\")\n// 输出 \"The status message is OK\"\n```\n作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个`(Int, String)`元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。\n> 注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。\n\n## 可选类型\n\n使用可选类型（optionals）来处理值可能缺失的情况。\n来看一个例子。Swift 的`Int`类型有一种构造器，作用是将一个`String`值转换成一个`Int`值。然而，并不是所有的字符串都可以转换成一个整数。字符串`\"123\"`可以被转换成数字`123`，但是字符串`\"hello, world\"`不行。\n\n下面的例子使用这种构造器来尝试将一个`String`转换成`Int`：\n``` swift\nlet possibleNumber = \"123\"\nlet convertedNumber = Int(possibleNumber)\n// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"\n```\n因为该构造器可能会失败，所以它返回一个可选类型（optional）`Int`，而不是一个`Int`。一个可选的`Int`被写作`Int?`而不是`Int`。问号暗示包含的值是可选类型，也就是说可能包含`Int`值也可能不包含值。（不能包含其他任何值比如`Bool`值或者`String`值。只能是\t`Int`或者什么都没有。）\n\n## nil\n你可以给可选变量赋值为`nil`来表示它没有值：\n``` swift\nvar serverResponseCode: Int? = 404\n// serverResponseCode 包含一个可选的 Int 值 404\nserverResponseCode = nil\n// serverResponseCode 现在不包含值\n```\n> 注意：`nil`不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。\n\n如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为`nil`：\n``` swift\nvar surveyAnswer: String?\n// surveyAnswer 被自动设置为 nil\n```\n> 注意：Swift 的`nil`和 objc 中的`nil`并不一样。在 objc 中，`nil`是一个指向不存在对象的指针。在 Swift 中，`nil`不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为`nil`，不只是对象类型。\n\n## if 语句以及强制解析\n你可以使用`if`语句和`nil`比较来判断一个可选值是否包含值。你可以使用“相等”(`==`)或“不等”(`!=`)来执行比较。\n\n如果可选类型有值，它将不等于`nil`:\n``` swift\nif convertedNumber != nil {\n    print(\"convertedNumber contains some integer value.\")\n}\n// 输出 \"convertedNumber contains some integer value.\"\n```\n当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（`!`）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：\n``` swift\nif convertedNumber != nil {\n    print(\"convertedNumber has an integer value of \\(convertedNumber!).\")\n}\n// 输出 \"convertedNumber has an integer value of 123.\"\n```\n> 注意：使用`!`来获取一个不存在的可选值会导致运行时错误。使用`!`来强制解析值之前，一定要确定可选包含一个非`nil`的值。\n\n## 可选绑定\n\n使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在`if`和`while`语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。\n\n像下面这样在`if`语句中写一个可选绑定：\n``` swift\nif let constantName = someOptional {\n    statements\n}\n```\n你可以像上面这样使用可选绑定来重写`possibleNumber`这个例子：\n``` swift\nif let actualNumber = Int(possibleNumber) {\n    print(\"\\'\\(possibleNumber)\\' has an integer value of \\(actualNumber)\")\n} else {\n    print(\"\\'\\(possibleNumber)\\' could not be converted to an integer\")\n}\n// 输出 \"'123' has an integer value of 123\"\n```\n这段代码可以被理解为：“如果`Int(possibleNumber)`返回的可选`Int`包含一个值，创建一个叫做`actualNumber`的新常量并将可选包含的值赋给它。”\n\n如果转换成功，`actualNumber`常量可以在`if`语句的第一个分支中使用。它已经被可选类型 包含的 值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，`actualNumber`只被用来输出转换结果。\n\n你可以在可选绑定中使用常量和变量。如果你想在`if`语句的第一个分支中操作`actualNumber`的值，你可以改成`if var actualNumber`，这样可选类型包含的值就会被赋给一个变量而非常量。\n\n你可以包含多个可选绑定在`if`语句中，并使用`where`子句做布尔值判断。\n``` swift\nif let firstNumber = Int(\"4\"), secondNumber = Int(\"42\") where firstNumber < secondNumber {\n    print(\"\\(firstNumber) < \\(secondNumber)\")\n}\n// prints \"4 < 42\"\n```\n\n## 隐式解析可选类型\n\n如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。\n\n有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型_总会_有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。\n\n这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（`String?`）改成感叹号（`String!`）来声明一个隐式解析可选类型。\n\n当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。\n\n一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型`String`和隐式解析可选类型`String`之间的区别：\n``` swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // 需要惊叹号来获取值\n\nlet assumedString: String! = \"An implicitly unwrapped optional string.\"\nlet implicitString: String = assumedString  // 不需要感叹号\n```\n你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。\n\n> 注意：如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个惊叹号一样。\n\n你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：\n``` swift\nif assumedString != nil {\n    print(assumedString)\n}\n// 输出 \"An implicitly unwrapped optional string.\"\n```\n你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：\n``` swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// 输出 \"An implicitly unwrapped optional string.\"\n```\n> 注意：如果一个变量之后可能变成`nil`的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是`nil`的话，请使用普通可选类型。\n\n## 错误处理\n你可以使用错误处理（error handling）来应对程序执行中可能会遇到的错误条件。相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。\n``` swift\nfunc canThrowAnError() throws {\n    // 这个函数有可能抛出错误\n}\n```\n一个函数可以通过在声明中添加`throws`关键词来抛出错误消息。当你的函数能抛出错误消息时, 你应该在表达式中前置`try`关键词。\n``` swift\ndo {\n    try canThrowAnError()\n    // 没有错误消息抛出\n} catch {\n    // 有一个错误消息抛出\n}\n```\n一个`do`语句创建了一个新的包含作用域,使得错误能被传播到一个或多个`catch`从句。\n这里有一个错误处理如何用来应对不同错误条件的例子。\n``` swift\nfunc makeASandwich() throws {\n    // ...\n}\n\ndo {\n    try makeASandwich()\n    eatASandwich()\n} catch Error.OutOfCleanDishes {\n    washDishes()\n} catch Error.MissingIngredients(let ingredients) {\n    buyGroceries(ingredients)\n}\n```\n在此例中，`makeASandwich()`（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为`makeASandwich()`抛出错误，函数调用被包裹在`try`表达式中。将函数包裹在一个`do`语句中,任何被抛出的错误会被传播到提供的`catch`从句中。\n\n如果没有错误被抛出, `eatASandwich()`函数会被调用。如果一个匹配`Error.OutOfCleanDishes`的错误被抛出,`washDishes`函数会被调用。如果一个匹配`Error.MissingIngredients`的错误被抛出，`buyGroceries(_:)`函数会随着被`catch`所捕捉到的关联值[`String`]被调用。\n\n## 断言\n可选类型可以让你判断值是否存在，你可以在代码中优雅地处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能没办法继续执行。这时，你可以在你的代码中触发一个断言（assertion）来结束代码运行并通过调试来找到值缺失的原因。\n\n## 使用断言进行调试\n断言会在运行时判断一个逻辑条件是否为`true`。从字面意思来说，断言“断言”一个条件是否为真。你可以使用断言来保证在运行其他代码之前，某些重要的条件已经被满足。如果条件判断为`true`，代码运行会继续进行；如果条件判断为`false`，代码执行结束，你的应用被终止。\n\n如果你的代码在调试环境下触发了一个断言，比如你在 Xcode 中构建并运行一个应用，你可以清楚地看到不合法的状态发生在哪里并检查断言被触发时你的应用的状态。此外，断言允许你附加一条调试信息。\n\n你可以使用全局`assert(_:_file:line:)`函数来写一个断言。向这个函数传入一个结果为`true`或者`false`的表达式以及一条信息，当表达式的结果为`false`的时候这条信息会被显示：\n``` swift\nlet age = -3\nassert(age >= 0, \"A person's age cannot be less than zero\")\n// 因为 age < 0，所以断言会触发\n```\n在这个例子中，只有`age >= 0`为`true`的时候，即`age`的值非负的时候，代码才会继续执行。如果`age`的值是负数，就像代码中那样，`age >= 0为false`，断言被触发，终止应用。\n\n如果不需要断言信息，可以省略，就像这样：\n``` swift\nassert(age >= 0)\n```\n> 注意：当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。\n\n## 何时使用断言\n当条件可能为假时使用断言，但是最终一定要_保证_条件为真，这样你的代码才能继续运行。断言的适用情景：\n* 整数类型的下标索引被传入一个自定义下标实现，但是下标索引值可能太小或者太大。\n* 需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。\n* 一个可选值现在是`nil`，但是后面的代码运行需要一个非`nil`值。\n\n> 注意：断言可能导致你的应用终止运行，所以你应当仔细设计你的代码来让非法条件不会出现。然而，在你的应用发布之前，有时候非法条件可能出现，这时使用断言可以快速发现问题。","source":"_posts/Swift学习笔记之基础部分.md","raw":"---\ntitle: Swift学习笔记之基础部分\ndate: 2016-04-29 10:07:32\ntags:\n  - Swift\ncategories: Swift学习笔记\nabbrlink: 93ae863d100e0fb4\n---\n\n\n> 本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。\n\n## 概述\nSwift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。\n\n<!-- more -->\nSwift包含了C 和objc上所有的数据类型，`Int`表示整型值；`Double`和`Float`表示浮点型值；`Bool`是布尔型值；`String`是字符串型值。此外Swift还提供了三个基本的集合类型，`Array`，`Set`和`Dictionary`。\n除了我们熟悉的类型，Swift 还增加了 objc 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。\n\nSwift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示“那儿有一个值，并且它等于 x ”或者“那儿没有值”。可选有点像在 objc 中使用`nil`，但是它可以用在任何类型上，不仅仅是类。可选类型比 objc 中的nil指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。\n\nSwift 是一门类型安全的语言，可选类型就是一个很好的例子。Swift 可以让你清楚地知道值的类型。如果你的代码期望得到一个String，类型安全会阻止你不小心传入一个`Int`。你可以在开发阶段尽早发现并修正错误。\n\n## 常量和变量\n常量的值一旦设定就不能改变，而变量的值可以随意更改。\n\n## 声明常量和变量\n常量和变量必须在使用前声明，用`let`来声明常量，用`var`来声明变量。下面的例子展示了如何用常量和变量\n\n``` swift\nlet maxNumberOfLoginTimes = 10\nvar currentLoginTimes = 0\n```\n\n这两行代码可以理解为：\n`maxNumberOfLoginTimes`声明为一个常量，它的值是10并且不可再被改变，`currentLoginAttempt`申明为一个初始值为0的变量。\n我们可以在一行中声明多个常量或者多个变量，用逗号隔开：\n``` swift\nvar x = 0.0, y = 0.0\nlet a = 1, b = 2\n```\n> 注意：如果你的代码中有不需要改变的值，请使用`let`关键字将它声明为常量。只将需要改变的值声明为变量。与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：\n\n``` swift\nlet languageName = \"Swift\"\nlanguageName = \"Swift++\"\n// 这会报编译时错误 - languageName 不可改变\n```\n\n## 类型标注\n\n当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。\n这个例子给`welcomeMessage`变量添加了类型标注，表示这个变量可以存储`String`类型的值：\n``` swift\nvar welcomeMessage: String\n```\n声明中的冒号代表着“是...类型”，所以这行代码可以被理解为：\n“声明一个类型为`String`，名字为`welcomeMessage`的变量。”\n“类型为`String`”的意思是“可以存储任意`String`类型的值。”\n`welcomeMessage`变量现在可以被设置成任意字符串：\n``` swift\nwelcomeMessage = \"Hello\"\n```\n你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型标注：\n``` swift\nvar red, green, blue: Double\n```\n> 注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给`welcomeMessage`赋初始值，所以变量`welcomeMessage`的类型是通过一个类型标注指定的，而不是通过初始值推断的。\n\n## 常量和变量的命名\n你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：\n``` swift\nlet π = 3.14159\nlet 你好 = \"你好世界\"\nlet 🐶🐮 = \"dogcow\"\n```\n常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。\n\n一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。\n> 注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。\n\n## 输出常量和变量\n你可以用`print(_:separator:terminator:)`函数来输出当前常量或变量的值:\n``` swift\nvar friendlyWelcome = \"Bonjour!\"\nprint(friendlyWelcome)\n// 输出 \"Bonjour!\"\n```\n`print(_:separator:terminator:)`是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，`print(_:separator:terminator:)`将会输出内容到“console”面板上。separator和terminator参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给terminator参数--例如，`print(someValue, terminator:\"\")`。\n\nSwift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：\n``` swift\nprint(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")\n// 输出 \"The current value of friendlyWelcome is Bonjour!\n```\n\n## 注释\n请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。\n与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：\n``` swift\n/* 这是第一个多行注释的开头\n/* 这是第二个被嵌套的多行注释 */\n这是第一个多行注释的结尾 */\n```\n通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。\n当然Swift的单行注释和多行注释和C语言的类似。\n``` swift\n// 这是一个单行注释\n/* 这是一个,\n多行注释 */\n```\n\n## 分号\n与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：\n``` swift\nlet cat = \"🐱\"; print(cat)\n// 输出 \"🐱\"\n```\n## 整数\n整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。\n\nSwift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是`UInt8`，32位有符号整数类型是`Int32`。就像 Swift 的其他类型一样，整数类型采用大写命名法。\n\n## 整数范围\n你可以访问不同整数类型的`min`和`max`属性来获取对应类型的最小值和最大值：\n``` swift\nlet minValue = UInt8.min  // minValue 为 0，是 UInt8 类型\nlet maxValue = UInt8.max  // maxValue 为 255，是 UInt8 类型\n```\n`min`和`max`所传回值的类型，正是其所对的整数类型(如上例`UInt8`, 所传回的类型是`UInt8`)，可用在表达式中相同类型值旁。\n\n## Int\n一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：\n* 在32位平台上，`Int`和`Int32`长度相同。\n* 在64位平台上，`Int`和`Int64`长度相同。\n除非你需要特定长度的整数，一般来说使用`Int`就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，`Int`可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。\n\n## UInt\nSwift 也提供了一个特殊的无符号类型`UInt`，长度与当前平台的原生字长相同：\n* 在32位平台上，`UInt`和`UInt32`长度相同。\n* 在64位平台上，`UInt`和`UInt64`长度相同。\n> 注意：尽量不要使用`UInt`，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用`Int`，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断\n\n## 浮点数\n浮点数是有小数部分的数字，比如`3.14159`，`0.1`和`-273.15`。\n\n浮点类型比整数类型表示的范围更大，可以存储比`Int`类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：\n* `Double`表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。\n* `Float`表示32位浮点数。精度要求不高的话可以使用此类型。\n\n## 类型安全和类型推断\nSwift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个`String`，你绝对不可能不小心传进去一个`Int`。\n\n由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。\n\n当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。\n\n因为有类型推断，和 C 或者 objc 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。\n\n当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如`42`和`3.14159`。）\n\n例如，如果你给一个新常量赋值`42`并且没有标明类型，Swift 可以推断出常量类型是Int，因为你给它赋的初始值看起来像一个整数：\n``` swift\nlet meaningOfLife = 42\n// meaningOfLife 会被推测为 Int 类型\n```\n同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是`Double`：\n``` swift\nlet pi = 3.14159\n// pi 会被推测为 Double 类型\n```\n当推断浮点数的类型时，Swift 总是会选择`Double`而不是`Float`。\n如果表达式中同时出现了整数和浮点数，会被推断为`Double`类型：\n``` swift\nlet anotherPi = 3 + 0.14159\n// anotherPi 会被推测为 Double 类型\n```\n原始值`3`没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为`Double`类型。\n\n## 数值型字面量\n整数字面量可以被写作：\n* 一个十进制数，没有前缀\n* 一个二进制数，前缀是`0b`\n* 一个八进制数，前缀是`0o`\n* 一个十六进制数，前缀是`0x`\n\n下面的所有整数字面量的十进制值都是16:\n``` swift\nlet decimalInteger = 16\nlet binaryInteger = 0b10000       // 二进制的16\nlet octalInteger = 0o20           // 八进制的16\nlet hexadecimalInteger = 0x10     // 十六进制的16\n```\n浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是`0x`）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 `e` 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 `p` 来指定。\n如果一个十进制数的指数为`exp`，那这个数相当于基数和10^exp的乘积：\n* `1.25e2` 表示 1.25 × 10^2，等于 `125.0`。\n* `1.25e-2` 表示 1.25 × 10^-2，等于 `0.0125`。\n\n如果一个十六进制数的指数为`exp`，那这个数相当于基数和2^exp的乘积：\n* `0xFp2` 表示 15 × 2^2，等于 `60.0`。\n* `0xFp-2` 表示 15 × 2^-2，等于 `3.75`。\n\n下面的这些浮点字面量都等于十进制的`12.1875`：\n``` swift\nlet decimalDouble = 12.1875\nlet exponentDouble = 1.21875e1\nlet hexadecimalDouble = 0xC.3p0\n```\n数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：\n``` swift\nlet paddedDouble = 000123.456\nlet oneMillion = 1_000_000\nlet justOverOneMillion = 1_000_000.000_000_1\n```\n\n## 数值型类型转换\n\n通常来讲，即使代码中的整数常量和变量已知非负，也请使用`Int`类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。\n\n只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。\n\n## 整数转换\n不同整数类型的变量和常量可以存储不同范围的数字。`Int8`类型的常量或者变量可以存储的数字范围是-128~127，而`UInt8`类型的常量或者变量能存储的数字范围是0~255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：\n``` swift\nlet cannotBeNegative: UInt8 = -1\n// UInt8 类型不能存储负数，所以会报错\nlet tooBig: Int8 = Int8.max + 1\n// Int8 类型不能存储超过最大值的数，所以会报错\n```\n由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。\n\n要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量`twoThousand`是`UInt16`类型，然而常量`one`是`UInt8`类型。它们不能直接相加，因为它们类型不同。所以要调用`UInt16(one)`来创建一个新的`UInt16`数字并用`one`的值来初始化，然后使用这个新数字来计算：\n``` swift\nlet twoThousand: UInt16 = 2_000\nlet one: UInt8 = 1\nlet twoThousandAndOne = twoThousand + UInt16(one)\n```\n现在两个数字的类型都是`UInt16`，可以进行相加。目标常量`twoThousandAndOne`的类型被推断为`UInt16`，因为它是两个`UInt16`值的和。\n\n`SomeType(ofInitialValue)`是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，`UInt16`有一个构造器，可以接受一个`UInt8`类型的值，所以这个构造器可以用现有的`UInt8`来创建一个新的`UInt16`。注意，你并不能传入任意类型的值，只能传入`UInt16`内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型）。\n\n## 整数和浮点数转换\n整数和浮点数的转换必须显式指定类型：\n``` swift\nlet three = 3\nlet pointOneFourOneFiveNine = 0.14159\nlet pi = Double(three) + pointOneFourOneFiveNine\n// pi 等于 3.14159，所以被推测为 Double 类型\n```\n这个例子中，常量`three`的值被用来创建一个`Double`类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。\n浮点数到整数的反向转换同样行，整数类型可以用`Double`或者`Float`类型来初始化：\n``` swift\nlet integerPi = Int(pi)\n// integerPi 等于 3，所以被推测为 Int 类型\n```\n当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说`4.75`会变成`4`，`-3.9`会变成`-3`。\n> 注意：结合数字类常量和变量不同于结合数字类字面量。字面量`3`可以直接和字面量`0.14159`相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。\n\n## 类型别名\n\n类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用`typealias`关键字来定义类型别名。\n\n当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：\n``` swift\ntypealias AudioSample = UInt16\n```\n定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：\n``` swift\nvar maxAmplitudeFound = AudioSample.min\n// maxAmplitudeFound 现在是 0\n```\n本例中，`AudioSample`被定义为`UInt16`的一个别名。因为它是别名，`AudioSample.min`实际上是`UInt16.min`，所以会给`maxAmplitudeFound`赋一个初值`0`。\n\n## 布尔值\nSwift 有一个基本的布尔（Boolean）类型，叫做`Bool`。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，`true`和`false`：\n``` swift\nlet orangesAreOrange = true\nlet turnipsAreDelicious = false\n```\n`orangesAreOrange`和`turnipsAreDelicious`的类型会被推断为`Bool`，因为它们的初值是布尔字面量。就像之前提到的`Int`和`Double`一样，如果你创建变量的时候给它们赋值`true`或者`false`，那你不需要将常量或者变量声明为`Bool`类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。\n当你编写条件语句比如`if`语句的时候，布尔值非常有用：\n``` swift\nif turnipsAreDelicious {\n    print(\"Mmm, tasty turnips!\")\n} else {\n    print(\"Eww, turnips are horrible.\")\n}\n// 输出 \"Eww, turnips are horrible.\"\n```\n如果你在需要使用`Bool`类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：\n``` swift\nlet i = 1\nif i {\n    // 这个例子不会通过编译，会报错\n}\n```\n然而，下面的例子是合法的：\n``` swift\nlet i = 1\nif i == 1 {\n    // 这个例子会编译成功\n}\n```\n`i == 1`的比较结果是`Bool`类型，所以第二个例子可以通过类型检查。\n\n和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。\n\n## 元组\n\n元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。\n\n下面这个例子中，`(404, \"Not Found\")`是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个`404 Not Found`状态码。\n``` swift\nlet http404Error = (404, \"Not Found\")\n// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\")\n```\n`(404, \"Not Found\")`元组把一个`Int`值和一个`String`值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为`(Int, String)`的元组”。\n你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为`(Int, Int, Int)`或者`(String, Bool)`或者其他任何你想要的组合的元组。\n你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：\n``` swift\nlet (statusCode, statusMessage) = http404Error\nprint(\"The status code is \\(statusCode)\")\n// 输出 \"The status code is 404\"\nprint(\"The status message is \\(statusMessage)\")\n// 输出 \"The status message is Not Found\"\n```\n如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（`_`）标记：\n``` swift\nlet (justTheStatusCode, _) = http404Error\nprint(\"The status code is \\(justTheStatusCode)\")\n// 输出 \"The status code is 404\"\n```\n此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：\n``` swift\nprint(\"The status code is \\(http404Error.0)\")\n// 输出 \"The status code is 404\"\nprint(\"The status message is \\(http404Error.1)\")\n// 输出 \"The status message is Not Found\"\n```\n你可以在定义元组的时候给单个元素命名：\n``` swift\nlet http200Status = (statusCode: 200, description: \"OK\")\n```\n给元组中的元素命名后，你可以通过名字来获取这些元素的值：\n``` swift\nprint(\"The status code is \\(http200Status.statusCode)\")\n// 输出 \"The status code is 200\"\nprint(\"The status message is \\(http200Status.description)\")\n// 输出 \"The status message is OK\"\n```\n作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个`(Int, String)`元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。\n> 注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。\n\n## 可选类型\n\n使用可选类型（optionals）来处理值可能缺失的情况。\n来看一个例子。Swift 的`Int`类型有一种构造器，作用是将一个`String`值转换成一个`Int`值。然而，并不是所有的字符串都可以转换成一个整数。字符串`\"123\"`可以被转换成数字`123`，但是字符串`\"hello, world\"`不行。\n\n下面的例子使用这种构造器来尝试将一个`String`转换成`Int`：\n``` swift\nlet possibleNumber = \"123\"\nlet convertedNumber = Int(possibleNumber)\n// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"\n```\n因为该构造器可能会失败，所以它返回一个可选类型（optional）`Int`，而不是一个`Int`。一个可选的`Int`被写作`Int?`而不是`Int`。问号暗示包含的值是可选类型，也就是说可能包含`Int`值也可能不包含值。（不能包含其他任何值比如`Bool`值或者`String`值。只能是\t`Int`或者什么都没有。）\n\n## nil\n你可以给可选变量赋值为`nil`来表示它没有值：\n``` swift\nvar serverResponseCode: Int? = 404\n// serverResponseCode 包含一个可选的 Int 值 404\nserverResponseCode = nil\n// serverResponseCode 现在不包含值\n```\n> 注意：`nil`不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。\n\n如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为`nil`：\n``` swift\nvar surveyAnswer: String?\n// surveyAnswer 被自动设置为 nil\n```\n> 注意：Swift 的`nil`和 objc 中的`nil`并不一样。在 objc 中，`nil`是一个指向不存在对象的指针。在 Swift 中，`nil`不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为`nil`，不只是对象类型。\n\n## if 语句以及强制解析\n你可以使用`if`语句和`nil`比较来判断一个可选值是否包含值。你可以使用“相等”(`==`)或“不等”(`!=`)来执行比较。\n\n如果可选类型有值，它将不等于`nil`:\n``` swift\nif convertedNumber != nil {\n    print(\"convertedNumber contains some integer value.\")\n}\n// 输出 \"convertedNumber contains some integer value.\"\n```\n当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（`!`）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：\n``` swift\nif convertedNumber != nil {\n    print(\"convertedNumber has an integer value of \\(convertedNumber!).\")\n}\n// 输出 \"convertedNumber has an integer value of 123.\"\n```\n> 注意：使用`!`来获取一个不存在的可选值会导致运行时错误。使用`!`来强制解析值之前，一定要确定可选包含一个非`nil`的值。\n\n## 可选绑定\n\n使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在`if`和`while`语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。\n\n像下面这样在`if`语句中写一个可选绑定：\n``` swift\nif let constantName = someOptional {\n    statements\n}\n```\n你可以像上面这样使用可选绑定来重写`possibleNumber`这个例子：\n``` swift\nif let actualNumber = Int(possibleNumber) {\n    print(\"\\'\\(possibleNumber)\\' has an integer value of \\(actualNumber)\")\n} else {\n    print(\"\\'\\(possibleNumber)\\' could not be converted to an integer\")\n}\n// 输出 \"'123' has an integer value of 123\"\n```\n这段代码可以被理解为：“如果`Int(possibleNumber)`返回的可选`Int`包含一个值，创建一个叫做`actualNumber`的新常量并将可选包含的值赋给它。”\n\n如果转换成功，`actualNumber`常量可以在`if`语句的第一个分支中使用。它已经被可选类型 包含的 值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，`actualNumber`只被用来输出转换结果。\n\n你可以在可选绑定中使用常量和变量。如果你想在`if`语句的第一个分支中操作`actualNumber`的值，你可以改成`if var actualNumber`，这样可选类型包含的值就会被赋给一个变量而非常量。\n\n你可以包含多个可选绑定在`if`语句中，并使用`where`子句做布尔值判断。\n``` swift\nif let firstNumber = Int(\"4\"), secondNumber = Int(\"42\") where firstNumber < secondNumber {\n    print(\"\\(firstNumber) < \\(secondNumber)\")\n}\n// prints \"4 < 42\"\n```\n\n## 隐式解析可选类型\n\n如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。\n\n有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型_总会_有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。\n\n这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（`String?`）改成感叹号（`String!`）来声明一个隐式解析可选类型。\n\n当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。\n\n一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型`String`和隐式解析可选类型`String`之间的区别：\n``` swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // 需要惊叹号来获取值\n\nlet assumedString: String! = \"An implicitly unwrapped optional string.\"\nlet implicitString: String = assumedString  // 不需要感叹号\n```\n你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。\n\n> 注意：如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个惊叹号一样。\n\n你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：\n``` swift\nif assumedString != nil {\n    print(assumedString)\n}\n// 输出 \"An implicitly unwrapped optional string.\"\n```\n你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：\n``` swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// 输出 \"An implicitly unwrapped optional string.\"\n```\n> 注意：如果一个变量之后可能变成`nil`的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是`nil`的话，请使用普通可选类型。\n\n## 错误处理\n你可以使用错误处理（error handling）来应对程序执行中可能会遇到的错误条件。相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。\n``` swift\nfunc canThrowAnError() throws {\n    // 这个函数有可能抛出错误\n}\n```\n一个函数可以通过在声明中添加`throws`关键词来抛出错误消息。当你的函数能抛出错误消息时, 你应该在表达式中前置`try`关键词。\n``` swift\ndo {\n    try canThrowAnError()\n    // 没有错误消息抛出\n} catch {\n    // 有一个错误消息抛出\n}\n```\n一个`do`语句创建了一个新的包含作用域,使得错误能被传播到一个或多个`catch`从句。\n这里有一个错误处理如何用来应对不同错误条件的例子。\n``` swift\nfunc makeASandwich() throws {\n    // ...\n}\n\ndo {\n    try makeASandwich()\n    eatASandwich()\n} catch Error.OutOfCleanDishes {\n    washDishes()\n} catch Error.MissingIngredients(let ingredients) {\n    buyGroceries(ingredients)\n}\n```\n在此例中，`makeASandwich()`（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为`makeASandwich()`抛出错误，函数调用被包裹在`try`表达式中。将函数包裹在一个`do`语句中,任何被抛出的错误会被传播到提供的`catch`从句中。\n\n如果没有错误被抛出, `eatASandwich()`函数会被调用。如果一个匹配`Error.OutOfCleanDishes`的错误被抛出,`washDishes`函数会被调用。如果一个匹配`Error.MissingIngredients`的错误被抛出，`buyGroceries(_:)`函数会随着被`catch`所捕捉到的关联值[`String`]被调用。\n\n## 断言\n可选类型可以让你判断值是否存在，你可以在代码中优雅地处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能没办法继续执行。这时，你可以在你的代码中触发一个断言（assertion）来结束代码运行并通过调试来找到值缺失的原因。\n\n## 使用断言进行调试\n断言会在运行时判断一个逻辑条件是否为`true`。从字面意思来说，断言“断言”一个条件是否为真。你可以使用断言来保证在运行其他代码之前，某些重要的条件已经被满足。如果条件判断为`true`，代码运行会继续进行；如果条件判断为`false`，代码执行结束，你的应用被终止。\n\n如果你的代码在调试环境下触发了一个断言，比如你在 Xcode 中构建并运行一个应用，你可以清楚地看到不合法的状态发生在哪里并检查断言被触发时你的应用的状态。此外，断言允许你附加一条调试信息。\n\n你可以使用全局`assert(_:_file:line:)`函数来写一个断言。向这个函数传入一个结果为`true`或者`false`的表达式以及一条信息，当表达式的结果为`false`的时候这条信息会被显示：\n``` swift\nlet age = -3\nassert(age >= 0, \"A person's age cannot be less than zero\")\n// 因为 age < 0，所以断言会触发\n```\n在这个例子中，只有`age >= 0`为`true`的时候，即`age`的值非负的时候，代码才会继续执行。如果`age`的值是负数，就像代码中那样，`age >= 0为false`，断言被触发，终止应用。\n\n如果不需要断言信息，可以省略，就像这样：\n``` swift\nassert(age >= 0)\n```\n> 注意：当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。\n\n## 何时使用断言\n当条件可能为假时使用断言，但是最终一定要_保证_条件为真，这样你的代码才能继续运行。断言的适用情景：\n* 整数类型的下标索引被传入一个自定义下标实现，但是下标索引值可能太小或者太大。\n* 需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。\n* 一个可选值现在是`nil`，但是后面的代码运行需要一个非`nil`值。\n\n> 注意：断言可能导致你的应用终止运行，所以你应当仔细设计你的代码来让非法条件不会出现。然而，在你的应用发布之前，有时候非法条件可能出现，这时使用断言可以快速发现问题。","slug":"Swift学习笔记之基础部分","published":1,"updated":"2022-05-19T03:13:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenw002jl1l305ud5hit","content":"<blockquote>\n<p>本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。</p>\n<span id=\"more\"></span>\n<p>Swift包含了C 和objc上所有的数据类型，<code>Int</code>表示整型值；<code>Double</code>和<code>Float</code>表示浮点型值；<code>Bool</code>是布尔型值；<code>String</code>是字符串型值。此外Swift还提供了三个基本的集合类型，<code>Array</code>，<code>Set</code>和<code>Dictionary</code>。<br>除了我们熟悉的类型，Swift 还增加了 objc 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。</p>\n<p>Swift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示“那儿有一个值，并且它等于 x ”或者“那儿没有值”。可选有点像在 objc 中使用<code>nil</code>，但是它可以用在任何类型上，不仅仅是类。可选类型比 objc 中的nil指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。</p>\n<p>Swift 是一门类型安全的语言，可选类型就是一个很好的例子。Swift 可以让你清楚地知道值的类型。如果你的代码期望得到一个String，类型安全会阻止你不小心传入一个<code>Int</code>。你可以在开发阶段尽早发现并修正错误。</p>\n<h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><p>常量的值一旦设定就不能改变，而变量的值可以随意更改。</p>\n<h2 id=\"声明常量和变量\"><a href=\"#声明常量和变量\" class=\"headerlink\" title=\"声明常量和变量\"></a>声明常量和变量</h2><p>常量和变量必须在使用前声明，用<code>let</code>来声明常量，用<code>var</code>来声明变量。下面的例子展示了如何用常量和变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> maxNumberOfLoginTimes <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentLoginTimes <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这两行代码可以理解为：<br><code>maxNumberOfLoginTimes</code>声明为一个常量，它的值是10并且不可再被改变，<code>currentLoginAttempt</code>申明为一个初始值为0的变量。<br>我们可以在一行中声明多个常量或者多个变量，用逗号隔开：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">1</span>, b <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果你的代码中有不需要改变的值，请使用<code>let</code>关键字将它声明为常量。只将需要改变的值声明为变量。与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> languageName <span class=\"operator\">=</span> <span class=\"string\">&quot;Swift&quot;</span></span><br><span class=\"line\">languageName <span class=\"operator\">=</span> <span class=\"string\">&quot;Swift++&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 这会报编译时错误 - languageName 不可改变</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型标注\"><a href=\"#类型标注\" class=\"headerlink\" title=\"类型标注\"></a>类型标注</h2><p>当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。<br>这个例子给<code>welcomeMessage</code>变量添加了类型标注，表示这个变量可以存储<code>String</code>类型的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> welcomeMessage: <span class=\"type\">String</span></span><br></pre></td></tr></table></figure>\n<p>声明中的冒号代表着“是…类型”，所以这行代码可以被理解为：<br>“声明一个类型为<code>String</code>，名字为<code>welcomeMessage</code>的变量。”<br>“类型为<code>String</code>”的意思是“可以存储任意<code>String</code>类型的值。”<br><code>welcomeMessage</code>变量现在可以被设置成任意字符串：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">welcomeMessage <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>\n<p>你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型标注：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> red, green, blue: <span class=\"type\">Double</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给<code>welcomeMessage</code>赋初始值，所以变量<code>welcomeMessage</code>的类型是通过一个类型标注指定的，而不是通过初始值推断的。</p>\n</blockquote>\n<h2 id=\"常量和变量的命名\"><a href=\"#常量和变量的命名\" class=\"headerlink\" title=\"常量和变量的命名\"></a>常量和变量的命名</h2><p>你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> π <span class=\"operator\">=</span> <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> 你好 <span class=\"operator\">=</span> <span class=\"string\">&quot;你好世界&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> 🐶🐮 <span class=\"operator\">=</span> <span class=\"string\">&quot;dogcow&quot;</span></span><br></pre></td></tr></table></figure>\n<p>常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>\n<p>一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。</p>\n<blockquote>\n<p>注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。</p>\n</blockquote>\n<h2 id=\"输出常量和变量\"><a href=\"#输出常量和变量\" class=\"headerlink\" title=\"输出常量和变量\"></a>输出常量和变量</h2><p>你可以用<code>print(_:separator:terminator:)</code>函数来输出当前常量或变量的值:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friendlyWelcome <span class=\"operator\">=</span> <span class=\"string\">&quot;Bonjour!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(friendlyWelcome)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;Bonjour!&quot;</span></span><br></pre></td></tr></table></figure>\n<p><code>print(_:separator:terminator:)</code>是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，<code>print(_:separator:terminator:)</code>将会输出内容到“console”面板上。separator和terminator参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给terminator参数–例如，<code>print(someValue, terminator:&quot;&quot;)</code>。</p>\n<p>Swift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The current value of friendlyWelcome is <span class=\"subst\">\\(friendlyWelcome)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The current value of friendlyWelcome is Bonjour!</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。<br>与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这是第一个多行注释的开头</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"comment\">/* 这是第二个被嵌套的多行注释 */</span></span></span><br><span class=\"line\"><span class=\"comment\">这是第一个多行注释的结尾 */</span></span><br></pre></td></tr></table></figure>\n<p>通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。<br>当然Swift的单行注释和多行注释和C语言的类似。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一个单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 这是一个,</span></span><br><span class=\"line\"><span class=\"comment\">多行注释 */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h2><p>与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat <span class=\"operator\">=</span> <span class=\"string\">&quot;🐱&quot;</span>; <span class=\"built_in\">print</span>(cat)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;🐱&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h2><p>整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。</p>\n<p>Swift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是<code>UInt8</code>，32位有符号整数类型是<code>Int32</code>。就像 Swift 的其他类型一样，整数类型采用大写命名法。</p>\n<h2 id=\"整数范围\"><a href=\"#整数范围\" class=\"headerlink\" title=\"整数范围\"></a>整数范围</h2><p>你可以访问不同整数类型的<code>min</code>和<code>max</code>属性来获取对应类型的最小值和最大值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> minValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.min  <span class=\"comment\">// minValue 为 0，是 UInt8 类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.max  <span class=\"comment\">// maxValue 为 255，是 UInt8 类型</span></span><br></pre></td></tr></table></figure>\n<p><code>min</code>和<code>max</code>所传回值的类型，正是其所对的整数类型(如上例<code>UInt8</code>, 所传回的类型是<code>UInt8</code>)，可用在表达式中相同类型值旁。</p>\n<h2 id=\"Int\"><a href=\"#Int\" class=\"headerlink\" title=\"Int\"></a>Int</h2><p>一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：</p>\n<ul>\n<li>在32位平台上，<code>Int</code>和<code>Int32</code>长度相同。</li>\n<li>在64位平台上，<code>Int</code>和<code>Int64</code>长度相同。<br>除非你需要特定长度的整数，一般来说使用<code>Int</code>就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，<code>Int</code>可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。</li>\n</ul>\n<h2 id=\"UInt\"><a href=\"#UInt\" class=\"headerlink\" title=\"UInt\"></a>UInt</h2><p>Swift 也提供了一个特殊的无符号类型<code>UInt</code>，长度与当前平台的原生字长相同：</p>\n<ul>\n<li>在32位平台上，<code>UInt</code>和<code>UInt32</code>长度相同。</li>\n<li>在64位平台上，<code>UInt</code>和<code>UInt64</code>长度相同。<blockquote>\n<p>注意：尽量不要使用<code>UInt</code>，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用<code>Int</code>，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h2><p>浮点数是有小数部分的数字，比如<code>3.14159</code>，<code>0.1</code>和<code>-273.15</code>。</p>\n<p>浮点类型比整数类型表示的范围更大，可以存储比<code>Int</code>类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：</p>\n<ul>\n<li><code>Double</code>表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。</li>\n<li><code>Float</code>表示32位浮点数。精度要求不高的话可以使用此类型。</li>\n</ul>\n<h2 id=\"类型安全和类型推断\"><a href=\"#类型安全和类型推断\" class=\"headerlink\" title=\"类型安全和类型推断\"></a>类型安全和类型推断</h2><p>Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个<code>String</code>，你绝对不可能不小心传进去一个<code>Int</code>。</p>\n<p>由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。</p>\n<p>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。</p>\n<p>因为有类型推断，和 C 或者 objc 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。</p>\n<p>当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如<code>42</code>和<code>3.14159</code>。）</p>\n<p>例如，如果你给一个新常量赋值<code>42</code>并且没有标明类型，Swift 可以推断出常量类型是Int，因为你给它赋的初始值看起来像一个整数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meaningOfLife <span class=\"operator\">=</span> <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"comment\">// meaningOfLife 会被推测为 Int 类型</span></span><br></pre></td></tr></table></figure>\n<p>同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是<code>Double</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pi <span class=\"operator\">=</span> <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"comment\">// pi 会被推测为 Double 类型</span></span><br></pre></td></tr></table></figure>\n<p>当推断浮点数的类型时，Swift 总是会选择<code>Double</code>而不是<code>Float</code>。<br>如果表达式中同时出现了整数和浮点数，会被推断为<code>Double</code>类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherPi <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"operator\">+</span> <span class=\"number\">0.14159</span></span><br><span class=\"line\"><span class=\"comment\">// anotherPi 会被推测为 Double 类型</span></span><br></pre></td></tr></table></figure>\n<p>原始值<code>3</code>没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为<code>Double</code>类型。</p>\n<h2 id=\"数值型字面量\"><a href=\"#数值型字面量\" class=\"headerlink\" title=\"数值型字面量\"></a>数值型字面量</h2><p>整数字面量可以被写作：</p>\n<ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是<code>0b</code></li>\n<li>一个八进制数，前缀是<code>0o</code></li>\n<li>一个十六进制数，前缀是<code>0x</code></li>\n</ul>\n<p>下面的所有整数字面量的十进制值都是16:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decimalInteger <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryInteger <span class=\"operator\">=</span> <span class=\"number\">0b10000</span>       <span class=\"comment\">// 二进制的16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> octalInteger <span class=\"operator\">=</span> <span class=\"number\">0o20</span>           <span class=\"comment\">// 八进制的16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger <span class=\"operator\">=</span> <span class=\"number\">0x10</span>     <span class=\"comment\">// 十六进制的16</span></span><br></pre></td></tr></table></figure>\n<p>浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是<code>0x</code>）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 <code>e</code> 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 <code>p</code> 来指定。<br>如果一个十进制数的指数为<code>exp</code>，那这个数相当于基数和10^exp的乘积：</p>\n<ul>\n<li><code>1.25e2</code> 表示 1.25 × 10^2，等于 <code>125.0</code>。</li>\n<li><code>1.25e-2</code> 表示 1.25 × 10^-2，等于 <code>0.0125</code>。</li>\n</ul>\n<p>如果一个十六进制数的指数为<code>exp</code>，那这个数相当于基数和2^exp的乘积：</p>\n<ul>\n<li><code>0xFp2</code> 表示 15 × 2^2，等于 <code>60.0</code>。</li>\n<li><code>0xFp-2</code> 表示 15 × 2^-2，等于 <code>3.75</code>。</li>\n</ul>\n<p>下面的这些浮点字面量都等于十进制的<code>12.1875</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decimalDouble <span class=\"operator\">=</span> <span class=\"number\">12.1875</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> exponentDouble <span class=\"operator\">=</span> <span class=\"number\">1.21875e1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexadecimalDouble <span class=\"operator\">=</span> <span class=\"number\">0xC.3p0</span></span><br></pre></td></tr></table></figure>\n<p>数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> paddedDouble <span class=\"operator\">=</span> <span class=\"number\">000123.456</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oneMillion <span class=\"operator\">=</span> <span class=\"number\">1_000_000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> justOverOneMillion <span class=\"operator\">=</span> <span class=\"number\">1_000_000.000_000_1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值型类型转换\"><a href=\"#数值型类型转换\" class=\"headerlink\" title=\"数值型类型转换\"></a>数值型类型转换</h2><p>通常来讲，即使代码中的整数常量和变量已知非负，也请使用<code>Int</code>类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。</p>\n<p>只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。</p>\n<h2 id=\"整数转换\"><a href=\"#整数转换\" class=\"headerlink\" title=\"整数转换\"></a>整数转换</h2><p>不同整数类型的变量和常量可以存储不同范围的数字。<code>Int8</code>类型的常量或者变量可以存储的数字范围是-128<del>127，而<code>UInt8</code>类型的常量或者变量能存储的数字范围是0</del>255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cannotBeNegative: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// UInt8 类型不能存储负数，所以会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tooBig: <span class=\"type\">Int8</span> <span class=\"operator\">=</span> <span class=\"type\">Int8</span>.max <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// Int8 类型不能存储超过最大值的数，所以会报错</span></span><br></pre></td></tr></table></figure>\n<p>由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。</p>\n<p>要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量<code>twoThousand</code>是<code>UInt16</code>类型，然而常量<code>one</code>是<code>UInt8</code>类型。它们不能直接相加，因为它们类型不同。所以要调用<code>UInt16(one)</code>来创建一个新的<code>UInt16</code>数字并用<code>one</code>的值来初始化，然后使用这个新数字来计算：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoThousand: <span class=\"type\">UInt16</span> <span class=\"operator\">=</span> <span class=\"number\">2_000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> one: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> twoThousandAndOne <span class=\"operator\">=</span> twoThousand <span class=\"operator\">+</span> <span class=\"type\">UInt16</span>(one)</span><br></pre></td></tr></table></figure>\n<p>现在两个数字的类型都是<code>UInt16</code>，可以进行相加。目标常量<code>twoThousandAndOne</code>的类型被推断为<code>UInt16</code>，因为它是两个<code>UInt16</code>值的和。</p>\n<p><code>SomeType(ofInitialValue)</code>是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，<code>UInt16</code>有一个构造器，可以接受一个<code>UInt8</code>类型的值，所以这个构造器可以用现有的<code>UInt8</code>来创建一个新的<code>UInt16</code>。注意，你并不能传入任意类型的值，只能传入<code>UInt16</code>内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型）。</p>\n<h2 id=\"整数和浮点数转换\"><a href=\"#整数和浮点数转换\" class=\"headerlink\" title=\"整数和浮点数转换\"></a>整数和浮点数转换</h2><p>整数和浮点数的转换必须显式指定类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> three <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pointOneFourOneFiveNine <span class=\"operator\">=</span> <span class=\"number\">0.14159</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pi <span class=\"operator\">=</span> <span class=\"type\">Double</span>(three) <span class=\"operator\">+</span> pointOneFourOneFiveNine</span><br><span class=\"line\"><span class=\"comment\">// pi 等于 3.14159，所以被推测为 Double 类型</span></span><br></pre></td></tr></table></figure>\n<p>这个例子中，常量<code>three</code>的值被用来创建一个<code>Double</code>类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。<br>浮点数到整数的反向转换同样行，整数类型可以用<code>Double</code>或者<code>Float</code>类型来初始化：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> integerPi <span class=\"operator\">=</span> <span class=\"type\">Int</span>(pi)</span><br><span class=\"line\"><span class=\"comment\">// integerPi 等于 3，所以被推测为 Int 类型</span></span><br></pre></td></tr></table></figure>\n<p>当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说<code>4.75</code>会变成<code>4</code>，<code>-3.9</code>会变成<code>-3</code>。</p>\n<blockquote>\n<p>注意：结合数字类常量和变量不同于结合数字类字面量。字面量<code>3</code>可以直接和字面量<code>0.14159</code>相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。</p>\n</blockquote>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用<code>typealias</code>关键字来定义类型别名。</p>\n<p>当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> <span class=\"operator\">=</span> <span class=\"type\">UInt16</span></span><br></pre></td></tr></table></figure>\n<p>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxAmplitudeFound <span class=\"operator\">=</span> <span class=\"type\">AudioSample</span>.min</span><br><span class=\"line\"><span class=\"comment\">// maxAmplitudeFound 现在是 0</span></span><br></pre></td></tr></table></figure>\n<p>本例中，<code>AudioSample</code>被定义为<code>UInt16</code>的一个别名。因为它是别名，<code>AudioSample.min</code>实际上是<code>UInt16.min</code>，所以会给<code>maxAmplitudeFound</code>赋一个初值<code>0</code>。</p>\n<h2 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h2><p>Swift 有一个基本的布尔（Boolean）类型，叫做<code>Bool</code>。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，<code>true</code>和<code>false</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> orangesAreOrange <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> turnipsAreDelicious <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><code>orangesAreOrange</code>和<code>turnipsAreDelicious</code>的类型会被推断为<code>Bool</code>，因为它们的初值是布尔字面量。就像之前提到的<code>Int</code>和<code>Double</code>一样，如果你创建变量的时候给它们赋值<code>true</code>或者<code>false</code>，那你不需要将常量或者变量声明为<code>Bool</code>类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。<br>当你编写条件语句比如<code>if</code>语句的时候，布尔值非常有用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> turnipsAreDelicious &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Mmm, tasty turnips!&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eww, turnips are horrible.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;Eww, turnips are horrible.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果你在需要使用<code>Bool</code>类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> i &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个例子不会通过编译，会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，下面的例子是合法的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> i <span class=\"operator\">==</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个例子会编译成功</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>i == 1</code>的比较结果是<code>Bool</code>类型，所以第二个例子可以通过类型检查。</p>\n<p>和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。</p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。</p>\n<p>下面这个例子中，<code>(404, &quot;Not Found&quot;)</code>是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个<code>404 Not Found</code>状态码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error <span class=\"operator\">=</span> (<span class=\"number\">404</span>, <span class=\"string\">&quot;Not Found&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;)</span></span><br></pre></td></tr></table></figure>\n<p><code>(404, &quot;Not Found&quot;)</code>元组把一个<code>Int</code>值和一个<code>String</code>值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为<code>(Int, String)</code>的元组”。<br>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为<code>(Int, Int, Int)</code>或者<code>(String, Bool)</code>或者其他任何你想要的组合的元组。<br>你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 404&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(statusMessage)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status message is Not Found&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（<code>_</code>）标记：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (justTheStatusCode, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(justTheStatusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 404&quot;</span></span><br></pre></td></tr></table></figure>\n<p>此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(http404Error.<span class=\"number\">0</span>)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 404&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(http404Error.<span class=\"number\">1</span>)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status message is Not Found&quot;</span></span><br></pre></td></tr></table></figure>\n<p>你可以在定义元组的时候给单个元素命名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http200Status <span class=\"operator\">=</span> (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>给元组中的元素命名后，你可以通过名字来获取这些元素的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(http200Status.statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 200&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(http200Status.description)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status message is OK&quot;</span></span><br></pre></td></tr></table></figure>\n<p>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个<code>(Int, String)</code>元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。</p>\n<blockquote>\n<p>注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。</p>\n</blockquote>\n<h2 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h2><p>使用可选类型（optionals）来处理值可能缺失的情况。<br>来看一个例子。Swift 的<code>Int</code>类型有一种构造器，作用是将一个<code>String</code>值转换成一个<code>Int</code>值。然而，并不是所有的字符串都可以转换成一个整数。字符串<code>&quot;123&quot;</code>可以被转换成数字<code>123</code>，但是字符串<code>&quot;hello, world&quot;</code>不行。</p>\n<p>下面的例子使用这种构造器来尝试将一个<code>String</code>转换成<code>Int</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleNumber <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> convertedNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(possibleNumber)</span><br><span class=\"line\"><span class=\"comment\">// convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot;</span></span><br></pre></td></tr></table></figure>\n<p>因为该构造器可能会失败，所以它返回一个可选类型（optional）<code>Int</code>，而不是一个<code>Int</code>。一个可选的<code>Int</code>被写作<code>Int?</code>而不是<code>Int</code>。问号暗示包含的值是可选类型，也就是说可能包含<code>Int</code>值也可能不包含值。（不能包含其他任何值比如<code>Bool</code>值或者<code>String</code>值。只能是    <code>Int</code>或者什么都没有。）</p>\n<h2 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h2><p>你可以给可选变量赋值为<code>nil</code>来表示它没有值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serverResponseCode: <span class=\"type\">Int</span>? <span class=\"operator\">=</span> <span class=\"number\">404</span></span><br><span class=\"line\"><span class=\"comment\">// serverResponseCode 包含一个可选的 Int 值 404</span></span><br><span class=\"line\">serverResponseCode <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"comment\">// serverResponseCode 现在不包含值</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>nil</code>不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</p>\n</blockquote>\n<p>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为<code>nil</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> surveyAnswer: <span class=\"type\">String</span>?</span><br><span class=\"line\"><span class=\"comment\">// surveyAnswer 被自动设置为 nil</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：Swift 的<code>nil</code>和 objc 中的<code>nil</code>并不一样。在 objc 中，<code>nil</code>是一个指向不存在对象的指针。在 Swift 中，<code>nil</code>不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为<code>nil</code>，不只是对象类型。</p>\n</blockquote>\n<h2 id=\"if-语句以及强制解析\"><a href=\"#if-语句以及强制解析\" class=\"headerlink\" title=\"if 语句以及强制解析\"></a>if 语句以及强制解析</h2><p>你可以使用<code>if</code>语句和<code>nil</code>比较来判断一个可选值是否包含值。你可以使用“相等”(<code>==</code>)或“不等”(<code>!=</code>)来执行比较。</p>\n<p>如果可选类型有值，它将不等于<code>nil</code>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;convertedNumber contains some integer value.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;convertedNumber contains some integer value.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（<code>!</code>）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;convertedNumber has an integer value of <span class=\"subst\">\\(convertedNumber<span class=\"operator\">!</span>)</span>.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;convertedNumber has an integer value of 123.&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：使用<code>!</code>来获取一个不存在的可选值会导致运行时错误。使用<code>!</code>来强制解析值之前，一定要确定可选包含一个非<code>nil</code>的值。</p>\n</blockquote>\n<h2 id=\"可选绑定\"><a href=\"#可选绑定\" class=\"headerlink\" title=\"可选绑定\"></a>可选绑定</h2><p>使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在<code>if</code>和<code>while</code>语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。</p>\n<p>像下面这样在<code>if</code>语句中写一个可选绑定：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName <span class=\"operator\">=</span> someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以像上面这样使用可选绑定来重写<code>possibleNumber</code>这个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(possibleNumber) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\&#x27;</span><span class=\"subst\">\\(possibleNumber)</span><span class=\"subst\">\\&#x27;</span> has an integer value of <span class=\"subst\">\\(actualNumber)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\&#x27;</span><span class=\"subst\">\\(possibleNumber)</span><span class=\"subst\">\\&#x27;</span> could not be converted to an integer&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;&#x27;123&#x27; has an integer value of 123&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码可以被理解为：“如果<code>Int(possibleNumber)</code>返回的可选<code>Int</code>包含一个值，创建一个叫做<code>actualNumber</code>的新常量并将可选包含的值赋给它。”</p>\n<p>如果转换成功，<code>actualNumber</code>常量可以在<code>if</code>语句的第一个分支中使用。它已经被可选类型 包含的 值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，<code>actualNumber</code>只被用来输出转换结果。</p>\n<p>你可以在可选绑定中使用常量和变量。如果你想在<code>if</code>语句的第一个分支中操作<code>actualNumber</code>的值，你可以改成<code>if var actualNumber</code>，这样可选类型包含的值就会被赋给一个变量而非常量。</p>\n<p>你可以包含多个可选绑定在<code>if</code>语句中，并使用<code>where</code>子句做布尔值判断。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(<span class=\"string\">&quot;4&quot;</span>), secondNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(<span class=\"string\">&quot;42&quot;</span>) <span class=\"keyword\">where</span> firstNumber <span class=\"operator\">&lt;</span> secondNumber &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(firstNumber)</span> &lt; <span class=\"subst\">\\(secondNumber)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;4 &lt; 42&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式解析可选类型\"><a href=\"#隐式解析可选类型\" class=\"headerlink\" title=\"隐式解析可选类型\"></a>隐式解析可选类型</h2><p>如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。</p>\n<p>有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型_总会_有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。</p>\n<p>这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（<code>String?</code>）改成感叹号（<code>String!</code>）来声明一个隐式解析可选类型。</p>\n<p>当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。</p>\n<p>一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型<code>String</code>和隐式解析可选类型<code>String</code>之间的区别：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// 需要惊叹号来获取值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;An implicitly unwrapped optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString  <span class=\"comment\">// 不需要感叹号</span></span><br></pre></td></tr></table></figure>\n<p>你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。</p>\n<blockquote>\n<p>注意：如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个惊叹号一样。</p>\n</blockquote>\n<p>你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果一个变量之后可能变成<code>nil</code>的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是<code>nil</code>的话，请使用普通可选类型。</p>\n</blockquote>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>你可以使用错误处理（error handling）来应对程序执行中可能会遇到的错误条件。相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">canThrowAnError</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数有可能抛出错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个函数可以通过在声明中添加<code>throws</code>关键词来抛出错误消息。当你的函数能抛出错误消息时, 你应该在表达式中前置<code>try</code>关键词。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">    <span class=\"comment\">// 没有错误消息抛出</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有一个错误消息抛出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个<code>do</code>语句创建了一个新的包含作用域,使得错误能被传播到一个或多个<code>catch</code>从句。<br>这里有一个错误处理如何用来应对不同错误条件的例子。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeASandwich</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> makeASandwich()</span><br><span class=\"line\">    eatASandwich()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">OutOfCleanDishes</span> &#123;</span><br><span class=\"line\">    washDishes()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">MissingIngredients</span>(<span class=\"keyword\">let</span> ingredients) &#123;</span><br><span class=\"line\">    buyGroceries(ingredients)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在此例中，<code>makeASandwich()</code>（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为<code>makeASandwich()</code>抛出错误，函数调用被包裹在<code>try</code>表达式中。将函数包裹在一个<code>do</code>语句中,任何被抛出的错误会被传播到提供的<code>catch</code>从句中。</p>\n<p>如果没有错误被抛出, <code>eatASandwich()</code>函数会被调用。如果一个匹配<code>Error.OutOfCleanDishes</code>的错误被抛出,<code>washDishes</code>函数会被调用。如果一个匹配<code>Error.MissingIngredients</code>的错误被抛出，<code>buyGroceries(_:)</code>函数会随着被<code>catch</code>所捕捉到的关联值[<code>String</code>]被调用。</p>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><p>可选类型可以让你判断值是否存在，你可以在代码中优雅地处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能没办法继续执行。这时，你可以在你的代码中触发一个断言（assertion）来结束代码运行并通过调试来找到值缺失的原因。</p>\n<h2 id=\"使用断言进行调试\"><a href=\"#使用断言进行调试\" class=\"headerlink\" title=\"使用断言进行调试\"></a>使用断言进行调试</h2><p>断言会在运行时判断一个逻辑条件是否为<code>true</code>。从字面意思来说，断言“断言”一个条件是否为真。你可以使用断言来保证在运行其他代码之前，某些重要的条件已经被满足。如果条件判断为<code>true</code>，代码运行会继续进行；如果条件判断为<code>false</code>，代码执行结束，你的应用被终止。</p>\n<p>如果你的代码在调试环境下触发了一个断言，比如你在 Xcode 中构建并运行一个应用，你可以清楚地看到不合法的状态发生在哪里并检查断言被触发时你的应用的状态。此外，断言允许你附加一条调试信息。</p>\n<p>你可以使用全局<code>assert(_:_file:line:)</code>函数来写一个断言。向这个函数传入一个结果为<code>true</code>或者<code>false</code>的表达式以及一条信息，当表达式的结果为<code>false</code>的时候这条信息会被显示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>, <span class=\"string\">&quot;A person&#x27;s age cannot be less than zero&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 因为 age &lt; 0，所以断言会触发</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，只有<code>age &gt;= 0</code>为<code>true</code>的时候，即<code>age</code>的值非负的时候，代码才会继续执行。如果<code>age</code>的值是负数，就像代码中那样，<code>age &gt;= 0为false</code>，断言被触发，终止应用。</p>\n<p>如果不需要断言信息，可以省略，就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assert</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。</p>\n</blockquote>\n<h2 id=\"何时使用断言\"><a href=\"#何时使用断言\" class=\"headerlink\" title=\"何时使用断言\"></a>何时使用断言</h2><p>当条件可能为假时使用断言，但是最终一定要_保证_条件为真，这样你的代码才能继续运行。断言的适用情景：</p>\n<ul>\n<li>整数类型的下标索引被传入一个自定义下标实现，但是下标索引值可能太小或者太大。</li>\n<li>需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。</li>\n<li>一个可选值现在是<code>nil</code>，但是后面的代码运行需要一个非<code>nil</code>值。</li>\n</ul>\n<blockquote>\n<p>注意：断言可能导致你的应用终止运行，所以你应当仔细设计你的代码来让非法条件不会出现。然而，在你的应用发布之前，有时候非法条件可能出现，这时使用断言可以快速发现问题。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。</p>","more":"<p>Swift包含了C 和objc上所有的数据类型，<code>Int</code>表示整型值；<code>Double</code>和<code>Float</code>表示浮点型值；<code>Bool</code>是布尔型值；<code>String</code>是字符串型值。此外Swift还提供了三个基本的集合类型，<code>Array</code>，<code>Set</code>和<code>Dictionary</code>。<br>除了我们熟悉的类型，Swift 还增加了 objc 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。</p>\n<p>Swift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示“那儿有一个值，并且它等于 x ”或者“那儿没有值”。可选有点像在 objc 中使用<code>nil</code>，但是它可以用在任何类型上，不仅仅是类。可选类型比 objc 中的nil指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。</p>\n<p>Swift 是一门类型安全的语言，可选类型就是一个很好的例子。Swift 可以让你清楚地知道值的类型。如果你的代码期望得到一个String，类型安全会阻止你不小心传入一个<code>Int</code>。你可以在开发阶段尽早发现并修正错误。</p>\n<h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><p>常量的值一旦设定就不能改变，而变量的值可以随意更改。</p>\n<h2 id=\"声明常量和变量\"><a href=\"#声明常量和变量\" class=\"headerlink\" title=\"声明常量和变量\"></a>声明常量和变量</h2><p>常量和变量必须在使用前声明，用<code>let</code>来声明常量，用<code>var</code>来声明变量。下面的例子展示了如何用常量和变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> maxNumberOfLoginTimes <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentLoginTimes <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这两行代码可以理解为：<br><code>maxNumberOfLoginTimes</code>声明为一个常量，它的值是10并且不可再被改变，<code>currentLoginAttempt</code>申明为一个初始值为0的变量。<br>我们可以在一行中声明多个常量或者多个变量，用逗号隔开：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">1</span>, b <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果你的代码中有不需要改变的值，请使用<code>let</code>关键字将它声明为常量。只将需要改变的值声明为变量。与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> languageName <span class=\"operator\">=</span> <span class=\"string\">&quot;Swift&quot;</span></span><br><span class=\"line\">languageName <span class=\"operator\">=</span> <span class=\"string\">&quot;Swift++&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 这会报编译时错误 - languageName 不可改变</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型标注\"><a href=\"#类型标注\" class=\"headerlink\" title=\"类型标注\"></a>类型标注</h2><p>当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。<br>这个例子给<code>welcomeMessage</code>变量添加了类型标注，表示这个变量可以存储<code>String</code>类型的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> welcomeMessage: <span class=\"type\">String</span></span><br></pre></td></tr></table></figure>\n<p>声明中的冒号代表着“是…类型”，所以这行代码可以被理解为：<br>“声明一个类型为<code>String</code>，名字为<code>welcomeMessage</code>的变量。”<br>“类型为<code>String</code>”的意思是“可以存储任意<code>String</code>类型的值。”<br><code>welcomeMessage</code>变量现在可以被设置成任意字符串：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">welcomeMessage <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>\n<p>你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型标注：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> red, green, blue: <span class=\"type\">Double</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给<code>welcomeMessage</code>赋初始值，所以变量<code>welcomeMessage</code>的类型是通过一个类型标注指定的，而不是通过初始值推断的。</p>\n</blockquote>\n<h2 id=\"常量和变量的命名\"><a href=\"#常量和变量的命名\" class=\"headerlink\" title=\"常量和变量的命名\"></a>常量和变量的命名</h2><p>你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> π <span class=\"operator\">=</span> <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> 你好 <span class=\"operator\">=</span> <span class=\"string\">&quot;你好世界&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> 🐶🐮 <span class=\"operator\">=</span> <span class=\"string\">&quot;dogcow&quot;</span></span><br></pre></td></tr></table></figure>\n<p>常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>\n<p>一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。</p>\n<blockquote>\n<p>注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。</p>\n</blockquote>\n<h2 id=\"输出常量和变量\"><a href=\"#输出常量和变量\" class=\"headerlink\" title=\"输出常量和变量\"></a>输出常量和变量</h2><p>你可以用<code>print(_:separator:terminator:)</code>函数来输出当前常量或变量的值:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friendlyWelcome <span class=\"operator\">=</span> <span class=\"string\">&quot;Bonjour!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(friendlyWelcome)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;Bonjour!&quot;</span></span><br></pre></td></tr></table></figure>\n<p><code>print(_:separator:terminator:)</code>是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，<code>print(_:separator:terminator:)</code>将会输出内容到“console”面板上。separator和terminator参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给terminator参数–例如，<code>print(someValue, terminator:&quot;&quot;)</code>。</p>\n<p>Swift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The current value of friendlyWelcome is <span class=\"subst\">\\(friendlyWelcome)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The current value of friendlyWelcome is Bonjour!</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。<br>与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这是第一个多行注释的开头</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"comment\">/* 这是第二个被嵌套的多行注释 */</span></span></span><br><span class=\"line\"><span class=\"comment\">这是第一个多行注释的结尾 */</span></span><br></pre></td></tr></table></figure>\n<p>通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。<br>当然Swift的单行注释和多行注释和C语言的类似。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一个单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 这是一个,</span></span><br><span class=\"line\"><span class=\"comment\">多行注释 */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h2><p>与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat <span class=\"operator\">=</span> <span class=\"string\">&quot;🐱&quot;</span>; <span class=\"built_in\">print</span>(cat)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;🐱&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h2><p>整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。</p>\n<p>Swift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是<code>UInt8</code>，32位有符号整数类型是<code>Int32</code>。就像 Swift 的其他类型一样，整数类型采用大写命名法。</p>\n<h2 id=\"整数范围\"><a href=\"#整数范围\" class=\"headerlink\" title=\"整数范围\"></a>整数范围</h2><p>你可以访问不同整数类型的<code>min</code>和<code>max</code>属性来获取对应类型的最小值和最大值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> minValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.min  <span class=\"comment\">// minValue 为 0，是 UInt8 类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxValue <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.max  <span class=\"comment\">// maxValue 为 255，是 UInt8 类型</span></span><br></pre></td></tr></table></figure>\n<p><code>min</code>和<code>max</code>所传回值的类型，正是其所对的整数类型(如上例<code>UInt8</code>, 所传回的类型是<code>UInt8</code>)，可用在表达式中相同类型值旁。</p>\n<h2 id=\"Int\"><a href=\"#Int\" class=\"headerlink\" title=\"Int\"></a>Int</h2><p>一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：</p>\n<ul>\n<li>在32位平台上，<code>Int</code>和<code>Int32</code>长度相同。</li>\n<li>在64位平台上，<code>Int</code>和<code>Int64</code>长度相同。<br>除非你需要特定长度的整数，一般来说使用<code>Int</code>就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，<code>Int</code>可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。</li>\n</ul>\n<h2 id=\"UInt\"><a href=\"#UInt\" class=\"headerlink\" title=\"UInt\"></a>UInt</h2><p>Swift 也提供了一个特殊的无符号类型<code>UInt</code>，长度与当前平台的原生字长相同：</p>\n<ul>\n<li>在32位平台上，<code>UInt</code>和<code>UInt32</code>长度相同。</li>\n<li>在64位平台上，<code>UInt</code>和<code>UInt64</code>长度相同。<blockquote>\n<p>注意：尽量不要使用<code>UInt</code>，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用<code>Int</code>，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h2><p>浮点数是有小数部分的数字，比如<code>3.14159</code>，<code>0.1</code>和<code>-273.15</code>。</p>\n<p>浮点类型比整数类型表示的范围更大，可以存储比<code>Int</code>类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：</p>\n<ul>\n<li><code>Double</code>表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。</li>\n<li><code>Float</code>表示32位浮点数。精度要求不高的话可以使用此类型。</li>\n</ul>\n<h2 id=\"类型安全和类型推断\"><a href=\"#类型安全和类型推断\" class=\"headerlink\" title=\"类型安全和类型推断\"></a>类型安全和类型推断</h2><p>Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个<code>String</code>，你绝对不可能不小心传进去一个<code>Int</code>。</p>\n<p>由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。</p>\n<p>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。</p>\n<p>因为有类型推断，和 C 或者 objc 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。</p>\n<p>当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如<code>42</code>和<code>3.14159</code>。）</p>\n<p>例如，如果你给一个新常量赋值<code>42</code>并且没有标明类型，Swift 可以推断出常量类型是Int，因为你给它赋的初始值看起来像一个整数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meaningOfLife <span class=\"operator\">=</span> <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"comment\">// meaningOfLife 会被推测为 Int 类型</span></span><br></pre></td></tr></table></figure>\n<p>同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是<code>Double</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pi <span class=\"operator\">=</span> <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"comment\">// pi 会被推测为 Double 类型</span></span><br></pre></td></tr></table></figure>\n<p>当推断浮点数的类型时，Swift 总是会选择<code>Double</code>而不是<code>Float</code>。<br>如果表达式中同时出现了整数和浮点数，会被推断为<code>Double</code>类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherPi <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"operator\">+</span> <span class=\"number\">0.14159</span></span><br><span class=\"line\"><span class=\"comment\">// anotherPi 会被推测为 Double 类型</span></span><br></pre></td></tr></table></figure>\n<p>原始值<code>3</code>没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为<code>Double</code>类型。</p>\n<h2 id=\"数值型字面量\"><a href=\"#数值型字面量\" class=\"headerlink\" title=\"数值型字面量\"></a>数值型字面量</h2><p>整数字面量可以被写作：</p>\n<ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是<code>0b</code></li>\n<li>一个八进制数，前缀是<code>0o</code></li>\n<li>一个十六进制数，前缀是<code>0x</code></li>\n</ul>\n<p>下面的所有整数字面量的十进制值都是16:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decimalInteger <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryInteger <span class=\"operator\">=</span> <span class=\"number\">0b10000</span>       <span class=\"comment\">// 二进制的16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> octalInteger <span class=\"operator\">=</span> <span class=\"number\">0o20</span>           <span class=\"comment\">// 八进制的16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger <span class=\"operator\">=</span> <span class=\"number\">0x10</span>     <span class=\"comment\">// 十六进制的16</span></span><br></pre></td></tr></table></figure>\n<p>浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是<code>0x</code>）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 <code>e</code> 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 <code>p</code> 来指定。<br>如果一个十进制数的指数为<code>exp</code>，那这个数相当于基数和10^exp的乘积：</p>\n<ul>\n<li><code>1.25e2</code> 表示 1.25 × 10^2，等于 <code>125.0</code>。</li>\n<li><code>1.25e-2</code> 表示 1.25 × 10^-2，等于 <code>0.0125</code>。</li>\n</ul>\n<p>如果一个十六进制数的指数为<code>exp</code>，那这个数相当于基数和2^exp的乘积：</p>\n<ul>\n<li><code>0xFp2</code> 表示 15 × 2^2，等于 <code>60.0</code>。</li>\n<li><code>0xFp-2</code> 表示 15 × 2^-2，等于 <code>3.75</code>。</li>\n</ul>\n<p>下面的这些浮点字面量都等于十进制的<code>12.1875</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decimalDouble <span class=\"operator\">=</span> <span class=\"number\">12.1875</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> exponentDouble <span class=\"operator\">=</span> <span class=\"number\">1.21875e1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexadecimalDouble <span class=\"operator\">=</span> <span class=\"number\">0xC.3p0</span></span><br></pre></td></tr></table></figure>\n<p>数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> paddedDouble <span class=\"operator\">=</span> <span class=\"number\">000123.456</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oneMillion <span class=\"operator\">=</span> <span class=\"number\">1_000_000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> justOverOneMillion <span class=\"operator\">=</span> <span class=\"number\">1_000_000.000_000_1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值型类型转换\"><a href=\"#数值型类型转换\" class=\"headerlink\" title=\"数值型类型转换\"></a>数值型类型转换</h2><p>通常来讲，即使代码中的整数常量和变量已知非负，也请使用<code>Int</code>类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。</p>\n<p>只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。</p>\n<h2 id=\"整数转换\"><a href=\"#整数转换\" class=\"headerlink\" title=\"整数转换\"></a>整数转换</h2><p>不同整数类型的变量和常量可以存储不同范围的数字。<code>Int8</code>类型的常量或者变量可以存储的数字范围是-128<del>127，而<code>UInt8</code>类型的常量或者变量能存储的数字范围是0</del>255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cannotBeNegative: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// UInt8 类型不能存储负数，所以会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tooBig: <span class=\"type\">Int8</span> <span class=\"operator\">=</span> <span class=\"type\">Int8</span>.max <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// Int8 类型不能存储超过最大值的数，所以会报错</span></span><br></pre></td></tr></table></figure>\n<p>由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。</p>\n<p>要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量<code>twoThousand</code>是<code>UInt16</code>类型，然而常量<code>one</code>是<code>UInt8</code>类型。它们不能直接相加，因为它们类型不同。所以要调用<code>UInt16(one)</code>来创建一个新的<code>UInt16</code>数字并用<code>one</code>的值来初始化，然后使用这个新数字来计算：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoThousand: <span class=\"type\">UInt16</span> <span class=\"operator\">=</span> <span class=\"number\">2_000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> one: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> twoThousandAndOne <span class=\"operator\">=</span> twoThousand <span class=\"operator\">+</span> <span class=\"type\">UInt16</span>(one)</span><br></pre></td></tr></table></figure>\n<p>现在两个数字的类型都是<code>UInt16</code>，可以进行相加。目标常量<code>twoThousandAndOne</code>的类型被推断为<code>UInt16</code>，因为它是两个<code>UInt16</code>值的和。</p>\n<p><code>SomeType(ofInitialValue)</code>是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，<code>UInt16</code>有一个构造器，可以接受一个<code>UInt8</code>类型的值，所以这个构造器可以用现有的<code>UInt8</code>来创建一个新的<code>UInt16</code>。注意，你并不能传入任意类型的值，只能传入<code>UInt16</code>内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型）。</p>\n<h2 id=\"整数和浮点数转换\"><a href=\"#整数和浮点数转换\" class=\"headerlink\" title=\"整数和浮点数转换\"></a>整数和浮点数转换</h2><p>整数和浮点数的转换必须显式指定类型：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> three <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pointOneFourOneFiveNine <span class=\"operator\">=</span> <span class=\"number\">0.14159</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pi <span class=\"operator\">=</span> <span class=\"type\">Double</span>(three) <span class=\"operator\">+</span> pointOneFourOneFiveNine</span><br><span class=\"line\"><span class=\"comment\">// pi 等于 3.14159，所以被推测为 Double 类型</span></span><br></pre></td></tr></table></figure>\n<p>这个例子中，常量<code>three</code>的值被用来创建一个<code>Double</code>类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。<br>浮点数到整数的反向转换同样行，整数类型可以用<code>Double</code>或者<code>Float</code>类型来初始化：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> integerPi <span class=\"operator\">=</span> <span class=\"type\">Int</span>(pi)</span><br><span class=\"line\"><span class=\"comment\">// integerPi 等于 3，所以被推测为 Int 类型</span></span><br></pre></td></tr></table></figure>\n<p>当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说<code>4.75</code>会变成<code>4</code>，<code>-3.9</code>会变成<code>-3</code>。</p>\n<blockquote>\n<p>注意：结合数字类常量和变量不同于结合数字类字面量。字面量<code>3</code>可以直接和字面量<code>0.14159</code>相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。</p>\n</blockquote>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用<code>typealias</code>关键字来定义类型别名。</p>\n<p>当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> <span class=\"operator\">=</span> <span class=\"type\">UInt16</span></span><br></pre></td></tr></table></figure>\n<p>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxAmplitudeFound <span class=\"operator\">=</span> <span class=\"type\">AudioSample</span>.min</span><br><span class=\"line\"><span class=\"comment\">// maxAmplitudeFound 现在是 0</span></span><br></pre></td></tr></table></figure>\n<p>本例中，<code>AudioSample</code>被定义为<code>UInt16</code>的一个别名。因为它是别名，<code>AudioSample.min</code>实际上是<code>UInt16.min</code>，所以会给<code>maxAmplitudeFound</code>赋一个初值<code>0</code>。</p>\n<h2 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h2><p>Swift 有一个基本的布尔（Boolean）类型，叫做<code>Bool</code>。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，<code>true</code>和<code>false</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> orangesAreOrange <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> turnipsAreDelicious <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><code>orangesAreOrange</code>和<code>turnipsAreDelicious</code>的类型会被推断为<code>Bool</code>，因为它们的初值是布尔字面量。就像之前提到的<code>Int</code>和<code>Double</code>一样，如果你创建变量的时候给它们赋值<code>true</code>或者<code>false</code>，那你不需要将常量或者变量声明为<code>Bool</code>类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。<br>当你编写条件语句比如<code>if</code>语句的时候，布尔值非常有用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> turnipsAreDelicious &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Mmm, tasty turnips!&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Eww, turnips are horrible.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;Eww, turnips are horrible.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果你在需要使用<code>Bool</code>类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> i &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个例子不会通过编译，会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，下面的例子是合法的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> i <span class=\"operator\">==</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个例子会编译成功</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>i == 1</code>的比较结果是<code>Bool</code>类型，所以第二个例子可以通过类型检查。</p>\n<p>和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。</p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。</p>\n<p>下面这个例子中，<code>(404, &quot;Not Found&quot;)</code>是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个<code>404 Not Found</code>状态码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error <span class=\"operator\">=</span> (<span class=\"number\">404</span>, <span class=\"string\">&quot;Not Found&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;)</span></span><br></pre></td></tr></table></figure>\n<p><code>(404, &quot;Not Found&quot;)</code>元组把一个<code>Int</code>值和一个<code>String</code>值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为<code>(Int, String)</code>的元组”。<br>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为<code>(Int, Int, Int)</code>或者<code>(String, Bool)</code>或者其他任何你想要的组合的元组。<br>你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 404&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(statusMessage)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status message is Not Found&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（<code>_</code>）标记：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (justTheStatusCode, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(justTheStatusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 404&quot;</span></span><br></pre></td></tr></table></figure>\n<p>此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(http404Error.<span class=\"number\">0</span>)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 404&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(http404Error.<span class=\"number\">1</span>)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status message is Not Found&quot;</span></span><br></pre></td></tr></table></figure>\n<p>你可以在定义元组的时候给单个元素命名：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http200Status <span class=\"operator\">=</span> (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>给元组中的元素命名后，你可以通过名字来获取这些元素的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status code is <span class=\"subst\">\\(http200Status.statusCode)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status code is 200&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The status message is <span class=\"subst\">\\(http200Status.description)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;The status message is OK&quot;</span></span><br></pre></td></tr></table></figure>\n<p>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个<code>(Int, String)</code>元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。</p>\n<blockquote>\n<p>注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。</p>\n</blockquote>\n<h2 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h2><p>使用可选类型（optionals）来处理值可能缺失的情况。<br>来看一个例子。Swift 的<code>Int</code>类型有一种构造器，作用是将一个<code>String</code>值转换成一个<code>Int</code>值。然而，并不是所有的字符串都可以转换成一个整数。字符串<code>&quot;123&quot;</code>可以被转换成数字<code>123</code>，但是字符串<code>&quot;hello, world&quot;</code>不行。</p>\n<p>下面的例子使用这种构造器来尝试将一个<code>String</code>转换成<code>Int</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleNumber <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> convertedNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(possibleNumber)</span><br><span class=\"line\"><span class=\"comment\">// convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot;</span></span><br></pre></td></tr></table></figure>\n<p>因为该构造器可能会失败，所以它返回一个可选类型（optional）<code>Int</code>，而不是一个<code>Int</code>。一个可选的<code>Int</code>被写作<code>Int?</code>而不是<code>Int</code>。问号暗示包含的值是可选类型，也就是说可能包含<code>Int</code>值也可能不包含值。（不能包含其他任何值比如<code>Bool</code>值或者<code>String</code>值。只能是    <code>Int</code>或者什么都没有。）</p>\n<h2 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h2><p>你可以给可选变量赋值为<code>nil</code>来表示它没有值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serverResponseCode: <span class=\"type\">Int</span>? <span class=\"operator\">=</span> <span class=\"number\">404</span></span><br><span class=\"line\"><span class=\"comment\">// serverResponseCode 包含一个可选的 Int 值 404</span></span><br><span class=\"line\">serverResponseCode <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"comment\">// serverResponseCode 现在不包含值</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>nil</code>不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</p>\n</blockquote>\n<p>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为<code>nil</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> surveyAnswer: <span class=\"type\">String</span>?</span><br><span class=\"line\"><span class=\"comment\">// surveyAnswer 被自动设置为 nil</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：Swift 的<code>nil</code>和 objc 中的<code>nil</code>并不一样。在 objc 中，<code>nil</code>是一个指向不存在对象的指针。在 Swift 中，<code>nil</code>不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为<code>nil</code>，不只是对象类型。</p>\n</blockquote>\n<h2 id=\"if-语句以及强制解析\"><a href=\"#if-语句以及强制解析\" class=\"headerlink\" title=\"if 语句以及强制解析\"></a>if 语句以及强制解析</h2><p>你可以使用<code>if</code>语句和<code>nil</code>比较来判断一个可选值是否包含值。你可以使用“相等”(<code>==</code>)或“不等”(<code>!=</code>)来执行比较。</p>\n<p>如果可选类型有值，它将不等于<code>nil</code>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;convertedNumber contains some integer value.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;convertedNumber contains some integer value.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（<code>!</code>）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;convertedNumber has an integer value of <span class=\"subst\">\\(convertedNumber<span class=\"operator\">!</span>)</span>.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;convertedNumber has an integer value of 123.&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：使用<code>!</code>来获取一个不存在的可选值会导致运行时错误。使用<code>!</code>来强制解析值之前，一定要确定可选包含一个非<code>nil</code>的值。</p>\n</blockquote>\n<h2 id=\"可选绑定\"><a href=\"#可选绑定\" class=\"headerlink\" title=\"可选绑定\"></a>可选绑定</h2><p>使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在<code>if</code>和<code>while</code>语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。</p>\n<p>像下面这样在<code>if</code>语句中写一个可选绑定：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName <span class=\"operator\">=</span> someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以像上面这样使用可选绑定来重写<code>possibleNumber</code>这个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(possibleNumber) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\&#x27;</span><span class=\"subst\">\\(possibleNumber)</span><span class=\"subst\">\\&#x27;</span> has an integer value of <span class=\"subst\">\\(actualNumber)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\&#x27;</span><span class=\"subst\">\\(possibleNumber)</span><span class=\"subst\">\\&#x27;</span> could not be converted to an integer&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;&#x27;123&#x27; has an integer value of 123&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码可以被理解为：“如果<code>Int(possibleNumber)</code>返回的可选<code>Int</code>包含一个值，创建一个叫做<code>actualNumber</code>的新常量并将可选包含的值赋给它。”</p>\n<p>如果转换成功，<code>actualNumber</code>常量可以在<code>if</code>语句的第一个分支中使用。它已经被可选类型 包含的 值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，<code>actualNumber</code>只被用来输出转换结果。</p>\n<p>你可以在可选绑定中使用常量和变量。如果你想在<code>if</code>语句的第一个分支中操作<code>actualNumber</code>的值，你可以改成<code>if var actualNumber</code>，这样可选类型包含的值就会被赋给一个变量而非常量。</p>\n<p>你可以包含多个可选绑定在<code>if</code>语句中，并使用<code>where</code>子句做布尔值判断。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(<span class=\"string\">&quot;4&quot;</span>), secondNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(<span class=\"string\">&quot;42&quot;</span>) <span class=\"keyword\">where</span> firstNumber <span class=\"operator\">&lt;</span> secondNumber &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(firstNumber)</span> &lt; <span class=\"subst\">\\(secondNumber)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;4 &lt; 42&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式解析可选类型\"><a href=\"#隐式解析可选类型\" class=\"headerlink\" title=\"隐式解析可选类型\"></a>隐式解析可选类型</h2><p>如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。</p>\n<p>有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型_总会_有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。</p>\n<p>这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（<code>String?</code>）改成感叹号（<code>String!</code>）来声明一个隐式解析可选类型。</p>\n<p>当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。</p>\n<p>一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型<code>String</code>和隐式解析可选类型<code>String</code>之间的区别：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// 需要惊叹号来获取值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;An implicitly unwrapped optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString  <span class=\"comment\">// 不需要感叹号</span></span><br></pre></td></tr></table></figure>\n<p>你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。</p>\n<blockquote>\n<p>注意：如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个惊叹号一样。</p>\n</blockquote>\n<p>你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果一个变量之后可能变成<code>nil</code>的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是<code>nil</code>的话，请使用普通可选类型。</p>\n</blockquote>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>你可以使用错误处理（error handling）来应对程序执行中可能会遇到的错误条件。相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">canThrowAnError</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数有可能抛出错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个函数可以通过在声明中添加<code>throws</code>关键词来抛出错误消息。当你的函数能抛出错误消息时, 你应该在表达式中前置<code>try</code>关键词。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">    <span class=\"comment\">// 没有错误消息抛出</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有一个错误消息抛出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个<code>do</code>语句创建了一个新的包含作用域,使得错误能被传播到一个或多个<code>catch</code>从句。<br>这里有一个错误处理如何用来应对不同错误条件的例子。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeASandwich</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> makeASandwich()</span><br><span class=\"line\">    eatASandwich()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">OutOfCleanDishes</span> &#123;</span><br><span class=\"line\">    washDishes()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">MissingIngredients</span>(<span class=\"keyword\">let</span> ingredients) &#123;</span><br><span class=\"line\">    buyGroceries(ingredients)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在此例中，<code>makeASandwich()</code>（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为<code>makeASandwich()</code>抛出错误，函数调用被包裹在<code>try</code>表达式中。将函数包裹在一个<code>do</code>语句中,任何被抛出的错误会被传播到提供的<code>catch</code>从句中。</p>\n<p>如果没有错误被抛出, <code>eatASandwich()</code>函数会被调用。如果一个匹配<code>Error.OutOfCleanDishes</code>的错误被抛出,<code>washDishes</code>函数会被调用。如果一个匹配<code>Error.MissingIngredients</code>的错误被抛出，<code>buyGroceries(_:)</code>函数会随着被<code>catch</code>所捕捉到的关联值[<code>String</code>]被调用。</p>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><p>可选类型可以让你判断值是否存在，你可以在代码中优雅地处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能没办法继续执行。这时，你可以在你的代码中触发一个断言（assertion）来结束代码运行并通过调试来找到值缺失的原因。</p>\n<h2 id=\"使用断言进行调试\"><a href=\"#使用断言进行调试\" class=\"headerlink\" title=\"使用断言进行调试\"></a>使用断言进行调试</h2><p>断言会在运行时判断一个逻辑条件是否为<code>true</code>。从字面意思来说，断言“断言”一个条件是否为真。你可以使用断言来保证在运行其他代码之前，某些重要的条件已经被满足。如果条件判断为<code>true</code>，代码运行会继续进行；如果条件判断为<code>false</code>，代码执行结束，你的应用被终止。</p>\n<p>如果你的代码在调试环境下触发了一个断言，比如你在 Xcode 中构建并运行一个应用，你可以清楚地看到不合法的状态发生在哪里并检查断言被触发时你的应用的状态。此外，断言允许你附加一条调试信息。</p>\n<p>你可以使用全局<code>assert(_:_file:line:)</code>函数来写一个断言。向这个函数传入一个结果为<code>true</code>或者<code>false</code>的表达式以及一条信息，当表达式的结果为<code>false</code>的时候这条信息会被显示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>, <span class=\"string\">&quot;A person&#x27;s age cannot be less than zero&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 因为 age &lt; 0，所以断言会触发</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，只有<code>age &gt;= 0</code>为<code>true</code>的时候，即<code>age</code>的值非负的时候，代码才会继续执行。如果<code>age</code>的值是负数，就像代码中那样，<code>age &gt;= 0为false</code>，断言被触发，终止应用。</p>\n<p>如果不需要断言信息，可以省略，就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assert</span>(age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。</p>\n</blockquote>\n<h2 id=\"何时使用断言\"><a href=\"#何时使用断言\" class=\"headerlink\" title=\"何时使用断言\"></a>何时使用断言</h2><p>当条件可能为假时使用断言，但是最终一定要_保证_条件为真，这样你的代码才能继续运行。断言的适用情景：</p>\n<ul>\n<li>整数类型的下标索引被传入一个自定义下标实现，但是下标索引值可能太小或者太大。</li>\n<li>需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。</li>\n<li>一个可选值现在是<code>nil</code>，但是后面的代码运行需要一个非<code>nil</code>值。</li>\n</ul>\n<blockquote>\n<p>注意：断言可能导致你的应用终止运行，所以你应当仔细设计你的代码来让非法条件不会出现。然而，在你的应用发布之前，有时候非法条件可能出现，这时使用断言可以快速发现问题。</p>\n</blockquote>"},{"title":"Vue IE报错SCRIPT1006：缺少‘)’解决办法","date":"2019-02-06T09:14:26.000Z","abbrlink":"82d2bd95f1e3557d","_content":"\n在最近的一个小项目中，客户强烈要求\b兼容IE浏览器，大家都知道IE是所有浏览器中最让开发者头痛的浏览器，搞了好久都没有适配成功，头都搞大了。网上搜索了很多方法都没有解决我的问题，后来结合网上的一些经验之谈通过自己的一番摸索，终于解决了这个问题。\n<!-- more -->\n网上关于IE报错SCRIPT1006：缺少‘)’的原因都是说IE11前浏览器不知此ES6\b所导致的。要想兼容IE，就需要引入ES6语法包。所以首先引入`babel-polyfill`：\n``` bash\nnpm i babel-polyfill --save-dev\n```\n安装完成后，在项目的主入口文件`main.js`的首行就可以直接引用:\n``` bash\nimport 'babel-polyfill'\n```\n\n然后在`webpack.config.js`配置文件中做修改：\n``` bash\nmodule.exports = {\n  entry: {\n    // app: ['./src/main.js']\n    app: ['babel-polyfill', './src/main.js']\n  },\n}\n```\n\n大多数方法到此就结束了，但我的问题到了这里还没有结束，IE依然无法显示。\b通过各种尝试推测发现，引入的Vuex\b库应该也使用了ES6\b。所以需要制定下vuex，让他支持ES6。\n\n同样还是在`webpack.config.js`文件中，添加：\n``` json\n{\n  test: /\\.js$/,\n  loader: 'babel-loader',\n  include: [\n    resolve('src'),\n    resolve('test'),\n    resolve('node_modules/iview/src'),\n    resolve('node_modules/vuex'),\n    resolve('node_modules/webpack-dev-server/client')\n  ]\n},\n```\n\n到此我的问题就得到完美解决了。","source":"_posts/Vue-IE报错SCRIPT1006：缺少‘-’解决办法.md","raw":"---\ntitle: Vue IE报错SCRIPT1006：缺少‘)’解决办法\ndate: 2019-02-06 17:14:26\ntags:\n  - Vue\ncategories: 技术杂谈\nabbrlink: 82d2bd95f1e3557d\n---\n\n在最近的一个小项目中，客户强烈要求\b兼容IE浏览器，大家都知道IE是所有浏览器中最让开发者头痛的浏览器，搞了好久都没有适配成功，头都搞大了。网上搜索了很多方法都没有解决我的问题，后来结合网上的一些经验之谈通过自己的一番摸索，终于解决了这个问题。\n<!-- more -->\n网上关于IE报错SCRIPT1006：缺少‘)’的原因都是说IE11前浏览器不知此ES6\b所导致的。要想兼容IE，就需要引入ES6语法包。所以首先引入`babel-polyfill`：\n``` bash\nnpm i babel-polyfill --save-dev\n```\n安装完成后，在项目的主入口文件`main.js`的首行就可以直接引用:\n``` bash\nimport 'babel-polyfill'\n```\n\n然后在`webpack.config.js`配置文件中做修改：\n``` bash\nmodule.exports = {\n  entry: {\n    // app: ['./src/main.js']\n    app: ['babel-polyfill', './src/main.js']\n  },\n}\n```\n\n大多数方法到此就结束了，但我的问题到了这里还没有结束，IE依然无法显示。\b通过各种尝试推测发现，引入的Vuex\b库应该也使用了ES6\b。所以需要制定下vuex，让他支持ES6。\n\n同样还是在`webpack.config.js`文件中，添加：\n``` json\n{\n  test: /\\.js$/,\n  loader: 'babel-loader',\n  include: [\n    resolve('src'),\n    resolve('test'),\n    resolve('node_modules/iview/src'),\n    resolve('node_modules/vuex'),\n    resolve('node_modules/webpack-dev-server/client')\n  ]\n},\n```\n\n到此我的问题就得到完美解决了。","slug":"Vue-IE报错SCRIPT1006：缺少‘-’解决办法","published":1,"updated":"2022-05-19T03:13:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenw002nl1l305w8enjc","content":"<p>在最近的一个小项目中，客户强烈要求\b兼容IE浏览器，大家都知道IE是所有浏览器中最让开发者头痛的浏览器，搞了好久都没有适配成功，头都搞大了。网上搜索了很多方法都没有解决我的问题，后来结合网上的一些经验之谈通过自己的一番摸索，终于解决了这个问题。</p>\n<span id=\"more\"></span>\n<p>网上关于IE报错SCRIPT1006：缺少‘)’的原因都是说IE11前浏览器不知此ES6\b所导致的。要想兼容IE，就需要引入ES6语法包。所以首先引入<code>babel-polyfill</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-polyfill --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在项目的主入口文件<code>main.js</code>的首行就可以直接引用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"string\">&#x27;babel-polyfill&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>webpack.config.js</code>配置文件中做修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    // app: [<span class=\"string\">&#x27;./src/main.js&#x27;</span>]</span><br><span class=\"line\">    app: [<span class=\"string\">&#x27;babel-polyfill&#x27;</span>, <span class=\"string\">&#x27;./src/main.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大多数方法到此就结束了，但我的问题到了这里还没有结束，IE依然无法显示。\b通过各种尝试推测发现，引入的Vuex\b库应该也使用了ES6\b。所以需要制定下vuex，让他支持ES6。</p>\n<p>同样还是在<code>webpack.config.js</code>文件中，添加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.js$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;babel-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  include<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    resolve(&#x27;src&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;test&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;node_modules/iview/src&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;node_modules/vuex&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;node_modules/webpack-dev-server/client&#x27;)</span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>到此我的问题就得到完美解决了。</p>\n","site":{"data":{}},"excerpt":"<p>在最近的一个小项目中，客户强烈要求\b兼容IE浏览器，大家都知道IE是所有浏览器中最让开发者头痛的浏览器，搞了好久都没有适配成功，头都搞大了。网上搜索了很多方法都没有解决我的问题，后来结合网上的一些经验之谈通过自己的一番摸索，终于解决了这个问题。</p>","more":"<p>网上关于IE报错SCRIPT1006：缺少‘)’的原因都是说IE11前浏览器不知此ES6\b所导致的。要想兼容IE，就需要引入ES6语法包。所以首先引入<code>babel-polyfill</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-polyfill --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在项目的主入口文件<code>main.js</code>的首行就可以直接引用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"string\">&#x27;babel-polyfill&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>webpack.config.js</code>配置文件中做修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    // app: [<span class=\"string\">&#x27;./src/main.js&#x27;</span>]</span><br><span class=\"line\">    app: [<span class=\"string\">&#x27;babel-polyfill&#x27;</span>, <span class=\"string\">&#x27;./src/main.js&#x27;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大多数方法到此就结束了，但我的问题到了这里还没有结束，IE依然无法显示。\b通过各种尝试推测发现，引入的Vuex\b库应该也使用了ES6\b。所以需要制定下vuex，让他支持ES6。</p>\n<p>同样还是在<code>webpack.config.js</code>文件中，添加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.js$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;babel-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  include<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    resolve(&#x27;src&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;test&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;node_modules/iview/src&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;node_modules/vuex&#x27;)<span class=\"punctuation\">,</span></span><br><span class=\"line\">    resolve(&#x27;node_modules/webpack-dev-server/client&#x27;)</span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>到此我的问题就得到完美解决了。</p>"},{"title":"hPlayer - 功能强大的本地视频播放器","date":"2019-11-27T02:33:29.000Z","abbrlink":"f4da7ecc465746ee","_content":"\n其实目前市面上有很多的播放器，五花八门的播放器很多都支持各种格式的视频文件的播放，它们有一个共同的特点，它们基本都是基于FFmpeg进行的二次开发。但是既然已经有很多类似的播放器了，我为什么还要开发一款播放器呢？\n\n因为我一直想自己开发一款App并将其上线到App Store并希望能够被大家所使用。\n<!-- more -->\n\nApp Store下载地址：https://apps.apple.com/cn/app/appshot/id1462751886\n\n### 展示图\n\n{% asset_img app_store.png Appshot展示图%}\n\n### 功能介绍\n\nhPlayer是一款界面简洁，功能强大的万能本地播放器，可以将下载到电脑的电影通过WiFi的形式上传至播放器内进行播放。\n\n主要有以下特点：\n* 支持众多视频格式，无须转码\n* 支持滑动快进\n* 播放模式锁屏功能\n* 文件夹功能\n* WiFi批量导入功能\n* iTunes导入功能\n* 部分格式支持硬件解码\n* 通过DLNA投屏手机里的视频到电视上播放\n\n#### 文件管理\n- 删除、移动、重命名、创建文件夹\n- 支持WiFi传输，无需连接数据线即可传输文件\n- 支持iTunes导入功能\n\n#### 手势功能\n- 水平滑动：调整播放位置\n- 屏幕左侧竖直滑动：调整音量\n- 屏幕右侧竖直滑动：调整亮度\n- 双击：播放/暂停\n\n#### 其他功能\n- PDF、Word、Excel、PowerPoint等文件浏览","source":"_posts/hPlayer-功能强大的本地视频播放器.md","raw":"---\ntitle: hPlayer - 功能强大的本地视频播放器\ndate: 2019-11-27 10:33:29\ntags:\n  - App Store\ncategories: 作品\nabbrlink: f4da7ecc465746ee\n---\n\n其实目前市面上有很多的播放器，五花八门的播放器很多都支持各种格式的视频文件的播放，它们有一个共同的特点，它们基本都是基于FFmpeg进行的二次开发。但是既然已经有很多类似的播放器了，我为什么还要开发一款播放器呢？\n\n因为我一直想自己开发一款App并将其上线到App Store并希望能够被大家所使用。\n<!-- more -->\n\nApp Store下载地址：https://apps.apple.com/cn/app/appshot/id1462751886\n\n### 展示图\n\n{% asset_img app_store.png Appshot展示图%}\n\n### 功能介绍\n\nhPlayer是一款界面简洁，功能强大的万能本地播放器，可以将下载到电脑的电影通过WiFi的形式上传至播放器内进行播放。\n\n主要有以下特点：\n* 支持众多视频格式，无须转码\n* 支持滑动快进\n* 播放模式锁屏功能\n* 文件夹功能\n* WiFi批量导入功能\n* iTunes导入功能\n* 部分格式支持硬件解码\n* 通过DLNA投屏手机里的视频到电视上播放\n\n#### 文件管理\n- 删除、移动、重命名、创建文件夹\n- 支持WiFi传输，无需连接数据线即可传输文件\n- 支持iTunes导入功能\n\n#### 手势功能\n- 水平滑动：调整播放位置\n- 屏幕左侧竖直滑动：调整音量\n- 屏幕右侧竖直滑动：调整亮度\n- 双击：播放/暂停\n\n#### 其他功能\n- PDF、Word、Excel、PowerPoint等文件浏览","slug":"hPlayer-功能强大的本地视频播放器","published":1,"updated":"2022-05-19T03:13:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenw002ql1l3el9t6uv0","content":"<p>其实目前市面上有很多的播放器，五花八门的播放器很多都支持各种格式的视频文件的播放，它们有一个共同的特点，它们基本都是基于FFmpeg进行的二次开发。但是既然已经有很多类似的播放器了，我为什么还要开发一款播放器呢？</p>\n<p>因为我一直想自己开发一款App并将其上线到App Store并希望能够被大家所使用。</p>\n<span id=\"more\"></span>\n\n<p>App Store下载地址：<a href=\"https://apps.apple.com/cn/app/appshot/id1462751886\">https://apps.apple.com/cn/app/appshot/id1462751886</a></p>\n<h3 id=\"展示图\"><a href=\"#展示图\" class=\"headerlink\" title=\"展示图\"></a>展示图</h3><img src=\"/posts/f4da7ecc465746ee/app_store.png\" class=\"\" title=\"Appshot展示图\">\n\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>hPlayer是一款界面简洁，功能强大的万能本地播放器，可以将下载到电脑的电影通过WiFi的形式上传至播放器内进行播放。</p>\n<p>主要有以下特点：</p>\n<ul>\n<li>支持众多视频格式，无须转码</li>\n<li>支持滑动快进</li>\n<li>播放模式锁屏功能</li>\n<li>文件夹功能</li>\n<li>WiFi批量导入功能</li>\n<li>iTunes导入功能</li>\n<li>部分格式支持硬件解码</li>\n<li>通过DLNA投屏手机里的视频到电视上播放</li>\n</ul>\n<h4 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h4><ul>\n<li>删除、移动、重命名、创建文件夹</li>\n<li>支持WiFi传输，无需连接数据线即可传输文件</li>\n<li>支持iTunes导入功能</li>\n</ul>\n<h4 id=\"手势功能\"><a href=\"#手势功能\" class=\"headerlink\" title=\"手势功能\"></a>手势功能</h4><ul>\n<li>水平滑动：调整播放位置</li>\n<li>屏幕左侧竖直滑动：调整音量</li>\n<li>屏幕右侧竖直滑动：调整亮度</li>\n<li>双击：播放/暂停</li>\n</ul>\n<h4 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h4><ul>\n<li>PDF、Word、Excel、PowerPoint等文件浏览</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>其实目前市面上有很多的播放器，五花八门的播放器很多都支持各种格式的视频文件的播放，它们有一个共同的特点，它们基本都是基于FFmpeg进行的二次开发。但是既然已经有很多类似的播放器了，我为什么还要开发一款播放器呢？</p>\n<p>因为我一直想自己开发一款App并将其上线到App Store并希望能够被大家所使用。</p>","more":"<p>App Store下载地址：<a href=\"https://apps.apple.com/cn/app/appshot/id1462751886\">https://apps.apple.com/cn/app/appshot/id1462751886</a></p>\n<h3 id=\"展示图\"><a href=\"#展示图\" class=\"headerlink\" title=\"展示图\"></a>展示图</h3><img src=\"/posts/f4da7ecc465746ee/app_store.png\" class=\"\" title=\"Appshot展示图\">\n\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>hPlayer是一款界面简洁，功能强大的万能本地播放器，可以将下载到电脑的电影通过WiFi的形式上传至播放器内进行播放。</p>\n<p>主要有以下特点：</p>\n<ul>\n<li>支持众多视频格式，无须转码</li>\n<li>支持滑动快进</li>\n<li>播放模式锁屏功能</li>\n<li>文件夹功能</li>\n<li>WiFi批量导入功能</li>\n<li>iTunes导入功能</li>\n<li>部分格式支持硬件解码</li>\n<li>通过DLNA投屏手机里的视频到电视上播放</li>\n</ul>\n<h4 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h4><ul>\n<li>删除、移动、重命名、创建文件夹</li>\n<li>支持WiFi传输，无需连接数据线即可传输文件</li>\n<li>支持iTunes导入功能</li>\n</ul>\n<h4 id=\"手势功能\"><a href=\"#手势功能\" class=\"headerlink\" title=\"手势功能\"></a>手势功能</h4><ul>\n<li>水平滑动：调整播放位置</li>\n<li>屏幕左侧竖直滑动：调整音量</li>\n<li>屏幕右侧竖直滑动：调整亮度</li>\n<li>双击：播放/暂停</li>\n</ul>\n<h4 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h4><ul>\n<li>PDF、Word、Excel、PowerPoint等文件浏览</li>\n</ul>"},{"title":"iOS UIWebView简单使用","date":"2016-03-26T07:44:12.000Z","abbrlink":"a92ecaf9bd4054ca","_content":"\nUIVebView可以帮你在App中创建一个网页浏览器，来加载一些网页展示页面。现在我们可能会看到很多的app中或多或多或少都有嵌入一些h5的页面，对于一些复杂的页面有h5来展示时一种不错的办法。\n\n下面我想简单记录一下UIWebView的简单使用。\n\n1. 创建UIWebView\n``` objc\nCGRect bouds = [[UIScreen manScreen]applicationFrame];  \nUIWebView* webView = [[UIWebView alloc]initWithFrame:bounds]; \n```\n2. 设置相关属性\n``` objc\nwebView.scalespageToFit = YES;\t    //自动对页面进行缩放以适应屏幕  \nwebView.detectsPhoneNumbers = YES;  //自动检测网页上的电话号码，单击可以拨打 \n```\n\n<!-- more -->\n\n3. 显示UIWebView到UIViewController上\n``` objc\n[self.view addSubview:webView];\n```\n4. 加载内容\n\n    加载一个完整的网页的内容\n``` objc\nNSURL* url = [NSURL URLWithString:@\"http://www.youku.com\"];//创建URL  \nNSURLRequest* request = [NSURLRequest requestWithURL:url]; //创建NSURLRequest  \n[webView loadRequest:request];                             //加载  \n```\n    加载本地网页资源\n``` objc\nNSURL* url = [NSURL   fileURLWithPath:filePath];          //创建URL  \nNSURLRequest* request = [NSURLRequest requestWithURL:url];//创建NSURLRequest  \n[webView loadRequest:request];                            //加载  \n```\n    加载带标签的htmlString，你可以提供一个基础URL,来指导UIWebView对象如何跟随链加载远程资源\n``` objc\n[self.webContentView loadHTMLString:@\"<a>hahhaha</a>\" baseURL:nil];//显示带标签的字符串\n```\n5. 导航\n\n    UIWebView内部会管理浏览器的导航动作，通过goForward和goBack方法你可以控制前进与后退动作\n``` objc\n[webView goBack];          //后退\n[webView goForward];       //前进\n[webView reload];          //重载  \n[webView stopLoading];     //取消载入内容\n```\n6. UIWebViewDelegate委托代理\n\n    UIWebViewDelegate的一组代理方法在特定时间会得到通知，要使用这些方法必须先设定webView的委托\n``` objc\nwebView.delegate = self;\n```\n    具体的一些委托方法有\n``` objc\n/**\n *  当网页视图被指示载入内容而得到通知。应当返回YES，这样会进行加载\n *  通过导航类型参数可以得到请求发起的原因，可以是以下任意值：\n *  UIWebViewNavigationTypeLinkClicked\n *  UIWebViewNavigationTypeFormSubmitted\n *  UIWebViewNavigationTypeBackForward\n *  UIWebViewNavigationTypeReload\n *  UIWebViewNavigationTypeFormResubmitted\n *  UIWebViewNavigationTypeOther\n */\n-(BOOL)webView:(UIWebView*)webView \nshouldStartLoadWithRequest:(NSURLRequest*) reuqest \nnavigationType:(UIWebViewNavigationType)navigationType;  \n\n//当网页视图已经开始加载一个请求后，得到通知。\n-(void)webViewDidStartLoad:(UIWebView*)webView;\n\n//当网页视图结束加载一个请求之后，得到通知。 \n-(void)webViewDidFinishLoad:(UIWebView*)webView;\n\n//当在请求加载中发生错误时，得到通知。会提供一个NSSError对象，以标识所发生错误类型。\n-(void)webView:(UIWebView*)webView  DidFailLoadWithError:(NSError*)error;  \n\n```","source":"_posts/iOS-UIWebView简单使用.md","raw":"---\ntitle: iOS UIWebView简单使用\ndate: 2016-03-26 15:44:12\ntags:\n  - iOS\ncategories: 知识汇总\nabbrlink: a92ecaf9bd4054ca\n---\n\nUIVebView可以帮你在App中创建一个网页浏览器，来加载一些网页展示页面。现在我们可能会看到很多的app中或多或多或少都有嵌入一些h5的页面，对于一些复杂的页面有h5来展示时一种不错的办法。\n\n下面我想简单记录一下UIWebView的简单使用。\n\n1. 创建UIWebView\n``` objc\nCGRect bouds = [[UIScreen manScreen]applicationFrame];  \nUIWebView* webView = [[UIWebView alloc]initWithFrame:bounds]; \n```\n2. 设置相关属性\n``` objc\nwebView.scalespageToFit = YES;\t    //自动对页面进行缩放以适应屏幕  \nwebView.detectsPhoneNumbers = YES;  //自动检测网页上的电话号码，单击可以拨打 \n```\n\n<!-- more -->\n\n3. 显示UIWebView到UIViewController上\n``` objc\n[self.view addSubview:webView];\n```\n4. 加载内容\n\n    加载一个完整的网页的内容\n``` objc\nNSURL* url = [NSURL URLWithString:@\"http://www.youku.com\"];//创建URL  \nNSURLRequest* request = [NSURLRequest requestWithURL:url]; //创建NSURLRequest  \n[webView loadRequest:request];                             //加载  \n```\n    加载本地网页资源\n``` objc\nNSURL* url = [NSURL   fileURLWithPath:filePath];          //创建URL  \nNSURLRequest* request = [NSURLRequest requestWithURL:url];//创建NSURLRequest  \n[webView loadRequest:request];                            //加载  \n```\n    加载带标签的htmlString，你可以提供一个基础URL,来指导UIWebView对象如何跟随链加载远程资源\n``` objc\n[self.webContentView loadHTMLString:@\"<a>hahhaha</a>\" baseURL:nil];//显示带标签的字符串\n```\n5. 导航\n\n    UIWebView内部会管理浏览器的导航动作，通过goForward和goBack方法你可以控制前进与后退动作\n``` objc\n[webView goBack];          //后退\n[webView goForward];       //前进\n[webView reload];          //重载  \n[webView stopLoading];     //取消载入内容\n```\n6. UIWebViewDelegate委托代理\n\n    UIWebViewDelegate的一组代理方法在特定时间会得到通知，要使用这些方法必须先设定webView的委托\n``` objc\nwebView.delegate = self;\n```\n    具体的一些委托方法有\n``` objc\n/**\n *  当网页视图被指示载入内容而得到通知。应当返回YES，这样会进行加载\n *  通过导航类型参数可以得到请求发起的原因，可以是以下任意值：\n *  UIWebViewNavigationTypeLinkClicked\n *  UIWebViewNavigationTypeFormSubmitted\n *  UIWebViewNavigationTypeBackForward\n *  UIWebViewNavigationTypeReload\n *  UIWebViewNavigationTypeFormResubmitted\n *  UIWebViewNavigationTypeOther\n */\n-(BOOL)webView:(UIWebView*)webView \nshouldStartLoadWithRequest:(NSURLRequest*) reuqest \nnavigationType:(UIWebViewNavigationType)navigationType;  \n\n//当网页视图已经开始加载一个请求后，得到通知。\n-(void)webViewDidStartLoad:(UIWebView*)webView;\n\n//当网页视图结束加载一个请求之后，得到通知。 \n-(void)webViewDidFinishLoad:(UIWebView*)webView;\n\n//当在请求加载中发生错误时，得到通知。会提供一个NSSError对象，以标识所发生错误类型。\n-(void)webView:(UIWebView*)webView  DidFailLoadWithError:(NSError*)error;  \n\n```","slug":"iOS-UIWebView简单使用","published":1,"updated":"2022-05-19T03:13:11.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenx002ul1l38ju8huev","content":"<p>UIVebView可以帮你在App中创建一个网页浏览器，来加载一些网页展示页面。现在我们可能会看到很多的app中或多或多或少都有嵌入一些h5的页面，对于一些复杂的页面有h5来展示时一种不错的办法。</p>\n<p>下面我想简单记录一下UIWebView的简单使用。</p>\n<ol>\n<li>创建UIWebView<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> bouds = [[<span class=\"built_in\">UIScreen</span> manScreen]applicationFrame];  </span><br><span class=\"line\"><span class=\"built_in\">UIWebView</span>* webView = [[<span class=\"built_in\">UIWebView</span> alloc]initWithFrame:bounds]; </span><br></pre></td></tr></table></figure></li>\n<li>设置相关属性<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.scalespageToFit = <span class=\"literal\">YES</span>;\t    <span class=\"comment\">//自动对页面进行缩放以适应屏幕  </span></span><br><span class=\"line\">webView.detectsPhoneNumbers = <span class=\"literal\">YES</span>;  <span class=\"comment\">//自动检测网页上的电话号码，单击可以拨打 </span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"3\">\n<li><p>显示UIWebView到UIViewController上</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:webView];</span><br></pre></td></tr></table></figure></li>\n<li><p>加载内容</p>\n<p> 加载一个完整的网页的内容</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span>* url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@&quot;http://www.youku.com&quot;</span>];<span class=\"comment\">//创建URL  </span></span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url]; <span class=\"comment\">//创建NSURLRequest  </span></span><br><span class=\"line\">[webView loadRequest:request];                             <span class=\"comment\">//加载  </span></span><br></pre></td></tr></table></figure>\n<p> 加载本地网页资源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span>* url = [<span class=\"built_in\">NSURL</span>   fileURLWithPath:filePath];          <span class=\"comment\">//创建URL  </span></span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];<span class=\"comment\">//创建NSURLRequest  </span></span><br><span class=\"line\">[webView loadRequest:request];                            <span class=\"comment\">//加载  </span></span><br></pre></td></tr></table></figure>\n<p> 加载带标签的htmlString，你可以提供一个基础URL,来指导UIWebView对象如何跟随链加载远程资源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.webContentView loadHTMLString:<span class=\"string\">@&quot;&lt;a&gt;hahhaha&lt;/a&gt;&quot;</span> baseURL:<span class=\"literal\">nil</span>];<span class=\"comment\">//显示带标签的字符串</span></span><br></pre></td></tr></table></figure></li>\n<li><p>导航</p>\n<p> UIWebView内部会管理浏览器的导航动作，通过goForward和goBack方法你可以控制前进与后退动作</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webView goBack];          <span class=\"comment\">//后退</span></span><br><span class=\"line\">[webView goForward];       <span class=\"comment\">//前进</span></span><br><span class=\"line\">[webView reload];          <span class=\"comment\">//重载  </span></span><br><span class=\"line\">[webView stopLoading];     <span class=\"comment\">//取消载入内容</span></span><br></pre></td></tr></table></figure></li>\n<li><p>UIWebViewDelegate委托代理</p>\n<p> UIWebViewDelegate的一组代理方法在特定时间会得到通知，要使用这些方法必须先设定webView的委托</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.delegate = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<p> 具体的一些委托方法有</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  当网页视图被指示载入内容而得到通知。应当返回YES，这样会进行加载</span></span><br><span class=\"line\"><span class=\"comment\"> *  通过导航类型参数可以得到请求发起的原因，可以是以下任意值：</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeLinkClicked</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeFormSubmitted</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeBackForward</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeReload</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeFormResubmitted</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeOther</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-(<span class=\"type\">BOOL</span>)webView:(<span class=\"built_in\">UIWebView</span>*)webView </span><br><span class=\"line\">shouldStartLoadWithRequest:(<span class=\"built_in\">NSURLRequest</span>*) reuqest </span><br><span class=\"line\">navigationType:(<span class=\"built_in\">UIWebViewNavigationType</span>)navigationType;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当网页视图已经开始加载一个请求后，得到通知。</span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)webViewDidStartLoad:(<span class=\"built_in\">UIWebView</span>*)webView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当网页视图结束加载一个请求之后，得到通知。 </span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)webViewDidFinishLoad:(<span class=\"built_in\">UIWebView</span>*)webView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当在请求加载中发生错误时，得到通知。会提供一个NSSError对象，以标识所发生错误类型。</span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)webView:(<span class=\"built_in\">UIWebView</span>*)webView  DidFailLoadWithError:(<span class=\"built_in\">NSError</span>*)error;  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>UIVebView可以帮你在App中创建一个网页浏览器，来加载一些网页展示页面。现在我们可能会看到很多的app中或多或多或少都有嵌入一些h5的页面，对于一些复杂的页面有h5来展示时一种不错的办法。</p>\n<p>下面我想简单记录一下UIWebView的简单使用。</p>\n<ol>\n<li>创建UIWebView<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> bouds = [[<span class=\"built_in\">UIScreen</span> manScreen]applicationFrame];  </span><br><span class=\"line\"><span class=\"built_in\">UIWebView</span>* webView = [[<span class=\"built_in\">UIWebView</span> alloc]initWithFrame:bounds]; </span><br></pre></td></tr></table></figure></li>\n<li>设置相关属性<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.scalespageToFit = <span class=\"literal\">YES</span>;\t    <span class=\"comment\">//自动对页面进行缩放以适应屏幕  </span></span><br><span class=\"line\">webView.detectsPhoneNumbers = <span class=\"literal\">YES</span>;  <span class=\"comment\">//自动检测网页上的电话号码，单击可以拨打 </span></span><br></pre></td></tr></table></figure></li>\n</ol>","more":"<ol start=\"3\">\n<li><p>显示UIWebView到UIViewController上</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:webView];</span><br></pre></td></tr></table></figure></li>\n<li><p>加载内容</p>\n<p> 加载一个完整的网页的内容</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span>* url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@&quot;http://www.youku.com&quot;</span>];<span class=\"comment\">//创建URL  </span></span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url]; <span class=\"comment\">//创建NSURLRequest  </span></span><br><span class=\"line\">[webView loadRequest:request];                             <span class=\"comment\">//加载  </span></span><br></pre></td></tr></table></figure>\n<p> 加载本地网页资源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span>* url = [<span class=\"built_in\">NSURL</span>   fileURLWithPath:filePath];          <span class=\"comment\">//创建URL  </span></span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];<span class=\"comment\">//创建NSURLRequest  </span></span><br><span class=\"line\">[webView loadRequest:request];                            <span class=\"comment\">//加载  </span></span><br></pre></td></tr></table></figure>\n<p> 加载带标签的htmlString，你可以提供一个基础URL,来指导UIWebView对象如何跟随链加载远程资源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.webContentView loadHTMLString:<span class=\"string\">@&quot;&lt;a&gt;hahhaha&lt;/a&gt;&quot;</span> baseURL:<span class=\"literal\">nil</span>];<span class=\"comment\">//显示带标签的字符串</span></span><br></pre></td></tr></table></figure></li>\n<li><p>导航</p>\n<p> UIWebView内部会管理浏览器的导航动作，通过goForward和goBack方法你可以控制前进与后退动作</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webView goBack];          <span class=\"comment\">//后退</span></span><br><span class=\"line\">[webView goForward];       <span class=\"comment\">//前进</span></span><br><span class=\"line\">[webView reload];          <span class=\"comment\">//重载  </span></span><br><span class=\"line\">[webView stopLoading];     <span class=\"comment\">//取消载入内容</span></span><br></pre></td></tr></table></figure></li>\n<li><p>UIWebViewDelegate委托代理</p>\n<p> UIWebViewDelegate的一组代理方法在特定时间会得到通知，要使用这些方法必须先设定webView的委托</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.delegate = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<p> 具体的一些委托方法有</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  当网页视图被指示载入内容而得到通知。应当返回YES，这样会进行加载</span></span><br><span class=\"line\"><span class=\"comment\"> *  通过导航类型参数可以得到请求发起的原因，可以是以下任意值：</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeLinkClicked</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeFormSubmitted</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeBackForward</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeReload</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeFormResubmitted</span></span><br><span class=\"line\"><span class=\"comment\"> *  UIWebViewNavigationTypeOther</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-(<span class=\"type\">BOOL</span>)webView:(<span class=\"built_in\">UIWebView</span>*)webView </span><br><span class=\"line\">shouldStartLoadWithRequest:(<span class=\"built_in\">NSURLRequest</span>*) reuqest </span><br><span class=\"line\">navigationType:(<span class=\"built_in\">UIWebViewNavigationType</span>)navigationType;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当网页视图已经开始加载一个请求后，得到通知。</span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)webViewDidStartLoad:(<span class=\"built_in\">UIWebView</span>*)webView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当网页视图结束加载一个请求之后，得到通知。 </span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)webViewDidFinishLoad:(<span class=\"built_in\">UIWebView</span>*)webView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当在请求加载中发生错误时，得到通知。会提供一个NSSError对象，以标识所发生错误类型。</span></span><br><span class=\"line\">-(<span class=\"type\">void</span>)webView:(<span class=\"built_in\">UIWebView</span>*)webView  DidFailLoadWithError:(<span class=\"built_in\">NSError</span>*)error;  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"Swift学习笔记之高级运算符","date":"2016-08-02T07:01:30.000Z","abbrlink":"ee3b5e2f81886be1","_content":"\n除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。\n\n与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（`&+`）,所有的溢出运算符都是以`&`开头的。\n\n## 位运算符\n\n位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。\n\n<!-- more -->\n\n### 按位取反运算符\n\n按位取反运算符（`~`）可以对一个数值的全部比特位进行取反：\n\n{% asset_img bitwiseNOT_2x.png 按位取反运算 %}\n按位取反运算符是一个前缀运算符，需要直接放在运算的数之前，并且它们之间不能加空格。\n\n``` swift\nlet initialBits: UInt8 = 0b00001111   //十进制等于15\nlet invertedBits = ~initialBits       //等于 0b11110000，十进制为240\n```\n\n### 按位与运算符\n\n按位与运算符（`&`）可以对两个数的比特位进行合并。它返回一个新的数，只有当两个数对应位都为`1`的时候，新数的对应位才为`1`。\n\n{% asset_img bitwiseAND_2x.png 按位与运算 %}\n在下面的示例当中，`firstBits` 和 `lastBits` 中间 4 个位的值都为 1。按位与运算符对它们进行了运算，得到二进制数值 `00111100`，等价于无符号十进制数的 60：\n``` swift\nlet firstBits: UInt8 = 0b11111100\nlet lastBits: UInt8  = 0b00111111\nlet middleBits = firstBits & lastBits // 等于 00111100\n```\n\n### 按位或运算符\n\n按位或运算符(`|`)可以对两个数的比特位进行比较，它返回一个新的数，如果两个对应的比特位中有任意一个为`1`时，新数对应位就为`1`。\n\n{% asset_img bitwiseOR_2x.png 按位或运算 %}\n\n在下面的示例中，`someBits` 和 `moreBits` 不同的位会被设置为 `1`。接位或运算符对它们进行了运算，得到二进制数值 `11111110`，等价于无符号十进制数的 `254`：\n``` swift\nlet someBits: UInt8 = 0b10110010\nlet moreBits: UInt8 = 0b01011110\nlet combinedbits = someBits | moreBits // 等于 11111110\n```\n\n### 按位异或运算符\n\n按位异或运算符(`^`)可以对两个数的比特位进行比较，它返回一个新的数，当两个数对应比特位不相同时，新数的对应位就为`1`：\n\n{% asset_img bitwiseXOR_2x.png 按位异或运算 %}\n\n在下面的示例当中，`firstBits` 和 `otherBits` 都有一个自己的位为 `1` 而对方的对应位为 `0` 的位。 按位异或运算符将新数的这两个位都设置为 `1`，同时将其它位都设置为 `0`：\n``` swift\nlet firstBits: UInt8 = 0b00010100\nlet otherBits: UInt8 = 0b00000101\nlet outputBits = firstBits ^ otherBits // 等于 00010001\n```\n\n### 按位左移、右移运算符\n\n按位左移运算符（`<<`）和按位右移运算符（`>>`）可以对一个数的所有位进行指定位数的左移和右移。对一个数的左移和右移一位相当于对一个数乘以2或者除以2。\n\n#### 无符号整数的位移运算\n\n对无符号的整数进行位移的规则如下：\n* 已经存在的位按指定的位数进行左移和右移\n* 任何因移动超出整型存储范围的位都会被丢弃\n* 用`0`来填充位移后产生的空白\n这种方法称为逻辑位移。\n\n以下这张图展示了 `11111111 << 1`（即把 `11111111` 向左移动 `1` 位），和 `11111111 >> 1`（即把 `11111111` 向右移动 `1` 位）的结果。蓝色的部分是被移位的，灰色的部分是被抛弃的，橙色的部分则是被填充进来的：\n\n{% asset_img bitshiftUnsigned_2x.png 按位左移、右移运算 %}\n\n下面的代码演示了 Swift 中的移位运算：\n``` swift\nlet shiftBits: UInt8 = 4 // 即二进制的 00000100\nshiftBits << 1           // 00001000\nshiftBits << 2           // 00010000\nshiftBits << 5           // 10000000\nshiftBits << 6           // 00000000\nshiftBits >> 2           // 00000001\n```\n\n还可以使用位移运算对其它数据类型进行编码和解码。\n\n#### 有符号整数的位移运算\n\n对比无符号整数，有符号整数的位移运算相对就要复杂得多，这种复杂性源于有符号整数的二进制表现新式。\n有符号整数使用第一个比特位（通常称为符号位）来表示这个数的正负。符号为`0`代表正数，为`1`代表负数。其余的比特位（通常称为数值位）存储了实际的值。\n\n{% asset_img bitshiftSignedFour_2x.png  bitshiftSignedFour_2x %}\n\n符号位为 `0`，说明这是一个正数，另外 7 位则代表了十进制数值 4 的二进制表示。\n\n负数的存储方式略有不同。它存储的值的绝对值等于 `2` 的 `n` 次方减去它的实际值（也就是数值位表示的值），这里的 `n` 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 `2` 的 `7` 次方，即 `128`。\n这是值为 `-4` 的 `Int8` 型整数的二进制位表现形式：\n\n{% asset_img bitshiftSignedMinusFour_2x.png bitshiftSignedMinusFour_2x %}\n\n这次的符号位为 `1`，说明这是一个负数，另外 7 个位则代表了数值 `124`（即 `128 - 4`）的二进制表示。负数的表示通常被称为二进制补码表示，用这种方法表示负数乍看起来有点奇怪，但它有一下几个优点。\n* 如果想对`-1`和`-4`进行加法运算，我们只需要将这两个数的全部8个比特位相加，并且将计算结果中超出8位的值丢弃,其次，使用二进制补码可以使负数的按位左移和右移运算得到跟正数同样的效果，即每向左移一位就将自身的数值乘以 2，每向右一位就将自身的数值除以 2。要达到此目的，对有符号整数的右移有一个额外的规则：\n{% asset_img bitshiftSignedAddition_2x.png 有符号相加%}\n\n* 当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 `0`。\n{% asset_img bitshiftSigned_2x.png 有符号位移 %}\n这个行为可以确保有符号整数的符号位不会因为右移运算而改变，这通常被称为<b>算术移位</b>。\n由于正数和负数的特殊存储方式，在对它们进行右移的时候，会使它们越来越接近 `0`。在移位的过程中保持符号位不变，意味着负整数在接近 `0` 的过程中会一直保持为负。\n\n## 溢出运算符\n在默认情况下，当向一个整数赋予超过它容量的值时，Swift默认会报错，而不是产生一个无效的数。这个行为为我们在运算过大或者过小的数的时候提供了额外的安全性。\n例如`Int16`型整数能容纳的有符号整数范围是`-32768`到`32767`,当一个为Int16型变量的值超出了这个范围时，系统会报错：\n``` swift\nvar potentialOverflow = Int16.max // potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数\npotentialOverflow += 1            // 这里会报错\n```\n溢出运算符可以让数值溢出的时候采取截断处理，而非报错。可以使用Swift提供的三个溢出运算符来让系统支持整数溢出运算。这些运算符都是以`&`开头的：\n* 溢出加法 `&+`\n* 溢出减法 `&-`\n* 溢出乘法 `&*`\n\n### 无符号数值上溢\n\n数值有可能出现上溢或者下溢。\n这个示例演示了但我们对一个无符号整数使用溢出加法(`&+`)进行上溢运算时会发生什么：\n``` swift\nvar unsignedOverflow = UInt8.max\n// unsignedOverflow 等于 UInt8 所能容纳的最大整数 255\nunsignedOverflow = unsignedOverflow &+ 1\n// 此时 unsignedOverflow 等于 0\n```\n`unsignedOverflow` 被初始化为 `UInt8` 所能容纳的最大整数（`255`，以二进制表示即 `11111111`）。然后使用了溢出加法运算符（`&+`）对其进行加 1 运算。这使得它的二进制表示正好超出 UInt8 所能容纳的位数，也就导致了数值的溢出，如下图所示。数值溢出后，留在 `UInt8` 边界内的值是 `00000000`，也就是十进制数值的 0。\n{% asset_img overflowAddition_2x.png 上溢 %}\n\n### 无符号数值下溢\n\n同样的，当我们对一个无符号整数使用溢出减法(`&-`)进行下溢运算时也会产生类似的现象：\n``` swift\nvar unsignedOverflow = UInt8.min\n// unsignedOverflow 等于 UInt8 所能容纳的最小整数 0\nunsignedOverflow = unsignedOverflow &- 1\n// 此时 unsignedOverflow 等于 255\n```\n`UInt8` 型整数能容纳的最小值是 `0`，以二进制表示即 `00000000`。当使用溢出减法运算符对其进行减 1 运算时，数值会产生下溢并被截断为 `11111111`， 也就是十进制数值的 `255`。\n{% asset_img overflowUnsignedSubtraction_2x.png 下溢 %}\n\n### 有符号数值溢出\n\n溢出也会发生在有符号整型数值上。在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算。比如下面的例子：\n``` swift\nvar signedOverflow = Int8.min\n// signedOverflow 等于 Int8 所能容纳的最小整数 -128\nsignedOverflow = signedOverflow &- 1\n// 此时 signedOverflow 等于 127\n```\n`Int8`型整数能容纳的最小值是`－128`，以二进制表示即`10000000`。当使用溢出减法运算符对其进行减`1`运算时，符号位被翻转，得到二进制数值`01111111`，也就是十进制的`127`，这个值也是`Int8`型整数所能容纳的最大值。\n\n{% asset_img overflowSignedSubtraction_2x.png 有符数值溢出%}\n\n对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。\n\n## 运算符函数\n类和结构体可以为现有的运算符提供自定义的实现，这通常被称为运算符重载。\n\n下面一个例子展示了如何为自定义的结构体实现加法运算符(`+`)。算数运算符是一个双目运算符，因为它可以对两个值进行运算，同时它还是中缀运算符，因为它出现在两个值中间。\n\n例子中定义了一个名为 `Vector2D` 的结构体用来表示二维坐标向量 `(x, y)`，紧接着定义了一个可以对两个 `Vector2D` 结构体进行相加的运算符函数：\n``` swift\nstruct Vector2D {\n    var x = 0.0, y = 0.0\n}\nfunc + (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y + right.y)\n}\n```\n该运算符函数被定义为一个全局函数，并且函数的名字与它要进行重载的 `+` 名字一致。因为算术加法运算符是双目运算符，所以这个运算符函数接收两个类型为 `Vector2D` 的参数，同时有一个 `Vector2D` 类型的返回值。\n\n在这个实现中，输入参数分别被命名为 `left` 和 `right`，代表在 + 运算符左边和右边的两个 `Vector2D` 实例。函数返回了一个新的 `Vector2D` 实例，这个实例的 `x` 和 `y` 分别等于作为参数的两个实例的 `x` 和 `y` 的值之和。\n\n这个函数被定义成全局的，而不是 `Vector2D` 结构体的成员方法，所以任意两个 `Vector2D` 实例都可以使用这个中缀运算符：\n``` swift\nlet vector = Vector2D(x: 3.0, y: 1.0)\nlet anotherVector = Vector2D(x: 2.0, y: 4.0)\nlet combinedVector = vector + anotherVector\n// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)\n```\n\n### 前缀和后缀运算符\n上个例子演示了一个双目中缀运算符的自定义实现。类与结构体也能提供标准单目运算符的实现。单目运算符只运算一个值。当运算符出现在值之前时，它就是前缀的（例如 `-a`），而当它出现在值之后时，它就是后缀的（例如 `b!`）。\n\n要实现前缀或者后缀运算符，需要在声明运算符函数的时候在`func`关键字之前指定`prefix`或者`postfix`修饰符。\n``` swift\nprefix func - (vector: Vector2D) -> Vector2D {\n    return Vector2D(x: -vector.x, y: -vector.y)\n}\n```\n这段代码为 `Vector2D` 类型实现了单目负号运算符。由于该运算符是前缀运算符，所以这个函数需要加上 `prefix` 修饰符。\n\n对于简单数值，单目负号运算符可以对它们的正负性进行改变。对于 `Vector2D` 来说，该运算将其 `x` 和 `y` 属性的正负性都进行了改变：\n``` swift\nlet positive = Vector2D(x: 3.0, y: 4.0)\nlet negative = -positive\n// negative 是一个值为 (-3.0, -4.0) 的 Vector2D 实例\nlet alsoPositive = -negative\n// alsoPositive 是一个值为 (3.0, 4.0) 的 Vector2D 实例\n```\n\n### 复合赋值运算符\n复合赋值运算符将赋值运算符（`=`）与其它运算符进行结合。例如，将加法与赋值结合成加法赋值运算符（`+=`）。在实现的时候，需要把运算符的左参数设置成 `inout` 类型，因为这个参数的值会在运算符函数内直接被修改。\n``` swift\nfunc += (inout left: Vector2D, right: Vector2D) {\n    left = left + right\n}\n```\n因为加法运算在之前已经定义过了，所以在这里无需重新定义。在这里可以直接利用现有的加法运算符函数，用它来对左值和右值进行相加，并再次赋值给左值：\n``` swift\nvar original = Vector2D(x: 1.0, y: 2.0)\nlet vectorToAdd = Vector2D(x: 3.0, y: 4.0)\noriginal += vectorToAdd\n// original 的值现在为 (4.0, 6.0)\n```\n\n> 注：不能对默认的赋值运算符（`=`）进行重载。只有组合赋值运算符可以被重载。同样地，也无法对三目条件运算符 （`a ? b : c`） 进行重载。\n\n### 等价运算符\n\n自定义的类和结构体没有对等价运算符进行默认实现，等价运算符通常被称为“相等”运算符（`==`）与“不等”运算符（`!=`）。对于自定义类型，Swift 无法判断其是否“相等”，因为“相等”的含义取决于这些自定义类型在你的代码中所扮演的角色。\n\n为了使用等价运算符能对自定义的类型进行判等运算，需要为其提供自定义实现，实现的方法与其它中缀运算符一样：\n``` swift\nfunc == (left: Vector2D, right: Vector2D) -> Bool {\n    return (left.x == right.x) && (left.y == right.y)\n}\nfunc != (left: Vector2D, right: Vector2D) -> Bool {\n    return !(left == right)\n}\n```\n\n## 自定义运算符\n\n除了实现标准运算符，在 Swift 中还可以声明和实现自定义运算符。\n新的运算符要使用 `operator` 关键字在全局作用域内进行定义，同时还要指定 `prefix`、`infix` 或者 `postfix` 修饰符：\n``` swift\nprefix operator +++ {}\n```\n上面的代码定义了一个新的名为 `+++` 的前缀运算符。对于这个运算符，在 Swift 中并没有意义，因此我们针对 `Vector2D` 的实例来定义它的意义。对这个示例来讲，`+++` 被实现为“前缀双自增”运算符。它使用了前面定义的复合加法运算符来让矩阵对自身进行相加，从而让 `Vector2D` 实例的 `x` 属性和 `y` 属性的值翻倍：\n``` swift\nprefix func +++ (inout vector: Vector2D) -> Vector2D {\n    vector += vector\n    return vector\n}\n```\n","source":"_posts/Swift学习笔记之高级运算符.md","raw":"---\ntitle: Swift学习笔记之高级运算符\ndate: 2016-08-02 15:01:30\ntags:\n  - iOS\ncategories: Swift学习笔记\nabbrlink: ee3b5e2f81886be1\n---\n\n除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。\n\n与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（`&+`）,所有的溢出运算符都是以`&`开头的。\n\n## 位运算符\n\n位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。\n\n<!-- more -->\n\n### 按位取反运算符\n\n按位取反运算符（`~`）可以对一个数值的全部比特位进行取反：\n\n{% asset_img bitwiseNOT_2x.png 按位取反运算 %}\n按位取反运算符是一个前缀运算符，需要直接放在运算的数之前，并且它们之间不能加空格。\n\n``` swift\nlet initialBits: UInt8 = 0b00001111   //十进制等于15\nlet invertedBits = ~initialBits       //等于 0b11110000，十进制为240\n```\n\n### 按位与运算符\n\n按位与运算符（`&`）可以对两个数的比特位进行合并。它返回一个新的数，只有当两个数对应位都为`1`的时候，新数的对应位才为`1`。\n\n{% asset_img bitwiseAND_2x.png 按位与运算 %}\n在下面的示例当中，`firstBits` 和 `lastBits` 中间 4 个位的值都为 1。按位与运算符对它们进行了运算，得到二进制数值 `00111100`，等价于无符号十进制数的 60：\n``` swift\nlet firstBits: UInt8 = 0b11111100\nlet lastBits: UInt8  = 0b00111111\nlet middleBits = firstBits & lastBits // 等于 00111100\n```\n\n### 按位或运算符\n\n按位或运算符(`|`)可以对两个数的比特位进行比较，它返回一个新的数，如果两个对应的比特位中有任意一个为`1`时，新数对应位就为`1`。\n\n{% asset_img bitwiseOR_2x.png 按位或运算 %}\n\n在下面的示例中，`someBits` 和 `moreBits` 不同的位会被设置为 `1`。接位或运算符对它们进行了运算，得到二进制数值 `11111110`，等价于无符号十进制数的 `254`：\n``` swift\nlet someBits: UInt8 = 0b10110010\nlet moreBits: UInt8 = 0b01011110\nlet combinedbits = someBits | moreBits // 等于 11111110\n```\n\n### 按位异或运算符\n\n按位异或运算符(`^`)可以对两个数的比特位进行比较，它返回一个新的数，当两个数对应比特位不相同时，新数的对应位就为`1`：\n\n{% asset_img bitwiseXOR_2x.png 按位异或运算 %}\n\n在下面的示例当中，`firstBits` 和 `otherBits` 都有一个自己的位为 `1` 而对方的对应位为 `0` 的位。 按位异或运算符将新数的这两个位都设置为 `1`，同时将其它位都设置为 `0`：\n``` swift\nlet firstBits: UInt8 = 0b00010100\nlet otherBits: UInt8 = 0b00000101\nlet outputBits = firstBits ^ otherBits // 等于 00010001\n```\n\n### 按位左移、右移运算符\n\n按位左移运算符（`<<`）和按位右移运算符（`>>`）可以对一个数的所有位进行指定位数的左移和右移。对一个数的左移和右移一位相当于对一个数乘以2或者除以2。\n\n#### 无符号整数的位移运算\n\n对无符号的整数进行位移的规则如下：\n* 已经存在的位按指定的位数进行左移和右移\n* 任何因移动超出整型存储范围的位都会被丢弃\n* 用`0`来填充位移后产生的空白\n这种方法称为逻辑位移。\n\n以下这张图展示了 `11111111 << 1`（即把 `11111111` 向左移动 `1` 位），和 `11111111 >> 1`（即把 `11111111` 向右移动 `1` 位）的结果。蓝色的部分是被移位的，灰色的部分是被抛弃的，橙色的部分则是被填充进来的：\n\n{% asset_img bitshiftUnsigned_2x.png 按位左移、右移运算 %}\n\n下面的代码演示了 Swift 中的移位运算：\n``` swift\nlet shiftBits: UInt8 = 4 // 即二进制的 00000100\nshiftBits << 1           // 00001000\nshiftBits << 2           // 00010000\nshiftBits << 5           // 10000000\nshiftBits << 6           // 00000000\nshiftBits >> 2           // 00000001\n```\n\n还可以使用位移运算对其它数据类型进行编码和解码。\n\n#### 有符号整数的位移运算\n\n对比无符号整数，有符号整数的位移运算相对就要复杂得多，这种复杂性源于有符号整数的二进制表现新式。\n有符号整数使用第一个比特位（通常称为符号位）来表示这个数的正负。符号为`0`代表正数，为`1`代表负数。其余的比特位（通常称为数值位）存储了实际的值。\n\n{% asset_img bitshiftSignedFour_2x.png  bitshiftSignedFour_2x %}\n\n符号位为 `0`，说明这是一个正数，另外 7 位则代表了十进制数值 4 的二进制表示。\n\n负数的存储方式略有不同。它存储的值的绝对值等于 `2` 的 `n` 次方减去它的实际值（也就是数值位表示的值），这里的 `n` 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 `2` 的 `7` 次方，即 `128`。\n这是值为 `-4` 的 `Int8` 型整数的二进制位表现形式：\n\n{% asset_img bitshiftSignedMinusFour_2x.png bitshiftSignedMinusFour_2x %}\n\n这次的符号位为 `1`，说明这是一个负数，另外 7 个位则代表了数值 `124`（即 `128 - 4`）的二进制表示。负数的表示通常被称为二进制补码表示，用这种方法表示负数乍看起来有点奇怪，但它有一下几个优点。\n* 如果想对`-1`和`-4`进行加法运算，我们只需要将这两个数的全部8个比特位相加，并且将计算结果中超出8位的值丢弃,其次，使用二进制补码可以使负数的按位左移和右移运算得到跟正数同样的效果，即每向左移一位就将自身的数值乘以 2，每向右一位就将自身的数值除以 2。要达到此目的，对有符号整数的右移有一个额外的规则：\n{% asset_img bitshiftSignedAddition_2x.png 有符号相加%}\n\n* 当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 `0`。\n{% asset_img bitshiftSigned_2x.png 有符号位移 %}\n这个行为可以确保有符号整数的符号位不会因为右移运算而改变，这通常被称为<b>算术移位</b>。\n由于正数和负数的特殊存储方式，在对它们进行右移的时候，会使它们越来越接近 `0`。在移位的过程中保持符号位不变，意味着负整数在接近 `0` 的过程中会一直保持为负。\n\n## 溢出运算符\n在默认情况下，当向一个整数赋予超过它容量的值时，Swift默认会报错，而不是产生一个无效的数。这个行为为我们在运算过大或者过小的数的时候提供了额外的安全性。\n例如`Int16`型整数能容纳的有符号整数范围是`-32768`到`32767`,当一个为Int16型变量的值超出了这个范围时，系统会报错：\n``` swift\nvar potentialOverflow = Int16.max // potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数\npotentialOverflow += 1            // 这里会报错\n```\n溢出运算符可以让数值溢出的时候采取截断处理，而非报错。可以使用Swift提供的三个溢出运算符来让系统支持整数溢出运算。这些运算符都是以`&`开头的：\n* 溢出加法 `&+`\n* 溢出减法 `&-`\n* 溢出乘法 `&*`\n\n### 无符号数值上溢\n\n数值有可能出现上溢或者下溢。\n这个示例演示了但我们对一个无符号整数使用溢出加法(`&+`)进行上溢运算时会发生什么：\n``` swift\nvar unsignedOverflow = UInt8.max\n// unsignedOverflow 等于 UInt8 所能容纳的最大整数 255\nunsignedOverflow = unsignedOverflow &+ 1\n// 此时 unsignedOverflow 等于 0\n```\n`unsignedOverflow` 被初始化为 `UInt8` 所能容纳的最大整数（`255`，以二进制表示即 `11111111`）。然后使用了溢出加法运算符（`&+`）对其进行加 1 运算。这使得它的二进制表示正好超出 UInt8 所能容纳的位数，也就导致了数值的溢出，如下图所示。数值溢出后，留在 `UInt8` 边界内的值是 `00000000`，也就是十进制数值的 0。\n{% asset_img overflowAddition_2x.png 上溢 %}\n\n### 无符号数值下溢\n\n同样的，当我们对一个无符号整数使用溢出减法(`&-`)进行下溢运算时也会产生类似的现象：\n``` swift\nvar unsignedOverflow = UInt8.min\n// unsignedOverflow 等于 UInt8 所能容纳的最小整数 0\nunsignedOverflow = unsignedOverflow &- 1\n// 此时 unsignedOverflow 等于 255\n```\n`UInt8` 型整数能容纳的最小值是 `0`，以二进制表示即 `00000000`。当使用溢出减法运算符对其进行减 1 运算时，数值会产生下溢并被截断为 `11111111`， 也就是十进制数值的 `255`。\n{% asset_img overflowUnsignedSubtraction_2x.png 下溢 %}\n\n### 有符号数值溢出\n\n溢出也会发生在有符号整型数值上。在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算。比如下面的例子：\n``` swift\nvar signedOverflow = Int8.min\n// signedOverflow 等于 Int8 所能容纳的最小整数 -128\nsignedOverflow = signedOverflow &- 1\n// 此时 signedOverflow 等于 127\n```\n`Int8`型整数能容纳的最小值是`－128`，以二进制表示即`10000000`。当使用溢出减法运算符对其进行减`1`运算时，符号位被翻转，得到二进制数值`01111111`，也就是十进制的`127`，这个值也是`Int8`型整数所能容纳的最大值。\n\n{% asset_img overflowSignedSubtraction_2x.png 有符数值溢出%}\n\n对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。\n\n## 运算符函数\n类和结构体可以为现有的运算符提供自定义的实现，这通常被称为运算符重载。\n\n下面一个例子展示了如何为自定义的结构体实现加法运算符(`+`)。算数运算符是一个双目运算符，因为它可以对两个值进行运算，同时它还是中缀运算符，因为它出现在两个值中间。\n\n例子中定义了一个名为 `Vector2D` 的结构体用来表示二维坐标向量 `(x, y)`，紧接着定义了一个可以对两个 `Vector2D` 结构体进行相加的运算符函数：\n``` swift\nstruct Vector2D {\n    var x = 0.0, y = 0.0\n}\nfunc + (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y + right.y)\n}\n```\n该运算符函数被定义为一个全局函数，并且函数的名字与它要进行重载的 `+` 名字一致。因为算术加法运算符是双目运算符，所以这个运算符函数接收两个类型为 `Vector2D` 的参数，同时有一个 `Vector2D` 类型的返回值。\n\n在这个实现中，输入参数分别被命名为 `left` 和 `right`，代表在 + 运算符左边和右边的两个 `Vector2D` 实例。函数返回了一个新的 `Vector2D` 实例，这个实例的 `x` 和 `y` 分别等于作为参数的两个实例的 `x` 和 `y` 的值之和。\n\n这个函数被定义成全局的，而不是 `Vector2D` 结构体的成员方法，所以任意两个 `Vector2D` 实例都可以使用这个中缀运算符：\n``` swift\nlet vector = Vector2D(x: 3.0, y: 1.0)\nlet anotherVector = Vector2D(x: 2.0, y: 4.0)\nlet combinedVector = vector + anotherVector\n// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)\n```\n\n### 前缀和后缀运算符\n上个例子演示了一个双目中缀运算符的自定义实现。类与结构体也能提供标准单目运算符的实现。单目运算符只运算一个值。当运算符出现在值之前时，它就是前缀的（例如 `-a`），而当它出现在值之后时，它就是后缀的（例如 `b!`）。\n\n要实现前缀或者后缀运算符，需要在声明运算符函数的时候在`func`关键字之前指定`prefix`或者`postfix`修饰符。\n``` swift\nprefix func - (vector: Vector2D) -> Vector2D {\n    return Vector2D(x: -vector.x, y: -vector.y)\n}\n```\n这段代码为 `Vector2D` 类型实现了单目负号运算符。由于该运算符是前缀运算符，所以这个函数需要加上 `prefix` 修饰符。\n\n对于简单数值，单目负号运算符可以对它们的正负性进行改变。对于 `Vector2D` 来说，该运算将其 `x` 和 `y` 属性的正负性都进行了改变：\n``` swift\nlet positive = Vector2D(x: 3.0, y: 4.0)\nlet negative = -positive\n// negative 是一个值为 (-3.0, -4.0) 的 Vector2D 实例\nlet alsoPositive = -negative\n// alsoPositive 是一个值为 (3.0, 4.0) 的 Vector2D 实例\n```\n\n### 复合赋值运算符\n复合赋值运算符将赋值运算符（`=`）与其它运算符进行结合。例如，将加法与赋值结合成加法赋值运算符（`+=`）。在实现的时候，需要把运算符的左参数设置成 `inout` 类型，因为这个参数的值会在运算符函数内直接被修改。\n``` swift\nfunc += (inout left: Vector2D, right: Vector2D) {\n    left = left + right\n}\n```\n因为加法运算在之前已经定义过了，所以在这里无需重新定义。在这里可以直接利用现有的加法运算符函数，用它来对左值和右值进行相加，并再次赋值给左值：\n``` swift\nvar original = Vector2D(x: 1.0, y: 2.0)\nlet vectorToAdd = Vector2D(x: 3.0, y: 4.0)\noriginal += vectorToAdd\n// original 的值现在为 (4.0, 6.0)\n```\n\n> 注：不能对默认的赋值运算符（`=`）进行重载。只有组合赋值运算符可以被重载。同样地，也无法对三目条件运算符 （`a ? b : c`） 进行重载。\n\n### 等价运算符\n\n自定义的类和结构体没有对等价运算符进行默认实现，等价运算符通常被称为“相等”运算符（`==`）与“不等”运算符（`!=`）。对于自定义类型，Swift 无法判断其是否“相等”，因为“相等”的含义取决于这些自定义类型在你的代码中所扮演的角色。\n\n为了使用等价运算符能对自定义的类型进行判等运算，需要为其提供自定义实现，实现的方法与其它中缀运算符一样：\n``` swift\nfunc == (left: Vector2D, right: Vector2D) -> Bool {\n    return (left.x == right.x) && (left.y == right.y)\n}\nfunc != (left: Vector2D, right: Vector2D) -> Bool {\n    return !(left == right)\n}\n```\n\n## 自定义运算符\n\n除了实现标准运算符，在 Swift 中还可以声明和实现自定义运算符。\n新的运算符要使用 `operator` 关键字在全局作用域内进行定义，同时还要指定 `prefix`、`infix` 或者 `postfix` 修饰符：\n``` swift\nprefix operator +++ {}\n```\n上面的代码定义了一个新的名为 `+++` 的前缀运算符。对于这个运算符，在 Swift 中并没有意义，因此我们针对 `Vector2D` 的实例来定义它的意义。对这个示例来讲，`+++` 被实现为“前缀双自增”运算符。它使用了前面定义的复合加法运算符来让矩阵对自身进行相加，从而让 `Vector2D` 实例的 `x` 属性和 `y` 属性的值翻倍：\n``` swift\nprefix func +++ (inout vector: Vector2D) -> Vector2D {\n    vector += vector\n    return vector\n}\n```\n","slug":"Swift学习笔记之高级运算符","published":1,"updated":"2022-05-19T03:13:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenx002xl1l32sfah3p6","content":"<p>除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。</p>\n<p>与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（<code>&amp;+</code>）,所有的溢出运算符都是以<code>&amp;</code>开头的。</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"按位取反运算符\"><a href=\"#按位取反运算符\" class=\"headerlink\" title=\"按位取反运算符\"></a>按位取反运算符</h3><p>按位取反运算符（<code>~</code>）可以对一个数值的全部比特位进行取反：</p>\n\n<p>按位取反运算符是一个前缀运算符，需要直接放在运算的数之前，并且它们之间不能加空格。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b00001111</span>   <span class=\"comment\">//十进制等于15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> invertedBits <span class=\"operator\">=</span> <span class=\"operator\">~</span>initialBits       <span class=\"comment\">//等于 0b11110000，十进制为240</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位与运算符\"><a href=\"#按位与运算符\" class=\"headerlink\" title=\"按位与运算符\"></a>按位与运算符</h3><p>按位与运算符（<code>&amp;</code>）可以对两个数的比特位进行合并。它返回一个新的数，只有当两个数对应位都为<code>1</code>的时候，新数的对应位才为<code>1</code>。</p>\n\n<p>在下面的示例当中，<code>firstBits</code> 和 <code>lastBits</code> 中间 4 个位的值都为 1。按位与运算符对它们进行了运算，得到二进制数值 <code>00111100</code>，等价于无符号十进制数的 60：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b11111100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastBits: <span class=\"type\">UInt8</span>  <span class=\"operator\">=</span> <span class=\"number\">0b00111111</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> middleBits <span class=\"operator\">=</span> firstBits <span class=\"operator\">&amp;</span> lastBits <span class=\"comment\">// 等于 00111100</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位或运算符\"><a href=\"#按位或运算符\" class=\"headerlink\" title=\"按位或运算符\"></a>按位或运算符</h3><p>按位或运算符(<code>|</code>)可以对两个数的比特位进行比较，它返回一个新的数，如果两个对应的比特位中有任意一个为<code>1</code>时，新数对应位就为<code>1</code>。</p>\n\n\n<p>在下面的示例中，<code>someBits</code> 和 <code>moreBits</code> 不同的位会被设置为 <code>1</code>。接位或运算符对它们进行了运算，得到二进制数值 <code>11111110</code>，等价于无符号十进制数的 <code>254</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b10110010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moreBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b01011110</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedbits <span class=\"operator\">=</span> someBits <span class=\"operator\">|</span> moreBits <span class=\"comment\">// 等于 11111110</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位异或运算符\"><a href=\"#按位异或运算符\" class=\"headerlink\" title=\"按位异或运算符\"></a>按位异或运算符</h3><p>按位异或运算符(<code>^</code>)可以对两个数的比特位进行比较，它返回一个新的数，当两个数对应比特位不相同时，新数的对应位就为<code>1</code>：</p>\n\n\n<p>在下面的示例当中，<code>firstBits</code> 和 <code>otherBits</code> 都有一个自己的位为 <code>1</code> 而对方的对应位为 <code>0</code> 的位。 按位异或运算符将新数的这两个位都设置为 <code>1</code>，同时将其它位都设置为 <code>0</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b00010100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> otherBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b00000101</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> outputBits <span class=\"operator\">=</span> firstBits <span class=\"operator\">^</span> otherBits <span class=\"comment\">// 等于 00010001</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位左移、右移运算符\"><a href=\"#按位左移、右移运算符\" class=\"headerlink\" title=\"按位左移、右移运算符\"></a>按位左移、右移运算符</h3><p>按位左移运算符（<code>&lt;&lt;</code>）和按位右移运算符（<code>&gt;&gt;</code>）可以对一个数的所有位进行指定位数的左移和右移。对一个数的左移和右移一位相当于对一个数乘以2或者除以2。</p>\n<h4 id=\"无符号整数的位移运算\"><a href=\"#无符号整数的位移运算\" class=\"headerlink\" title=\"无符号整数的位移运算\"></a>无符号整数的位移运算</h4><p>对无符号的整数进行位移的规则如下：</p>\n<ul>\n<li>已经存在的位按指定的位数进行左移和右移</li>\n<li>任何因移动超出整型存储范围的位都会被丢弃</li>\n<li>用<code>0</code>来填充位移后产生的空白<br>这种方法称为逻辑位移。</li>\n</ul>\n<p>以下这张图展示了 <code>11111111 &lt;&lt; 1</code>（即把 <code>11111111</code> 向左移动 <code>1</code> 位），和 <code>11111111 &gt;&gt; 1</code>（即把 <code>11111111</code> 向右移动 <code>1</code> 位）的结果。蓝色的部分是被移位的，灰色的部分是被抛弃的，橙色的部分则是被填充进来的：</p>\n\n\n<p>下面的代码演示了 Swift 中的移位运算：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> shiftBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">4</span> <span class=\"comment\">// 即二进制的 00000100</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>           <span class=\"comment\">// 00001000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span>           <span class=\"comment\">// 00010000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">5</span>           <span class=\"comment\">// 10000000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">6</span>           <span class=\"comment\">// 00000000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&gt;&gt;</span> <span class=\"number\">2</span>           <span class=\"comment\">// 00000001</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以使用位移运算对其它数据类型进行编码和解码。</p>\n<h4 id=\"有符号整数的位移运算\"><a href=\"#有符号整数的位移运算\" class=\"headerlink\" title=\"有符号整数的位移运算\"></a>有符号整数的位移运算</h4><p>对比无符号整数，有符号整数的位移运算相对就要复杂得多，这种复杂性源于有符号整数的二进制表现新式。<br>有符号整数使用第一个比特位（通常称为符号位）来表示这个数的正负。符号为<code>0</code>代表正数，为<code>1</code>代表负数。其余的比特位（通常称为数值位）存储了实际的值。</p>\n\n\n<p>符号位为 <code>0</code>，说明这是一个正数，另外 7 位则代表了十进制数值 4 的二进制表示。</p>\n<p>负数的存储方式略有不同。它存储的值的绝对值等于 <code>2</code> 的 <code>n</code> 次方减去它的实际值（也就是数值位表示的值），这里的 <code>n</code> 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 <code>2</code> 的 <code>7</code> 次方，即 <code>128</code>。<br>这是值为 <code>-4</code> 的 <code>Int8</code> 型整数的二进制位表现形式：</p>\n\n\n<p>这次的符号位为 <code>1</code>，说明这是一个负数，另外 7 个位则代表了数值 <code>124</code>（即 <code>128 - 4</code>）的二进制表示。负数的表示通常被称为二进制补码表示，用这种方法表示负数乍看起来有点奇怪，但它有一下几个优点。</p>\n<ul>\n<li><p>如果想对<code>-1</code>和<code>-4</code>进行加法运算，我们只需要将这两个数的全部8个比特位相加，并且将计算结果中超出8位的值丢弃,其次，使用二进制补码可以使负数的按位左移和右移运算得到跟正数同样的效果，即每向左移一位就将自身的数值乘以 2，每向右一位就将自身的数值除以 2。要达到此目的，对有符号整数的右移有一个额外的规则：</p>\n</li>\n<li><p>当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 <code>0</code>。</p>\n\n<p>这个行为可以确保有符号整数的符号位不会因为右移运算而改变，这通常被称为<b>算术移位</b>。<br>由于正数和负数的特殊存储方式，在对它们进行右移的时候，会使它们越来越接近 <code>0</code>。在移位的过程中保持符号位不变，意味着负整数在接近 <code>0</code> 的过程中会一直保持为负。</p>\n</li>\n</ul>\n<h2 id=\"溢出运算符\"><a href=\"#溢出运算符\" class=\"headerlink\" title=\"溢出运算符\"></a>溢出运算符</h2><p>在默认情况下，当向一个整数赋予超过它容量的值时，Swift默认会报错，而不是产生一个无效的数。这个行为为我们在运算过大或者过小的数的时候提供了额外的安全性。<br>例如<code>Int16</code>型整数能容纳的有符号整数范围是<code>-32768</code>到<code>32767</code>,当一个为Int16型变量的值超出了这个范围时，系统会报错：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> potentialOverflow <span class=\"operator\">=</span> <span class=\"type\">Int16</span>.max <span class=\"comment\">// potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数</span></span><br><span class=\"line\">potentialOverflow <span class=\"operator\">+=</span> <span class=\"number\">1</span>            <span class=\"comment\">// 这里会报错</span></span><br></pre></td></tr></table></figure>\n<p>溢出运算符可以让数值溢出的时候采取截断处理，而非报错。可以使用Swift提供的三个溢出运算符来让系统支持整数溢出运算。这些运算符都是以<code>&amp;</code>开头的：</p>\n<ul>\n<li>溢出加法 <code>&amp;+</code></li>\n<li>溢出减法 <code>&amp;-</code></li>\n<li>溢出乘法 <code>&amp;*</code></li>\n</ul>\n<h3 id=\"无符号数值上溢\"><a href=\"#无符号数值上溢\" class=\"headerlink\" title=\"无符号数值上溢\"></a>无符号数值上溢</h3><p>数值有可能出现上溢或者下溢。<br>这个示例演示了但我们对一个无符号整数使用溢出加法(<code>&amp;+</code>)进行上溢运算时会发生什么：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unsignedOverflow <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.max</span><br><span class=\"line\"><span class=\"comment\">// unsignedOverflow 等于 UInt8 所能容纳的最大整数 255</span></span><br><span class=\"line\">unsignedOverflow <span class=\"operator\">=</span> unsignedOverflow <span class=\"operator\">&amp;+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 unsignedOverflow 等于 0</span></span><br></pre></td></tr></table></figure>\n<p><code>unsignedOverflow</code> 被初始化为 <code>UInt8</code> 所能容纳的最大整数（<code>255</code>，以二进制表示即 <code>11111111</code>）。然后使用了溢出加法运算符（<code>&amp;+</code>）对其进行加 1 运算。这使得它的二进制表示正好超出 UInt8 所能容纳的位数，也就导致了数值的溢出，如下图所示。数值溢出后，留在 <code>UInt8</code> 边界内的值是 <code>00000000</code>，也就是十进制数值的 0。</p>\n\n\n<h3 id=\"无符号数值下溢\"><a href=\"#无符号数值下溢\" class=\"headerlink\" title=\"无符号数值下溢\"></a>无符号数值下溢</h3><p>同样的，当我们对一个无符号整数使用溢出减法(<code>&amp;-</code>)进行下溢运算时也会产生类似的现象：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unsignedOverflow <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.min</span><br><span class=\"line\"><span class=\"comment\">// unsignedOverflow 等于 UInt8 所能容纳的最小整数 0</span></span><br><span class=\"line\">unsignedOverflow <span class=\"operator\">=</span> unsignedOverflow <span class=\"operator\">&amp;-</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 unsignedOverflow 等于 255</span></span><br></pre></td></tr></table></figure>\n<p><code>UInt8</code> 型整数能容纳的最小值是 <code>0</code>，以二进制表示即 <code>00000000</code>。当使用溢出减法运算符对其进行减 1 运算时，数值会产生下溢并被截断为 <code>11111111</code>， 也就是十进制数值的 <code>255</code>。</p>\n\n\n<h3 id=\"有符号数值溢出\"><a href=\"#有符号数值溢出\" class=\"headerlink\" title=\"有符号数值溢出\"></a>有符号数值溢出</h3><p>溢出也会发生在有符号整型数值上。在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算。比如下面的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> signedOverflow <span class=\"operator\">=</span> <span class=\"type\">Int8</span>.min</span><br><span class=\"line\"><span class=\"comment\">// signedOverflow 等于 Int8 所能容纳的最小整数 -128</span></span><br><span class=\"line\">signedOverflow <span class=\"operator\">=</span> signedOverflow <span class=\"operator\">&amp;-</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 signedOverflow 等于 127</span></span><br></pre></td></tr></table></figure>\n<p><code>Int8</code>型整数能容纳的最小值是<code>－128</code>，以二进制表示即<code>10000000</code>。当使用溢出减法运算符对其进行减<code>1</code>运算时，符号位被翻转，得到二进制数值<code>01111111</code>，也就是十进制的<code>127</code>，这个值也是<code>Int8</code>型整数所能容纳的最大值。</p>\n\n\n<p>对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。</p>\n<h2 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h2><p>类和结构体可以为现有的运算符提供自定义的实现，这通常被称为运算符重载。</p>\n<p>下面一个例子展示了如何为自定义的结构体实现加法运算符(<code>+</code>)。算数运算符是一个双目运算符，因为它可以对两个值进行运算，同时它还是中缀运算符，因为它出现在两个值中间。</p>\n<p>例子中定义了一个名为 <code>Vector2D</code> 的结构体用来表示二维坐标向量 <code>(x, y)</code>，紧接着定义了一个可以对两个 <code>Vector2D</code> 结构体进行相加的运算符函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: left.x <span class=\"operator\">+</span> right.x, y: left.y <span class=\"operator\">+</span> right.y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该运算符函数被定义为一个全局函数，并且函数的名字与它要进行重载的 <code>+</code> 名字一致。因为算术加法运算符是双目运算符，所以这个运算符函数接收两个类型为 <code>Vector2D</code> 的参数，同时有一个 <code>Vector2D</code> 类型的返回值。</p>\n<p>在这个实现中，输入参数分别被命名为 <code>left</code> 和 <code>right</code>，代表在 + 运算符左边和右边的两个 <code>Vector2D</code> 实例。函数返回了一个新的 <code>Vector2D</code> 实例，这个实例的 <code>x</code> 和 <code>y</code> 分别等于作为参数的两个实例的 <code>x</code> 和 <code>y</code> 的值之和。</p>\n<p>这个函数被定义成全局的，而不是 <code>Vector2D</code> 结构体的成员方法，所以任意两个 <code>Vector2D</code> 实例都可以使用这个中缀运算符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vector <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> anotherVector <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedVector <span class=\"operator\">=</span> vector <span class=\"operator\">+</span> anotherVector</span><br><span class=\"line\"><span class=\"comment\">// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前缀和后缀运算符\"><a href=\"#前缀和后缀运算符\" class=\"headerlink\" title=\"前缀和后缀运算符\"></a>前缀和后缀运算符</h3><p>上个例子演示了一个双目中缀运算符的自定义实现。类与结构体也能提供标准单目运算符的实现。单目运算符只运算一个值。当运算符出现在值之前时，它就是前缀的（例如 <code>-a</code>），而当它出现在值之后时，它就是后缀的（例如 <code>b!</code>）。</p>\n<p>要实现前缀或者后缀运算符，需要在声明运算符函数的时候在<code>func</code>关键字之前指定<code>prefix</code>或者<code>postfix</code>修饰符。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">func</span> <span class=\"title function_\">-</span> (<span class=\"params\">vector</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"operator\">-</span>vector.x, y: <span class=\"operator\">-</span>vector.y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码为 <code>Vector2D</code> 类型实现了单目负号运算符。由于该运算符是前缀运算符，所以这个函数需要加上 <code>prefix</code> 修饰符。</p>\n<p>对于简单数值，单目负号运算符可以对它们的正负性进行改变。对于 <code>Vector2D</code> 来说，该运算将其 <code>x</code> 和 <code>y</code> 属性的正负性都进行了改变：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> positive <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> negative <span class=\"operator\">=</span> <span class=\"operator\">-</span>positive</span><br><span class=\"line\"><span class=\"comment\">// negative 是一个值为 (-3.0, -4.0) 的 Vector2D 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> alsoPositive <span class=\"operator\">=</span> <span class=\"operator\">-</span>negative</span><br><span class=\"line\"><span class=\"comment\">// alsoPositive 是一个值为 (3.0, 4.0) 的 Vector2D 实例</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复合赋值运算符\"><a href=\"#复合赋值运算符\" class=\"headerlink\" title=\"复合赋值运算符\"></a>复合赋值运算符</h3><p>复合赋值运算符将赋值运算符（<code>=</code>）与其它运算符进行结合。例如，将加法与赋值结合成加法赋值运算符（<code>+=</code>）。在实现的时候，需要把运算符的左参数设置成 <code>inout</code> 类型，因为这个参数的值会在运算符函数内直接被修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+=</span> (<span class=\"params\">inout</span> <span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) &#123;</span><br><span class=\"line\">    left <span class=\"operator\">=</span> left <span class=\"operator\">+</span> right</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为加法运算在之前已经定义过了，所以在这里无需重新定义。在这里可以直接利用现有的加法运算符函数，用它来对左值和右值进行相加，并再次赋值给左值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vectorToAdd <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\">original <span class=\"operator\">+=</span> vectorToAdd</span><br><span class=\"line\"><span class=\"comment\">// original 的值现在为 (4.0, 6.0)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：不能对默认的赋值运算符（<code>=</code>）进行重载。只有组合赋值运算符可以被重载。同样地，也无法对三目条件运算符 （<code>a ? b : c</code>） 进行重载。</p>\n</blockquote>\n<h3 id=\"等价运算符\"><a href=\"#等价运算符\" class=\"headerlink\" title=\"等价运算符\"></a>等价运算符</h3><p>自定义的类和结构体没有对等价运算符进行默认实现，等价运算符通常被称为“相等”运算符（<code>==</code>）与“不等”运算符（<code>!=</code>）。对于自定义类型，Swift 无法判断其是否“相等”，因为“相等”的含义取决于这些自定义类型在你的代码中所扮演的角色。</p>\n<p>为了使用等价运算符能对自定义的类型进行判等运算，需要为其提供自定义实现，实现的方法与其它中缀运算符一样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">==</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (left.x <span class=\"operator\">==</span> right.x) <span class=\"operator\">&amp;&amp;</span> (left.y <span class=\"operator\">==</span> right.y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">!=</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"operator\">!</span>(left <span class=\"operator\">==</span> right)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义运算符\"><a href=\"#自定义运算符\" class=\"headerlink\" title=\"自定义运算符\"></a>自定义运算符</h2><p>除了实现标准运算符，在 Swift 中还可以声明和实现自定义运算符。<br>新的运算符要使用 <code>operator</code> 关键字在全局作用域内进行定义，同时还要指定 <code>prefix</code>、<code>infix</code> 或者 <code>postfix</code> 修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> <span class=\"title\">+++</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码定义了一个新的名为 <code>+++</code> 的前缀运算符。对于这个运算符，在 Swift 中并没有意义，因此我们针对 <code>Vector2D</code> 的实例来定义它的意义。对这个示例来讲，<code>+++</code> 被实现为“前缀双自增”运算符。它使用了前面定义的复合加法运算符来让矩阵对自身进行相加，从而让 <code>Vector2D</code> 实例的 <code>x</code> 属性和 <code>y</code> 属性的值翻倍：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">func</span> <span class=\"title function_\">+++</span> (<span class=\"params\">inout</span> <span class=\"params\">vector</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    vector <span class=\"operator\">+=</span> vector</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。</p>\n<p>与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（<code>&amp;+</code>）,所有的溢出运算符都是以<code>&amp;</code>开头的。</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。</p>","more":"<h3 id=\"按位取反运算符\"><a href=\"#按位取反运算符\" class=\"headerlink\" title=\"按位取反运算符\"></a>按位取反运算符</h3><p>按位取反运算符（<code>~</code>）可以对一个数值的全部比特位进行取反：</p>\n\n<p>按位取反运算符是一个前缀运算符，需要直接放在运算的数之前，并且它们之间不能加空格。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b00001111</span>   <span class=\"comment\">//十进制等于15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> invertedBits <span class=\"operator\">=</span> <span class=\"operator\">~</span>initialBits       <span class=\"comment\">//等于 0b11110000，十进制为240</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位与运算符\"><a href=\"#按位与运算符\" class=\"headerlink\" title=\"按位与运算符\"></a>按位与运算符</h3><p>按位与运算符（<code>&amp;</code>）可以对两个数的比特位进行合并。它返回一个新的数，只有当两个数对应位都为<code>1</code>的时候，新数的对应位才为<code>1</code>。</p>\n\n<p>在下面的示例当中，<code>firstBits</code> 和 <code>lastBits</code> 中间 4 个位的值都为 1。按位与运算符对它们进行了运算，得到二进制数值 <code>00111100</code>，等价于无符号十进制数的 60：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b11111100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastBits: <span class=\"type\">UInt8</span>  <span class=\"operator\">=</span> <span class=\"number\">0b00111111</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> middleBits <span class=\"operator\">=</span> firstBits <span class=\"operator\">&amp;</span> lastBits <span class=\"comment\">// 等于 00111100</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位或运算符\"><a href=\"#按位或运算符\" class=\"headerlink\" title=\"按位或运算符\"></a>按位或运算符</h3><p>按位或运算符(<code>|</code>)可以对两个数的比特位进行比较，它返回一个新的数，如果两个对应的比特位中有任意一个为<code>1</code>时，新数对应位就为<code>1</code>。</p>\n\n\n<p>在下面的示例中，<code>someBits</code> 和 <code>moreBits</code> 不同的位会被设置为 <code>1</code>。接位或运算符对它们进行了运算，得到二进制数值 <code>11111110</code>，等价于无符号十进制数的 <code>254</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b10110010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moreBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b01011110</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedbits <span class=\"operator\">=</span> someBits <span class=\"operator\">|</span> moreBits <span class=\"comment\">// 等于 11111110</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位异或运算符\"><a href=\"#按位异或运算符\" class=\"headerlink\" title=\"按位异或运算符\"></a>按位异或运算符</h3><p>按位异或运算符(<code>^</code>)可以对两个数的比特位进行比较，它返回一个新的数，当两个数对应比特位不相同时，新数的对应位就为<code>1</code>：</p>\n\n\n<p>在下面的示例当中，<code>firstBits</code> 和 <code>otherBits</code> 都有一个自己的位为 <code>1</code> 而对方的对应位为 <code>0</code> 的位。 按位异或运算符将新数的这两个位都设置为 <code>1</code>，同时将其它位都设置为 <code>0</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b00010100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> otherBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">0b00000101</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> outputBits <span class=\"operator\">=</span> firstBits <span class=\"operator\">^</span> otherBits <span class=\"comment\">// 等于 00010001</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按位左移、右移运算符\"><a href=\"#按位左移、右移运算符\" class=\"headerlink\" title=\"按位左移、右移运算符\"></a>按位左移、右移运算符</h3><p>按位左移运算符（<code>&lt;&lt;</code>）和按位右移运算符（<code>&gt;&gt;</code>）可以对一个数的所有位进行指定位数的左移和右移。对一个数的左移和右移一位相当于对一个数乘以2或者除以2。</p>\n<h4 id=\"无符号整数的位移运算\"><a href=\"#无符号整数的位移运算\" class=\"headerlink\" title=\"无符号整数的位移运算\"></a>无符号整数的位移运算</h4><p>对无符号的整数进行位移的规则如下：</p>\n<ul>\n<li>已经存在的位按指定的位数进行左移和右移</li>\n<li>任何因移动超出整型存储范围的位都会被丢弃</li>\n<li>用<code>0</code>来填充位移后产生的空白<br>这种方法称为逻辑位移。</li>\n</ul>\n<p>以下这张图展示了 <code>11111111 &lt;&lt; 1</code>（即把 <code>11111111</code> 向左移动 <code>1</code> 位），和 <code>11111111 &gt;&gt; 1</code>（即把 <code>11111111</code> 向右移动 <code>1</code> 位）的结果。蓝色的部分是被移位的，灰色的部分是被抛弃的，橙色的部分则是被填充进来的：</p>\n\n\n<p>下面的代码演示了 Swift 中的移位运算：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> shiftBits: <span class=\"type\">UInt8</span> <span class=\"operator\">=</span> <span class=\"number\">4</span> <span class=\"comment\">// 即二进制的 00000100</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>           <span class=\"comment\">// 00001000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span>           <span class=\"comment\">// 00010000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">5</span>           <span class=\"comment\">// 10000000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">6</span>           <span class=\"comment\">// 00000000</span></span><br><span class=\"line\">shiftBits <span class=\"operator\">&gt;&gt;</span> <span class=\"number\">2</span>           <span class=\"comment\">// 00000001</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以使用位移运算对其它数据类型进行编码和解码。</p>\n<h4 id=\"有符号整数的位移运算\"><a href=\"#有符号整数的位移运算\" class=\"headerlink\" title=\"有符号整数的位移运算\"></a>有符号整数的位移运算</h4><p>对比无符号整数，有符号整数的位移运算相对就要复杂得多，这种复杂性源于有符号整数的二进制表现新式。<br>有符号整数使用第一个比特位（通常称为符号位）来表示这个数的正负。符号为<code>0</code>代表正数，为<code>1</code>代表负数。其余的比特位（通常称为数值位）存储了实际的值。</p>\n\n\n<p>符号位为 <code>0</code>，说明这是一个正数，另外 7 位则代表了十进制数值 4 的二进制表示。</p>\n<p>负数的存储方式略有不同。它存储的值的绝对值等于 <code>2</code> 的 <code>n</code> 次方减去它的实际值（也就是数值位表示的值），这里的 <code>n</code> 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 <code>2</code> 的 <code>7</code> 次方，即 <code>128</code>。<br>这是值为 <code>-4</code> 的 <code>Int8</code> 型整数的二进制位表现形式：</p>\n\n\n<p>这次的符号位为 <code>1</code>，说明这是一个负数，另外 7 个位则代表了数值 <code>124</code>（即 <code>128 - 4</code>）的二进制表示。负数的表示通常被称为二进制补码表示，用这种方法表示负数乍看起来有点奇怪，但它有一下几个优点。</p>\n<ul>\n<li><p>如果想对<code>-1</code>和<code>-4</code>进行加法运算，我们只需要将这两个数的全部8个比特位相加，并且将计算结果中超出8位的值丢弃,其次，使用二进制补码可以使负数的按位左移和右移运算得到跟正数同样的效果，即每向左移一位就将自身的数值乘以 2，每向右一位就将自身的数值除以 2。要达到此目的，对有符号整数的右移有一个额外的规则：</p>\n</li>\n<li><p>当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 <code>0</code>。</p>\n\n<p>这个行为可以确保有符号整数的符号位不会因为右移运算而改变，这通常被称为<b>算术移位</b>。<br>由于正数和负数的特殊存储方式，在对它们进行右移的时候，会使它们越来越接近 <code>0</code>。在移位的过程中保持符号位不变，意味着负整数在接近 <code>0</code> 的过程中会一直保持为负。</p>\n</li>\n</ul>\n<h2 id=\"溢出运算符\"><a href=\"#溢出运算符\" class=\"headerlink\" title=\"溢出运算符\"></a>溢出运算符</h2><p>在默认情况下，当向一个整数赋予超过它容量的值时，Swift默认会报错，而不是产生一个无效的数。这个行为为我们在运算过大或者过小的数的时候提供了额外的安全性。<br>例如<code>Int16</code>型整数能容纳的有符号整数范围是<code>-32768</code>到<code>32767</code>,当一个为Int16型变量的值超出了这个范围时，系统会报错：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> potentialOverflow <span class=\"operator\">=</span> <span class=\"type\">Int16</span>.max <span class=\"comment\">// potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数</span></span><br><span class=\"line\">potentialOverflow <span class=\"operator\">+=</span> <span class=\"number\">1</span>            <span class=\"comment\">// 这里会报错</span></span><br></pre></td></tr></table></figure>\n<p>溢出运算符可以让数值溢出的时候采取截断处理，而非报错。可以使用Swift提供的三个溢出运算符来让系统支持整数溢出运算。这些运算符都是以<code>&amp;</code>开头的：</p>\n<ul>\n<li>溢出加法 <code>&amp;+</code></li>\n<li>溢出减法 <code>&amp;-</code></li>\n<li>溢出乘法 <code>&amp;*</code></li>\n</ul>\n<h3 id=\"无符号数值上溢\"><a href=\"#无符号数值上溢\" class=\"headerlink\" title=\"无符号数值上溢\"></a>无符号数值上溢</h3><p>数值有可能出现上溢或者下溢。<br>这个示例演示了但我们对一个无符号整数使用溢出加法(<code>&amp;+</code>)进行上溢运算时会发生什么：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unsignedOverflow <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.max</span><br><span class=\"line\"><span class=\"comment\">// unsignedOverflow 等于 UInt8 所能容纳的最大整数 255</span></span><br><span class=\"line\">unsignedOverflow <span class=\"operator\">=</span> unsignedOverflow <span class=\"operator\">&amp;+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 unsignedOverflow 等于 0</span></span><br></pre></td></tr></table></figure>\n<p><code>unsignedOverflow</code> 被初始化为 <code>UInt8</code> 所能容纳的最大整数（<code>255</code>，以二进制表示即 <code>11111111</code>）。然后使用了溢出加法运算符（<code>&amp;+</code>）对其进行加 1 运算。这使得它的二进制表示正好超出 UInt8 所能容纳的位数，也就导致了数值的溢出，如下图所示。数值溢出后，留在 <code>UInt8</code> 边界内的值是 <code>00000000</code>，也就是十进制数值的 0。</p>\n\n\n<h3 id=\"无符号数值下溢\"><a href=\"#无符号数值下溢\" class=\"headerlink\" title=\"无符号数值下溢\"></a>无符号数值下溢</h3><p>同样的，当我们对一个无符号整数使用溢出减法(<code>&amp;-</code>)进行下溢运算时也会产生类似的现象：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unsignedOverflow <span class=\"operator\">=</span> <span class=\"type\">UInt8</span>.min</span><br><span class=\"line\"><span class=\"comment\">// unsignedOverflow 等于 UInt8 所能容纳的最小整数 0</span></span><br><span class=\"line\">unsignedOverflow <span class=\"operator\">=</span> unsignedOverflow <span class=\"operator\">&amp;-</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 unsignedOverflow 等于 255</span></span><br></pre></td></tr></table></figure>\n<p><code>UInt8</code> 型整数能容纳的最小值是 <code>0</code>，以二进制表示即 <code>00000000</code>。当使用溢出减法运算符对其进行减 1 运算时，数值会产生下溢并被截断为 <code>11111111</code>， 也就是十进制数值的 <code>255</code>。</p>\n\n\n<h3 id=\"有符号数值溢出\"><a href=\"#有符号数值溢出\" class=\"headerlink\" title=\"有符号数值溢出\"></a>有符号数值溢出</h3><p>溢出也会发生在有符号整型数值上。在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算。比如下面的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> signedOverflow <span class=\"operator\">=</span> <span class=\"type\">Int8</span>.min</span><br><span class=\"line\"><span class=\"comment\">// signedOverflow 等于 Int8 所能容纳的最小整数 -128</span></span><br><span class=\"line\">signedOverflow <span class=\"operator\">=</span> signedOverflow <span class=\"operator\">&amp;-</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 signedOverflow 等于 127</span></span><br></pre></td></tr></table></figure>\n<p><code>Int8</code>型整数能容纳的最小值是<code>－128</code>，以二进制表示即<code>10000000</code>。当使用溢出减法运算符对其进行减<code>1</code>运算时，符号位被翻转，得到二进制数值<code>01111111</code>，也就是十进制的<code>127</code>，这个值也是<code>Int8</code>型整数所能容纳的最大值。</p>\n\n\n<p>对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。</p>\n<h2 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h2><p>类和结构体可以为现有的运算符提供自定义的实现，这通常被称为运算符重载。</p>\n<p>下面一个例子展示了如何为自定义的结构体实现加法运算符(<code>+</code>)。算数运算符是一个双目运算符，因为它可以对两个值进行运算，同时它还是中缀运算符，因为它出现在两个值中间。</p>\n<p>例子中定义了一个名为 <code>Vector2D</code> 的结构体用来表示二维坐标向量 <code>(x, y)</code>，紧接着定义了一个可以对两个 <code>Vector2D</code> 结构体进行相加的运算符函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: left.x <span class=\"operator\">+</span> right.x, y: left.y <span class=\"operator\">+</span> right.y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该运算符函数被定义为一个全局函数，并且函数的名字与它要进行重载的 <code>+</code> 名字一致。因为算术加法运算符是双目运算符，所以这个运算符函数接收两个类型为 <code>Vector2D</code> 的参数，同时有一个 <code>Vector2D</code> 类型的返回值。</p>\n<p>在这个实现中，输入参数分别被命名为 <code>left</code> 和 <code>right</code>，代表在 + 运算符左边和右边的两个 <code>Vector2D</code> 实例。函数返回了一个新的 <code>Vector2D</code> 实例，这个实例的 <code>x</code> 和 <code>y</code> 分别等于作为参数的两个实例的 <code>x</code> 和 <code>y</code> 的值之和。</p>\n<p>这个函数被定义成全局的，而不是 <code>Vector2D</code> 结构体的成员方法，所以任意两个 <code>Vector2D</code> 实例都可以使用这个中缀运算符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vector <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> anotherVector <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedVector <span class=\"operator\">=</span> vector <span class=\"operator\">+</span> anotherVector</span><br><span class=\"line\"><span class=\"comment\">// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前缀和后缀运算符\"><a href=\"#前缀和后缀运算符\" class=\"headerlink\" title=\"前缀和后缀运算符\"></a>前缀和后缀运算符</h3><p>上个例子演示了一个双目中缀运算符的自定义实现。类与结构体也能提供标准单目运算符的实现。单目运算符只运算一个值。当运算符出现在值之前时，它就是前缀的（例如 <code>-a</code>），而当它出现在值之后时，它就是后缀的（例如 <code>b!</code>）。</p>\n<p>要实现前缀或者后缀运算符，需要在声明运算符函数的时候在<code>func</code>关键字之前指定<code>prefix</code>或者<code>postfix</code>修饰符。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">func</span> <span class=\"title function_\">-</span> (<span class=\"params\">vector</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"operator\">-</span>vector.x, y: <span class=\"operator\">-</span>vector.y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码为 <code>Vector2D</code> 类型实现了单目负号运算符。由于该运算符是前缀运算符，所以这个函数需要加上 <code>prefix</code> 修饰符。</p>\n<p>对于简单数值，单目负号运算符可以对它们的正负性进行改变。对于 <code>Vector2D</code> 来说，该运算将其 <code>x</code> 和 <code>y</code> 属性的正负性都进行了改变：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> positive <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> negative <span class=\"operator\">=</span> <span class=\"operator\">-</span>positive</span><br><span class=\"line\"><span class=\"comment\">// negative 是一个值为 (-3.0, -4.0) 的 Vector2D 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> alsoPositive <span class=\"operator\">=</span> <span class=\"operator\">-</span>negative</span><br><span class=\"line\"><span class=\"comment\">// alsoPositive 是一个值为 (3.0, 4.0) 的 Vector2D 实例</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复合赋值运算符\"><a href=\"#复合赋值运算符\" class=\"headerlink\" title=\"复合赋值运算符\"></a>复合赋值运算符</h3><p>复合赋值运算符将赋值运算符（<code>=</code>）与其它运算符进行结合。例如，将加法与赋值结合成加法赋值运算符（<code>+=</code>）。在实现的时候，需要把运算符的左参数设置成 <code>inout</code> 类型，因为这个参数的值会在运算符函数内直接被修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+=</span> (<span class=\"params\">inout</span> <span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) &#123;</span><br><span class=\"line\">    left <span class=\"operator\">=</span> left <span class=\"operator\">+</span> right</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为加法运算在之前已经定义过了，所以在这里无需重新定义。在这里可以直接利用现有的加法运算符函数，用它来对左值和右值进行相加，并再次赋值给左值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vectorToAdd <span class=\"operator\">=</span> <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\">original <span class=\"operator\">+=</span> vectorToAdd</span><br><span class=\"line\"><span class=\"comment\">// original 的值现在为 (4.0, 6.0)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：不能对默认的赋值运算符（<code>=</code>）进行重载。只有组合赋值运算符可以被重载。同样地，也无法对三目条件运算符 （<code>a ? b : c</code>） 进行重载。</p>\n</blockquote>\n<h3 id=\"等价运算符\"><a href=\"#等价运算符\" class=\"headerlink\" title=\"等价运算符\"></a>等价运算符</h3><p>自定义的类和结构体没有对等价运算符进行默认实现，等价运算符通常被称为“相等”运算符（<code>==</code>）与“不等”运算符（<code>!=</code>）。对于自定义类型，Swift 无法判断其是否“相等”，因为“相等”的含义取决于这些自定义类型在你的代码中所扮演的角色。</p>\n<p>为了使用等价运算符能对自定义的类型进行判等运算，需要为其提供自定义实现，实现的方法与其它中缀运算符一样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">==</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (left.x <span class=\"operator\">==</span> right.x) <span class=\"operator\">&amp;&amp;</span> (left.y <span class=\"operator\">==</span> right.y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">!=</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"operator\">!</span>(left <span class=\"operator\">==</span> right)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义运算符\"><a href=\"#自定义运算符\" class=\"headerlink\" title=\"自定义运算符\"></a>自定义运算符</h2><p>除了实现标准运算符，在 Swift 中还可以声明和实现自定义运算符。<br>新的运算符要使用 <code>operator</code> 关键字在全局作用域内进行定义，同时还要指定 <code>prefix</code>、<code>infix</code> 或者 <code>postfix</code> 修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> <span class=\"title\">+++</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码定义了一个新的名为 <code>+++</code> 的前缀运算符。对于这个运算符，在 Swift 中并没有意义，因此我们针对 <code>Vector2D</code> 的实例来定义它的意义。对这个示例来讲，<code>+++</code> 被实现为“前缀双自增”运算符。它使用了前面定义的复合加法运算符来让矩阵对自身进行相加，从而让 <code>Vector2D</code> 实例的 <code>x</code> 属性和 <code>y</code> 属性的值翻倍：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">func</span> <span class=\"title function_\">+++</span> (<span class=\"params\">inout</span> <span class=\"params\">vector</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    vector <span class=\"operator\">+=</span> vector</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"RESideMenu在所有界面都会侧滑的问题解决办法","date":"2016-03-05T08:24:40.000Z","abbrlink":"55ca4aace52ac6d0","_content":"\n>RESideMenu一个非常好用的左右侧滑菜单控件，很多IOS项目都会用到此类左右侧滑效果。然而在RESideMenu的使用过程中，发现其默认将所有界面都加入了侧滑效果。如在主界面导航的Menu放在屏幕的左右两侧，侧滑才可以显示出来，但是当我们进入主界面的某个次级View中，甚至更深一层的View中，侧滑功能仍然可用。这一点就用IOS的UINavigationController的滑动返回冲突。为了解决这个问题，通过Google在网上搜索找到了如下的解决方法。\n\n<!-- more -->\n\n奉上参考原文链接地址：http://blog.csdn.net/icetime17/article/details/46883915\n\n## RESideMenu基本用法\n\n首先创建window的rootViewController，在RootViewController引入并继承RESideMenu及其RESideMenuDelegate. \n\n具体相关代码如下：\n\n``` objc\n#import \"RESideMenu.h\"\n@interface RootViewController : RESideMenu <RESideMenuDelegate>\n@end\n```\n\n然后在RootViewController.m文件中设置好RESideMenu\n\n``` objc\n#import \"RootViewController.h\"\n@interface RootViewController ()\n@end\n\n@implementation RootViewController\n\n- (void)viewDidLoad {\n  [super viewDidLoad];\n}\n\n- (void)didReceiveMemoryWarning {\n  [super didReceiveMemoryWarning];\n}\n\n- (void)awakeFromNib {\n  self.menuPreferredStatusBarStyle = UIStatusBarStyleLightContent;\n  self.contentViewShadowColor = [UIColor blackColor];\n  self.contentViewShadowOffset = CGSizeMake(0, 0);\n  self.contentViewShadowOpacity = 0.6;\n  self.contentViewShadowRadius = 12;\n  self.contentViewShadowEnabled = NO;\n\n  self.contentViewController = [self.storyboard instantiateViewControllerWithIdentifier:@\"ContentViewController\"];\n  self.leftMenuViewController = [self.storyboard instantiateViewControllerWithIdentifier:@\"LeftMenuViewController\"];\n\n  self.delegate = self;\n}\n\n#pragma mark - RESideMenu Delegate\n\n- (void)sideMenu:(RESideMenu *)sideMenu willShowMenuViewController:(UIViewController *)menuViewController {\n}\n\n- (void)sideMenu:(RESideMenu *)sideMenu didShowMenuViewController:(UIViewController *)menuViewController {\n}\n\n- (void)sideMenu:(RESideMenu *)sideMenu willHideMenuViewController:(UIViewController *)menuViewController {\n}\n\n- (void)sideMenu:(RESideMenu *)sideMenu didHideMenuViewController:(UIViewController *)menuViewController {\n}\n@end\n```\n\n## 遇到问题\n\n在RESideMenu的使用过程中，发现所有的界面都加上了侧滑功能，并且iOS的滑动返回功能失效了。\n\n## 解决办法\n\n通过观察RESideMenu的源码发现，RESideMenu类中有一个BOOL属性panGestureEnabled, 可以将其视为侧滑效果的开关。以RESideMenu的panGestureEnabled属性为突破口，采用通知的方式来解决这个问题。\n在RootViewController.m文件中加入如下代码：\n``` objc\n- (void)viewDidLoad {\n  [super viewDidLoad];\n\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                           selector:@selector(disableRESideMenu)\n                                               name:@\"disableRESideMenu\"\n                                             object:nil];\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                           selector:@selector(enableRESideMenu) \n                                               name:@\"enableRESideMenu\"\n                                             object:nil];\n}\n\n- (void)enableRESideMenu {\n  self.panGestureEnabled = YES;\n}\n\n- (void)disableRESideMenu {\n  self.panGestureEnabled = NO;\n}\n```\n在其他页面需要禁止侧滑的时候调用如下代码,发送通知\n``` objc\n// 关闭侧滑效果\n[[NSNotificationCenter defaultCenter] postNotificationName:@\"disableRESideMenu\"\n                                                            object:self\n                                                          userInfo:nil];\n```\n相反在需要侧滑的地方调用\n``` objc\n// 开启侧滑效果\n[[NSNotificationCenter defaultCenter] postNotificationName:@\"enableRESideMenu\"\n                                                    object:self\n                                                  userInfo:nil];\n```","source":"_posts/RESideMenu在所有界面都会侧滑的问题解决办法.md","raw":"---\ntitle: RESideMenu在所有界面都会侧滑的问题解决办法\ndate: 2016-03-05 16:24:40\ntags:\n  - iOS\ncategories: 经验积累\nabbrlink: 55ca4aace52ac6d0\n---\n\n>RESideMenu一个非常好用的左右侧滑菜单控件，很多IOS项目都会用到此类左右侧滑效果。然而在RESideMenu的使用过程中，发现其默认将所有界面都加入了侧滑效果。如在主界面导航的Menu放在屏幕的左右两侧，侧滑才可以显示出来，但是当我们进入主界面的某个次级View中，甚至更深一层的View中，侧滑功能仍然可用。这一点就用IOS的UINavigationController的滑动返回冲突。为了解决这个问题，通过Google在网上搜索找到了如下的解决方法。\n\n<!-- more -->\n\n奉上参考原文链接地址：http://blog.csdn.net/icetime17/article/details/46883915\n\n## RESideMenu基本用法\n\n首先创建window的rootViewController，在RootViewController引入并继承RESideMenu及其RESideMenuDelegate. \n\n具体相关代码如下：\n\n``` objc\n#import \"RESideMenu.h\"\n@interface RootViewController : RESideMenu <RESideMenuDelegate>\n@end\n```\n\n然后在RootViewController.m文件中设置好RESideMenu\n\n``` objc\n#import \"RootViewController.h\"\n@interface RootViewController ()\n@end\n\n@implementation RootViewController\n\n- (void)viewDidLoad {\n  [super viewDidLoad];\n}\n\n- (void)didReceiveMemoryWarning {\n  [super didReceiveMemoryWarning];\n}\n\n- (void)awakeFromNib {\n  self.menuPreferredStatusBarStyle = UIStatusBarStyleLightContent;\n  self.contentViewShadowColor = [UIColor blackColor];\n  self.contentViewShadowOffset = CGSizeMake(0, 0);\n  self.contentViewShadowOpacity = 0.6;\n  self.contentViewShadowRadius = 12;\n  self.contentViewShadowEnabled = NO;\n\n  self.contentViewController = [self.storyboard instantiateViewControllerWithIdentifier:@\"ContentViewController\"];\n  self.leftMenuViewController = [self.storyboard instantiateViewControllerWithIdentifier:@\"LeftMenuViewController\"];\n\n  self.delegate = self;\n}\n\n#pragma mark - RESideMenu Delegate\n\n- (void)sideMenu:(RESideMenu *)sideMenu willShowMenuViewController:(UIViewController *)menuViewController {\n}\n\n- (void)sideMenu:(RESideMenu *)sideMenu didShowMenuViewController:(UIViewController *)menuViewController {\n}\n\n- (void)sideMenu:(RESideMenu *)sideMenu willHideMenuViewController:(UIViewController *)menuViewController {\n}\n\n- (void)sideMenu:(RESideMenu *)sideMenu didHideMenuViewController:(UIViewController *)menuViewController {\n}\n@end\n```\n\n## 遇到问题\n\n在RESideMenu的使用过程中，发现所有的界面都加上了侧滑功能，并且iOS的滑动返回功能失效了。\n\n## 解决办法\n\n通过观察RESideMenu的源码发现，RESideMenu类中有一个BOOL属性panGestureEnabled, 可以将其视为侧滑效果的开关。以RESideMenu的panGestureEnabled属性为突破口，采用通知的方式来解决这个问题。\n在RootViewController.m文件中加入如下代码：\n``` objc\n- (void)viewDidLoad {\n  [super viewDidLoad];\n\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                           selector:@selector(disableRESideMenu)\n                                               name:@\"disableRESideMenu\"\n                                             object:nil];\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                           selector:@selector(enableRESideMenu) \n                                               name:@\"enableRESideMenu\"\n                                             object:nil];\n}\n\n- (void)enableRESideMenu {\n  self.panGestureEnabled = YES;\n}\n\n- (void)disableRESideMenu {\n  self.panGestureEnabled = NO;\n}\n```\n在其他页面需要禁止侧滑的时候调用如下代码,发送通知\n``` objc\n// 关闭侧滑效果\n[[NSNotificationCenter defaultCenter] postNotificationName:@\"disableRESideMenu\"\n                                                            object:self\n                                                          userInfo:nil];\n```\n相反在需要侧滑的地方调用\n``` objc\n// 开启侧滑效果\n[[NSNotificationCenter defaultCenter] postNotificationName:@\"enableRESideMenu\"\n                                                    object:self\n                                                  userInfo:nil];\n```","slug":"RESideMenu在所有界面都会侧滑的问题解决办法","published":1,"updated":"2022-05-19T03:13:11.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceny0032l1l34kdsdeg7","content":"<blockquote>\n<p>RESideMenu一个非常好用的左右侧滑菜单控件，很多IOS项目都会用到此类左右侧滑效果。然而在RESideMenu的使用过程中，发现其默认将所有界面都加入了侧滑效果。如在主界面导航的Menu放在屏幕的左右两侧，侧滑才可以显示出来，但是当我们进入主界面的某个次级View中，甚至更深一层的View中，侧滑功能仍然可用。这一点就用IOS的UINavigationController的滑动返回冲突。为了解决这个问题，通过Google在网上搜索找到了如下的解决方法。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>奉上参考原文链接地址：<a href=\"http://blog.csdn.net/icetime17/article/details/46883915\">http://blog.csdn.net/icetime17/article/details/46883915</a></p>\n<h2 id=\"RESideMenu基本用法\"><a href=\"#RESideMenu基本用法\" class=\"headerlink\" title=\"RESideMenu基本用法\"></a>RESideMenu基本用法</h2><p>首先创建window的rootViewController，在RootViewController引入并继承RESideMenu及其RESideMenuDelegate. </p>\n<p>具体相关代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;RESideMenu.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> : <span class=\"title\">RESideMenu</span> &lt;<span class=\"title\">RESideMenuDelegate</span>&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在RootViewController.m文件中设置好RESideMenu</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;RootViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> ()</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">RootViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)awakeFromNib &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.menuPreferredStatusBarStyle = <span class=\"built_in\">UIStatusBarStyleLightContent</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowColor = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowOffset = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowOpacity = <span class=\"number\">0.6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowRadius = <span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewController = [<span class=\"keyword\">self</span>.storyboard instantiateViewControllerWithIdentifier:<span class=\"string\">@&quot;ContentViewController&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.leftMenuViewController = [<span class=\"keyword\">self</span>.storyboard instantiateViewControllerWithIdentifier:<span class=\"string\">@&quot;LeftMenuViewController&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - RESideMenu Delegate</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu willShowMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu didShowMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu willHideMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu didHideMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><p>在RESideMenu的使用过程中，发现所有的界面都加上了侧滑功能，并且iOS的滑动返回功能失效了。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>通过观察RESideMenu的源码发现，RESideMenu类中有一个BOOL属性panGestureEnabled, 可以将其视为侧滑效果的开关。以RESideMenu的panGestureEnabled属性为突破口，采用通知的方式来解决这个问题。<br>在RootViewController.m文件中加入如下代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">  [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                           selector:<span class=\"keyword\">@selector</span>(disableRESideMenu)</span><br><span class=\"line\">                                               name:<span class=\"string\">@&quot;disableRESideMenu&quot;</span></span><br><span class=\"line\">                                             object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">  [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                           selector:<span class=\"keyword\">@selector</span>(enableRESideMenu) </span><br><span class=\"line\">                                               name:<span class=\"string\">@&quot;enableRESideMenu&quot;</span></span><br><span class=\"line\">                                             object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)enableRESideMenu &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.panGestureEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)disableRESideMenu &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.panGestureEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在其他页面需要禁止侧滑的时候调用如下代码,发送通知</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关闭侧滑效果</span></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class=\"string\">@&quot;disableRESideMenu&quot;</span></span><br><span class=\"line\">                                                            object:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                          userInfo:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>相反在需要侧滑的地方调用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启侧滑效果</span></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class=\"string\">@&quot;enableRESideMenu&quot;</span></span><br><span class=\"line\">                                                    object:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                  userInfo:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>RESideMenu一个非常好用的左右侧滑菜单控件，很多IOS项目都会用到此类左右侧滑效果。然而在RESideMenu的使用过程中，发现其默认将所有界面都加入了侧滑效果。如在主界面导航的Menu放在屏幕的左右两侧，侧滑才可以显示出来，但是当我们进入主界面的某个次级View中，甚至更深一层的View中，侧滑功能仍然可用。这一点就用IOS的UINavigationController的滑动返回冲突。为了解决这个问题，通过Google在网上搜索找到了如下的解决方法。</p>\n</blockquote>","more":"<p>奉上参考原文链接地址：<a href=\"http://blog.csdn.net/icetime17/article/details/46883915\">http://blog.csdn.net/icetime17/article/details/46883915</a></p>\n<h2 id=\"RESideMenu基本用法\"><a href=\"#RESideMenu基本用法\" class=\"headerlink\" title=\"RESideMenu基本用法\"></a>RESideMenu基本用法</h2><p>首先创建window的rootViewController，在RootViewController引入并继承RESideMenu及其RESideMenuDelegate. </p>\n<p>具体相关代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;RESideMenu.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> : <span class=\"title\">RESideMenu</span> &lt;<span class=\"title\">RESideMenuDelegate</span>&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在RootViewController.m文件中设置好RESideMenu</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;RootViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> ()</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">RootViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)awakeFromNib &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.menuPreferredStatusBarStyle = <span class=\"built_in\">UIStatusBarStyleLightContent</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowColor = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowOffset = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowOpacity = <span class=\"number\">0.6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowRadius = <span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewShadowEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.contentViewController = [<span class=\"keyword\">self</span>.storyboard instantiateViewControllerWithIdentifier:<span class=\"string\">@&quot;ContentViewController&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.leftMenuViewController = [<span class=\"keyword\">self</span>.storyboard instantiateViewControllerWithIdentifier:<span class=\"string\">@&quot;LeftMenuViewController&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - RESideMenu Delegate</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu willShowMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu didShowMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu willHideMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sideMenu:(RESideMenu *)sideMenu didHideMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><p>在RESideMenu的使用过程中，发现所有的界面都加上了侧滑功能，并且iOS的滑动返回功能失效了。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>通过观察RESideMenu的源码发现，RESideMenu类中有一个BOOL属性panGestureEnabled, 可以将其视为侧滑效果的开关。以RESideMenu的panGestureEnabled属性为突破口，采用通知的方式来解决这个问题。<br>在RootViewController.m文件中加入如下代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">  [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                           selector:<span class=\"keyword\">@selector</span>(disableRESideMenu)</span><br><span class=\"line\">                                               name:<span class=\"string\">@&quot;disableRESideMenu&quot;</span></span><br><span class=\"line\">                                             object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">  [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                           selector:<span class=\"keyword\">@selector</span>(enableRESideMenu) </span><br><span class=\"line\">                                               name:<span class=\"string\">@&quot;enableRESideMenu&quot;</span></span><br><span class=\"line\">                                             object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)enableRESideMenu &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.panGestureEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)disableRESideMenu &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.panGestureEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在其他页面需要禁止侧滑的时候调用如下代码,发送通知</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关闭侧滑效果</span></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class=\"string\">@&quot;disableRESideMenu&quot;</span></span><br><span class=\"line\">                                                            object:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                          userInfo:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>相反在需要侧滑的地方调用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启侧滑效果</span></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class=\"string\">@&quot;enableRESideMenu&quot;</span></span><br><span class=\"line\">                                                    object:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                  userInfo:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>"},{"title":"iOS中造成dealloc不调用的原因","date":"2016-04-06T04:18:32.000Z","abbrlink":"298b929a6d4a3530","_content":"\n## 问题描述\n\n最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:\n``` objc\n- (void)dealloc {\n    [_mapView release];\n    [super dealloc];\n}\n\n//并且在界面将要显示的时候设置代理，将要消失的时候取消代理\n- (void)viewWillAppear:(BOOL)animated {\n    _mapView.delegate = self;\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    _mapView.delegate = nil;\n}\n\n```\n\n<!-- more -->\n\n以上给出的方法确实是对的，可以解决反复切换地图页面和地图上一级页面内存暴增造成的闪退问题。但是这里要说的不是这个问题，而是一个新的问题，我在dealloc中打了断点，但是dealloc根本就没有执行，所以mapView也就根本就没有释放，内存还是一样在暴增。为什么ViewController已经被pop了，而ViewController的dealloc方法却没有被调用？（按理说ViewController被pop的时候它的dealloc的方法应该被调用才对）。\n\n## 解决办法\n\n通过Google搜索终于在晚上找到了答案（大家就不要用百度，想要快速准确的找到自己想要的答案推荐大家用google）。造成ViewController不释放的原因可能有很多。遇到dealloc不调用的时候只需要检查您的ViewController中是否存在以下几个问题：\n\n1. <b>ViewController中存在NSTimer</b>\n\n    如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用\n``` objc\n[NSTimer scheduledTimerWithTimeInterval:1.0 \n                                 target:self \n                               selector:@selector(updateTime:) \n                               userInfo:nil \n                                repeats:YES];\n```\n    时，这个<a style=\"color: #FF00EE\">target:self</a>就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。\n\n2. <b>ViewController中有关的代理</b>\n\n    一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性？比如一个代理的delegate应该是 assign 的现在是retain，(╯‵□′)╯︵┻━┻，就是这个，它会影响你不让你调用dealloc，不信，就试试吧。（这个我还没有遇到过）。\n\n3. <b>ViewController中有Block</b>\n\n    这个就是我我上面不进入dealloc的真正原因，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。\n    例如你这个类叫OneViewController,有个属性是NSString *name; 如果你在block体中使用了self.name，那样子的话这个类就没法释放。\n    要解决这个问题，MRC下只需\n``` objc\n__block Viewcontroller *weakSelf = self;\n```\n    ARC下将__block 换为 __weak\n\n目前我所知道的就以上三种情况，如果有什么错误的地方或者还存在的一些情况，欢迎大家来补充。","source":"_posts/iOS中造成dealloc不调用的原因.md","raw":"---\ntitle: iOS中造成dealloc不调用的原因\ndate: 2016-04-06 12:18:32\ntags:\n  - iOS\ncategories: 技术杂谈\nabbrlink: 298b929a6d4a3530\n---\n\n## 问题描述\n\n最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:\n``` objc\n- (void)dealloc {\n    [_mapView release];\n    [super dealloc];\n}\n\n//并且在界面将要显示的时候设置代理，将要消失的时候取消代理\n- (void)viewWillAppear:(BOOL)animated {\n    _mapView.delegate = self;\n}\n\n- (void)viewWillDisappear:(BOOL)animated {\n    _mapView.delegate = nil;\n}\n\n```\n\n<!-- more -->\n\n以上给出的方法确实是对的，可以解决反复切换地图页面和地图上一级页面内存暴增造成的闪退问题。但是这里要说的不是这个问题，而是一个新的问题，我在dealloc中打了断点，但是dealloc根本就没有执行，所以mapView也就根本就没有释放，内存还是一样在暴增。为什么ViewController已经被pop了，而ViewController的dealloc方法却没有被调用？（按理说ViewController被pop的时候它的dealloc的方法应该被调用才对）。\n\n## 解决办法\n\n通过Google搜索终于在晚上找到了答案（大家就不要用百度，想要快速准确的找到自己想要的答案推荐大家用google）。造成ViewController不释放的原因可能有很多。遇到dealloc不调用的时候只需要检查您的ViewController中是否存在以下几个问题：\n\n1. <b>ViewController中存在NSTimer</b>\n\n    如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用\n``` objc\n[NSTimer scheduledTimerWithTimeInterval:1.0 \n                                 target:self \n                               selector:@selector(updateTime:) \n                               userInfo:nil \n                                repeats:YES];\n```\n    时，这个<a style=\"color: #FF00EE\">target:self</a>就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。\n\n2. <b>ViewController中有关的代理</b>\n\n    一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性？比如一个代理的delegate应该是 assign 的现在是retain，(╯‵□′)╯︵┻━┻，就是这个，它会影响你不让你调用dealloc，不信，就试试吧。（这个我还没有遇到过）。\n\n3. <b>ViewController中有Block</b>\n\n    这个就是我我上面不进入dealloc的真正原因，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。\n    例如你这个类叫OneViewController,有个属性是NSString *name; 如果你在block体中使用了self.name，那样子的话这个类就没法释放。\n    要解决这个问题，MRC下只需\n``` objc\n__block Viewcontroller *weakSelf = self;\n```\n    ARC下将__block 换为 __weak\n\n目前我所知道的就以上三种情况，如果有什么错误的地方或者还存在的一些情况，欢迎大家来补充。","slug":"iOS中造成dealloc不调用的原因","published":1,"updated":"2022-05-19T03:13:11.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceny0035l1l31zliaw23","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)dealloc &#123;</span><br><span class=\"line\">    [_mapView release];</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> dealloc];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//并且在界面将要显示的时候设置代理，将要消失的时候取消代理</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewWillAppear:(<span class=\"type\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    _mapView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewWillDisappear:(<span class=\"type\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    _mapView.delegate = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>以上给出的方法确实是对的，可以解决反复切换地图页面和地图上一级页面内存暴增造成的闪退问题。但是这里要说的不是这个问题，而是一个新的问题，我在dealloc中打了断点，但是dealloc根本就没有执行，所以mapView也就根本就没有释放，内存还是一样在暴增。为什么ViewController已经被pop了，而ViewController的dealloc方法却没有被调用？（按理说ViewController被pop的时候它的dealloc的方法应该被调用才对）。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>通过Google搜索终于在晚上找到了答案（大家就不要用百度，想要快速准确的找到自己想要的答案推荐大家用google）。造成ViewController不释放的原因可能有很多。遇到dealloc不调用的时候只需要检查您的ViewController中是否存在以下几个问题：</p>\n<ol>\n<li><p><b>ViewController中存在NSTimer</b></p>\n<p> 如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">1.0</span> </span><br><span class=\"line\">                                 target:<span class=\"keyword\">self</span> </span><br><span class=\"line\">                               selector:<span class=\"keyword\">@selector</span>(updateTime:) </span><br><span class=\"line\">                               userInfo:<span class=\"literal\">nil</span> </span><br><span class=\"line\">                                repeats:<span class=\"literal\">YES</span>];</span><br></pre></td></tr></table></figure>\n<p> 时，这个<a style=\"color: #FF00EE\">target:self</a>就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。</p>\n</li>\n<li><p><b>ViewController中有关的代理</b></p>\n<p> 一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性？比如一个代理的delegate应该是 assign 的现在是retain，(╯‵□′)╯︵┻━┻，就是这个，它会影响你不让你调用dealloc，不信，就试试吧。（这个我还没有遇到过）。</p>\n</li>\n<li><p><b>ViewController中有Block</b></p>\n<p> 这个就是我我上面不进入dealloc的真正原因，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。<br> 例如你这个类叫OneViewController,有个属性是NSString *name; 如果你在block体中使用了self.name，那样子的话这个类就没法释放。<br> 要解决这个问题，MRC下只需</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block Viewcontroller *weakSelf = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<p> ARC下将__block 换为 __weak</p>\n</li>\n</ol>\n<p>目前我所知道的就以上三种情况，如果有什么错误的地方或者还存在的一些情况，欢迎大家来补充。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)dealloc &#123;</span><br><span class=\"line\">    [_mapView release];</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> dealloc];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//并且在界面将要显示的时候设置代理，将要消失的时候取消代理</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewWillAppear:(<span class=\"type\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    _mapView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewWillDisappear:(<span class=\"type\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    _mapView.delegate = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<p>以上给出的方法确实是对的，可以解决反复切换地图页面和地图上一级页面内存暴增造成的闪退问题。但是这里要说的不是这个问题，而是一个新的问题，我在dealloc中打了断点，但是dealloc根本就没有执行，所以mapView也就根本就没有释放，内存还是一样在暴增。为什么ViewController已经被pop了，而ViewController的dealloc方法却没有被调用？（按理说ViewController被pop的时候它的dealloc的方法应该被调用才对）。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>通过Google搜索终于在晚上找到了答案（大家就不要用百度，想要快速准确的找到自己想要的答案推荐大家用google）。造成ViewController不释放的原因可能有很多。遇到dealloc不调用的时候只需要检查您的ViewController中是否存在以下几个问题：</p>\n<ol>\n<li><p><b>ViewController中存在NSTimer</b></p>\n<p> 如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">1.0</span> </span><br><span class=\"line\">                                 target:<span class=\"keyword\">self</span> </span><br><span class=\"line\">                               selector:<span class=\"keyword\">@selector</span>(updateTime:) </span><br><span class=\"line\">                               userInfo:<span class=\"literal\">nil</span> </span><br><span class=\"line\">                                repeats:<span class=\"literal\">YES</span>];</span><br></pre></td></tr></table></figure>\n<p> 时，这个<a style=\"color: #FF00EE\">target:self</a>就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。</p>\n</li>\n<li><p><b>ViewController中有关的代理</b></p>\n<p> 一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性？比如一个代理的delegate应该是 assign 的现在是retain，(╯‵□′)╯︵┻━┻，就是这个，它会影响你不让你调用dealloc，不信，就试试吧。（这个我还没有遇到过）。</p>\n</li>\n<li><p><b>ViewController中有Block</b></p>\n<p> 这个就是我我上面不进入dealloc的真正原因，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。<br> 例如你这个类叫OneViewController,有个属性是NSString *name; 如果你在block体中使用了self.name，那样子的话这个类就没法释放。<br> 要解决这个问题，MRC下只需</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block Viewcontroller *weakSelf = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<p> ARC下将__block 换为 __weak</p>\n</li>\n</ol>\n<p>目前我所知道的就以上三种情况，如果有什么错误的地方或者还存在的一些情况，欢迎大家来补充。</p>"},{"title":"iOS几种不同传值方式","date":"2016-03-17T07:17:32.000Z","abbrlink":"f5934f826f15c52f","_content":"\n关于iOS的传值方式我所知道的一共有一下6种方式：\n* 属性传值\n* 代理传值\n* block传值\n* 单例传值\n* 通知传值\n* NSUserDefault保存数据传值\n\n以上六种方式都可以实现iOS不同对象之间的传值，但是针对不同的情况，我们会采取不同的传值方式。\n\n<!-- more -->\n\n## 属性传值\n\n属性传值一般常用在页面中，从一个页面传值到另一个页面。例如从A页面跳转到B页面，如果需要将A页面中的某个值传递到B页面中，这个时候用到最简单的传值方式就是属性传值。\n\n下面是一个简单例子实现将AViewController中UItextFiled中的值传到BViewController中Label中。\nAViewController.m中的代码如下：\n``` objc\n#import \"AViewController.h\"\n#import \"BViewController.h\"\n\n@interface AViewController ()\n\n//定义输入框\n@property (nonatomic, strong) UITextField *textField;\n\n@end\n\n@implementation AViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    \n    [self.view addSubview:self.textField];\n    //定义点击跳转的按钮\n    UIButton *pushBtn = [[UIButton alloc]initWithFrame:CGRectMake(20, 150, 100, 30)];\n    pushBtn.titleLabel.font = [UIFont systemFontOfSize:12];\n    [pushBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [pushBtn setTitle:@\"push显示\" forState:UIControlStateNormal];\n    [pushBtn setBackgroundColor:[UIColor yellowColor]];\n    [pushBtn addTarget:self action:@selector(pushAction) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:pushBtn];\n}\n\n- (void)pushAction {\n    //定义跳转页面，并给B页面str赋值\n    BViewController *vc = [[BViewController alloc]init];\n    vc.str = self.textField.text;\n    [self.navigationController pushViewController:vc animated:YES];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n- (UITextField *)textField {\n    if (!_textField) {\n        _textField = [[UITextField alloc]initWithFrame:CGRectMake(20, 100, 280, 30)];\n        _textField.borderStyle = UITextBorderStyleRoundedRect;\n    }\n    return _textField;\n}\n```\n\nBViewController.h文件中，声明被赋值的属性\n``` objc\n#import <UIKit/UIKit.h>\n\n@interface BViewController : UIViewController\n\n@property (nonatomic, copy) NSString *str;\n\n@end\n```\nBViewController.m中显示AViewController传递过来的属性值\n``` objc\n#import \"BViewController.h\"\n\n@interface BViewController ()\n\n@end\n\n@implementation BViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    self.view.backgroundColor = [UIColor whiteColor];\n    \n    UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(20, 100, 100, 20)];\n    label.font = [UIFont systemFontOfSize:14];\n    label.textColor = [UIColor blackColor];\n    //显示AViewController传递过来的值\n    label.text = self.str;\n    [self.view addSubview:label];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n```\n\n## 代理传值\n","source":"_posts/iOS几种不同传值方式.md","raw":"---\ntitle: iOS几种不同传值方式\ndate: 2016-03-17 15:17:32\ntags:\n  - iOS\ncategories: 知识汇总\nabbrlink: f5934f826f15c52f\n---\n\n关于iOS的传值方式我所知道的一共有一下6种方式：\n* 属性传值\n* 代理传值\n* block传值\n* 单例传值\n* 通知传值\n* NSUserDefault保存数据传值\n\n以上六种方式都可以实现iOS不同对象之间的传值，但是针对不同的情况，我们会采取不同的传值方式。\n\n<!-- more -->\n\n## 属性传值\n\n属性传值一般常用在页面中，从一个页面传值到另一个页面。例如从A页面跳转到B页面，如果需要将A页面中的某个值传递到B页面中，这个时候用到最简单的传值方式就是属性传值。\n\n下面是一个简单例子实现将AViewController中UItextFiled中的值传到BViewController中Label中。\nAViewController.m中的代码如下：\n``` objc\n#import \"AViewController.h\"\n#import \"BViewController.h\"\n\n@interface AViewController ()\n\n//定义输入框\n@property (nonatomic, strong) UITextField *textField;\n\n@end\n\n@implementation AViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    \n    [self.view addSubview:self.textField];\n    //定义点击跳转的按钮\n    UIButton *pushBtn = [[UIButton alloc]initWithFrame:CGRectMake(20, 150, 100, 30)];\n    pushBtn.titleLabel.font = [UIFont systemFontOfSize:12];\n    [pushBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [pushBtn setTitle:@\"push显示\" forState:UIControlStateNormal];\n    [pushBtn setBackgroundColor:[UIColor yellowColor]];\n    [pushBtn addTarget:self action:@selector(pushAction) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:pushBtn];\n}\n\n- (void)pushAction {\n    //定义跳转页面，并给B页面str赋值\n    BViewController *vc = [[BViewController alloc]init];\n    vc.str = self.textField.text;\n    [self.navigationController pushViewController:vc animated:YES];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n- (UITextField *)textField {\n    if (!_textField) {\n        _textField = [[UITextField alloc]initWithFrame:CGRectMake(20, 100, 280, 30)];\n        _textField.borderStyle = UITextBorderStyleRoundedRect;\n    }\n    return _textField;\n}\n```\n\nBViewController.h文件中，声明被赋值的属性\n``` objc\n#import <UIKit/UIKit.h>\n\n@interface BViewController : UIViewController\n\n@property (nonatomic, copy) NSString *str;\n\n@end\n```\nBViewController.m中显示AViewController传递过来的属性值\n``` objc\n#import \"BViewController.h\"\n\n@interface BViewController ()\n\n@end\n\n@implementation BViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    self.view.backgroundColor = [UIColor whiteColor];\n    \n    UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(20, 100, 100, 20)];\n    label.font = [UIFont systemFontOfSize:14];\n    label.textColor = [UIColor blackColor];\n    //显示AViewController传递过来的值\n    label.text = self.str;\n    [self.view addSubview:label];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n```\n\n## 代理传值\n","slug":"iOS几种不同传值方式","published":1,"updated":"2022-05-19T03:13:11.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenz0039l1l3fbe1b1oi","content":"<p>关于iOS的传值方式我所知道的一共有一下6种方式：</p>\n<ul>\n<li>属性传值</li>\n<li>代理传值</li>\n<li>block传值</li>\n<li>单例传值</li>\n<li>通知传值</li>\n<li>NSUserDefault保存数据传值</li>\n</ul>\n<p>以上六种方式都可以实现iOS不同对象之间的传值，但是针对不同的情况，我们会采取不同的传值方式。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"属性传值\"><a href=\"#属性传值\" class=\"headerlink\" title=\"属性传值\"></a>属性传值</h2><p>属性传值一般常用在页面中，从一个页面传值到另一个页面。例如从A页面跳转到B页面，如果需要将A页面中的某个值传递到B页面中，这个时候用到最简单的传值方式就是属性传值。</p>\n<p>下面是一个简单例子实现将AViewController中UItextFiled中的值传到BViewController中Label中。<br>AViewController.m中的代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义输入框</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UITextField</span> *textField;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.textField];</span><br><span class=\"line\">    <span class=\"comment\">//定义点击跳转的按钮</span></span><br><span class=\"line\">    <span class=\"built_in\">UIButton</span> *pushBtn = [[<span class=\"built_in\">UIButton</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];</span><br><span class=\"line\">    pushBtn.titleLabel.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">12</span>];</span><br><span class=\"line\">    [pushBtn setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    [pushBtn setTitle:<span class=\"string\">@&quot;push显示&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    [pushBtn setBackgroundColor:[<span class=\"built_in\">UIColor</span> yellowColor]];</span><br><span class=\"line\">    [pushBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pushAction) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:pushBtn];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)pushAction &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义跳转页面，并给B页面str赋值</span></span><br><span class=\"line\">    BViewController *vc = [[BViewController alloc]init];</span><br><span class=\"line\">    vc.str = <span class=\"keyword\">self</span>.textField.text;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:vc animated:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITextField</span> *)textField &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_textField) &#123;</span><br><span class=\"line\">        _textField = [[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">280</span>, <span class=\"number\">30</span>)];</span><br><span class=\"line\">        _textField.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _textField;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BViewController.h文件中，声明被赋值的属性</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BViewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>BViewController.m中显示AViewController传递过来的属性值</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UILabel</span> *label = [[<span class=\"built_in\">UILabel</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)];</span><br><span class=\"line\">    label.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</span><br><span class=\"line\">    label.textColor = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">    <span class=\"comment\">//显示AViewController传递过来的值</span></span><br><span class=\"line\">    label.text = <span class=\"keyword\">self</span>.str;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:label];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理传值\"><a href=\"#代理传值\" class=\"headerlink\" title=\"代理传值\"></a>代理传值</h2>","site":{"data":{}},"excerpt":"<p>关于iOS的传值方式我所知道的一共有一下6种方式：</p>\n<ul>\n<li>属性传值</li>\n<li>代理传值</li>\n<li>block传值</li>\n<li>单例传值</li>\n<li>通知传值</li>\n<li>NSUserDefault保存数据传值</li>\n</ul>\n<p>以上六种方式都可以实现iOS不同对象之间的传值，但是针对不同的情况，我们会采取不同的传值方式。</p>","more":"<h2 id=\"属性传值\"><a href=\"#属性传值\" class=\"headerlink\" title=\"属性传值\"></a>属性传值</h2><p>属性传值一般常用在页面中，从一个页面传值到另一个页面。例如从A页面跳转到B页面，如果需要将A页面中的某个值传递到B页面中，这个时候用到最简单的传值方式就是属性传值。</p>\n<p>下面是一个简单例子实现将AViewController中UItextFiled中的值传到BViewController中Label中。<br>AViewController.m中的代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义输入框</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UITextField</span> *textField;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.textField];</span><br><span class=\"line\">    <span class=\"comment\">//定义点击跳转的按钮</span></span><br><span class=\"line\">    <span class=\"built_in\">UIButton</span> *pushBtn = [[<span class=\"built_in\">UIButton</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];</span><br><span class=\"line\">    pushBtn.titleLabel.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">12</span>];</span><br><span class=\"line\">    [pushBtn setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    [pushBtn setTitle:<span class=\"string\">@&quot;push显示&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    [pushBtn setBackgroundColor:[<span class=\"built_in\">UIColor</span> yellowColor]];</span><br><span class=\"line\">    [pushBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pushAction) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:pushBtn];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)pushAction &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义跳转页面，并给B页面str赋值</span></span><br><span class=\"line\">    BViewController *vc = [[BViewController alloc]init];</span><br><span class=\"line\">    vc.str = <span class=\"keyword\">self</span>.textField.text;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:vc animated:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITextField</span> *)textField &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_textField) &#123;</span><br><span class=\"line\">        _textField = [[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">280</span>, <span class=\"number\">30</span>)];</span><br><span class=\"line\">        _textField.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _textField;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BViewController.h文件中，声明被赋值的属性</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BViewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>BViewController.m中显示AViewController传递过来的属性值</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UILabel</span> *label = [[<span class=\"built_in\">UILabel</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)];</span><br><span class=\"line\">    label.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</span><br><span class=\"line\">    label.textColor = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">    <span class=\"comment\">//显示AViewController传递过来的值</span></span><br><span class=\"line\">    label.text = <span class=\"keyword\">self</span>.str;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:label];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理传值\"><a href=\"#代理传值\" class=\"headerlink\" title=\"代理传值\"></a>代理传值</h2>"},{"title":"iOS上完美编译FFmpeg","date":"2016-03-28T13:50:00.000Z","abbrlink":"6678c8d5e984a2bf","_content":"\n## 问题描述\n\n最新在使用FFmpeg的时候遇到了如下的报错信息，但是现在一直都还未找到解决办法。\n``` bash\nUndefined symbols for architecture arm64:\n  \"_avcodec_close\", referenced from:\n      CH264Decoder::~CH264Decoder() in H264Decoder.o\n  \"_av_init_packet\", referenced from:\n      CH264Decoder::DecoderFrame(unsigned char*, int, int&, int&) in H264Decoder.o\n  \"_av_malloc\", referenced from:\n      CH264Decoder::CreateYUVTab_16() in H264Decoder.o\n  \"_av_free\", referenced from:\n      CH264Decoder::DeleteYUVTab() in H264Decoder.o\n      CH264Decoder::~CH264Decoder() in H264Decoder.o\n  \"_av_register_all\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_find_decoder\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_decode_video2\", referenced from:\n      CH264Decoder::DecoderFrame(unsigned char*, int, int&, int&) in H264Decoder.o\n  \"_avcodec_open2\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_alloc_context3\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_alloc_frame\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\n<!-- more -->\n\n## 解决办法\n\n解决办法，直接上图\n\n{% asset_img 1.png 解决办法%}","source":"_posts/iOS上完美编译FFmpeg.md","raw":"---\ntitle: iOS上完美编译FFmpeg\ndate: 2016-03-28 21:50:00\ntags:\n  - iOS\ncategories: 经验积累\nabbrlink: 6678c8d5e984a2bf\n---\n\n## 问题描述\n\n最新在使用FFmpeg的时候遇到了如下的报错信息，但是现在一直都还未找到解决办法。\n``` bash\nUndefined symbols for architecture arm64:\n  \"_avcodec_close\", referenced from:\n      CH264Decoder::~CH264Decoder() in H264Decoder.o\n  \"_av_init_packet\", referenced from:\n      CH264Decoder::DecoderFrame(unsigned char*, int, int&, int&) in H264Decoder.o\n  \"_av_malloc\", referenced from:\n      CH264Decoder::CreateYUVTab_16() in H264Decoder.o\n  \"_av_free\", referenced from:\n      CH264Decoder::DeleteYUVTab() in H264Decoder.o\n      CH264Decoder::~CH264Decoder() in H264Decoder.o\n  \"_av_register_all\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_find_decoder\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_decode_video2\", referenced from:\n      CH264Decoder::DecoderFrame(unsigned char*, int, int&, int&) in H264Decoder.o\n  \"_avcodec_open2\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_alloc_context3\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\n  \"_avcodec_alloc_frame\", referenced from:\n      CH264Decoder::CH264Decoder() in H264Decoder.o\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\n<!-- more -->\n\n## 解决办法\n\n解决办法，直接上图\n\n{% asset_img 1.png 解决办法%}","slug":"iOS上完美编译FFmpeg","published":1,"updated":"2022-05-19T03:13:11.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmcenz003dl1l3c990e8cz","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>最新在使用FFmpeg的时候遇到了如下的报错信息，但是现在一直都还未找到解决办法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture arm64:</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_close&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::~CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_init_packet&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DecoderFrame(unsigned char*, int, int&amp;, int&amp;) <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_malloc&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CreateYUVTab_16() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_free&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DeleteYUVTab() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">      CH264Decoder::~CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_register_all&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_find_decoder&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_decode_video2&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DecoderFrame(unsigned char*, int, int&amp;, int&amp;) <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_open2&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_alloc_context3&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_alloc_frame&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">ld: symbol(s) not found <span class=\"keyword\">for</span> architecture arm64</span><br><span class=\"line\">clang: error: linker <span class=\"built_in\">command</span> failed with <span class=\"built_in\">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>解决办法，直接上图</p>\n<img src=\"/posts/6678c8d5e984a2bf/1.png\" class=\"\" title=\"解决办法\">","site":{"data":{}},"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>最新在使用FFmpeg的时候遇到了如下的报错信息，但是现在一直都还未找到解决办法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture arm64:</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_close&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::~CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_init_packet&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DecoderFrame(unsigned char*, int, int&amp;, int&amp;) <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_malloc&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CreateYUVTab_16() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_free&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DeleteYUVTab() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">      CH264Decoder::~CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_av_register_all&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_find_decoder&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_decode_video2&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DecoderFrame(unsigned char*, int, int&amp;, int&amp;) <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_open2&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_alloc_context3&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">&quot;_avcodec_alloc_frame&quot;</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">ld: symbol(s) not found <span class=\"keyword\">for</span> architecture arm64</span><br><span class=\"line\">clang: error: linker <span class=\"built_in\">command</span> failed with <span class=\"built_in\">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>解决办法，直接上图</p>\n<img src=\"/posts/6678c8d5e984a2bf/1.png\" class=\"\" title=\"解决办法\">"},{"title":"Swift学习笔记之闭包","date":"2016-06-01T01:20:16.000Z","abbrlink":"43b7e269337d814b","_content":"\n## 概述\n\n一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？\n> 闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。\n\n闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。\n\n<!-- more -->\n\n全局和嵌套函数其实也是特殊的闭包，闭包采取如下三种形式之一：\n* 全局函数是一个有名字但不会捕获任何值的闭包\n* 嵌套函数是一个有名字并可以捕获其封闭函数内值的闭包\n* 闭包表达式是一个利用轻量级语法\t所写的可以捕获其上下文中变量或常量值的匿名闭包\n\nSwift表达式拥有简洁的风格，并鼓励在常见场景进行语法优化，主要有如下优化方式\n* 利用上下文推断判断参数和返回值类型\n* 隐式返回单表达式闭包，即单表达式可以省略`return`关键字\n* 参数名称缩写\n* 尾随（Trailing）闭包语法\n\n## 闭包表达式\n\n闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变得简单明了。下面闭包表达式的例子通过几次迭代展示了`sort`方法定义和语法优化的方式。每一次都用更简洁的方式描述了相同的功能。\n\n### sort方法\n\nSwift标准库提供了名为`sort`的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。一旦排序完成，`sort`方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组并不会被`sort`方法修改。\n\n``` Swift\t\nlet names = [\"Jay\", \"Vae\", \"Jvaeyhcd\", \"Tom\", \"Jack\"]\n\nfunc sortFun(s1:String, s2:String) -> Bool {\n    return s1 > s2\n}\n\nvar sortedNames = names.sort(sortFun)\n```\n该例子是对一个`String`类型的数组进行排序，因此排序闭包函数类型需为`(String,String)->Bool`。提供排序闭包函数的方式是写一个符合其类型要求的普通函数，并将其作为`sort`的参数传入。然而，这是一个相当冗长的方式，本质上只是写一个单表达式函数（`s1 > s2`）。下面例子中，利用闭包表达式可以更好地构建一个内联排序闭包。\n\n### 闭包表达式语法\n\n闭包表达式语法一般如下：\n``` Swift\n{ (parameters) -> returnType in\n    statements\n}\n```\n闭包表达式可以使用变量、常量以及`inout`类型作为参数，但是不能提供默认值。也可以在参数列表的最后使用可变参数，元组也可以作为参数和返回值。\n\n下面例子展示了上面`sortFun(_:_:)`函数对应的闭包表达式版本的代码：\n``` Swift\nsortedNames = names.sort({\n    (s1:String, s2:String)->Bool in\n    return s1 < s2\n})\n```\n需要注意的是内联闭包参数和返回值类型申明与`sortFun(_:_:)`类型申明相同。两种方式中，都写成了`(s1:String, s2:String)->Bool`。然而在内联表达式中，函数和返回值类型都写在大括号内，而不是大括号外。\n闭包函数体部分由关键字`in`引入。该关键字表示闭包的参数和返回值类型都已定义完成，闭包函数体即将开始。由于这个闭包函数体部分如此短，以至于可以将其写成一行代码：\n``` Swift\nsortedNames = names.sort({(s1:String, s2:String) -> Bool in return s1 < s2})\n```\n该例中`sort(_:)`方法的整体调用保持不变，一对圆括号仍然包裹住了方法的整个参数。然而，参数现在变成了内联闭包。\n\n### 根据上下文推断类型\n\n因为排序闭包函数是作为`sort(_:)`方法参数传入的，Swift可判断其参数和返回值的类型。`sort(_:)`方法被一个字符串数组调用，此参数必须是`(String, String)->Bool`类型的函数。这意味着`(String, String)`和`Bool`类型并不是必须作为闭包表达式定义的一部分。因为所有类型都可以被正确判断，返回箭头(`->`)和围绕在周围的括号也可以被省略：\n\n``` Swift\nsortedNames = names.sort({s1, s2 in return s1 > s2})\n```\n实际上任何情况下，通过内联闭包表达式构造的闭包作为参数传递给函数或方法时，都可以推断出闭包的参数和返回值类型。 这意味着闭包作为函数或者方法的参数时，您几乎不需要利用完整格式构造内联闭包。\n\n尽管如此，您仍然可以明确写出有着完整格式的闭包。如果完整格式的闭包能够提高代码的可读性，则可以采用完整格式的闭包。\n\n### 单表达式闭包隐式返回\n单行表达式闭包可以通过省略`return`关键字来隐式返回单行表达式的结果，如上面版本代码可以改写为：\n``` Swift\nsortedNames = names.sort({s1, s2 in s1 > s2})\n```\n在这个例子中，`sort(_:)`方法的参数类型明确了闭包必须返回一个`Bool`类型值。因为闭包函数体只包含了一个单一表达式（`s1 > s2`），该表达式返回`Bool`类型值，因此这里没有歧义，`return`关键字可以省略。\n\n### 参数名称缩写\nSwift自动为内联包提供了参数名称缩写功能，你可以直接通过`$0`,`$1`,`$2`来顺序调用闭包的参数，以此类推。如果您在闭包表达式中使用参数名缩写，你可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。`in`关键字同样也可以被省略，因此闭包表达式完全由闭包函数体构成：\n``` Swift\nsortedNames = names.sort({$0 > $1})\n```\n在这个例子中，`$0`和`$1`表示闭包中第一个和第二个`String`类型的参数。\n\n### 运算符函数\n实际上还有更简单的方式来实现上面例子中的闭包表达式。Swift中`String`类型定义了关于大于符号(`>`)的字符串实现，其作为一个函数接收两个`String`类型的参数并返回`Bool`类型的值。而这正好与`sort(_:)`方法的参数需要的函数类型相符合。因此，您可以简单地传递一个大于号，Swift 可以自动推断出您想使用大于号的字符串函数实现：\n``` Swift\nsortedNames = names.sort(>)\n```\n\n## 尾随闭包\n\n如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用尾随闭包来增强函数的可读性。尾随闭包是一个书写在函数括号后的闭包表达式，函数支持将其作为最后一个参数调用：\n``` Swift\nfunc someFunctionThatTakesAClosure(closure: () -> Void) {\n    // 函数体部分\n}\n\n// 以下是不使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure({\n    // 闭包主体部分\n})\n\n// 以下是使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure() {\n    // 闭包主体部分\n}\n```\n\n所以上面`sort(_:)`方法参数字符串排序闭包可以改写为\n``` Swift\nsortedNumbers = numbers.sort{$0 > $1}\n```\n如果函数只需要闭包表达式一个参数，当使用尾随闭包时可以把`()`省略\n``` Swift\nsortedNumbers = numbers.sort(){$0 > $1}\n```\n当闭包非常长以至于不能在一行进行书写，尾随闭包变得非常有用。举个例子来说，Swifte的`Array`类型有一个`map(_:)`方法，其获取一个闭包表达式作为唯一参数。该闭包函数会为数组中的额每一个元素调用一次，并返回该元素所映射的值。具体的映射方式和返回值类型由闭包来指定。当提供给数组的闭包用于数组每个元素后，`map(_:)`方法将返回一个新的数组，数组中包含了与原数组中的元素一一对应的映射后的值。\n``` Swift\nlet digitNames = [\n    0:\"Zero\", 1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\",\n    5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"\n]\n\nnumbers = [34, 65, 89]\n\nlet strings = numbers.map {\n    (number) -> String in\n    \n    var number = number\n    var output = \"\"\n    \n    while number > 0 {\n        output = digitNames[number % 10]! + output\n        number /= 10\n    }\n    \n    return output\n}\n\nprint(strings)\n```\n上面示例代码展示了如何在`map(_:)`方法中使用尾随闭包将`Int`类型的数组`[34, 65, 89]`转换为包含对应`String`类型值的数组`[\"ThreeFour\", \"SixFive\", \"EightNine\"]`。\n`map(_:)`为数组中每一个元素调用了闭包表达式。您不需要指定闭包的输入参数`number`的类型，因为可以通过要映射的数组类型进行推断。\n在该例中，局部变量`number`的值由闭包中的`numbe`r参数获得,因此可以在闭包函数体内对其进行修改，(闭包或者函数的参数总是固定的),闭包表达式指定了返回类型为`String`，以表明存储映射值的新数组类型为`String`。\n\n闭包表达式在每次被调用的时候创建了一个叫做`output`的字符串并返回。其使用求余运算符（`number % 10`）计算最后一位数字并利用`digitNames`字典获取所映射的字符串。\n\n> 注：字典digitNames下标后跟着一个叹号（`!`），因为字典下标返回一个可选值（optional value），表明该键不存在时会查找失败。在上例中，由于可以确定`number % 10`总是digitNames字典的有效下标，因此叹号可以用于强制解包 (force-unwrap) 存储在下标的可选类型的返回值中的`String`类型的值。\n\n## 捕获值\n闭包可以在其被定义的上下文中捕获常量或者变量。即使定义这些常量或变量的作用域已经不在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift中可捕获值的最简单的形势就是嵌套函数，也就是定义在其它函数内的函数。嵌套函数可以捕获其外部函数所有的参数以及常量和变量。\n\n举个例子：\n``` Swift\nfunc makeIncrementor(forIncrement amount: Int) -> () -> Int {\n    var runningTotal = 0\n    func incrementor() -> Int {\n        runningTotal += amount\n        return runningTotal\n    }\n    return incrementor\n}\n\nlet incrementByOne = makeIncrementor(forIncrement: 1)\nincrementByOne()//返回1\nincrementByOne()//返回2\n\nlet incrementByTen = makeIncrementor(forIncrement: 10)\nincrementByTen()//返回10\nincrementByOne()//返回3\n```\n上面例子中有一个叫`makeIncrementor`的函数，它包含了一个叫`incrementor`的嵌套函数。嵌套函数`incrementor`从上下文捕获了两个值`runningTotal`和`amount`，捕获值后`makeIncrementor`将`incrementor`作为闭包返回。每次调用`incrementor`时，它会以`amount`作为增量增加`runningTotal`的值。\n`makeIncrementor`函数返回类型为`() -> Int`，这意味着它返回的是一个函数，而不是一个简单类型的值。该函数在每次调用时不接受参数，只返回一个`Int`类型的值。\n`makeIncrementer(forIncrement:)`又一个`Int`类型的参数，其外部参数名为`forIncrement`，内部参数名为`amount`，该参数表示每次`incrementor`被调用时`runningTotal`将要增加的量。\n嵌套函数`incrementor`用来执行实际的增加操作，使`runningTotal`增加`amount`，并将其返回。\n如果我们单独看`incrementor()`这个函数，会发现不同寻常\n``` Swift\nfunc incrementor() -> Int {\n    runningTotal += amount\n    return runningTotal\n}\n```\n`incrementor()`并没有接受任何参数，但是在函数体内访问了`runningTotal`和`amount`，这是因为它从外围函数捕获了`runningTotal`和`amount`变量的引用。捕获引用保证了`runningTotal`和`amount`变量在调用完`makeIncrementor`或不会消失，并且保证在下一次执行`incrementer`函数时`runningTotal`依然存在。\n> 注：为了优化，如果一个值是不可变的，Swift可能会改为捕获并保存一份对值的拷贝。Swift也会负责被捕获变量的所有内存管理工作。\n\n``` Swift\nlet incrementByOne = makeIncrementor(forIncrement: 1)\nincrementByOne()//返回1\nincrementByOne()//返回2\n\nlet incrementByTen = makeIncrementor(forIncrement: 10)\nincrementByTen()//返回10\nincrementByOne()//返回3\nincrementByTen()//返回20\n```\n如果您创建了另一个`incrementor`，它会有属于它自己的一个全新、独立的`runningTotal`变量的引用：\n再次调用原来的`incrementByOne`会在原来的变量`runningTotal`上继续增加值，该变量和`incrementByTen`中捕获的变量没有任何联系。\n> 注：如果您将闭包赋值给一个类实例的属性，并且该闭包通过访问该实例或其成员而捕获了该实例，您将创建一个在闭包和该实例间的循环强引用。Swift 使用捕获列表来打破这种循环强引用。\n\n## 闭包是引用类型\n上面的例子中，`incrementByOne`和`incrementByTen`是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。\n无论你将函数或者闭包赋值给一个常量还是变量，实际上都是将常量或者变量的值设置为对应函数或闭包的引用。。上面的示例中，指向闭包的引用`incrementByTen`是一个常量，而非闭包内容本身。\n这也意味着如果您将闭包赋值给了两个不同的常量或变量，两个值都会指向同一个闭包：\n``` Swift\nlet alsoIncrementByTen = incrementByTen\nalsoIncrementByTen()//返回30\n```\n\n## 非逃逸闭包\n当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注`@noescape`，用来指明这个闭包时不允许“逃逸”出这个函数的。将闭包标注`@noescape`能使编译器知道这个闭包的生命周期（闭包只能在函数体中被执行，不能脱离函数体执行，所以编译器明确知道运行时的上下文），从而可以进行一些比较激进的优化。\n`Array`中提供的`sort(_:)`方法接受一个用来进行元素比较的闭包作为函数，这个参数被标注了`@noescape`，因为它确保自己在排序结束后就没用了。\n``` Swift\nfunc someFunctionWithNoescapeClosure(@noescape closure: () -> Void) {\n    closure()\n}\n```\n`someFunctionWithNoescapeClosure`定义了一个传入非逃逸闭包的函数。\n一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。比如，很多启动异步操作的函数接受一个闭包参数作为completion handler。这类函数会在异步操作开始之后立即返回，但是闭包直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。例如：\n``` Swift\nvar completionHandlers:[() -> Void] = []\nfunc someFunctionWithEscapingClosure(completionHandler:()->Void) -> Void {\n    completionHandlers.append(completionHandler)\n}\n```\n`someFunctionWithEscapingClosure(_:)`函数接受一个闭包作为参数，该闭包被添加到一个函数外定义的数组中。如果你试图将这个参数标注为`@noescape`将会得到一个编译错误。\n将闭包标注为`@noescape`使你能在闭包中隐式地引用`self`。\n``` Swift\nclass ExClass {\n    var x = 1\n    func doSomething() -> Void {\n        someFunctionWithEscapingClosure({self.x = 120})\n        someFunctionWithEscapingClosure({self.x = 10})\n        someFunctionWithNoescapeClosure({x = 20})\n    }\n}\n\nlet instance = ExClass()\ninstance.doSomething()\nprint(instance.x)\n\ncompletionHandlers.first?()\nprint(instance.x)\n\ncompletionHandlers.last?()\nprint(instance.x)\n```","source":"_posts/Swift学习笔记之闭包.md","raw":"---\ntitle: Swift学习笔记之闭包\ndate: 2016-06-01 09:20:16\ntags:\n  - Swift\n  - 闭包\ncategories: Swift学习笔记\nabbrlink: 43b7e269337d814b\n---\n\n## 概述\n\n一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？\n> 闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。\n\n闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。\n\n<!-- more -->\n\n全局和嵌套函数其实也是特殊的闭包，闭包采取如下三种形式之一：\n* 全局函数是一个有名字但不会捕获任何值的闭包\n* 嵌套函数是一个有名字并可以捕获其封闭函数内值的闭包\n* 闭包表达式是一个利用轻量级语法\t所写的可以捕获其上下文中变量或常量值的匿名闭包\n\nSwift表达式拥有简洁的风格，并鼓励在常见场景进行语法优化，主要有如下优化方式\n* 利用上下文推断判断参数和返回值类型\n* 隐式返回单表达式闭包，即单表达式可以省略`return`关键字\n* 参数名称缩写\n* 尾随（Trailing）闭包语法\n\n## 闭包表达式\n\n闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变得简单明了。下面闭包表达式的例子通过几次迭代展示了`sort`方法定义和语法优化的方式。每一次都用更简洁的方式描述了相同的功能。\n\n### sort方法\n\nSwift标准库提供了名为`sort`的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。一旦排序完成，`sort`方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组并不会被`sort`方法修改。\n\n``` Swift\t\nlet names = [\"Jay\", \"Vae\", \"Jvaeyhcd\", \"Tom\", \"Jack\"]\n\nfunc sortFun(s1:String, s2:String) -> Bool {\n    return s1 > s2\n}\n\nvar sortedNames = names.sort(sortFun)\n```\n该例子是对一个`String`类型的数组进行排序，因此排序闭包函数类型需为`(String,String)->Bool`。提供排序闭包函数的方式是写一个符合其类型要求的普通函数，并将其作为`sort`的参数传入。然而，这是一个相当冗长的方式，本质上只是写一个单表达式函数（`s1 > s2`）。下面例子中，利用闭包表达式可以更好地构建一个内联排序闭包。\n\n### 闭包表达式语法\n\n闭包表达式语法一般如下：\n``` Swift\n{ (parameters) -> returnType in\n    statements\n}\n```\n闭包表达式可以使用变量、常量以及`inout`类型作为参数，但是不能提供默认值。也可以在参数列表的最后使用可变参数，元组也可以作为参数和返回值。\n\n下面例子展示了上面`sortFun(_:_:)`函数对应的闭包表达式版本的代码：\n``` Swift\nsortedNames = names.sort({\n    (s1:String, s2:String)->Bool in\n    return s1 < s2\n})\n```\n需要注意的是内联闭包参数和返回值类型申明与`sortFun(_:_:)`类型申明相同。两种方式中，都写成了`(s1:String, s2:String)->Bool`。然而在内联表达式中，函数和返回值类型都写在大括号内，而不是大括号外。\n闭包函数体部分由关键字`in`引入。该关键字表示闭包的参数和返回值类型都已定义完成，闭包函数体即将开始。由于这个闭包函数体部分如此短，以至于可以将其写成一行代码：\n``` Swift\nsortedNames = names.sort({(s1:String, s2:String) -> Bool in return s1 < s2})\n```\n该例中`sort(_:)`方法的整体调用保持不变，一对圆括号仍然包裹住了方法的整个参数。然而，参数现在变成了内联闭包。\n\n### 根据上下文推断类型\n\n因为排序闭包函数是作为`sort(_:)`方法参数传入的，Swift可判断其参数和返回值的类型。`sort(_:)`方法被一个字符串数组调用，此参数必须是`(String, String)->Bool`类型的函数。这意味着`(String, String)`和`Bool`类型并不是必须作为闭包表达式定义的一部分。因为所有类型都可以被正确判断，返回箭头(`->`)和围绕在周围的括号也可以被省略：\n\n``` Swift\nsortedNames = names.sort({s1, s2 in return s1 > s2})\n```\n实际上任何情况下，通过内联闭包表达式构造的闭包作为参数传递给函数或方法时，都可以推断出闭包的参数和返回值类型。 这意味着闭包作为函数或者方法的参数时，您几乎不需要利用完整格式构造内联闭包。\n\n尽管如此，您仍然可以明确写出有着完整格式的闭包。如果完整格式的闭包能够提高代码的可读性，则可以采用完整格式的闭包。\n\n### 单表达式闭包隐式返回\n单行表达式闭包可以通过省略`return`关键字来隐式返回单行表达式的结果，如上面版本代码可以改写为：\n``` Swift\nsortedNames = names.sort({s1, s2 in s1 > s2})\n```\n在这个例子中，`sort(_:)`方法的参数类型明确了闭包必须返回一个`Bool`类型值。因为闭包函数体只包含了一个单一表达式（`s1 > s2`），该表达式返回`Bool`类型值，因此这里没有歧义，`return`关键字可以省略。\n\n### 参数名称缩写\nSwift自动为内联包提供了参数名称缩写功能，你可以直接通过`$0`,`$1`,`$2`来顺序调用闭包的参数，以此类推。如果您在闭包表达式中使用参数名缩写，你可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。`in`关键字同样也可以被省略，因此闭包表达式完全由闭包函数体构成：\n``` Swift\nsortedNames = names.sort({$0 > $1})\n```\n在这个例子中，`$0`和`$1`表示闭包中第一个和第二个`String`类型的参数。\n\n### 运算符函数\n实际上还有更简单的方式来实现上面例子中的闭包表达式。Swift中`String`类型定义了关于大于符号(`>`)的字符串实现，其作为一个函数接收两个`String`类型的参数并返回`Bool`类型的值。而这正好与`sort(_:)`方法的参数需要的函数类型相符合。因此，您可以简单地传递一个大于号，Swift 可以自动推断出您想使用大于号的字符串函数实现：\n``` Swift\nsortedNames = names.sort(>)\n```\n\n## 尾随闭包\n\n如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用尾随闭包来增强函数的可读性。尾随闭包是一个书写在函数括号后的闭包表达式，函数支持将其作为最后一个参数调用：\n``` Swift\nfunc someFunctionThatTakesAClosure(closure: () -> Void) {\n    // 函数体部分\n}\n\n// 以下是不使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure({\n    // 闭包主体部分\n})\n\n// 以下是使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure() {\n    // 闭包主体部分\n}\n```\n\n所以上面`sort(_:)`方法参数字符串排序闭包可以改写为\n``` Swift\nsortedNumbers = numbers.sort{$0 > $1}\n```\n如果函数只需要闭包表达式一个参数，当使用尾随闭包时可以把`()`省略\n``` Swift\nsortedNumbers = numbers.sort(){$0 > $1}\n```\n当闭包非常长以至于不能在一行进行书写，尾随闭包变得非常有用。举个例子来说，Swifte的`Array`类型有一个`map(_:)`方法，其获取一个闭包表达式作为唯一参数。该闭包函数会为数组中的额每一个元素调用一次，并返回该元素所映射的值。具体的映射方式和返回值类型由闭包来指定。当提供给数组的闭包用于数组每个元素后，`map(_:)`方法将返回一个新的数组，数组中包含了与原数组中的元素一一对应的映射后的值。\n``` Swift\nlet digitNames = [\n    0:\"Zero\", 1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\",\n    5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"\n]\n\nnumbers = [34, 65, 89]\n\nlet strings = numbers.map {\n    (number) -> String in\n    \n    var number = number\n    var output = \"\"\n    \n    while number > 0 {\n        output = digitNames[number % 10]! + output\n        number /= 10\n    }\n    \n    return output\n}\n\nprint(strings)\n```\n上面示例代码展示了如何在`map(_:)`方法中使用尾随闭包将`Int`类型的数组`[34, 65, 89]`转换为包含对应`String`类型值的数组`[\"ThreeFour\", \"SixFive\", \"EightNine\"]`。\n`map(_:)`为数组中每一个元素调用了闭包表达式。您不需要指定闭包的输入参数`number`的类型，因为可以通过要映射的数组类型进行推断。\n在该例中，局部变量`number`的值由闭包中的`numbe`r参数获得,因此可以在闭包函数体内对其进行修改，(闭包或者函数的参数总是固定的),闭包表达式指定了返回类型为`String`，以表明存储映射值的新数组类型为`String`。\n\n闭包表达式在每次被调用的时候创建了一个叫做`output`的字符串并返回。其使用求余运算符（`number % 10`）计算最后一位数字并利用`digitNames`字典获取所映射的字符串。\n\n> 注：字典digitNames下标后跟着一个叹号（`!`），因为字典下标返回一个可选值（optional value），表明该键不存在时会查找失败。在上例中，由于可以确定`number % 10`总是digitNames字典的有效下标，因此叹号可以用于强制解包 (force-unwrap) 存储在下标的可选类型的返回值中的`String`类型的值。\n\n## 捕获值\n闭包可以在其被定义的上下文中捕获常量或者变量。即使定义这些常量或变量的作用域已经不在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift中可捕获值的最简单的形势就是嵌套函数，也就是定义在其它函数内的函数。嵌套函数可以捕获其外部函数所有的参数以及常量和变量。\n\n举个例子：\n``` Swift\nfunc makeIncrementor(forIncrement amount: Int) -> () -> Int {\n    var runningTotal = 0\n    func incrementor() -> Int {\n        runningTotal += amount\n        return runningTotal\n    }\n    return incrementor\n}\n\nlet incrementByOne = makeIncrementor(forIncrement: 1)\nincrementByOne()//返回1\nincrementByOne()//返回2\n\nlet incrementByTen = makeIncrementor(forIncrement: 10)\nincrementByTen()//返回10\nincrementByOne()//返回3\n```\n上面例子中有一个叫`makeIncrementor`的函数，它包含了一个叫`incrementor`的嵌套函数。嵌套函数`incrementor`从上下文捕获了两个值`runningTotal`和`amount`，捕获值后`makeIncrementor`将`incrementor`作为闭包返回。每次调用`incrementor`时，它会以`amount`作为增量增加`runningTotal`的值。\n`makeIncrementor`函数返回类型为`() -> Int`，这意味着它返回的是一个函数，而不是一个简单类型的值。该函数在每次调用时不接受参数，只返回一个`Int`类型的值。\n`makeIncrementer(forIncrement:)`又一个`Int`类型的参数，其外部参数名为`forIncrement`，内部参数名为`amount`，该参数表示每次`incrementor`被调用时`runningTotal`将要增加的量。\n嵌套函数`incrementor`用来执行实际的增加操作，使`runningTotal`增加`amount`，并将其返回。\n如果我们单独看`incrementor()`这个函数，会发现不同寻常\n``` Swift\nfunc incrementor() -> Int {\n    runningTotal += amount\n    return runningTotal\n}\n```\n`incrementor()`并没有接受任何参数，但是在函数体内访问了`runningTotal`和`amount`，这是因为它从外围函数捕获了`runningTotal`和`amount`变量的引用。捕获引用保证了`runningTotal`和`amount`变量在调用完`makeIncrementor`或不会消失，并且保证在下一次执行`incrementer`函数时`runningTotal`依然存在。\n> 注：为了优化，如果一个值是不可变的，Swift可能会改为捕获并保存一份对值的拷贝。Swift也会负责被捕获变量的所有内存管理工作。\n\n``` Swift\nlet incrementByOne = makeIncrementor(forIncrement: 1)\nincrementByOne()//返回1\nincrementByOne()//返回2\n\nlet incrementByTen = makeIncrementor(forIncrement: 10)\nincrementByTen()//返回10\nincrementByOne()//返回3\nincrementByTen()//返回20\n```\n如果您创建了另一个`incrementor`，它会有属于它自己的一个全新、独立的`runningTotal`变量的引用：\n再次调用原来的`incrementByOne`会在原来的变量`runningTotal`上继续增加值，该变量和`incrementByTen`中捕获的变量没有任何联系。\n> 注：如果您将闭包赋值给一个类实例的属性，并且该闭包通过访问该实例或其成员而捕获了该实例，您将创建一个在闭包和该实例间的循环强引用。Swift 使用捕获列表来打破这种循环强引用。\n\n## 闭包是引用类型\n上面的例子中，`incrementByOne`和`incrementByTen`是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。\n无论你将函数或者闭包赋值给一个常量还是变量，实际上都是将常量或者变量的值设置为对应函数或闭包的引用。。上面的示例中，指向闭包的引用`incrementByTen`是一个常量，而非闭包内容本身。\n这也意味着如果您将闭包赋值给了两个不同的常量或变量，两个值都会指向同一个闭包：\n``` Swift\nlet alsoIncrementByTen = incrementByTen\nalsoIncrementByTen()//返回30\n```\n\n## 非逃逸闭包\n当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注`@noescape`，用来指明这个闭包时不允许“逃逸”出这个函数的。将闭包标注`@noescape`能使编译器知道这个闭包的生命周期（闭包只能在函数体中被执行，不能脱离函数体执行，所以编译器明确知道运行时的上下文），从而可以进行一些比较激进的优化。\n`Array`中提供的`sort(_:)`方法接受一个用来进行元素比较的闭包作为函数，这个参数被标注了`@noescape`，因为它确保自己在排序结束后就没用了。\n``` Swift\nfunc someFunctionWithNoescapeClosure(@noescape closure: () -> Void) {\n    closure()\n}\n```\n`someFunctionWithNoescapeClosure`定义了一个传入非逃逸闭包的函数。\n一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。比如，很多启动异步操作的函数接受一个闭包参数作为completion handler。这类函数会在异步操作开始之后立即返回，但是闭包直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。例如：\n``` Swift\nvar completionHandlers:[() -> Void] = []\nfunc someFunctionWithEscapingClosure(completionHandler:()->Void) -> Void {\n    completionHandlers.append(completionHandler)\n}\n```\n`someFunctionWithEscapingClosure(_:)`函数接受一个闭包作为参数，该闭包被添加到一个函数外定义的数组中。如果你试图将这个参数标注为`@noescape`将会得到一个编译错误。\n将闭包标注为`@noescape`使你能在闭包中隐式地引用`self`。\n``` Swift\nclass ExClass {\n    var x = 1\n    func doSomething() -> Void {\n        someFunctionWithEscapingClosure({self.x = 120})\n        someFunctionWithEscapingClosure({self.x = 10})\n        someFunctionWithNoescapeClosure({x = 20})\n    }\n}\n\nlet instance = ExClass()\ninstance.doSomething()\nprint(instance.x)\n\ncompletionHandlers.first?()\nprint(instance.x)\n\ncompletionHandlers.last?()\nprint(instance.x)\n```","slug":"Swift学习笔记之闭包","published":1,"updated":"2022-05-19T03:13:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo0003hl1l3hrmh3pkt","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？</p>\n<blockquote>\n<p>闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。</p>\n</blockquote>\n<p>闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。</p>\n<span id=\"more\"></span>\n\n<p>全局和嵌套函数其实也是特殊的闭包，闭包采取如下三种形式之一：</p>\n<ul>\n<li>全局函数是一个有名字但不会捕获任何值的闭包</li>\n<li>嵌套函数是一个有名字并可以捕获其封闭函数内值的闭包</li>\n<li>闭包表达式是一个利用轻量级语法    所写的可以捕获其上下文中变量或常量值的匿名闭包</li>\n</ul>\n<p>Swift表达式拥有简洁的风格，并鼓励在常见场景进行语法优化，主要有如下优化方式</p>\n<ul>\n<li>利用上下文推断判断参数和返回值类型</li>\n<li>隐式返回单表达式闭包，即单表达式可以省略<code>return</code>关键字</li>\n<li>参数名称缩写</li>\n<li>尾随（Trailing）闭包语法</li>\n</ul>\n<h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><p>闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变得简单明了。下面闭包表达式的例子通过几次迭代展示了<code>sort</code>方法定义和语法优化的方式。每一次都用更简洁的方式描述了相同的功能。</p>\n<h3 id=\"sort方法\"><a href=\"#sort方法\" class=\"headerlink\" title=\"sort方法\"></a>sort方法</h3><p>Swift标准库提供了名为<code>sort</code>的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。一旦排序完成，<code>sort</code>方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组并不会被<code>sort</code>方法修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Jay&quot;</span>, <span class=\"string\">&quot;Vae&quot;</span>, <span class=\"string\">&quot;Jvaeyhcd&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sortFun</span>(<span class=\"params\">s1</span>:<span class=\"type\">String</span>, <span class=\"params\">s2</span>:<span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 <span class=\"operator\">&gt;</span> s2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sortedNames <span class=\"operator\">=</span> names.sort(sortFun)</span><br></pre></td></tr></table></figure>\n<p>该例子是对一个<code>String</code>类型的数组进行排序，因此排序闭包函数类型需为<code>(String,String)-&gt;Bool</code>。提供排序闭包函数的方式是写一个符合其类型要求的普通函数，并将其作为<code>sort</code>的参数传入。然而，这是一个相当冗长的方式，本质上只是写一个单表达式函数（<code>s1 &gt; s2</code>）。下面例子中，利用闭包表达式可以更好地构建一个内联排序闭包。</p>\n<h3 id=\"闭包表达式语法\"><a href=\"#闭包表达式语法\" class=\"headerlink\" title=\"闭包表达式语法\"></a>闭包表达式语法</h3><p>闭包表达式语法一般如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (parameters) -&gt; returnType <span class=\"keyword\">in</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>闭包表达式可以使用变量、常量以及<code>inout</code>类型作为参数，但是不能提供默认值。也可以在参数列表的最后使用可变参数，元组也可以作为参数和返回值。</p>\n<p>下面例子展示了上面<code>sortFun(_:_:)</code>函数对应的闭包表达式版本的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;</span><br><span class=\"line\">    (s1:<span class=\"type\">String</span>, s2:<span class=\"type\">String</span>)-&gt;<span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 <span class=\"operator\">&lt;</span> s2</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是内联闭包参数和返回值类型申明与<code>sortFun(_:_:)</code>类型申明相同。两种方式中，都写成了<code>(s1:String, s2:String)-&gt;Bool</code>。然而在内联表达式中，函数和返回值类型都写在大括号内，而不是大括号外。<br>闭包函数体部分由关键字<code>in</code>引入。该关键字表示闭包的参数和返回值类型都已定义完成，闭包函数体即将开始。由于这个闭包函数体部分如此短，以至于可以将其写成一行代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;(s1:<span class=\"type\">String</span>, s2:<span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 <span class=\"operator\">&lt;</span> s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>该例中<code>sort(_:)</code>方法的整体调用保持不变，一对圆括号仍然包裹住了方法的整个参数。然而，参数现在变成了内联闭包。</p>\n<h3 id=\"根据上下文推断类型\"><a href=\"#根据上下文推断类型\" class=\"headerlink\" title=\"根据上下文推断类型\"></a>根据上下文推断类型</h3><p>因为排序闭包函数是作为<code>sort(_:)</code>方法参数传入的，Swift可判断其参数和返回值的类型。<code>sort(_:)</code>方法被一个字符串数组调用，此参数必须是<code>(String, String)-&gt;Bool</code>类型的函数。这意味着<code>(String, String)</code>和<code>Bool</code>类型并不是必须作为闭包表达式定义的一部分。因为所有类型都可以被正确判断，返回箭头(<code>-&gt;</code>)和围绕在周围的括号也可以被省略：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 <span class=\"operator\">&gt;</span> s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际上任何情况下，通过内联闭包表达式构造的闭包作为参数传递给函数或方法时，都可以推断出闭包的参数和返回值类型。 这意味着闭包作为函数或者方法的参数时，您几乎不需要利用完整格式构造内联闭包。</p>\n<p>尽管如此，您仍然可以明确写出有着完整格式的闭包。如果完整格式的闭包能够提高代码的可读性，则可以采用完整格式的闭包。</p>\n<h3 id=\"单表达式闭包隐式返回\"><a href=\"#单表达式闭包隐式返回\" class=\"headerlink\" title=\"单表达式闭包隐式返回\"></a>单表达式闭包隐式返回</h3><p>单行表达式闭包可以通过省略<code>return</code>关键字来隐式返回单行表达式的结果，如上面版本代码可以改写为：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;s1, s2 <span class=\"keyword\">in</span> s1 <span class=\"operator\">&gt;</span> s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，<code>sort(_:)</code>方法的参数类型明确了闭包必须返回一个<code>Bool</code>类型值。因为闭包函数体只包含了一个单一表达式（<code>s1 &gt; s2</code>），该表达式返回<code>Bool</code>类型值，因此这里没有歧义，<code>return</code>关键字可以省略。</p>\n<h3 id=\"参数名称缩写\"><a href=\"#参数名称缩写\" class=\"headerlink\" title=\"参数名称缩写\"></a>参数名称缩写</h3><p>Swift自动为内联包提供了参数名称缩写功能，你可以直接通过<code>$0</code>,<code>$1</code>,<code>$2</code>来顺序调用闭包的参数，以此类推。如果您在闭包表达式中使用参数名缩写，你可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。<code>in</code>关键字同样也可以被省略，因此闭包表达式完全由闭包函数体构成：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;<span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，<code>$0</code>和<code>$1</code>表示闭包中第一个和第二个<code>String</code>类型的参数。</p>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>实际上还有更简单的方式来实现上面例子中的闭包表达式。Swift中<code>String</code>类型定义了关于大于符号(<code>&gt;</code>)的字符串实现，其作为一个函数接收两个<code>String</code>类型的参数并返回<code>Bool</code>类型的值。而这正好与<code>sort(_:)</code>方法的参数需要的函数类型相符合。因此，您可以简单地传递一个大于号，Swift 可以自动推断出您想使用大于号的字符串函数实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(<span class=\"operator\">&gt;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h2><p>如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用尾随闭包来增强函数的可读性。尾随闭包是一个书写在函数括号后的闭包表达式，函数支持将其作为最后一个参数调用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunctionThatTakesAClosure</span>(<span class=\"params\">closure</span>: () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体部分</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下是不使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下是使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以上面<code>sort(_:)</code>方法参数字符串排序闭包可以改写为</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNumbers <span class=\"operator\">=</span> numbers.sort&#123;<span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果函数只需要闭包表达式一个参数，当使用尾随闭包时可以把<code>()</code>省略</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNumbers <span class=\"operator\">=</span> numbers.sort()&#123;<span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>当闭包非常长以至于不能在一行进行书写，尾随闭包变得非常有用。举个例子来说，Swifte的<code>Array</code>类型有一个<code>map(_:)</code>方法，其获取一个闭包表达式作为唯一参数。该闭包函数会为数组中的额每一个元素调用一次，并返回该元素所映射的值。具体的映射方式和返回值类型由闭包来指定。当提供给数组的闭包用于数组每个元素后，<code>map(_:)</code>方法将返回一个新的数组，数组中包含了与原数组中的元素一一对应的映射后的值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> digitNames <span class=\"operator\">=</span> [</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">&quot;Zero&quot;</span>, <span class=\"number\">1</span>:<span class=\"string\">&quot;One&quot;</span>, <span class=\"number\">2</span>:<span class=\"string\">&quot;Two&quot;</span>, <span class=\"number\">3</span>:<span class=\"string\">&quot;Three&quot;</span>, <span class=\"number\">4</span>:<span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>:<span class=\"string\">&quot;Five&quot;</span>, <span class=\"number\">6</span>:<span class=\"string\">&quot;Six&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;Seven&quot;</span>, <span class=\"number\">8</span>:<span class=\"string\">&quot;Eight&quot;</span>, <span class=\"number\">9</span>:<span class=\"string\">&quot;Nine&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">numbers <span class=\"operator\">=</span> [<span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">89</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings <span class=\"operator\">=</span> numbers.map &#123;</span><br><span class=\"line\">    (number) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> number <span class=\"operator\">=</span> number</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> number <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        output <span class=\"operator\">=</span> digitNames[number <span class=\"operator\">%</span> <span class=\"number\">10</span>]<span class=\"operator\">!</span> <span class=\"operator\">+</span> output</span><br><span class=\"line\">        number <span class=\"operator\">/=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(strings)</span><br></pre></td></tr></table></figure>\n<p>上面示例代码展示了如何在<code>map(_:)</code>方法中使用尾随闭包将<code>Int</code>类型的数组<code>[34, 65, 89]</code>转换为包含对应<code>String</code>类型值的数组<code>[&quot;ThreeFour&quot;, &quot;SixFive&quot;, &quot;EightNine&quot;]</code>。<br><code>map(_:)</code>为数组中每一个元素调用了闭包表达式。您不需要指定闭包的输入参数<code>number</code>的类型，因为可以通过要映射的数组类型进行推断。<br>在该例中，局部变量<code>number</code>的值由闭包中的<code>numbe</code>r参数获得,因此可以在闭包函数体内对其进行修改，(闭包或者函数的参数总是固定的),闭包表达式指定了返回类型为<code>String</code>，以表明存储映射值的新数组类型为<code>String</code>。</p>\n<p>闭包表达式在每次被调用的时候创建了一个叫做<code>output</code>的字符串并返回。其使用求余运算符（<code>number % 10</code>）计算最后一位数字并利用<code>digitNames</code>字典获取所映射的字符串。</p>\n<blockquote>\n<p>注：字典digitNames下标后跟着一个叹号（<code>!</code>），因为字典下标返回一个可选值（optional value），表明该键不存在时会查找失败。在上例中，由于可以确定<code>number % 10</code>总是digitNames字典的有效下标，因此叹号可以用于强制解包 (force-unwrap) 存储在下标的可选类型的返回值中的<code>String</code>类型的值。</p>\n</blockquote>\n<h2 id=\"捕获值\"><a href=\"#捕获值\" class=\"headerlink\" title=\"捕获值\"></a>捕获值</h2><p>闭包可以在其被定义的上下文中捕获常量或者变量。即使定义这些常量或变量的作用域已经不在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift中可捕获值的最简单的形势就是嵌套函数，也就是定义在其它函数内的函数。嵌套函数可以捕获其外部函数所有的参数以及常量和变量。</p>\n<p>举个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementor</span>(<span class=\"params\">forIncrement</span> <span class=\"params\">amount</span>: <span class=\"type\">Int</span>) -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementor</span>() -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> amount</span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByOne <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">1</span>)</span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回1</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByTen <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">10</span>)</span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回10</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回3</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中有一个叫<code>makeIncrementor</code>的函数，它包含了一个叫<code>incrementor</code>的嵌套函数。嵌套函数<code>incrementor</code>从上下文捕获了两个值<code>runningTotal</code>和<code>amount</code>，捕获值后<code>makeIncrementor</code>将<code>incrementor</code>作为闭包返回。每次调用<code>incrementor</code>时，它会以<code>amount</code>作为增量增加<code>runningTotal</code>的值。<br><code>makeIncrementor</code>函数返回类型为<code>() -&gt; Int</code>，这意味着它返回的是一个函数，而不是一个简单类型的值。该函数在每次调用时不接受参数，只返回一个<code>Int</code>类型的值。<br><code>makeIncrementer(forIncrement:)</code>又一个<code>Int</code>类型的参数，其外部参数名为<code>forIncrement</code>，内部参数名为<code>amount</code>，该参数表示每次<code>incrementor</code>被调用时<code>runningTotal</code>将要增加的量。<br>嵌套函数<code>incrementor</code>用来执行实际的增加操作，使<code>runningTotal</code>增加<code>amount</code>，并将其返回。<br>如果我们单独看<code>incrementor()</code>这个函数，会发现不同寻常</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">incrementor</span>() -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    runningTotal <span class=\"operator\">+=</span> amount</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>incrementor()</code>并没有接受任何参数，但是在函数体内访问了<code>runningTotal</code>和<code>amount</code>，这是因为它从外围函数捕获了<code>runningTotal</code>和<code>amount</code>变量的引用。捕获引用保证了<code>runningTotal</code>和<code>amount</code>变量在调用完<code>makeIncrementor</code>或不会消失，并且保证在下一次执行<code>incrementer</code>函数时<code>runningTotal</code>依然存在。</p>\n<blockquote>\n<p>注：为了优化，如果一个值是不可变的，Swift可能会改为捕获并保存一份对值的拷贝。Swift也会负责被捕获变量的所有内存管理工作。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> incrementByOne <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">1</span>)</span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回1</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByTen <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">10</span>)</span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回10</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回3</span></span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回20</span></span><br></pre></td></tr></table></figure>\n<p>如果您创建了另一个<code>incrementor</code>，它会有属于它自己的一个全新、独立的<code>runningTotal</code>变量的引用：<br>再次调用原来的<code>incrementByOne</code>会在原来的变量<code>runningTotal</code>上继续增加值，该变量和<code>incrementByTen</code>中捕获的变量没有任何联系。</p>\n<blockquote>\n<p>注：如果您将闭包赋值给一个类实例的属性，并且该闭包通过访问该实例或其成员而捕获了该实例，您将创建一个在闭包和该实例间的循环强引用。Swift 使用捕获列表来打破这种循环强引用。</p>\n</blockquote>\n<h2 id=\"闭包是引用类型\"><a href=\"#闭包是引用类型\" class=\"headerlink\" title=\"闭包是引用类型\"></a>闭包是引用类型</h2><p>上面的例子中，<code>incrementByOne</code>和<code>incrementByTen</code>是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。<br>无论你将函数或者闭包赋值给一个常量还是变量，实际上都是将常量或者变量的值设置为对应函数或闭包的引用。。上面的示例中，指向闭包的引用<code>incrementByTen</code>是一个常量，而非闭包内容本身。<br>这也意味着如果您将闭包赋值给了两个不同的常量或变量，两个值都会指向同一个闭包：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alsoIncrementByTen <span class=\"operator\">=</span> incrementByTen</span><br><span class=\"line\">alsoIncrementByTen()<span class=\"comment\">//返回30</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"非逃逸闭包\"><a href=\"#非逃逸闭包\" class=\"headerlink\" title=\"非逃逸闭包\"></a>非逃逸闭包</h2><p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注<code>@noescape</code>，用来指明这个闭包时不允许“逃逸”出这个函数的。将闭包标注<code>@noescape</code>能使编译器知道这个闭包的生命周期（闭包只能在函数体中被执行，不能脱离函数体执行，所以编译器明确知道运行时的上下文），从而可以进行一些比较激进的优化。<br><code>Array</code>中提供的<code>sort(_:)</code>方法接受一个用来进行元素比较的闭包作为函数，这个参数被标注了<code>@noescape</code>，因为它确保自己在排序结束后就没用了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunctionWithNoescapeClosure</span>(<span class=\"meta\">@noescape</span> <span class=\"params\">closure</span>: () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    closure()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>someFunctionWithNoescapeClosure</code>定义了一个传入非逃逸闭包的函数。<br>一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。比如，很多启动异步操作的函数接受一个闭包参数作为completion handler。这类函数会在异步操作开始之后立即返回，但是闭包直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> completionHandlers:[() -&gt; <span class=\"type\">Void</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunctionWithEscapingClosure</span>(<span class=\"params\">completionHandler</span>:()-&gt;<span class=\"type\">Void</span>) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">    completionHandlers.append(completionHandler)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>someFunctionWithEscapingClosure(_:)</code>函数接受一个闭包作为参数，该闭包被添加到一个函数外定义的数组中。如果你试图将这个参数标注为<code>@noescape</code>将会得到一个编译错误。<br>将闭包标注为<code>@noescape</code>使你能在闭包中隐式地引用<code>self</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ExClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">doSomething</span>() -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">        someFunctionWithEscapingClosure(&#123;<span class=\"keyword\">self</span>.x <span class=\"operator\">=</span> <span class=\"number\">120</span>&#125;)</span><br><span class=\"line\">        someFunctionWithEscapingClosure(&#123;<span class=\"keyword\">self</span>.x <span class=\"operator\">=</span> <span class=\"number\">10</span>&#125;)</span><br><span class=\"line\">        someFunctionWithNoescapeClosure(&#123;x <span class=\"operator\">=</span> <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance <span class=\"operator\">=</span> <span class=\"type\">ExClass</span>()</span><br><span class=\"line\">instance.doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br><span class=\"line\"></span><br><span class=\"line\">completionHandlers.first<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br><span class=\"line\"></span><br><span class=\"line\">completionHandlers.last<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？</p>\n<blockquote>\n<p>闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。</p>\n</blockquote>\n<p>闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。</p>","more":"<p>全局和嵌套函数其实也是特殊的闭包，闭包采取如下三种形式之一：</p>\n<ul>\n<li>全局函数是一个有名字但不会捕获任何值的闭包</li>\n<li>嵌套函数是一个有名字并可以捕获其封闭函数内值的闭包</li>\n<li>闭包表达式是一个利用轻量级语法    所写的可以捕获其上下文中变量或常量值的匿名闭包</li>\n</ul>\n<p>Swift表达式拥有简洁的风格，并鼓励在常见场景进行语法优化，主要有如下优化方式</p>\n<ul>\n<li>利用上下文推断判断参数和返回值类型</li>\n<li>隐式返回单表达式闭包，即单表达式可以省略<code>return</code>关键字</li>\n<li>参数名称缩写</li>\n<li>尾随（Trailing）闭包语法</li>\n</ul>\n<h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><p>闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变得简单明了。下面闭包表达式的例子通过几次迭代展示了<code>sort</code>方法定义和语法优化的方式。每一次都用更简洁的方式描述了相同的功能。</p>\n<h3 id=\"sort方法\"><a href=\"#sort方法\" class=\"headerlink\" title=\"sort方法\"></a>sort方法</h3><p>Swift标准库提供了名为<code>sort</code>的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。一旦排序完成，<code>sort</code>方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组并不会被<code>sort</code>方法修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Jay&quot;</span>, <span class=\"string\">&quot;Vae&quot;</span>, <span class=\"string\">&quot;Jvaeyhcd&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">sortFun</span>(<span class=\"params\">s1</span>:<span class=\"type\">String</span>, <span class=\"params\">s2</span>:<span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 <span class=\"operator\">&gt;</span> s2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sortedNames <span class=\"operator\">=</span> names.sort(sortFun)</span><br></pre></td></tr></table></figure>\n<p>该例子是对一个<code>String</code>类型的数组进行排序，因此排序闭包函数类型需为<code>(String,String)-&gt;Bool</code>。提供排序闭包函数的方式是写一个符合其类型要求的普通函数，并将其作为<code>sort</code>的参数传入。然而，这是一个相当冗长的方式，本质上只是写一个单表达式函数（<code>s1 &gt; s2</code>）。下面例子中，利用闭包表达式可以更好地构建一个内联排序闭包。</p>\n<h3 id=\"闭包表达式语法\"><a href=\"#闭包表达式语法\" class=\"headerlink\" title=\"闭包表达式语法\"></a>闭包表达式语法</h3><p>闭包表达式语法一般如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (parameters) -&gt; returnType <span class=\"keyword\">in</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>闭包表达式可以使用变量、常量以及<code>inout</code>类型作为参数，但是不能提供默认值。也可以在参数列表的最后使用可变参数，元组也可以作为参数和返回值。</p>\n<p>下面例子展示了上面<code>sortFun(_:_:)</code>函数对应的闭包表达式版本的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;</span><br><span class=\"line\">    (s1:<span class=\"type\">String</span>, s2:<span class=\"type\">String</span>)-&gt;<span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 <span class=\"operator\">&lt;</span> s2</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是内联闭包参数和返回值类型申明与<code>sortFun(_:_:)</code>类型申明相同。两种方式中，都写成了<code>(s1:String, s2:String)-&gt;Bool</code>。然而在内联表达式中，函数和返回值类型都写在大括号内，而不是大括号外。<br>闭包函数体部分由关键字<code>in</code>引入。该关键字表示闭包的参数和返回值类型都已定义完成，闭包函数体即将开始。由于这个闭包函数体部分如此短，以至于可以将其写成一行代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;(s1:<span class=\"type\">String</span>, s2:<span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 <span class=\"operator\">&lt;</span> s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>该例中<code>sort(_:)</code>方法的整体调用保持不变，一对圆括号仍然包裹住了方法的整个参数。然而，参数现在变成了内联闭包。</p>\n<h3 id=\"根据上下文推断类型\"><a href=\"#根据上下文推断类型\" class=\"headerlink\" title=\"根据上下文推断类型\"></a>根据上下文推断类型</h3><p>因为排序闭包函数是作为<code>sort(_:)</code>方法参数传入的，Swift可判断其参数和返回值的类型。<code>sort(_:)</code>方法被一个字符串数组调用，此参数必须是<code>(String, String)-&gt;Bool</code>类型的函数。这意味着<code>(String, String)</code>和<code>Bool</code>类型并不是必须作为闭包表达式定义的一部分。因为所有类型都可以被正确判断，返回箭头(<code>-&gt;</code>)和围绕在周围的括号也可以被省略：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 <span class=\"operator\">&gt;</span> s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际上任何情况下，通过内联闭包表达式构造的闭包作为参数传递给函数或方法时，都可以推断出闭包的参数和返回值类型。 这意味着闭包作为函数或者方法的参数时，您几乎不需要利用完整格式构造内联闭包。</p>\n<p>尽管如此，您仍然可以明确写出有着完整格式的闭包。如果完整格式的闭包能够提高代码的可读性，则可以采用完整格式的闭包。</p>\n<h3 id=\"单表达式闭包隐式返回\"><a href=\"#单表达式闭包隐式返回\" class=\"headerlink\" title=\"单表达式闭包隐式返回\"></a>单表达式闭包隐式返回</h3><p>单行表达式闭包可以通过省略<code>return</code>关键字来隐式返回单行表达式的结果，如上面版本代码可以改写为：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;s1, s2 <span class=\"keyword\">in</span> s1 <span class=\"operator\">&gt;</span> s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，<code>sort(_:)</code>方法的参数类型明确了闭包必须返回一个<code>Bool</code>类型值。因为闭包函数体只包含了一个单一表达式（<code>s1 &gt; s2</code>），该表达式返回<code>Bool</code>类型值，因此这里没有歧义，<code>return</code>关键字可以省略。</p>\n<h3 id=\"参数名称缩写\"><a href=\"#参数名称缩写\" class=\"headerlink\" title=\"参数名称缩写\"></a>参数名称缩写</h3><p>Swift自动为内联包提供了参数名称缩写功能，你可以直接通过<code>$0</code>,<code>$1</code>,<code>$2</code>来顺序调用闭包的参数，以此类推。如果您在闭包表达式中使用参数名缩写，你可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。<code>in</code>关键字同样也可以被省略，因此闭包表达式完全由闭包函数体构成：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(&#123;<span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，<code>$0</code>和<code>$1</code>表示闭包中第一个和第二个<code>String</code>类型的参数。</p>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>实际上还有更简单的方式来实现上面例子中的闭包表达式。Swift中<code>String</code>类型定义了关于大于符号(<code>&gt;</code>)的字符串实现，其作为一个函数接收两个<code>String</code>类型的参数并返回<code>Bool</code>类型的值。而这正好与<code>sort(_:)</code>方法的参数需要的函数类型相符合。因此，您可以简单地传递一个大于号，Swift 可以自动推断出您想使用大于号的字符串函数实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames <span class=\"operator\">=</span> names.sort(<span class=\"operator\">&gt;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h2><p>如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用尾随闭包来增强函数的可读性。尾随闭包是一个书写在函数括号后的闭包表达式，函数支持将其作为最后一个参数调用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunctionThatTakesAClosure</span>(<span class=\"params\">closure</span>: () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体部分</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下是不使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下是使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以上面<code>sort(_:)</code>方法参数字符串排序闭包可以改写为</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNumbers <span class=\"operator\">=</span> numbers.sort&#123;<span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果函数只需要闭包表达式一个参数，当使用尾随闭包时可以把<code>()</code>省略</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNumbers <span class=\"operator\">=</span> numbers.sort()&#123;<span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>当闭包非常长以至于不能在一行进行书写，尾随闭包变得非常有用。举个例子来说，Swifte的<code>Array</code>类型有一个<code>map(_:)</code>方法，其获取一个闭包表达式作为唯一参数。该闭包函数会为数组中的额每一个元素调用一次，并返回该元素所映射的值。具体的映射方式和返回值类型由闭包来指定。当提供给数组的闭包用于数组每个元素后，<code>map(_:)</code>方法将返回一个新的数组，数组中包含了与原数组中的元素一一对应的映射后的值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> digitNames <span class=\"operator\">=</span> [</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">&quot;Zero&quot;</span>, <span class=\"number\">1</span>:<span class=\"string\">&quot;One&quot;</span>, <span class=\"number\">2</span>:<span class=\"string\">&quot;Two&quot;</span>, <span class=\"number\">3</span>:<span class=\"string\">&quot;Three&quot;</span>, <span class=\"number\">4</span>:<span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>:<span class=\"string\">&quot;Five&quot;</span>, <span class=\"number\">6</span>:<span class=\"string\">&quot;Six&quot;</span>, <span class=\"number\">7</span>:<span class=\"string\">&quot;Seven&quot;</span>, <span class=\"number\">8</span>:<span class=\"string\">&quot;Eight&quot;</span>, <span class=\"number\">9</span>:<span class=\"string\">&quot;Nine&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">numbers <span class=\"operator\">=</span> [<span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">89</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings <span class=\"operator\">=</span> numbers.map &#123;</span><br><span class=\"line\">    (number) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> number <span class=\"operator\">=</span> number</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> number <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        output <span class=\"operator\">=</span> digitNames[number <span class=\"operator\">%</span> <span class=\"number\">10</span>]<span class=\"operator\">!</span> <span class=\"operator\">+</span> output</span><br><span class=\"line\">        number <span class=\"operator\">/=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(strings)</span><br></pre></td></tr></table></figure>\n<p>上面示例代码展示了如何在<code>map(_:)</code>方法中使用尾随闭包将<code>Int</code>类型的数组<code>[34, 65, 89]</code>转换为包含对应<code>String</code>类型值的数组<code>[&quot;ThreeFour&quot;, &quot;SixFive&quot;, &quot;EightNine&quot;]</code>。<br><code>map(_:)</code>为数组中每一个元素调用了闭包表达式。您不需要指定闭包的输入参数<code>number</code>的类型，因为可以通过要映射的数组类型进行推断。<br>在该例中，局部变量<code>number</code>的值由闭包中的<code>numbe</code>r参数获得,因此可以在闭包函数体内对其进行修改，(闭包或者函数的参数总是固定的),闭包表达式指定了返回类型为<code>String</code>，以表明存储映射值的新数组类型为<code>String</code>。</p>\n<p>闭包表达式在每次被调用的时候创建了一个叫做<code>output</code>的字符串并返回。其使用求余运算符（<code>number % 10</code>）计算最后一位数字并利用<code>digitNames</code>字典获取所映射的字符串。</p>\n<blockquote>\n<p>注：字典digitNames下标后跟着一个叹号（<code>!</code>），因为字典下标返回一个可选值（optional value），表明该键不存在时会查找失败。在上例中，由于可以确定<code>number % 10</code>总是digitNames字典的有效下标，因此叹号可以用于强制解包 (force-unwrap) 存储在下标的可选类型的返回值中的<code>String</code>类型的值。</p>\n</blockquote>\n<h2 id=\"捕获值\"><a href=\"#捕获值\" class=\"headerlink\" title=\"捕获值\"></a>捕获值</h2><p>闭包可以在其被定义的上下文中捕获常量或者变量。即使定义这些常量或变量的作用域已经不在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift中可捕获值的最简单的形势就是嵌套函数，也就是定义在其它函数内的函数。嵌套函数可以捕获其外部函数所有的参数以及常量和变量。</p>\n<p>举个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementor</span>(<span class=\"params\">forIncrement</span> <span class=\"params\">amount</span>: <span class=\"type\">Int</span>) -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementor</span>() -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> amount</span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByOne <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">1</span>)</span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回1</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByTen <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">10</span>)</span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回10</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回3</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中有一个叫<code>makeIncrementor</code>的函数，它包含了一个叫<code>incrementor</code>的嵌套函数。嵌套函数<code>incrementor</code>从上下文捕获了两个值<code>runningTotal</code>和<code>amount</code>，捕获值后<code>makeIncrementor</code>将<code>incrementor</code>作为闭包返回。每次调用<code>incrementor</code>时，它会以<code>amount</code>作为增量增加<code>runningTotal</code>的值。<br><code>makeIncrementor</code>函数返回类型为<code>() -&gt; Int</code>，这意味着它返回的是一个函数，而不是一个简单类型的值。该函数在每次调用时不接受参数，只返回一个<code>Int</code>类型的值。<br><code>makeIncrementer(forIncrement:)</code>又一个<code>Int</code>类型的参数，其外部参数名为<code>forIncrement</code>，内部参数名为<code>amount</code>，该参数表示每次<code>incrementor</code>被调用时<code>runningTotal</code>将要增加的量。<br>嵌套函数<code>incrementor</code>用来执行实际的增加操作，使<code>runningTotal</code>增加<code>amount</code>，并将其返回。<br>如果我们单独看<code>incrementor()</code>这个函数，会发现不同寻常</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">incrementor</span>() -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    runningTotal <span class=\"operator\">+=</span> amount</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>incrementor()</code>并没有接受任何参数，但是在函数体内访问了<code>runningTotal</code>和<code>amount</code>，这是因为它从外围函数捕获了<code>runningTotal</code>和<code>amount</code>变量的引用。捕获引用保证了<code>runningTotal</code>和<code>amount</code>变量在调用完<code>makeIncrementor</code>或不会消失，并且保证在下一次执行<code>incrementer</code>函数时<code>runningTotal</code>依然存在。</p>\n<blockquote>\n<p>注：为了优化，如果一个值是不可变的，Swift可能会改为捕获并保存一份对值的拷贝。Swift也会负责被捕获变量的所有内存管理工作。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> incrementByOne <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">1</span>)</span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回1</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByTen <span class=\"operator\">=</span> makeIncrementor(forIncrement: <span class=\"number\">10</span>)</span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回10</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回3</span></span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回20</span></span><br></pre></td></tr></table></figure>\n<p>如果您创建了另一个<code>incrementor</code>，它会有属于它自己的一个全新、独立的<code>runningTotal</code>变量的引用：<br>再次调用原来的<code>incrementByOne</code>会在原来的变量<code>runningTotal</code>上继续增加值，该变量和<code>incrementByTen</code>中捕获的变量没有任何联系。</p>\n<blockquote>\n<p>注：如果您将闭包赋值给一个类实例的属性，并且该闭包通过访问该实例或其成员而捕获了该实例，您将创建一个在闭包和该实例间的循环强引用。Swift 使用捕获列表来打破这种循环强引用。</p>\n</blockquote>\n<h2 id=\"闭包是引用类型\"><a href=\"#闭包是引用类型\" class=\"headerlink\" title=\"闭包是引用类型\"></a>闭包是引用类型</h2><p>上面的例子中，<code>incrementByOne</code>和<code>incrementByTen</code>是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。<br>无论你将函数或者闭包赋值给一个常量还是变量，实际上都是将常量或者变量的值设置为对应函数或闭包的引用。。上面的示例中，指向闭包的引用<code>incrementByTen</code>是一个常量，而非闭包内容本身。<br>这也意味着如果您将闭包赋值给了两个不同的常量或变量，两个值都会指向同一个闭包：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alsoIncrementByTen <span class=\"operator\">=</span> incrementByTen</span><br><span class=\"line\">alsoIncrementByTen()<span class=\"comment\">//返回30</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"非逃逸闭包\"><a href=\"#非逃逸闭包\" class=\"headerlink\" title=\"非逃逸闭包\"></a>非逃逸闭包</h2><p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注<code>@noescape</code>，用来指明这个闭包时不允许“逃逸”出这个函数的。将闭包标注<code>@noescape</code>能使编译器知道这个闭包的生命周期（闭包只能在函数体中被执行，不能脱离函数体执行，所以编译器明确知道运行时的上下文），从而可以进行一些比较激进的优化。<br><code>Array</code>中提供的<code>sort(_:)</code>方法接受一个用来进行元素比较的闭包作为函数，这个参数被标注了<code>@noescape</code>，因为它确保自己在排序结束后就没用了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunctionWithNoescapeClosure</span>(<span class=\"meta\">@noescape</span> <span class=\"params\">closure</span>: () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    closure()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>someFunctionWithNoescapeClosure</code>定义了一个传入非逃逸闭包的函数。<br>一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。比如，很多启动异步操作的函数接受一个闭包参数作为completion handler。这类函数会在异步操作开始之后立即返回，但是闭包直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> completionHandlers:[() -&gt; <span class=\"type\">Void</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunctionWithEscapingClosure</span>(<span class=\"params\">completionHandler</span>:()-&gt;<span class=\"type\">Void</span>) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">    completionHandlers.append(completionHandler)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>someFunctionWithEscapingClosure(_:)</code>函数接受一个闭包作为参数，该闭包被添加到一个函数外定义的数组中。如果你试图将这个参数标注为<code>@noescape</code>将会得到一个编译错误。<br>将闭包标注为<code>@noescape</code>使你能在闭包中隐式地引用<code>self</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ExClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">doSomething</span>() -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">        someFunctionWithEscapingClosure(&#123;<span class=\"keyword\">self</span>.x <span class=\"operator\">=</span> <span class=\"number\">120</span>&#125;)</span><br><span class=\"line\">        someFunctionWithEscapingClosure(&#123;<span class=\"keyword\">self</span>.x <span class=\"operator\">=</span> <span class=\"number\">10</span>&#125;)</span><br><span class=\"line\">        someFunctionWithNoescapeClosure(&#123;x <span class=\"operator\">=</span> <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance <span class=\"operator\">=</span> <span class=\"type\">ExClass</span>()</span><br><span class=\"line\">instance.doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br><span class=\"line\"></span><br><span class=\"line\">completionHandlers.first<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br><span class=\"line\"></span><br><span class=\"line\">completionHandlers.last<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br></pre></td></tr></table></figure>"},{"title":"iOS打包上传常见错误以及解决办法","date":"2016-10-18T08:02:20.000Z","abbrlink":"44b8d78d98445413","_content":"\n关于打包上传至AppStore，大家都认为是最后一步了，其实到了这里往往会遇到很多的坑。对于踩过的坑我不想再踩第二篇，所以在此将我遇到的所有奇葩问题在此做一个记录，当作对自己的一个提醒，同时也分享给给位。\n\n## ERROR ITMS-90535\n\n* 首先这个原因导入了其他第三方导致的问题，首先找到友盟库里面的腾讯API,找到其中的info.plist文件：\n\n{% asset_img QQ201610180.png%}\n* 找到箭头所指向的一行,随后删掉 这一行 就可以了：\n\n{% asset_img QQ201610181.png%}\n<!-- more -->\n## ERROR ITMS-90635\n这个是由于项目中有使用到Cocoapods导入第三方的库使用bitcode造成的，此种错误我在网上找到了三种解决办法：\n### 方法一\n\n项目->targets->enable bitcode->no\n\npods->project->enable bitcode->no\n\n如果以前设置过，现在不行了，pods的enable bitcode改成yes，然后再改成no，专治抽风\n### 方法二\npodfile文件加入以下代码：\n\n``` bash\npost_install do |installer|\n    installer.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            config.build_settings['ENABLE_BITCODE'] = 'NO'\n        end\n    end\nend\n```\n### 方法三\n打包上传的时候，注意界面是否有复选框“include bitcode”，改成不勾选\n\n## ERROR ITMS-90168\n\n关于这个错误网上给的所有解决办法都是如下的办法：\n``` bash\n$ cd ~/.itmstransporter  \n$ rm update_check*  \n$ mv softwaresupport softwaresupport.bak  \n$ cd UploadTokens  \n$ rm *.token\n```\n\n## ERROR ITMS-4238\n\n出现这个错误的原因是iTunes Connect已经上传了一个相应版本号的包，然后现在上传的版本号没有修改，所以就出现了这个错误，解决办法十分简单，修改版本号，重新打包再上传就可以了。","source":"_posts/iOS打包上传常见错误以及解决办法.md","raw":"---\ntitle: iOS打包上传常见错误以及解决办法\ndate: 2016-10-18 16:02:20\ntags:\n  - iOS\ncategories: 技术杂谈\nabbrlink: 44b8d78d98445413\n---\n\n关于打包上传至AppStore，大家都认为是最后一步了，其实到了这里往往会遇到很多的坑。对于踩过的坑我不想再踩第二篇，所以在此将我遇到的所有奇葩问题在此做一个记录，当作对自己的一个提醒，同时也分享给给位。\n\n## ERROR ITMS-90535\n\n* 首先这个原因导入了其他第三方导致的问题，首先找到友盟库里面的腾讯API,找到其中的info.plist文件：\n\n{% asset_img QQ201610180.png%}\n* 找到箭头所指向的一行,随后删掉 这一行 就可以了：\n\n{% asset_img QQ201610181.png%}\n<!-- more -->\n## ERROR ITMS-90635\n这个是由于项目中有使用到Cocoapods导入第三方的库使用bitcode造成的，此种错误我在网上找到了三种解决办法：\n### 方法一\n\n项目->targets->enable bitcode->no\n\npods->project->enable bitcode->no\n\n如果以前设置过，现在不行了，pods的enable bitcode改成yes，然后再改成no，专治抽风\n### 方法二\npodfile文件加入以下代码：\n\n``` bash\npost_install do |installer|\n    installer.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            config.build_settings['ENABLE_BITCODE'] = 'NO'\n        end\n    end\nend\n```\n### 方法三\n打包上传的时候，注意界面是否有复选框“include bitcode”，改成不勾选\n\n## ERROR ITMS-90168\n\n关于这个错误网上给的所有解决办法都是如下的办法：\n``` bash\n$ cd ~/.itmstransporter  \n$ rm update_check*  \n$ mv softwaresupport softwaresupport.bak  \n$ cd UploadTokens  \n$ rm *.token\n```\n\n## ERROR ITMS-4238\n\n出现这个错误的原因是iTunes Connect已经上传了一个相应版本号的包，然后现在上传的版本号没有修改，所以就出现了这个错误，解决办法十分简单，修改版本号，重新打包再上传就可以了。","slug":"iOS打包上传常见错误以及解决办法","published":1,"updated":"2022-05-19T03:13:11.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo0003ll1l37tkl2ino","content":"<p>关于打包上传至AppStore，大家都认为是最后一步了，其实到了这里往往会遇到很多的坑。对于踩过的坑我不想再踩第二篇，所以在此将我遇到的所有奇葩问题在此做一个记录，当作对自己的一个提醒，同时也分享给给位。</p>\n<h2 id=\"ERROR-ITMS-90535\"><a href=\"#ERROR-ITMS-90535\" class=\"headerlink\" title=\"ERROR ITMS-90535\"></a>ERROR ITMS-90535</h2><ul>\n<li>首先这个原因导入了其他第三方导致的问题，首先找到友盟库里面的腾讯API,找到其中的info.plist文件：</li>\n</ul>\n<img src=\"/posts/44b8d78d98445413/QQ201610180.png\" class=\"\">\n<ul>\n<li>找到箭头所指向的一行,随后删掉 这一行 就可以了：</li>\n</ul>\n<img src=\"/posts/44b8d78d98445413/QQ201610181.png\" class=\"\">\n<span id=\"more\"></span>\n<h2 id=\"ERROR-ITMS-90635\"><a href=\"#ERROR-ITMS-90635\" class=\"headerlink\" title=\"ERROR ITMS-90635\"></a>ERROR ITMS-90635</h2><p>这个是由于项目中有使用到Cocoapods导入第三方的库使用bitcode造成的，此种错误我在网上找到了三种解决办法：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>项目-&gt;targets-&gt;enable bitcode-&gt;no</p>\n<p>pods-&gt;project-&gt;enable bitcode-&gt;no</p>\n<p>如果以前设置过，现在不行了，pods的enable bitcode改成yes，然后再改成no，专治抽风</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>podfile文件加入以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install <span class=\"keyword\">do</span> |installer|</span><br><span class=\"line\">    installer.pods_project.targets.each <span class=\"keyword\">do</span> |target|</span><br><span class=\"line\">        target.build_configurations.each <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\">            config.build_settings[<span class=\"string\">&#x27;ENABLE_BITCODE&#x27;</span>] = <span class=\"string\">&#x27;NO&#x27;</span></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>打包上传的时候，注意界面是否有复选框“include bitcode”，改成不勾选</p>\n<h2 id=\"ERROR-ITMS-90168\"><a href=\"#ERROR-ITMS-90168\" class=\"headerlink\" title=\"ERROR ITMS-90168\"></a>ERROR ITMS-90168</h2><p>关于这个错误网上给的所有解决办法都是如下的办法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.itmstransporter  </span><br><span class=\"line\">$ <span class=\"built_in\">rm</span> update_check*  </span><br><span class=\"line\">$ <span class=\"built_in\">mv</span> softwaresupport softwaresupport.bak  </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> UploadTokens  </span><br><span class=\"line\">$ <span class=\"built_in\">rm</span> *.token</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ERROR-ITMS-4238\"><a href=\"#ERROR-ITMS-4238\" class=\"headerlink\" title=\"ERROR ITMS-4238\"></a>ERROR ITMS-4238</h2><p>出现这个错误的原因是iTunes Connect已经上传了一个相应版本号的包，然后现在上传的版本号没有修改，所以就出现了这个错误，解决办法十分简单，修改版本号，重新打包再上传就可以了。</p>\n","site":{"data":{}},"excerpt":"<p>关于打包上传至AppStore，大家都认为是最后一步了，其实到了这里往往会遇到很多的坑。对于踩过的坑我不想再踩第二篇，所以在此将我遇到的所有奇葩问题在此做一个记录，当作对自己的一个提醒，同时也分享给给位。</p>\n<h2 id=\"ERROR-ITMS-90535\"><a href=\"#ERROR-ITMS-90535\" class=\"headerlink\" title=\"ERROR ITMS-90535\"></a>ERROR ITMS-90535</h2><ul>\n<li>首先这个原因导入了其他第三方导致的问题，首先找到友盟库里面的腾讯API,找到其中的info.plist文件：</li>\n</ul>\n<img src=\"/posts/44b8d78d98445413/QQ201610180.png\" class=\"\">\n<ul>\n<li>找到箭头所指向的一行,随后删掉 这一行 就可以了：</li>\n</ul>\n<img src=\"/posts/44b8d78d98445413/QQ201610181.png\" class=\"\">","more":"<h2 id=\"ERROR-ITMS-90635\"><a href=\"#ERROR-ITMS-90635\" class=\"headerlink\" title=\"ERROR ITMS-90635\"></a>ERROR ITMS-90635</h2><p>这个是由于项目中有使用到Cocoapods导入第三方的库使用bitcode造成的，此种错误我在网上找到了三种解决办法：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>项目-&gt;targets-&gt;enable bitcode-&gt;no</p>\n<p>pods-&gt;project-&gt;enable bitcode-&gt;no</p>\n<p>如果以前设置过，现在不行了，pods的enable bitcode改成yes，然后再改成no，专治抽风</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>podfile文件加入以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install <span class=\"keyword\">do</span> |installer|</span><br><span class=\"line\">    installer.pods_project.targets.each <span class=\"keyword\">do</span> |target|</span><br><span class=\"line\">        target.build_configurations.each <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\">            config.build_settings[<span class=\"string\">&#x27;ENABLE_BITCODE&#x27;</span>] = <span class=\"string\">&#x27;NO&#x27;</span></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>打包上传的时候，注意界面是否有复选框“include bitcode”，改成不勾选</p>\n<h2 id=\"ERROR-ITMS-90168\"><a href=\"#ERROR-ITMS-90168\" class=\"headerlink\" title=\"ERROR ITMS-90168\"></a>ERROR ITMS-90168</h2><p>关于这个错误网上给的所有解决办法都是如下的办法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.itmstransporter  </span><br><span class=\"line\">$ <span class=\"built_in\">rm</span> update_check*  </span><br><span class=\"line\">$ <span class=\"built_in\">mv</span> softwaresupport softwaresupport.bak  </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> UploadTokens  </span><br><span class=\"line\">$ <span class=\"built_in\">rm</span> *.token</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ERROR-ITMS-4238\"><a href=\"#ERROR-ITMS-4238\" class=\"headerlink\" title=\"ERROR ITMS-4238\"></a>ERROR ITMS-4238</h2><p>出现这个错误的原因是iTunes Connect已经上传了一个相应版本号的包，然后现在上传的版本号没有修改，所以就出现了这个错误，解决办法十分简单，修改版本号，重新打包再上传就可以了。</p>"},{"title":"iOS高级开发面试题（下）","date":"2017-08-06T05:27:26.000Z","abbrlink":"5f644c17f993a457","_content":"\n## objc使用什么机制管理对象内存？\n1. MRC(manual retain-release)手动内存管理。\n2. ARC(automatic reference counting)自动引用计数。\n3. Garbage collection（垃圾回收机制）但是iOS不支持垃圾回收。\nARC作为LLVM3.0编译器的一项特性，在iOS5.0（Xcode4）版本后推出的自动内存管理，节约时间，减少代码量，降低出错率。开发者不需要手动写入retain、release、autorelease三个关键字。\n\nARC通过retainCount的机制来决定对象是否需要释放，每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。\n<!-- more -->\n\n## 苹果为什么要废弃dispatch_get_current_queue？\n\n`dispatch_get_current_queue`容易造成死锁。\n\n说到被废弃的`dispatch_get_current_queue`不得不提一个概念：可重入。若一个程序或子程序可以“安全的被并行执行”，则称其为可重入的。\n\n若一个函数是可重入的，则该函数：\n1. 不能含有静态（全局）非常量数据。\n2. 不能返回静态（全局）非常量数据的地址。\n3. 只能处理由调用者提供的数据。\n4. 不能依赖于单实例模式资源的锁。\n5. 不能调用不可重入的函数\n\n有时候，我们希望知道当前执行的`queue`是谁，比如UI操作需要放在`mian queue`中执行。如果可以知道当前工作的`queue`是谁，就可以很方便的指定一段代码再特定的`queue`中执行。`dispatch_get_current_queue`正好能帮上忙。于是乎，在指定queue中做一些操作，就可以非常清晰的实现：\n``` objc\n\nvoid func(dispatch_queue_t queue, dispatch_block_t block)\n{\n    if (dispatch_get_current_queue() == queue) {\n        block();\n    } else {\n        dispatch_sync(queue, block);\n    }\n}\n```\n然后潜意识里觉得这个函数是可重入的。但当`target queue`恰好是`current queue`时，同步阻塞会导致死锁。\n``` objc\n\n- (void)deadLockFunc\n{\n    dispatch_queue_t queueA = dispatch_queue_create(\"com.yiyaaixuexi.queueA\", NULL);\n    dispatch_queue_t queueB = dispatch_queue_create(\"com.yiyaaixuexi.queueB\", NULL);\n    dispatch_sync(queueA, ^{\n        dispatch_sync(queueB, ^{\n            dispatch_block_t block = ^{\n                //do something\n            };\n            func(queueA, block);\n        });\n    });\n}\n```\n问题出在GCD队列本身是不可重入的，串行队列的层级关系，是出现问题的根本原因。为防止类似的误用，苹果在iOS6废弃了`dispatch_get_current_queue()`方法，强大的`dispatch_get_current_queue()`也只能当做一个调试工具了。\n\n那么应该如何保证GCD方法可重入呢？\n* `dispatch_queue_set_specific`标记队列\n* 递归锁\n\n以下是上面两种方法的代码片段。\n\n**dispatch_queue_set_specific**\n``` objc\n    dispatch_queue_t queueA = dispatch_queue_create(\"com.yiyaaixuexi.queueA\", NULL);\n    dispatch_queue_t queueB = dispatch_queue_create(\"com.yiyaaixuexi.queueB\", NULL);\n    dispatch_set_target_queue(queueB, queueA);\n   \n    static int specificKey;\n    CFStringRef specificValue = CFSTR(\"queueA\");\n    dispatch_queue_set_specific(queueA,\n                                &specificKey,\n                                (void*)specificValue,\n                                (dispatch_function_t)CFRelease);\n   \n    dispatch_sync(queueB, ^{\n        dispatch_block_t block = ^{\n                //do something\n        };\n        CFStringRef retrievedValue = dispatch_get_specific(&specificKey);\n        if (retrievedValue) {\n            block();\n        } else {\n            dispatch_sync(queueA, block);\n        }\n    });\n```\n**递归锁**\n``` objc\nvoid dispatch_reentrant(void (^block)())\n{\n    static NSRecursiveLock *lock = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        lock = [[NSRecursiveLock alloc]init];\n    });\n    [lock lock];\n    block();\n    [lock unlock];\n}\n \n    dispatch_queue_t queueA = dispatch_queue_create(\"com.yiyaaixuexi.queueA\", NULL);\n    dispatch_block_t block = ^{\n         //do something\n    };\n    dispatch_sync(queueA, ^{\n        dispatch_reentrant(block);\n    });\n```\n\n## 苹果是如何实现autoreleasepool的？\n`autoreleasepool`以一个队列数组的形式现实，主要通过下列三个函数完成：\n1. `objc_autoreleasepoolPush`\n2. `objc_autoreleasepoolPop`\n3. `objc_autorelease`\n\n看函数名就可以知道，对autorelease分别执行push和pop操作，销毁对象时执行release操作。\n\n具体说明：我们都知道用类方法创建的对象都是autorelease的，那么一旦Person出了作用域，当在Person的dealloc方法中打上断点，我们就可以看到这样的调用堆栈信息。\n\n## 使用系统的某些block API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\n\n系统的某些block API中，UIVIew的block版本写动画时不需要考虑循环引用，但有一些API需要考虑。所谓“循环引用”是指双向的强引用，所以那些“单向的强引用”没有问题，比如这些：\n``` objc\n[UIView animateWithDuration:duration animations:^{\n    [self.superview layoutIfNeeded];\n}];\n\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{\n    self.someProperty = xyz;\n}];\n\n[[NSNotificationCenter defaultCenter] addObserverForName:@\"someNotification\" object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n    self.someProperty = xyz;\n}];\n```\n这些情况不需要考虑“循环引用”。\n\n但如果使用了一些参数中可能含有ivar的系统API，如GCD、NSNotificationCenter就要小心一点，比如GCD内部如果引用了self，而且GCD的其他参数是ivar，则要考虑到循环引用。\n\n## 若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\n都可以。\n\n## KVC和KVO的keyPath一定是属性么？\nKVC支持实例变量，KVO只能手动支持手动设置实例变量的KVO实现监听。\n## KVC的keyPath中的集合运算符如何使用？\n1. 必须用在集合对象上或普通对象的集合上\n2. 简单集合运算符有@avg,@count,@max,@min,@sum\n3. 格式@\"@sum.age\"或 @\"集合属性\n\n### \b如何手动触发一个value的KVO\n所谓的“手动触发”是区别于“自动触发”：\n自动触发是类似这种场景：在注册KVO之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。\n想知道如何手动触发，必须知道自动触发KVO的原理：\n\n键值观察通知依赖于NSObject的两个方法：\b`willChangeValueForKey:`和`didChangevlueForKey:`。在一个观察属性发生改变之前，`willChangeValueForKey:`一定会被调用，这就会记录旧的值。而当改变发生后，`observeValueForKey:ofObject:change:context:`会被调用，继而`didChangeValueForKey:`也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。\n\n那么“手动触发”的使用场景是什么？\b一般我们只在希望能控制“回调的调用时机”时才会这么做。\n\n具体做法如下：\n如果这个`value`是表示时间的`self.now`，那么代码如下：最后两行代码缺一不可。\n\b``` objc\n// @property (nonatomic, strong) NSDate *now;\n- (void)viewDidLoad {\n   [super viewDidLoad];\n   _now = [NSDate date];\n   [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n   NSLog(@\"1\");\n   [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n   NSLog(@\"2\");\n   [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n   NSLog(@\"4\");\n}\n```\n但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：\n> 如何调用`setNow:`时，系统还会以某种方式在中间插入`wilChangeValueForKey:`、`didChangeValueForKey:`和`observeValueForKeyPath:ofObject:change:context:`的调用。\n\n\b大家可能\b以为是因为`setNow:`是合成方法，有时候我们也能看到有人这么写代码：\n``` objc\n- (void)setNow:(NSDate *)aDate {\n   [self willChangeValueForKey:@\"now\"]; // 没有必要\n   _now = aDate;\n   [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n```\n这完全没有必要，不要做么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用`willChangeValueForKey:`，之后总是调用`didChangeValueForkey:`。怎么做到的呢？答案是通过isa混写(isa-swizzling)。\n\n## 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n### KVO实现机制\nKVO的实现也依赖于Objective-C强大的Runtime。Apple的文档有简单提到过KVO的实现：\n> Automatic key-value observing is implemented using a technique called isa-swizzling... When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class ...\n\b从Apple官方文档我们可以看到：被观察者对象的`isa\b`\b指针会指向一个中间类，而不是原来真正的类。看来，Apple并不希望过多暴露KVO的实现细节。不过，要是你用Runtime提供的方法深入挖掘，所有被掩盖的细节都会原形毕露。\n\n简单概述下KVO的实现：\n当你观察一个对象时，一个新的类会\b会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的`setter`方法。自然，重写的`setter`方法会负责\b在调用原`setter`方法之前和之后，通知所有观察者对象值的改变。最后把这个对象的`isa`指针（`isa`指针告诉Runtime系统这个对象的类是什么）指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。\n\n### KVO缺陷\nKVO和很强大，知道它内部实现，或许能够帮助我们更好地使用它，或在它出错时更方便调试。但官方实现的KVO提供的API实在不怎么样。比如，你只能通过重写`observeValueForKeyPath:ofObject:change:context:`方法来获得通知。想要提供自定义的`selector`，不行，想要传一个`block`，门都没有。而且你还要处理父类的情况-父类同样监听同一个对象的不同属性。但有时候，你不知道父类是不是对这个消息有兴趣。虽然`context`这个参数就是干这个的，也可以解决这个问题-在`observeValueForKeyPath:ofObject:change:context:`传进去一个父类不知道的`context`。但总觉得框在\b这个API的设计下，代码写得\b很别扭。\b至少，也应该支持`block`吧。\n\n有不少人觉得官方KVO不好使，所以在实际开发中KVO使用的情景并不多，更多时候还是用Delegate或NotificationCenter。\n\n### 自己实现KVO\n首先创建NSObject的Category，并在头文件中添加两个API：\n``` objc\ntypedef void(^PGObservingBlock)(id observedObject, NSString *observedKey, id oldValue, id newValue);\n@interface NSObject (KVO)\n- (void)PG_addObserver:(NSObject *)observer\n                forKey:(NSString *)key\n             withBlock:(PGObservingBlock)block;\n- (void)PG_removeObserver:(NSObject *)observer forKey:(NSString *)key;\n@end\n```\n接下来，实现`PG_addObserver:forKey:withBlock:`方法。逻辑并不复杂：\n1. 检查对象的类有没有相应的`setter`方法。如果没有抛出异常；\n2. 检查对象`isa`指向的类是不是一个KVO类。如果不是，新建一个集成原来类的子类，并把`isa`指向这个新建的子类；\n3. \b检查对象的KVO类重写过没有这个`setter`方法。如果没有，添加重写的setter\b方法；\n4. 添加\b观察者；\n\n``` objc\n- (void)PG_addObserver:(NSObject *)observer\n                forKey:(NSString *)key\n             withBlock:(PGObservingBlock)block\n{\n    // Step 1: Throw exception if its class or superclasses doesn't implement the setter\n    SEL setterSelector = NSSelectorFromString(setterForGetter(key));\n    Method setterMethod = class_getInstanceMethod([self class], setterSelector);\n    if (!setterMethod) {\n        // throw invalid argument exception\n    }\n\n    Class clazz = object_getClass(self);\n    NSString *clazzName = NSStringFromClass(clazz);\n\n    // Step 2: Make KVO class if this is first time adding observer and \n    //          its class is not an KVO class yet\n    if (![clazzName hasPrefix:kPGKVOClassPrefix]) {\n        clazz = [self makeKvoClassWithOriginalClassName:clazzName];\n        object_setClass(self, clazz);\n    }\n\n    // Step 3: Add our kvo setter method if its class (not superclasses) \n    //          hasn't implemented the setter\n    if (![self hasSelector:setterSelector]) {\n        const char *types = method_getTypeEncoding(setterMethod);\n        class_addMethod(clazz, setterSelector, (IMP)kvo_setter, types);\n    }\n\n    // Step 4: Add this observation info to saved observation objects\n    PGObservationInfo *info = [[PGObservationInfo alloc] initWithObserver:observer Key:key block:block];\n    NSMutableArray *observers = objc_getAssociatedObject(self, (__bridge const void *)(kPGKVOAssociatedObservers));\n    if (!observers) {\n        observers = [NSMutableArray array];\n        objc_setAssociatedObject(self, (__bridge const void *)(kPGKVOAssociatedObservers), observers, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    }\n    [observers addObject:info];\n}\n```\n再来一步步细看。\n\n第一步里，先通过`setterForGetter()`方法获得相应的`setter`的名字（SEL）。也就是把key的首字母大写，然后前面加上`set`后面加上`:`，这样`key`就变成了`setKey:`。然后再用`class_getInstanceMethod`去获得`setKey:`的实现（Method）。如果没有，自然要抛出异常。\n\n第二步，我们先看类名有没有我们定义的前缀。如果没有，我们就去创建新的子类，并通过`object_setClass()`修改`isa`指针。动态创建新的类需要用`objc/runtime.h`中定义的`objc_allocateClassPair()`函数。传一个父类，类名，然后额外的空间（通常为0），它返回给你一个类。然后就给这个类添加方法，也可以添加变量。这里，只重写了`class`方法。哈哈，根Apple一样，这时候我们也企图隐藏这个子类的存在。最后`objc_registerClassPair()`告诉Runtime这个类的存在。\n``` objc\n- (Class)makeKvoClassWithOriginalClassName:(NSString *)originalClazzName\n{\n    NSString *kvoClazzName = [kPGKVOClassPrefix stringByAppendingString:originalClazzName];\n    Class clazz = NSClassFromString(kvoClazzName);\n\n    if (clazz) {\n        return clazz;\n    }\n\n    // class doesn't exist yet, make it\n    Class originalClazz = object_getClass(self);\n    Class kvoClazz = objc_allocateClassPair(originalClazz, kvoClazzName.UTF8String, 0);\n\n    // grab class method's signature so we can borrow it\n    Method clazzMethod = class_getInstanceMethod(originalClazz, @selector(class));\n    const char *types = method_getTypeEncoding(clazzMethod);\n    class_addMethod(kvoClazz, @selector(class), (IMP)kvo_class, types);\n\n    objc_registerClassPair(kvoClazz);\n\n    return kvoClazz;\n}\n```\n\n第三步，重写setter方法。新的setter在调用原setter方法后，通知每个观察者（调用之前传入的block）:\n``` objc\nstatic void kvo_setter(id self, SEL _cmd, id newValue)  \n{\n    NSString *setterName = NSStringFromSelector(_cmd);\n    NSString *getterName = getterForSetter(setterName);\n\n    if (!getterName) {\n        // throw invalid argument exception\n    }\n\n    id oldValue = [self valueForKey:getterName];\n\n    struct objc_super superclazz = {\n        .receiver = self,\n        .super_class = class_getSuperclass(object_getClass(self))\n    };\n\n    // cast our pointer so the compiler won't complain\n    void (*objc_msgSendSuperCasted)(void *, SEL, id) = (void *)objc_msgSendSuper;\n\n    // call super's setter, which is original class's setter method\n    objc_msgSendSuperCasted(&superclazz, _cmd, newValue);\n\n    // look up observers and call the blocks\n    NSMutableArray *observers = objc_getAssociatedObject(self, (__bridge const void *)(kPGKVOAssociatedObservers));\n    for (PGObservationInfo *each in observers) {\n        if ([each.key isEqualToString:getterName]) {\n            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                each.block(self, getterName, oldValue, newValue);\n            });\n        }\n    }\n}\n```\n最后一步，把这个观察者的相关信息存在`associatedObject`\b里。观察的相关信息（观察者，被观察的key，和传入的block）封装在`PGObservationInfo`类\b里。\n``` objc\n@interface PGObservationInfo : NSObject\n\n@property (nonatomic, weak) NSObject *observer;\n@property (nonatomic, copy) NSString *key;\n@property (nonatomic, copy) PGObservingBlock block;\n\n@end\n```\n到此为止，一个基本的KVO就可以work了。\n\n## IB中User Defined Runtime Attributes如何使用？\n它能够通过KVC的方式配置一些你在interface builder中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewController。\n\n## BAD_ACCESS在什么情况下出现？\n\b访问了悬垂指针，比如对一个已经释放的对象进行了release、访问已经释放对象的成员变量或则发送消息、死循环等。\n\n## 如何调试BAD_ACCESS错误\n1. 重写\bobject的\brespondsToSelector方法，实现出现EXEC_BAD_ACCESS前访问的最后一个object\n2. 通过设置Xcode中的zombie\n3. 设置全局断点快速定位问题代码\b所在行\n4. Xcode7已经\b集成了BAD_ACCESS捕获功能：Address Sanitizer。用法如下：在\b配置中勾选Enable Address Sinitizer。\n\n## lldb（gdb）常用的调试命令？\n* breakpoint 设置断点定位到某一个函数\n* n 断点指向下一步\n* po 打印对象\n更多lldb调试命令可以查看：[The LLDB Debugger](http://lldb.llvm.org/lldb-gdb.html)\n\n## ios里面存数据有哪些方法？\n\b这里的存储就是所谓的持久化，就是讲将数据保存在硬盘，使得在应用程序或机器重启后可以继续访问之前保存的数据。在iOS开发中，有很多数据持久化的方案：\n1. plist文件（属性列表）\n2. preference（偏好设置）NSUserDefaults\n3. NSKeyedArchiver（归档）\n4. SQLite 3\n5. CoreData\n\n## frame bounds center 的区别\n* frame：描述当前视图在其父视图中的位置和大小。\n* bounds：描述当前视图在其自身坐标系统中的位置和大小\n* center：描述当前视图的中心点在其视图中的位置\n\n## 线程共享进程资源的实例\nNSUserDefault\n\n## OC运行时能加实例变量吗?\n可以。运行时可以通过Runtime动态添加方法，再次方法里去初始化实例变量。\n\n## 64位下NSNumber的优化\n### 64bit-tagged pointer\n* 指针地址对其：分配堆中的内存时，采用偶数倍或则以2的指数倍的地址为边界\n* iOS中是以16个字节为对其边界的。所以分配的\b内存地址后面4为永远是0\n* 64为理论上可以支持最大的2^64字节内存空间。这么大的地址空间完全是浪费的。64位环境下内存地址前面有很多0\n* Tagged Pointer 指针地址对齐和64位超大地址的出现，指针地址仅仅作为内存地址是比较浪费的，可以在指针地址中保存更多的信息。 所以就有了Tagged Pointer概念。\n\n### isa指针的优化\n所有的类继承自NSObject，因此每个对象都有一个isa指针指向所属的类。\n\n在32位环境下，对象的引用都保存在外部的表中，对引用计数的增减操作都需要锁定这个表，操作完后，才解锁，这样的效率是很慢的。\n\n在64位环境下，isa也是64-bit的，实际操作部分只用到32位，剩余部分会用到tagged pointer的概念，其中19位将保存对象的引用计数，这样引用计数的操作只需要原子的修改这个指针即可，如果超出19位，才会将引用计数保存到外部表，这种情况是很少的，因此效率会大大提高。\n\n## NSThread NSOperation dispatch 和 gcd的关系\nNSThread优点：NSThread比其他两个轻量级，使用简单。\n缺点：需要自己管理线程的生命周期、线程同步、加锁、睡眠以及唤醒等。线程同步对数据加锁会有一定的系统开销。\n\nNSOperation：不需要关系线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上，NSOperation是面向对象的，属于OC类。\n\nGCD：Grand Central Dispatch是由苹果开发的一个多核编程的解决方案。是相比NSThread， NSOperation更高效和强大的技术–GCD是基于C的底层API。\n\nGCD主要是建立个个线程时间的依赖关系这类的情况，更高的并发执行能力。\n\n## iOS常用回调方式以及它们之间的区别\n\ndelegate回调，kvo回调，NSNotification回调，block回调\n\n## 声明delegate的时候为什么用assign，而不用weak等等\n\nweak比assgin线程更安全。\n\n但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。\n\n## Block的使用\n\n网络响应block回调。对响应数据进行一个包装作为参数调用控制器的函数。\n\n## 二叉树的深度优先遍历和广度优先遍历\n\n## iOS crash后的调试方法？\n线上收集，Xcode中下载崩溃日志。接入腾讯的Bugly。\n\n## OC中深拷贝,浅拷贝\n\n对不可变对象，copy则执行浅拷贝，mutablCopy则执行深拷贝。对可变对象，copy和mutableCopy都执行深拷贝，但是copy返回的对象是不可变的。\n![](https://upload-images.jianshu.io/upload_images/10601171-d7aa0b24e2fefb9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/611/format/webp)\n\n## iOS沙盒机制\niOS应用程序只能在为该改程序创建的文件系统中读取文件，不可以去其它地方访问，此区域被成为沙盒，所以所有的非代码文件都要保存在此，例如图像，图标，声音，映像，属性列表，文本文件等。 \n1. 每个应用程序都有自己的存储空间 \n2. 应用程序不能翻过自己的围墙去访问别的存储空间的内容 \n3. 应用程序请求的数据都要通过权限检测，假如不符合条件的话，不会被放行\n\n## 不更新版本的方式添加新特性（热更新）\n1. 使用FaceBook的开源框架reactive native，使用js写原生的iOS应用。iOS app可以在运行时从服务器拉取最新的js文件到本地，然后执行，因为js是一门动态的脚本语言，所以可以在运行时直接读取js文件执行，因此能够实现iOS的热更新。\n2. 使用lua脚本。lua脚本如同js一样，也能在运行时去读取lua脚本并执行。\n3. Xcode6之后，苹果开放了iOS的动态库编译权限。所谓的动态库，其实就是可以在运行时加载。可以利用这个实现iOS的热更新。能够从沙箱里面读取到代码文件，就意味着可以在线更新代码，远程升级\n4. JSPatch，热更新，不过被苹果禁止使用了。\n\n## 如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\n遇到这种情况程序会崩溃，因为当前界面释放的同时，在当前界面所定义的对象也会释放，会出现野指针的情况，解决的办法是将异步请求的对象保持到单例中，这样界面释放的同时异步请求的对象还存在。\n\n## 怎么用C++ 实现kvo？\n开启一个新线程去轮询监听事件，并传入响应方法，如果事件发生就调用监听响应方法。\n\n## 你会如何储存用户的认证信息？\n使用keychain来存储,也就是钥匙串。 使用keychain需要导入Security框架。 \n\n只需要把“KeychainItemWrapper.h”和“KeychainItemWrapper.m”拷贝到我们项目，并导入Security.framework 。KeychainItemWrapper的用法：\n``` objc\n/** 初始化一个保存用户帐号的KeychainItemWrapper */ \n\nKeychainItemWrapper *wrapper = [[KeychainItemWrapper alloc] initWithIdentifier:@\"Account Number\" accessGroup:@\"YOUR_APP_ID_HERE.com.yourcompany.AppIdentifier\"];\n\n//保存数据 \n\n[wrapper setObject:@\"<帐号>\" forKey:(id)kSecAttrAccount]; \n\n[wrapper setObject:@\"<帐号密码>\" forKey:(id)kSecValueData];\n\n//从keychain里取出帐号密码 \n\nNSString *password = [wrapper objectForKey:(id)kSecValueData];\n```\n\n## 堆和栈的区别\n栈区(stack)由编译器自动分配释放 ,存放方法(函数)的参数值, 局部变量的值等，栈是向低地址扩展的数据结构，是一块连续的内存的区域。即栈顶的地址和栈的最大容量是系统预先规定好的。 \n\n堆区(heap)一般由程序员分配释放, 若程序员不释放,程序结束时由OS回收，向高地址扩展的数据结构，是不连续的内存区域，从而堆获得的空间比较灵活。 \n\n碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出. \n\n分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 \n\n分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的。 \n\n全局区(静态区)(static),全局变量和静态变量的存储是放在一块 的,初始化的全局变量和静态变量在一块区域, 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后有系统释放。 \n\n文字常量区—常量字符串就是放在这里的。程序结束后由系统释放。 \n\n程序代码区—存放函数体的二进制代码\n\n\n## OC有多继承吗？没有的话用什么代替？\nOC中没有多继承，可以用委托代理Protocol来实现。\n\n## SDWebImage原理\n从内存中（字典）找图片（当这个图片在本次程序加载过），找到直接使用； \n\n从沙盒中找，找到直接使用，缓存到内存。 \n\n从网络上获取，使用，缓存到内存，缓存到沙盒。\n\n## 请问push view controller 和 present view controller有什么区别？\n要是用push view controller ，首先必须确保根视图是NavigationController，不然是不可以用的。\n\npush与present都可以推出新的界面。 \n\npresent与dismiss对应，push和pop对应。 \n\npresent只能逐级返回，push所有视图由视图栈控制，可以返回上一级，也可以返回到根vc，其他vc。 \n\npresent一般用于不同业务界面的切换，push一般用于同一业务不同界面之间的切换。\n","source":"_posts/iOS高级开发面试题（下）.md","raw":"---\ntitle: iOS高级开发面试题（下）\ndate: 2017-08-06 13:27:26\ntags:\n  - iOS\ncategories: 知识汇总\nabbrlink: 5f644c17f993a457\n---\n\n## objc使用什么机制管理对象内存？\n1. MRC(manual retain-release)手动内存管理。\n2. ARC(automatic reference counting)自动引用计数。\n3. Garbage collection（垃圾回收机制）但是iOS不支持垃圾回收。\nARC作为LLVM3.0编译器的一项特性，在iOS5.0（Xcode4）版本后推出的自动内存管理，节约时间，减少代码量，降低出错率。开发者不需要手动写入retain、release、autorelease三个关键字。\n\nARC通过retainCount的机制来决定对象是否需要释放，每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。\n<!-- more -->\n\n## 苹果为什么要废弃dispatch_get_current_queue？\n\n`dispatch_get_current_queue`容易造成死锁。\n\n说到被废弃的`dispatch_get_current_queue`不得不提一个概念：可重入。若一个程序或子程序可以“安全的被并行执行”，则称其为可重入的。\n\n若一个函数是可重入的，则该函数：\n1. 不能含有静态（全局）非常量数据。\n2. 不能返回静态（全局）非常量数据的地址。\n3. 只能处理由调用者提供的数据。\n4. 不能依赖于单实例模式资源的锁。\n5. 不能调用不可重入的函数\n\n有时候，我们希望知道当前执行的`queue`是谁，比如UI操作需要放在`mian queue`中执行。如果可以知道当前工作的`queue`是谁，就可以很方便的指定一段代码再特定的`queue`中执行。`dispatch_get_current_queue`正好能帮上忙。于是乎，在指定queue中做一些操作，就可以非常清晰的实现：\n``` objc\n\nvoid func(dispatch_queue_t queue, dispatch_block_t block)\n{\n    if (dispatch_get_current_queue() == queue) {\n        block();\n    } else {\n        dispatch_sync(queue, block);\n    }\n}\n```\n然后潜意识里觉得这个函数是可重入的。但当`target queue`恰好是`current queue`时，同步阻塞会导致死锁。\n``` objc\n\n- (void)deadLockFunc\n{\n    dispatch_queue_t queueA = dispatch_queue_create(\"com.yiyaaixuexi.queueA\", NULL);\n    dispatch_queue_t queueB = dispatch_queue_create(\"com.yiyaaixuexi.queueB\", NULL);\n    dispatch_sync(queueA, ^{\n        dispatch_sync(queueB, ^{\n            dispatch_block_t block = ^{\n                //do something\n            };\n            func(queueA, block);\n        });\n    });\n}\n```\n问题出在GCD队列本身是不可重入的，串行队列的层级关系，是出现问题的根本原因。为防止类似的误用，苹果在iOS6废弃了`dispatch_get_current_queue()`方法，强大的`dispatch_get_current_queue()`也只能当做一个调试工具了。\n\n那么应该如何保证GCD方法可重入呢？\n* `dispatch_queue_set_specific`标记队列\n* 递归锁\n\n以下是上面两种方法的代码片段。\n\n**dispatch_queue_set_specific**\n``` objc\n    dispatch_queue_t queueA = dispatch_queue_create(\"com.yiyaaixuexi.queueA\", NULL);\n    dispatch_queue_t queueB = dispatch_queue_create(\"com.yiyaaixuexi.queueB\", NULL);\n    dispatch_set_target_queue(queueB, queueA);\n   \n    static int specificKey;\n    CFStringRef specificValue = CFSTR(\"queueA\");\n    dispatch_queue_set_specific(queueA,\n                                &specificKey,\n                                (void*)specificValue,\n                                (dispatch_function_t)CFRelease);\n   \n    dispatch_sync(queueB, ^{\n        dispatch_block_t block = ^{\n                //do something\n        };\n        CFStringRef retrievedValue = dispatch_get_specific(&specificKey);\n        if (retrievedValue) {\n            block();\n        } else {\n            dispatch_sync(queueA, block);\n        }\n    });\n```\n**递归锁**\n``` objc\nvoid dispatch_reentrant(void (^block)())\n{\n    static NSRecursiveLock *lock = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        lock = [[NSRecursiveLock alloc]init];\n    });\n    [lock lock];\n    block();\n    [lock unlock];\n}\n \n    dispatch_queue_t queueA = dispatch_queue_create(\"com.yiyaaixuexi.queueA\", NULL);\n    dispatch_block_t block = ^{\n         //do something\n    };\n    dispatch_sync(queueA, ^{\n        dispatch_reentrant(block);\n    });\n```\n\n## 苹果是如何实现autoreleasepool的？\n`autoreleasepool`以一个队列数组的形式现实，主要通过下列三个函数完成：\n1. `objc_autoreleasepoolPush`\n2. `objc_autoreleasepoolPop`\n3. `objc_autorelease`\n\n看函数名就可以知道，对autorelease分别执行push和pop操作，销毁对象时执行release操作。\n\n具体说明：我们都知道用类方法创建的对象都是autorelease的，那么一旦Person出了作用域，当在Person的dealloc方法中打上断点，我们就可以看到这样的调用堆栈信息。\n\n## 使用系统的某些block API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\n\n系统的某些block API中，UIVIew的block版本写动画时不需要考虑循环引用，但有一些API需要考虑。所谓“循环引用”是指双向的强引用，所以那些“单向的强引用”没有问题，比如这些：\n``` objc\n[UIView animateWithDuration:duration animations:^{\n    [self.superview layoutIfNeeded];\n}];\n\n[[NSOperationQueue mainQueue] addOperationWithBlock:^{\n    self.someProperty = xyz;\n}];\n\n[[NSNotificationCenter defaultCenter] addObserverForName:@\"someNotification\" object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {\n    self.someProperty = xyz;\n}];\n```\n这些情况不需要考虑“循环引用”。\n\n但如果使用了一些参数中可能含有ivar的系统API，如GCD、NSNotificationCenter就要小心一点，比如GCD内部如果引用了self，而且GCD的其他参数是ivar，则要考虑到循环引用。\n\n## 若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\n都可以。\n\n## KVC和KVO的keyPath一定是属性么？\nKVC支持实例变量，KVO只能手动支持手动设置实例变量的KVO实现监听。\n## KVC的keyPath中的集合运算符如何使用？\n1. 必须用在集合对象上或普通对象的集合上\n2. 简单集合运算符有@avg,@count,@max,@min,@sum\n3. 格式@\"@sum.age\"或 @\"集合属性\n\n### \b如何手动触发一个value的KVO\n所谓的“手动触发”是区别于“自动触发”：\n自动触发是类似这种场景：在注册KVO之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。\n想知道如何手动触发，必须知道自动触发KVO的原理：\n\n键值观察通知依赖于NSObject的两个方法：\b`willChangeValueForKey:`和`didChangevlueForKey:`。在一个观察属性发生改变之前，`willChangeValueForKey:`一定会被调用，这就会记录旧的值。而当改变发生后，`observeValueForKey:ofObject:change:context:`会被调用，继而`didChangeValueForKey:`也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。\n\n那么“手动触发”的使用场景是什么？\b一般我们只在希望能控制“回调的调用时机”时才会这么做。\n\n具体做法如下：\n如果这个`value`是表示时间的`self.now`，那么代码如下：最后两行代码缺一不可。\n\b``` objc\n// @property (nonatomic, strong) NSDate *now;\n- (void)viewDidLoad {\n   [super viewDidLoad];\n   _now = [NSDate date];\n   [self addObserver:self forKeyPath:@\"now\" options:NSKeyValueObservingOptionNew context:nil];\n   NSLog(@\"1\");\n   [self willChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n   NSLog(@\"2\");\n   [self didChangeValueForKey:@\"now\"]; // “手动触发self.now的KVO”，必写。\n   NSLog(@\"4\");\n}\n```\n但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：\n> 如何调用`setNow:`时，系统还会以某种方式在中间插入`wilChangeValueForKey:`、`didChangeValueForKey:`和`observeValueForKeyPath:ofObject:change:context:`的调用。\n\n\b大家可能\b以为是因为`setNow:`是合成方法，有时候我们也能看到有人这么写代码：\n``` objc\n- (void)setNow:(NSDate *)aDate {\n   [self willChangeValueForKey:@\"now\"]; // 没有必要\n   _now = aDate;\n   [self didChangeValueForKey:@\"now\"];// 没有必要\n}\n```\n这完全没有必要，不要做么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用`willChangeValueForKey:`，之后总是调用`didChangeValueForkey:`。怎么做到的呢？答案是通过isa混写(isa-swizzling)。\n\n## 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n### KVO实现机制\nKVO的实现也依赖于Objective-C强大的Runtime。Apple的文档有简单提到过KVO的实现：\n> Automatic key-value observing is implemented using a technique called isa-swizzling... When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class ...\n\b从Apple官方文档我们可以看到：被观察者对象的`isa\b`\b指针会指向一个中间类，而不是原来真正的类。看来，Apple并不希望过多暴露KVO的实现细节。不过，要是你用Runtime提供的方法深入挖掘，所有被掩盖的细节都会原形毕露。\n\n简单概述下KVO的实现：\n当你观察一个对象时，一个新的类会\b会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的`setter`方法。自然，重写的`setter`方法会负责\b在调用原`setter`方法之前和之后，通知所有观察者对象值的改变。最后把这个对象的`isa`指针（`isa`指针告诉Runtime系统这个对象的类是什么）指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。\n\n### KVO缺陷\nKVO和很强大，知道它内部实现，或许能够帮助我们更好地使用它，或在它出错时更方便调试。但官方实现的KVO提供的API实在不怎么样。比如，你只能通过重写`observeValueForKeyPath:ofObject:change:context:`方法来获得通知。想要提供自定义的`selector`，不行，想要传一个`block`，门都没有。而且你还要处理父类的情况-父类同样监听同一个对象的不同属性。但有时候，你不知道父类是不是对这个消息有兴趣。虽然`context`这个参数就是干这个的，也可以解决这个问题-在`observeValueForKeyPath:ofObject:change:context:`传进去一个父类不知道的`context`。但总觉得框在\b这个API的设计下，代码写得\b很别扭。\b至少，也应该支持`block`吧。\n\n有不少人觉得官方KVO不好使，所以在实际开发中KVO使用的情景并不多，更多时候还是用Delegate或NotificationCenter。\n\n### 自己实现KVO\n首先创建NSObject的Category，并在头文件中添加两个API：\n``` objc\ntypedef void(^PGObservingBlock)(id observedObject, NSString *observedKey, id oldValue, id newValue);\n@interface NSObject (KVO)\n- (void)PG_addObserver:(NSObject *)observer\n                forKey:(NSString *)key\n             withBlock:(PGObservingBlock)block;\n- (void)PG_removeObserver:(NSObject *)observer forKey:(NSString *)key;\n@end\n```\n接下来，实现`PG_addObserver:forKey:withBlock:`方法。逻辑并不复杂：\n1. 检查对象的类有没有相应的`setter`方法。如果没有抛出异常；\n2. 检查对象`isa`指向的类是不是一个KVO类。如果不是，新建一个集成原来类的子类，并把`isa`指向这个新建的子类；\n3. \b检查对象的KVO类重写过没有这个`setter`方法。如果没有，添加重写的setter\b方法；\n4. 添加\b观察者；\n\n``` objc\n- (void)PG_addObserver:(NSObject *)observer\n                forKey:(NSString *)key\n             withBlock:(PGObservingBlock)block\n{\n    // Step 1: Throw exception if its class or superclasses doesn't implement the setter\n    SEL setterSelector = NSSelectorFromString(setterForGetter(key));\n    Method setterMethod = class_getInstanceMethod([self class], setterSelector);\n    if (!setterMethod) {\n        // throw invalid argument exception\n    }\n\n    Class clazz = object_getClass(self);\n    NSString *clazzName = NSStringFromClass(clazz);\n\n    // Step 2: Make KVO class if this is first time adding observer and \n    //          its class is not an KVO class yet\n    if (![clazzName hasPrefix:kPGKVOClassPrefix]) {\n        clazz = [self makeKvoClassWithOriginalClassName:clazzName];\n        object_setClass(self, clazz);\n    }\n\n    // Step 3: Add our kvo setter method if its class (not superclasses) \n    //          hasn't implemented the setter\n    if (![self hasSelector:setterSelector]) {\n        const char *types = method_getTypeEncoding(setterMethod);\n        class_addMethod(clazz, setterSelector, (IMP)kvo_setter, types);\n    }\n\n    // Step 4: Add this observation info to saved observation objects\n    PGObservationInfo *info = [[PGObservationInfo alloc] initWithObserver:observer Key:key block:block];\n    NSMutableArray *observers = objc_getAssociatedObject(self, (__bridge const void *)(kPGKVOAssociatedObservers));\n    if (!observers) {\n        observers = [NSMutableArray array];\n        objc_setAssociatedObject(self, (__bridge const void *)(kPGKVOAssociatedObservers), observers, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    }\n    [observers addObject:info];\n}\n```\n再来一步步细看。\n\n第一步里，先通过`setterForGetter()`方法获得相应的`setter`的名字（SEL）。也就是把key的首字母大写，然后前面加上`set`后面加上`:`，这样`key`就变成了`setKey:`。然后再用`class_getInstanceMethod`去获得`setKey:`的实现（Method）。如果没有，自然要抛出异常。\n\n第二步，我们先看类名有没有我们定义的前缀。如果没有，我们就去创建新的子类，并通过`object_setClass()`修改`isa`指针。动态创建新的类需要用`objc/runtime.h`中定义的`objc_allocateClassPair()`函数。传一个父类，类名，然后额外的空间（通常为0），它返回给你一个类。然后就给这个类添加方法，也可以添加变量。这里，只重写了`class`方法。哈哈，根Apple一样，这时候我们也企图隐藏这个子类的存在。最后`objc_registerClassPair()`告诉Runtime这个类的存在。\n``` objc\n- (Class)makeKvoClassWithOriginalClassName:(NSString *)originalClazzName\n{\n    NSString *kvoClazzName = [kPGKVOClassPrefix stringByAppendingString:originalClazzName];\n    Class clazz = NSClassFromString(kvoClazzName);\n\n    if (clazz) {\n        return clazz;\n    }\n\n    // class doesn't exist yet, make it\n    Class originalClazz = object_getClass(self);\n    Class kvoClazz = objc_allocateClassPair(originalClazz, kvoClazzName.UTF8String, 0);\n\n    // grab class method's signature so we can borrow it\n    Method clazzMethod = class_getInstanceMethod(originalClazz, @selector(class));\n    const char *types = method_getTypeEncoding(clazzMethod);\n    class_addMethod(kvoClazz, @selector(class), (IMP)kvo_class, types);\n\n    objc_registerClassPair(kvoClazz);\n\n    return kvoClazz;\n}\n```\n\n第三步，重写setter方法。新的setter在调用原setter方法后，通知每个观察者（调用之前传入的block）:\n``` objc\nstatic void kvo_setter(id self, SEL _cmd, id newValue)  \n{\n    NSString *setterName = NSStringFromSelector(_cmd);\n    NSString *getterName = getterForSetter(setterName);\n\n    if (!getterName) {\n        // throw invalid argument exception\n    }\n\n    id oldValue = [self valueForKey:getterName];\n\n    struct objc_super superclazz = {\n        .receiver = self,\n        .super_class = class_getSuperclass(object_getClass(self))\n    };\n\n    // cast our pointer so the compiler won't complain\n    void (*objc_msgSendSuperCasted)(void *, SEL, id) = (void *)objc_msgSendSuper;\n\n    // call super's setter, which is original class's setter method\n    objc_msgSendSuperCasted(&superclazz, _cmd, newValue);\n\n    // look up observers and call the blocks\n    NSMutableArray *observers = objc_getAssociatedObject(self, (__bridge const void *)(kPGKVOAssociatedObservers));\n    for (PGObservationInfo *each in observers) {\n        if ([each.key isEqualToString:getterName]) {\n            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                each.block(self, getterName, oldValue, newValue);\n            });\n        }\n    }\n}\n```\n最后一步，把这个观察者的相关信息存在`associatedObject`\b里。观察的相关信息（观察者，被观察的key，和传入的block）封装在`PGObservationInfo`类\b里。\n``` objc\n@interface PGObservationInfo : NSObject\n\n@property (nonatomic, weak) NSObject *observer;\n@property (nonatomic, copy) NSString *key;\n@property (nonatomic, copy) PGObservingBlock block;\n\n@end\n```\n到此为止，一个基本的KVO就可以work了。\n\n## IB中User Defined Runtime Attributes如何使用？\n它能够通过KVC的方式配置一些你在interface builder中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewController。\n\n## BAD_ACCESS在什么情况下出现？\n\b访问了悬垂指针，比如对一个已经释放的对象进行了release、访问已经释放对象的成员变量或则发送消息、死循环等。\n\n## 如何调试BAD_ACCESS错误\n1. 重写\bobject的\brespondsToSelector方法，实现出现EXEC_BAD_ACCESS前访问的最后一个object\n2. 通过设置Xcode中的zombie\n3. 设置全局断点快速定位问题代码\b所在行\n4. Xcode7已经\b集成了BAD_ACCESS捕获功能：Address Sanitizer。用法如下：在\b配置中勾选Enable Address Sinitizer。\n\n## lldb（gdb）常用的调试命令？\n* breakpoint 设置断点定位到某一个函数\n* n 断点指向下一步\n* po 打印对象\n更多lldb调试命令可以查看：[The LLDB Debugger](http://lldb.llvm.org/lldb-gdb.html)\n\n## ios里面存数据有哪些方法？\n\b这里的存储就是所谓的持久化，就是讲将数据保存在硬盘，使得在应用程序或机器重启后可以继续访问之前保存的数据。在iOS开发中，有很多数据持久化的方案：\n1. plist文件（属性列表）\n2. preference（偏好设置）NSUserDefaults\n3. NSKeyedArchiver（归档）\n4. SQLite 3\n5. CoreData\n\n## frame bounds center 的区别\n* frame：描述当前视图在其父视图中的位置和大小。\n* bounds：描述当前视图在其自身坐标系统中的位置和大小\n* center：描述当前视图的中心点在其视图中的位置\n\n## 线程共享进程资源的实例\nNSUserDefault\n\n## OC运行时能加实例变量吗?\n可以。运行时可以通过Runtime动态添加方法，再次方法里去初始化实例变量。\n\n## 64位下NSNumber的优化\n### 64bit-tagged pointer\n* 指针地址对其：分配堆中的内存时，采用偶数倍或则以2的指数倍的地址为边界\n* iOS中是以16个字节为对其边界的。所以分配的\b内存地址后面4为永远是0\n* 64为理论上可以支持最大的2^64字节内存空间。这么大的地址空间完全是浪费的。64位环境下内存地址前面有很多0\n* Tagged Pointer 指针地址对齐和64位超大地址的出现，指针地址仅仅作为内存地址是比较浪费的，可以在指针地址中保存更多的信息。 所以就有了Tagged Pointer概念。\n\n### isa指针的优化\n所有的类继承自NSObject，因此每个对象都有一个isa指针指向所属的类。\n\n在32位环境下，对象的引用都保存在外部的表中，对引用计数的增减操作都需要锁定这个表，操作完后，才解锁，这样的效率是很慢的。\n\n在64位环境下，isa也是64-bit的，实际操作部分只用到32位，剩余部分会用到tagged pointer的概念，其中19位将保存对象的引用计数，这样引用计数的操作只需要原子的修改这个指针即可，如果超出19位，才会将引用计数保存到外部表，这种情况是很少的，因此效率会大大提高。\n\n## NSThread NSOperation dispatch 和 gcd的关系\nNSThread优点：NSThread比其他两个轻量级，使用简单。\n缺点：需要自己管理线程的生命周期、线程同步、加锁、睡眠以及唤醒等。线程同步对数据加锁会有一定的系统开销。\n\nNSOperation：不需要关系线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上，NSOperation是面向对象的，属于OC类。\n\nGCD：Grand Central Dispatch是由苹果开发的一个多核编程的解决方案。是相比NSThread， NSOperation更高效和强大的技术–GCD是基于C的底层API。\n\nGCD主要是建立个个线程时间的依赖关系这类的情况，更高的并发执行能力。\n\n## iOS常用回调方式以及它们之间的区别\n\ndelegate回调，kvo回调，NSNotification回调，block回调\n\n## 声明delegate的时候为什么用assign，而不用weak等等\n\nweak比assgin线程更安全。\n\n但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。\n\n## Block的使用\n\n网络响应block回调。对响应数据进行一个包装作为参数调用控制器的函数。\n\n## 二叉树的深度优先遍历和广度优先遍历\n\n## iOS crash后的调试方法？\n线上收集，Xcode中下载崩溃日志。接入腾讯的Bugly。\n\n## OC中深拷贝,浅拷贝\n\n对不可变对象，copy则执行浅拷贝，mutablCopy则执行深拷贝。对可变对象，copy和mutableCopy都执行深拷贝，但是copy返回的对象是不可变的。\n![](https://upload-images.jianshu.io/upload_images/10601171-d7aa0b24e2fefb9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/611/format/webp)\n\n## iOS沙盒机制\niOS应用程序只能在为该改程序创建的文件系统中读取文件，不可以去其它地方访问，此区域被成为沙盒，所以所有的非代码文件都要保存在此，例如图像，图标，声音，映像，属性列表，文本文件等。 \n1. 每个应用程序都有自己的存储空间 \n2. 应用程序不能翻过自己的围墙去访问别的存储空间的内容 \n3. 应用程序请求的数据都要通过权限检测，假如不符合条件的话，不会被放行\n\n## 不更新版本的方式添加新特性（热更新）\n1. 使用FaceBook的开源框架reactive native，使用js写原生的iOS应用。iOS app可以在运行时从服务器拉取最新的js文件到本地，然后执行，因为js是一门动态的脚本语言，所以可以在运行时直接读取js文件执行，因此能够实现iOS的热更新。\n2. 使用lua脚本。lua脚本如同js一样，也能在运行时去读取lua脚本并执行。\n3. Xcode6之后，苹果开放了iOS的动态库编译权限。所谓的动态库，其实就是可以在运行时加载。可以利用这个实现iOS的热更新。能够从沙箱里面读取到代码文件，就意味着可以在线更新代码，远程升级\n4. JSPatch，热更新，不过被苹果禁止使用了。\n\n## 如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\n遇到这种情况程序会崩溃，因为当前界面释放的同时，在当前界面所定义的对象也会释放，会出现野指针的情况，解决的办法是将异步请求的对象保持到单例中，这样界面释放的同时异步请求的对象还存在。\n\n## 怎么用C++ 实现kvo？\n开启一个新线程去轮询监听事件，并传入响应方法，如果事件发生就调用监听响应方法。\n\n## 你会如何储存用户的认证信息？\n使用keychain来存储,也就是钥匙串。 使用keychain需要导入Security框架。 \n\n只需要把“KeychainItemWrapper.h”和“KeychainItemWrapper.m”拷贝到我们项目，并导入Security.framework 。KeychainItemWrapper的用法：\n``` objc\n/** 初始化一个保存用户帐号的KeychainItemWrapper */ \n\nKeychainItemWrapper *wrapper = [[KeychainItemWrapper alloc] initWithIdentifier:@\"Account Number\" accessGroup:@\"YOUR_APP_ID_HERE.com.yourcompany.AppIdentifier\"];\n\n//保存数据 \n\n[wrapper setObject:@\"<帐号>\" forKey:(id)kSecAttrAccount]; \n\n[wrapper setObject:@\"<帐号密码>\" forKey:(id)kSecValueData];\n\n//从keychain里取出帐号密码 \n\nNSString *password = [wrapper objectForKey:(id)kSecValueData];\n```\n\n## 堆和栈的区别\n栈区(stack)由编译器自动分配释放 ,存放方法(函数)的参数值, 局部变量的值等，栈是向低地址扩展的数据结构，是一块连续的内存的区域。即栈顶的地址和栈的最大容量是系统预先规定好的。 \n\n堆区(heap)一般由程序员分配释放, 若程序员不释放,程序结束时由OS回收，向高地址扩展的数据结构，是不连续的内存区域，从而堆获得的空间比较灵活。 \n\n碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出. \n\n分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 \n\n分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的。 \n\n全局区(静态区)(static),全局变量和静态变量的存储是放在一块 的,初始化的全局变量和静态变量在一块区域, 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后有系统释放。 \n\n文字常量区—常量字符串就是放在这里的。程序结束后由系统释放。 \n\n程序代码区—存放函数体的二进制代码\n\n\n## OC有多继承吗？没有的话用什么代替？\nOC中没有多继承，可以用委托代理Protocol来实现。\n\n## SDWebImage原理\n从内存中（字典）找图片（当这个图片在本次程序加载过），找到直接使用； \n\n从沙盒中找，找到直接使用，缓存到内存。 \n\n从网络上获取，使用，缓存到内存，缓存到沙盒。\n\n## 请问push view controller 和 present view controller有什么区别？\n要是用push view controller ，首先必须确保根视图是NavigationController，不然是不可以用的。\n\npush与present都可以推出新的界面。 \n\npresent与dismiss对应，push和pop对应。 \n\npresent只能逐级返回，push所有视图由视图栈控制，可以返回上一级，也可以返回到根vc，其他vc。 \n\npresent一般用于不同业务界面的切换，push一般用于同一业务不同界面之间的切换。\n","slug":"iOS高级开发面试题（下）","published":1,"updated":"2022-05-19T03:13:11.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo1003ol1l3a0gqf5sy","content":"<h2 id=\"objc使用什么机制管理对象内存？\"><a href=\"#objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"objc使用什么机制管理对象内存？\"></a>objc使用什么机制管理对象内存？</h2><ol>\n<li>MRC(manual retain-release)手动内存管理。</li>\n<li>ARC(automatic reference counting)自动引用计数。</li>\n<li>Garbage collection（垃圾回收机制）但是iOS不支持垃圾回收。<br>ARC作为LLVM3.0编译器的一项特性，在iOS5.0（Xcode4）版本后推出的自动内存管理，节约时间，减少代码量，降低出错率。开发者不需要手动写入retain、release、autorelease三个关键字。</li>\n</ol>\n<p>ARC通过retainCount的机制来决定对象是否需要释放，每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"苹果为什么要废弃dispatch_get_current_queue？\"></a>苹果为什么要废弃dispatch_get_current_queue？</h2><p><code>dispatch_get_current_queue</code>容易造成死锁。</p>\n<p>说到被废弃的<code>dispatch_get_current_queue</code>不得不提一个概念：可重入。若一个程序或子程序可以“安全的被并行执行”，则称其为可重入的。</p>\n<p>若一个函数是可重入的，则该函数：</p>\n<ol>\n<li>不能含有静态（全局）非常量数据。</li>\n<li>不能返回静态（全局）非常量数据的地址。</li>\n<li>只能处理由调用者提供的数据。</li>\n<li>不能依赖于单实例模式资源的锁。</li>\n<li>不能调用不可重入的函数</li>\n</ol>\n<p>有时候，我们希望知道当前执行的<code>queue</code>是谁，比如UI操作需要放在<code>mian queue</code>中执行。如果可以知道当前工作的<code>queue</code>是谁，就可以很方便的指定一段代码再特定的<code>queue</code>中执行。<code>dispatch_get_current_queue</code>正好能帮上忙。于是乎，在指定queue中做一些操作，就可以非常清晰的实现：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> func(<span class=\"built_in\">dispatch_queue_t</span> queue, dispatch_block_t block)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dispatch_get_current_queue() == queue) &#123;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(queue, block);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后潜意识里觉得这个函数是可重入的。但当<code>target queue</code>恰好是<code>current queue</code>时，同步阻塞会导致死锁。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)deadLockFunc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queueA = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueA&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queueB = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueB&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueA, ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(queueB, ^&#123;</span><br><span class=\"line\">            dispatch_block_t block = ^&#123;</span><br><span class=\"line\">                <span class=\"comment\">//do something</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            func(queueA, block);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题出在GCD队列本身是不可重入的，串行队列的层级关系，是出现问题的根本原因。为防止类似的误用，苹果在iOS6废弃了<code>dispatch_get_current_queue()</code>方法，强大的<code>dispatch_get_current_queue()</code>也只能当做一个调试工具了。</p>\n<p>那么应该如何保证GCD方法可重入呢？</p>\n<ul>\n<li><code>dispatch_queue_set_specific</code>标记队列</li>\n<li>递归锁</li>\n</ul>\n<p>以下是上面两种方法的代码片段。</p>\n<p><strong>dispatch_queue_set_specific</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueA = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueA&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueB = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueB&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">dispatch_set_target_queue(queueB, queueA);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> specificKey;</span><br><span class=\"line\"><span class=\"built_in\">CFStringRef</span> specificValue = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">&quot;queueA&quot;</span>);</span><br><span class=\"line\">dispatch_queue_set_specific(queueA,</span><br><span class=\"line\">                            &amp;specificKey,</span><br><span class=\"line\">                            (<span class=\"type\">void</span>*)specificValue,</span><br><span class=\"line\">                            (dispatch_function_t)<span class=\"built_in\">CFRelease</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"built_in\">dispatch_sync</span>(queueB, ^&#123;</span><br><span class=\"line\">    dispatch_block_t block = ^&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">CFStringRef</span> retrievedValue = dispatch_get_specific(&amp;specificKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retrievedValue) &#123;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(queueA, block);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>递归锁</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> dispatch_reentrant(<span class=\"type\">void</span> (^block)())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSRecursiveLock</span> *lock = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        lock = [[<span class=\"built_in\">NSRecursiveLock</span> alloc]init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    [lock lock];</span><br><span class=\"line\">    block();</span><br><span class=\"line\">    [lock unlock];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queueA = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueA&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    dispatch_block_t block = ^&#123;</span><br><span class=\"line\">         <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueA, ^&#123;</span><br><span class=\"line\">        dispatch_reentrant(block);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"苹果是如何实现autoreleasepool的？\"><a href=\"#苹果是如何实现autoreleasepool的？\" class=\"headerlink\" title=\"苹果是如何实现autoreleasepool的？\"></a>苹果是如何实现autoreleasepool的？</h2><p><code>autoreleasepool</code>以一个队列数组的形式现实，主要通过下列三个函数完成：</p>\n<ol>\n<li><code>objc_autoreleasepoolPush</code></li>\n<li><code>objc_autoreleasepoolPop</code></li>\n<li><code>objc_autorelease</code></li>\n</ol>\n<p>看函数名就可以知道，对autorelease分别执行push和pop操作，销毁对象时执行release操作。</p>\n<p>具体说明：我们都知道用类方法创建的对象都是autorelease的，那么一旦Person出了作用域，当在Person的dealloc方法中打上断点，我们就可以看到这样的调用堆栈信息。</p>\n<h2 id=\"使用系统的某些block-API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\"><a href=\"#使用系统的某些block-API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\" class=\"headerlink\" title=\"使用系统的某些block API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\"></a>使用系统的某些block API（如UIView的block版本写动画时），是否也考虑循环引用的问题？</h2><p>系统的某些block API中，UIVIew的block版本写动画时不需要考虑循环引用，但有一些API需要考虑。所谓“循环引用”是指双向的强引用，所以那些“单向的强引用”没有问题，比如这些：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">UIView</span> animateWithDuration:duration animations:^&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.superview layoutIfNeeded];</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.someProperty = xyz;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class=\"string\">@&quot;someNotification&quot;</span> object:<span class=\"literal\">nil</span> queue:[<span class=\"built_in\">NSOperationQueue</span> mainQueue] usingBlock:^(<span class=\"built_in\">NSNotification</span> * _Nonnull note) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.someProperty = xyz;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>这些情况不需要考虑“循环引用”。</p>\n<p>但如果使用了一些参数中可能含有ivar的系统API，如GCD、NSNotificationCenter就要小心一点，比如GCD内部如果引用了self，而且GCD的其他参数是ivar，则要考虑到循环引用。</p>\n<h2 id=\"若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\"><a href=\"#若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\" class=\"headerlink\" title=\"若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\"></a>若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？</h2><p>都可以。</p>\n<h2 id=\"KVC和KVO的keyPath一定是属性么？\"><a href=\"#KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"KVC和KVO的keyPath一定是属性么？\"></a>KVC和KVO的keyPath一定是属性么？</h2><p>KVC支持实例变量，KVO只能手动支持手动设置实例变量的KVO实现监听。</p>\n<h2 id=\"KVC的keyPath中的集合运算符如何使用？\"><a href=\"#KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"KVC的keyPath中的集合运算符如何使用？\"></a>KVC的keyPath中的集合运算符如何使用？</h2><ol>\n<li>必须用在集合对象上或普通对象的集合上</li>\n<li>简单集合运算符有@avg,@count,@max,@min,@sum</li>\n<li>格式@”@sum.age”或 @”集合属性</li>\n</ol>\n<h3 id=\"如何手动触发一个value的KVO\"><a href=\"#如何手动触发一个value的KVO\" class=\"headerlink\" title=\"\b如何手动触发一个value的KVO\"></a>\b如何手动触发一个value的KVO</h3><p>所谓的“手动触发”是区别于“自动触发”：<br>自动触发是类似这种场景：在注册KVO之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。<br>想知道如何手动触发，必须知道自动触发KVO的原理：</p>\n<p>键值观察通知依赖于NSObject的两个方法：\b<code>willChangeValueForKey:</code>和<code>didChangevlueForKey:</code>。在一个观察属性发生改变之前，<code>willChangeValueForKey:</code>一定会被调用，这就会记录旧的值。而当改变发生后，<code>observeValueForKey:ofObject:change:context:</code>会被调用，继而<code>didChangeValueForKey:</code>也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。</p>\n<p>那么“手动触发”的使用场景是什么？\b一般我们只在希望能控制“回调的调用时机”时才会这么做。</p>\n<p>具体做法如下：<br>如果这个<code>value</code>是表示时间的<code>self.now</code>，那么代码如下：最后两行代码缺一不可。<br>\b``` objc<br>// @property (nonatomic, strong) NSDate *now;</p>\n<ul>\n<li>(void)viewDidLoad {<br> [super viewDidLoad];<br> _now = [NSDate date];<br> [self addObserver:self forKeyPath:@”now” options:NSKeyValueObservingOptionNew context:nil];<br> NSLog(@”1”);<br> [self willChangeValueForKey:@”now”]; // “手动触发self.now的KVO”，必写。<br> NSLog(@”2”);<br> [self didChangeValueForKey:@”now”]; // “手动触发self.now的KVO”，必写。<br> NSLog(@”4”);<br>}<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：</span><br><span class=\"line\">&gt; 如何调用`setNow:`时，系统还会以某种方式在中间插入`wilChangeValueForKey:`、`didChangeValueForKey:`和`observeValueForKeyPath:ofObject:change:context:`的调用。</span><br><span class=\"line\"></span><br><span class=\"line\">\b大家可能\b以为是因为`setNow:`是合成方法，有时候我们也能看到有人这么写代码：</span><br><span class=\"line\">``` objc</span><br><span class=\"line\">- (void)setNow:(NSDate *)aDate &#123;</span><br><span class=\"line\">   [self willChangeValueForKey:@&quot;now&quot;]; // 没有必要</span><br><span class=\"line\">   _now = aDate;</span><br><span class=\"line\">   [self didChangeValueForKey:@&quot;now&quot;];// 没有必要</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这完全没有必要，不要做么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用<code>willChangeValueForKey:</code>，之后总是调用<code>didChangeValueForkey:</code>。怎么做到的呢？答案是通过isa混写(isa-swizzling)。</li>\n</ul>\n<h2 id=\"如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h2><h3 id=\"KVO实现机制\"><a href=\"#KVO实现机制\" class=\"headerlink\" title=\"KVO实现机制\"></a>KVO实现机制</h3><p>KVO的实现也依赖于Objective-C强大的Runtime。Apple的文档有简单提到过KVO的实现：</p>\n<blockquote>\n<p>Automatic key-value observing is implemented using a technique called isa-swizzling… When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class …<br>\b从Apple官方文档我们可以看到：被观察者对象的<code>isa\b</code>\b指针会指向一个中间类，而不是原来真正的类。看来，Apple并不希望过多暴露KVO的实现细节。不过，要是你用Runtime提供的方法深入挖掘，所有被掩盖的细节都会原形毕露。</p>\n</blockquote>\n<p>简单概述下KVO的实现：<br>当你观察一个对象时，一个新的类会\b会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的<code>setter</code>方法。自然，重写的<code>setter</code>方法会负责\b在调用原<code>setter</code>方法之前和之后，通知所有观察者对象值的改变。最后把这个对象的<code>isa</code>指针（<code>isa</code>指针告诉Runtime系统这个对象的类是什么）指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。</p>\n<h3 id=\"KVO缺陷\"><a href=\"#KVO缺陷\" class=\"headerlink\" title=\"KVO缺陷\"></a>KVO缺陷</h3><p>KVO和很强大，知道它内部实现，或许能够帮助我们更好地使用它，或在它出错时更方便调试。但官方实现的KVO提供的API实在不怎么样。比如，你只能通过重写<code>observeValueForKeyPath:ofObject:change:context:</code>方法来获得通知。想要提供自定义的<code>selector</code>，不行，想要传一个<code>block</code>，门都没有。而且你还要处理父类的情况-父类同样监听同一个对象的不同属性。但有时候，你不知道父类是不是对这个消息有兴趣。虽然<code>context</code>这个参数就是干这个的，也可以解决这个问题-在<code>observeValueForKeyPath:ofObject:change:context:</code>传进去一个父类不知道的<code>context</code>。但总觉得框在\b这个API的设计下，代码写得\b很别扭。\b至少，也应该支持<code>block</code>吧。</p>\n<p>有不少人觉得官方KVO不好使，所以在实际开发中KVO使用的情景并不多，更多时候还是用Delegate或NotificationCenter。</p>\n<h3 id=\"自己实现KVO\"><a href=\"#自己实现KVO\" class=\"headerlink\" title=\"自己实现KVO\"></a>自己实现KVO</h3><p>首先创建NSObject的Category，并在头文件中添加两个API：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span>(^PGObservingBlock)(<span class=\"type\">id</span> observedObject, <span class=\"built_in\">NSString</span> *observedKey, <span class=\"type\">id</span> oldValue, <span class=\"type\">id</span> newValue);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">KVO</span>)</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)PG_addObserver:(<span class=\"built_in\">NSObject</span> *)observer</span><br><span class=\"line\">                forKey:(<span class=\"built_in\">NSString</span> *)key</span><br><span class=\"line\">             withBlock:(PGObservingBlock)block;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)PG_removeObserver:(<span class=\"built_in\">NSObject</span> *)observer forKey:(<span class=\"built_in\">NSString</span> *)key;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>接下来，实现<code>PG_addObserver:forKey:withBlock:</code>方法。逻辑并不复杂：</p>\n<ol>\n<li>检查对象的类有没有相应的<code>setter</code>方法。如果没有抛出异常；</li>\n<li>检查对象<code>isa</code>指向的类是不是一个KVO类。如果不是，新建一个集成原来类的子类，并把<code>isa</code>指向这个新建的子类；</li>\n<li>\b检查对象的KVO类重写过没有这个<code>setter</code>方法。如果没有，添加重写的setter\b方法；</li>\n<li>添加\b观察者；</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)PG_addObserver:(<span class=\"built_in\">NSObject</span> *)observer</span><br><span class=\"line\">                forKey:(<span class=\"built_in\">NSString</span> *)key</span><br><span class=\"line\">             withBlock:(PGObservingBlock)block</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Step 1: Throw exception if its class or superclasses doesn&#x27;t implement the setter</span></span><br><span class=\"line\">    SEL setterSelector = <span class=\"built_in\">NSSelectorFromString</span>(setterForGetter(key));</span><br><span class=\"line\">    Method setterMethod = class_getInstanceMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], setterSelector);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!setterMethod) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// throw invalid argument exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class clazz = object_getClass(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *clazzName = <span class=\"built_in\">NSStringFromClass</span>(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 2: Make KVO class if this is first time adding observer and </span></span><br><span class=\"line\">    <span class=\"comment\">//          its class is not an KVO class yet</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (![clazzName hasPrefix:kPGKVOClassPrefix]) &#123;</span><br><span class=\"line\">        clazz = [<span class=\"keyword\">self</span> makeKvoClassWithOriginalClassName:clazzName];</span><br><span class=\"line\">        object_setClass(<span class=\"keyword\">self</span>, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 3: Add our kvo setter method if its class (not superclasses) </span></span><br><span class=\"line\">    <span class=\"comment\">//          hasn&#x27;t implemented the setter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span> hasSelector:setterSelector]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"type\">char</span> *types = method_getTypeEncoding(setterMethod);</span><br><span class=\"line\">        class_addMethod(clazz, setterSelector, (IMP)kvo_setter, types);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 4: Add this observation info to saved observation objects</span></span><br><span class=\"line\">    PGObservationInfo *info = [[PGObservationInfo alloc] initWithObserver:observer Key:key block:block];</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *observers = objc_getAssociatedObject(<span class=\"keyword\">self</span>, (__bridge <span class=\"keyword\">const</span> <span class=\"type\">void</span> *)(kPGKVOAssociatedObservers));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!observers) &#123;</span><br><span class=\"line\">        observers = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        objc_setAssociatedObject(<span class=\"keyword\">self</span>, (__bridge <span class=\"keyword\">const</span> <span class=\"type\">void</span> *)(kPGKVOAssociatedObservers), observers, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [observers addObject:info];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来一步步细看。</p>\n<p>第一步里，先通过<code>setterForGetter()</code>方法获得相应的<code>setter</code>的名字（SEL）。也就是把key的首字母大写，然后前面加上<code>set</code>后面加上<code>:</code>，这样<code>key</code>就变成了<code>setKey:</code>。然后再用<code>class_getInstanceMethod</code>去获得<code>setKey:</code>的实现（Method）。如果没有，自然要抛出异常。</p>\n<p>第二步，我们先看类名有没有我们定义的前缀。如果没有，我们就去创建新的子类，并通过<code>object_setClass()</code>修改<code>isa</code>指针。动态创建新的类需要用<code>objc/runtime.h</code>中定义的<code>objc_allocateClassPair()</code>函数。传一个父类，类名，然后额外的空间（通常为0），它返回给你一个类。然后就给这个类添加方法，也可以添加变量。这里，只重写了<code>class</code>方法。哈哈，根Apple一样，这时候我们也企图隐藏这个子类的存在。最后<code>objc_registerClassPair()</code>告诉Runtime这个类的存在。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (Class)makeKvoClassWithOriginalClassName:(<span class=\"built_in\">NSString</span> *)originalClazzName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *kvoClazzName = [kPGKVOClassPrefix stringByAppendingString:originalClazzName];</span><br><span class=\"line\">    Class clazz = <span class=\"built_in\">NSClassFromString</span>(kvoClazzName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// class doesn&#x27;t exist yet, make it</span></span><br><span class=\"line\">    Class originalClazz = object_getClass(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    Class kvoClazz = objc_allocateClassPair(originalClazz, kvoClazzName.UTF8String, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// grab class method&#x27;s signature so we can borrow it</span></span><br><span class=\"line\">    Method clazzMethod = class_getInstanceMethod(originalClazz, <span class=\"keyword\">@selector</span>(<span class=\"keyword\">class</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"type\">char</span> *types = method_getTypeEncoding(clazzMethod);</span><br><span class=\"line\">    class_addMethod(kvoClazz, <span class=\"keyword\">@selector</span>(<span class=\"keyword\">class</span>), (IMP)kvo_class, types);</span><br><span class=\"line\"></span><br><span class=\"line\">    objc_registerClassPair(kvoClazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> kvoClazz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三步，重写setter方法。新的setter在调用原setter方法后，通知每个观察者（调用之前传入的block）:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">void</span> kvo_setter(<span class=\"type\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"type\">id</span> newValue)  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *setterName = <span class=\"built_in\">NSStringFromSelector</span>(_cmd);</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *getterName = getterForSetter(setterName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!getterName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// throw invalid argument exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">id</span> oldValue = [<span class=\"keyword\">self</span> valueForKey:getterName];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_super superclazz = &#123;</span><br><span class=\"line\">        .receiver = <span class=\"keyword\">self</span>,</span><br><span class=\"line\">        .super_class = class_getSuperclass(object_getClass(<span class=\"keyword\">self</span>))</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// cast our pointer so the compiler won&#x27;t complain</span></span><br><span class=\"line\">    <span class=\"type\">void</span> (*objc_msgSendSuperCasted)(<span class=\"type\">void</span> *, SEL, <span class=\"type\">id</span>) = (<span class=\"type\">void</span> *)objc_msgSendSuper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// call super&#x27;s setter, which is original class&#x27;s setter method</span></span><br><span class=\"line\">    objc_msgSendSuperCasted(&amp;superclazz, _cmd, newValue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// look up observers and call the blocks</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *observers = objc_getAssociatedObject(<span class=\"keyword\">self</span>, (__bridge <span class=\"keyword\">const</span> <span class=\"type\">void</span> *)(kPGKVOAssociatedObservers));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PGObservationInfo *each <span class=\"keyword\">in</span> observers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([each.key isEqualToString:getterName]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">                each.block(<span class=\"keyword\">self</span>, getterName, oldValue, newValue);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后一步，把这个观察者的相关信息存在<code>associatedObject</code>\b里。观察的相关信息（观察者，被观察的key，和传入的block）封装在<code>PGObservationInfo</code>类\b里。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">PGObservationInfo</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">NSObject</span> *observer;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *key;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) PGObservingBlock block;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>到此为止，一个基本的KVO就可以work了。</p>\n<h2 id=\"IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"IB中User Defined Runtime Attributes如何使用？\"></a>IB中User Defined Runtime Attributes如何使用？</h2><p>它能够通过KVC的方式配置一些你在interface builder中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewController。</p>\n<h2 id=\"BAD-ACCESS在什么情况下出现？\"><a href=\"#BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"BAD_ACCESS在什么情况下出现？\"></a>BAD_ACCESS在什么情况下出现？</h2><p>\b访问了悬垂指针，比如对一个已经释放的对象进行了release、访问已经释放对象的成员变量或则发送消息、死循环等。</p>\n<h2 id=\"如何调试BAD-ACCESS错误\"><a href=\"#如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"如何调试BAD_ACCESS错误\"></a>如何调试BAD_ACCESS错误</h2><ol>\n<li>重写\bobject的\brespondsToSelector方法，实现出现EXEC_BAD_ACCESS前访问的最后一个object</li>\n<li>通过设置Xcode中的zombie</li>\n<li>设置全局断点快速定位问题代码\b所在行</li>\n<li>Xcode7已经\b集成了BAD_ACCESS捕获功能：Address Sanitizer。用法如下：在\b配置中勾选Enable Address Sinitizer。</li>\n</ol>\n<h2 id=\"lldb（gdb）常用的调试命令？\"><a href=\"#lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"lldb（gdb）常用的调试命令？\"></a>lldb（gdb）常用的调试命令？</h2><ul>\n<li>breakpoint 设置断点定位到某一个函数</li>\n<li>n 断点指向下一步</li>\n<li>po 打印对象<br>更多lldb调试命令可以查看：<a href=\"http://lldb.llvm.org/lldb-gdb.html\">The LLDB Debugger</a></li>\n</ul>\n<h2 id=\"ios里面存数据有哪些方法？\"><a href=\"#ios里面存数据有哪些方法？\" class=\"headerlink\" title=\"ios里面存数据有哪些方法？\"></a>ios里面存数据有哪些方法？</h2><p>\b这里的存储就是所谓的持久化，就是讲将数据保存在硬盘，使得在应用程序或机器重启后可以继续访问之前保存的数据。在iOS开发中，有很多数据持久化的方案：</p>\n<ol>\n<li>plist文件（属性列表）</li>\n<li>preference（偏好设置）NSUserDefaults</li>\n<li>NSKeyedArchiver（归档）</li>\n<li>SQLite 3</li>\n<li>CoreData</li>\n</ol>\n<h2 id=\"frame-bounds-center-的区别\"><a href=\"#frame-bounds-center-的区别\" class=\"headerlink\" title=\"frame bounds center 的区别\"></a>frame bounds center 的区别</h2><ul>\n<li>frame：描述当前视图在其父视图中的位置和大小。</li>\n<li>bounds：描述当前视图在其自身坐标系统中的位置和大小</li>\n<li>center：描述当前视图的中心点在其视图中的位置</li>\n</ul>\n<h2 id=\"线程共享进程资源的实例\"><a href=\"#线程共享进程资源的实例\" class=\"headerlink\" title=\"线程共享进程资源的实例\"></a>线程共享进程资源的实例</h2><p>NSUserDefault</p>\n<h2 id=\"OC运行时能加实例变量吗\"><a href=\"#OC运行时能加实例变量吗\" class=\"headerlink\" title=\"OC运行时能加实例变量吗?\"></a>OC运行时能加实例变量吗?</h2><p>可以。运行时可以通过Runtime动态添加方法，再次方法里去初始化实例变量。</p>\n<h2 id=\"64位下NSNumber的优化\"><a href=\"#64位下NSNumber的优化\" class=\"headerlink\" title=\"64位下NSNumber的优化\"></a>64位下NSNumber的优化</h2><h3 id=\"64bit-tagged-pointer\"><a href=\"#64bit-tagged-pointer\" class=\"headerlink\" title=\"64bit-tagged pointer\"></a>64bit-tagged pointer</h3><ul>\n<li>指针地址对其：分配堆中的内存时，采用偶数倍或则以2的指数倍的地址为边界</li>\n<li>iOS中是以16个字节为对其边界的。所以分配的\b内存地址后面4为永远是0</li>\n<li>64为理论上可以支持最大的2^64字节内存空间。这么大的地址空间完全是浪费的。64位环境下内存地址前面有很多0</li>\n<li>Tagged Pointer 指针地址对齐和64位超大地址的出现，指针地址仅仅作为内存地址是比较浪费的，可以在指针地址中保存更多的信息。 所以就有了Tagged Pointer概念。</li>\n</ul>\n<h3 id=\"isa指针的优化\"><a href=\"#isa指针的优化\" class=\"headerlink\" title=\"isa指针的优化\"></a>isa指针的优化</h3><p>所有的类继承自NSObject，因此每个对象都有一个isa指针指向所属的类。</p>\n<p>在32位环境下，对象的引用都保存在外部的表中，对引用计数的增减操作都需要锁定这个表，操作完后，才解锁，这样的效率是很慢的。</p>\n<p>在64位环境下，isa也是64-bit的，实际操作部分只用到32位，剩余部分会用到tagged pointer的概念，其中19位将保存对象的引用计数，这样引用计数的操作只需要原子的修改这个指针即可，如果超出19位，才会将引用计数保存到外部表，这种情况是很少的，因此效率会大大提高。</p>\n<h2 id=\"NSThread-NSOperation-dispatch-和-gcd的关系\"><a href=\"#NSThread-NSOperation-dispatch-和-gcd的关系\" class=\"headerlink\" title=\"NSThread NSOperation dispatch 和 gcd的关系\"></a>NSThread NSOperation dispatch 和 gcd的关系</h2><p>NSThread优点：NSThread比其他两个轻量级，使用简单。<br>缺点：需要自己管理线程的生命周期、线程同步、加锁、睡眠以及唤醒等。线程同步对数据加锁会有一定的系统开销。</p>\n<p>NSOperation：不需要关系线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上，NSOperation是面向对象的，属于OC类。</p>\n<p>GCD：Grand Central Dispatch是由苹果开发的一个多核编程的解决方案。是相比NSThread， NSOperation更高效和强大的技术–GCD是基于C的底层API。</p>\n<p>GCD主要是建立个个线程时间的依赖关系这类的情况，更高的并发执行能力。</p>\n<h2 id=\"iOS常用回调方式以及它们之间的区别\"><a href=\"#iOS常用回调方式以及它们之间的区别\" class=\"headerlink\" title=\"iOS常用回调方式以及它们之间的区别\"></a>iOS常用回调方式以及它们之间的区别</h2><p>delegate回调，kvo回调，NSNotification回调，block回调</p>\n<h2 id=\"声明delegate的时候为什么用assign，而不用weak等等\"><a href=\"#声明delegate的时候为什么用assign，而不用weak等等\" class=\"headerlink\" title=\"声明delegate的时候为什么用assign，而不用weak等等\"></a>声明delegate的时候为什么用assign，而不用weak等等</h2><p>weak比assgin线程更安全。</p>\n<p>但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。</p>\n<h2 id=\"Block的使用\"><a href=\"#Block的使用\" class=\"headerlink\" title=\"Block的使用\"></a>Block的使用</h2><p>网络响应block回调。对响应数据进行一个包装作为参数调用控制器的函数。</p>\n<h2 id=\"二叉树的深度优先遍历和广度优先遍历\"><a href=\"#二叉树的深度优先遍历和广度优先遍历\" class=\"headerlink\" title=\"二叉树的深度优先遍历和广度优先遍历\"></a>二叉树的深度优先遍历和广度优先遍历</h2><h2 id=\"iOS-crash后的调试方法？\"><a href=\"#iOS-crash后的调试方法？\" class=\"headerlink\" title=\"iOS crash后的调试方法？\"></a>iOS crash后的调试方法？</h2><p>线上收集，Xcode中下载崩溃日志。接入腾讯的Bugly。</p>\n<h2 id=\"OC中深拷贝-浅拷贝\"><a href=\"#OC中深拷贝-浅拷贝\" class=\"headerlink\" title=\"OC中深拷贝,浅拷贝\"></a>OC中深拷贝,浅拷贝</h2><p>对不可变对象，copy则执行浅拷贝，mutablCopy则执行深拷贝。对可变对象，copy和mutableCopy都执行深拷贝，但是copy返回的对象是不可变的。<br><img src=\"https://upload-images.jianshu.io/upload_images/10601171-d7aa0b24e2fefb9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/611/format/webp\"></p>\n<h2 id=\"iOS沙盒机制\"><a href=\"#iOS沙盒机制\" class=\"headerlink\" title=\"iOS沙盒机制\"></a>iOS沙盒机制</h2><p>iOS应用程序只能在为该改程序创建的文件系统中读取文件，不可以去其它地方访问，此区域被成为沙盒，所以所有的非代码文件都要保存在此，例如图像，图标，声音，映像，属性列表，文本文件等。 </p>\n<ol>\n<li>每个应用程序都有自己的存储空间 </li>\n<li>应用程序不能翻过自己的围墙去访问别的存储空间的内容 </li>\n<li>应用程序请求的数据都要通过权限检测，假如不符合条件的话，不会被放行</li>\n</ol>\n<h2 id=\"不更新版本的方式添加新特性（热更新）\"><a href=\"#不更新版本的方式添加新特性（热更新）\" class=\"headerlink\" title=\"不更新版本的方式添加新特性（热更新）\"></a>不更新版本的方式添加新特性（热更新）</h2><ol>\n<li>使用FaceBook的开源框架reactive native，使用js写原生的iOS应用。iOS app可以在运行时从服务器拉取最新的js文件到本地，然后执行，因为js是一门动态的脚本语言，所以可以在运行时直接读取js文件执行，因此能够实现iOS的热更新。</li>\n<li>使用lua脚本。lua脚本如同js一样，也能在运行时去读取lua脚本并执行。</li>\n<li>Xcode6之后，苹果开放了iOS的动态库编译权限。所谓的动态库，其实就是可以在运行时加载。可以利用这个实现iOS的热更新。能够从沙箱里面读取到代码文件，就意味着可以在线更新代码，远程升级</li>\n<li>JSPatch，热更新，不过被苹果禁止使用了。</li>\n</ol>\n<h2 id=\"如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\"><a href=\"#如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\" class=\"headerlink\" title=\"如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\"></a>如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？</h2><p>遇到这种情况程序会崩溃，因为当前界面释放的同时，在当前界面所定义的对象也会释放，会出现野指针的情况，解决的办法是将异步请求的对象保持到单例中，这样界面释放的同时异步请求的对象还存在。</p>\n<h2 id=\"怎么用C-实现kvo？\"><a href=\"#怎么用C-实现kvo？\" class=\"headerlink\" title=\"怎么用C++ 实现kvo？\"></a>怎么用C++ 实现kvo？</h2><p>开启一个新线程去轮询监听事件，并传入响应方法，如果事件发生就调用监听响应方法。</p>\n<h2 id=\"你会如何储存用户的认证信息？\"><a href=\"#你会如何储存用户的认证信息？\" class=\"headerlink\" title=\"你会如何储存用户的认证信息？\"></a>你会如何储存用户的认证信息？</h2><p>使用keychain来存储,也就是钥匙串。 使用keychain需要导入Security框架。 </p>\n<p>只需要把“KeychainItemWrapper.h”和“KeychainItemWrapper.m”拷贝到我们项目，并导入Security.framework 。KeychainItemWrapper的用法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 初始化一个保存用户帐号的KeychainItemWrapper */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">KeychainItemWrapper *wrapper = [[KeychainItemWrapper alloc] initWithIdentifier:<span class=\"string\">@&quot;Account Number&quot;</span> accessGroup:<span class=\"string\">@&quot;YOUR_APP_ID_HERE.com.yourcompany.AppIdentifier&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//保存数据 </span></span><br><span class=\"line\"></span><br><span class=\"line\">[wrapper setObject:<span class=\"string\">@&quot;&lt;帐号&gt;&quot;</span> forKey:(<span class=\"type\">id</span>)kSecAttrAccount]; </span><br><span class=\"line\"></span><br><span class=\"line\">[wrapper setObject:<span class=\"string\">@&quot;&lt;帐号密码&gt;&quot;</span> forKey:(<span class=\"type\">id</span>)kSecValueData];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从keychain里取出帐号密码 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *password = [wrapper objectForKey:(<span class=\"type\">id</span>)kSecValueData];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆和栈的区别\"><a href=\"#堆和栈的区别\" class=\"headerlink\" title=\"堆和栈的区别\"></a>堆和栈的区别</h2><p>栈区(stack)由编译器自动分配释放 ,存放方法(函数)的参数值, 局部变量的值等，栈是向低地址扩展的数据结构，是一块连续的内存的区域。即栈顶的地址和栈的最大容量是系统预先规定好的。 </p>\n<p>堆区(heap)一般由程序员分配释放, 若程序员不释放,程序结束时由OS回收，向高地址扩展的数据结构，是不连续的内存区域，从而堆获得的空间比较灵活。 </p>\n<p>碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出. </p>\n<p>分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 </p>\n<p>分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的。 </p>\n<p>全局区(静态区)(static),全局变量和静态变量的存储是放在一块 的,初始化的全局变量和静态变量在一块区域, 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后有系统释放。 </p>\n<p>文字常量区—常量字符串就是放在这里的。程序结束后由系统释放。 </p>\n<p>程序代码区—存放函数体的二进制代码</p>\n<h2 id=\"OC有多继承吗？没有的话用什么代替？\"><a href=\"#OC有多继承吗？没有的话用什么代替？\" class=\"headerlink\" title=\"OC有多继承吗？没有的话用什么代替？\"></a>OC有多继承吗？没有的话用什么代替？</h2><p>OC中没有多继承，可以用委托代理Protocol来实现。</p>\n<h2 id=\"SDWebImage原理\"><a href=\"#SDWebImage原理\" class=\"headerlink\" title=\"SDWebImage原理\"></a>SDWebImage原理</h2><p>从内存中（字典）找图片（当这个图片在本次程序加载过），找到直接使用； </p>\n<p>从沙盒中找，找到直接使用，缓存到内存。 </p>\n<p>从网络上获取，使用，缓存到内存，缓存到沙盒。</p>\n<h2 id=\"请问push-view-controller-和-present-view-controller有什么区别？\"><a href=\"#请问push-view-controller-和-present-view-controller有什么区别？\" class=\"headerlink\" title=\"请问push view controller 和 present view controller有什么区别？\"></a>请问push view controller 和 present view controller有什么区别？</h2><p>要是用push view controller ，首先必须确保根视图是NavigationController，不然是不可以用的。</p>\n<p>push与present都可以推出新的界面。 </p>\n<p>present与dismiss对应，push和pop对应。 </p>\n<p>present只能逐级返回，push所有视图由视图栈控制，可以返回上一级，也可以返回到根vc，其他vc。 </p>\n<p>present一般用于不同业务界面的切换，push一般用于同一业务不同界面之间的切换。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"objc使用什么机制管理对象内存？\"><a href=\"#objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"objc使用什么机制管理对象内存？\"></a>objc使用什么机制管理对象内存？</h2><ol>\n<li>MRC(manual retain-release)手动内存管理。</li>\n<li>ARC(automatic reference counting)自动引用计数。</li>\n<li>Garbage collection（垃圾回收机制）但是iOS不支持垃圾回收。<br>ARC作为LLVM3.0编译器的一项特性，在iOS5.0（Xcode4）版本后推出的自动内存管理，节约时间，减少代码量，降低出错率。开发者不需要手动写入retain、release、autorelease三个关键字。</li>\n</ol>\n<p>ARC通过retainCount的机制来决定对象是否需要释放，每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>","more":"<h2 id=\"苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"苹果为什么要废弃dispatch_get_current_queue？\"></a>苹果为什么要废弃dispatch_get_current_queue？</h2><p><code>dispatch_get_current_queue</code>容易造成死锁。</p>\n<p>说到被废弃的<code>dispatch_get_current_queue</code>不得不提一个概念：可重入。若一个程序或子程序可以“安全的被并行执行”，则称其为可重入的。</p>\n<p>若一个函数是可重入的，则该函数：</p>\n<ol>\n<li>不能含有静态（全局）非常量数据。</li>\n<li>不能返回静态（全局）非常量数据的地址。</li>\n<li>只能处理由调用者提供的数据。</li>\n<li>不能依赖于单实例模式资源的锁。</li>\n<li>不能调用不可重入的函数</li>\n</ol>\n<p>有时候，我们希望知道当前执行的<code>queue</code>是谁，比如UI操作需要放在<code>mian queue</code>中执行。如果可以知道当前工作的<code>queue</code>是谁，就可以很方便的指定一段代码再特定的<code>queue</code>中执行。<code>dispatch_get_current_queue</code>正好能帮上忙。于是乎，在指定queue中做一些操作，就可以非常清晰的实现：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> func(<span class=\"built_in\">dispatch_queue_t</span> queue, dispatch_block_t block)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dispatch_get_current_queue() == queue) &#123;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(queue, block);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后潜意识里觉得这个函数是可重入的。但当<code>target queue</code>恰好是<code>current queue</code>时，同步阻塞会导致死锁。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)deadLockFunc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queueA = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueA&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queueB = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueB&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueA, ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(queueB, ^&#123;</span><br><span class=\"line\">            dispatch_block_t block = ^&#123;</span><br><span class=\"line\">                <span class=\"comment\">//do something</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            func(queueA, block);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题出在GCD队列本身是不可重入的，串行队列的层级关系，是出现问题的根本原因。为防止类似的误用，苹果在iOS6废弃了<code>dispatch_get_current_queue()</code>方法，强大的<code>dispatch_get_current_queue()</code>也只能当做一个调试工具了。</p>\n<p>那么应该如何保证GCD方法可重入呢？</p>\n<ul>\n<li><code>dispatch_queue_set_specific</code>标记队列</li>\n<li>递归锁</li>\n</ul>\n<p>以下是上面两种方法的代码片段。</p>\n<p><strong>dispatch_queue_set_specific</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueA = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueA&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueB = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueB&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">dispatch_set_target_queue(queueB, queueA);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> specificKey;</span><br><span class=\"line\"><span class=\"built_in\">CFStringRef</span> specificValue = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">&quot;queueA&quot;</span>);</span><br><span class=\"line\">dispatch_queue_set_specific(queueA,</span><br><span class=\"line\">                            &amp;specificKey,</span><br><span class=\"line\">                            (<span class=\"type\">void</span>*)specificValue,</span><br><span class=\"line\">                            (dispatch_function_t)<span class=\"built_in\">CFRelease</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"built_in\">dispatch_sync</span>(queueB, ^&#123;</span><br><span class=\"line\">    dispatch_block_t block = ^&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">CFStringRef</span> retrievedValue = dispatch_get_specific(&amp;specificKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retrievedValue) &#123;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(queueA, block);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>递归锁</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> dispatch_reentrant(<span class=\"type\">void</span> (^block)())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSRecursiveLock</span> *lock = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        lock = [[<span class=\"built_in\">NSRecursiveLock</span> alloc]init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    [lock lock];</span><br><span class=\"line\">    block();</span><br><span class=\"line\">    [lock unlock];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queueA = dispatch_queue_create(<span class=\"string\">&quot;com.yiyaaixuexi.queueA&quot;</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    dispatch_block_t block = ^&#123;</span><br><span class=\"line\">         <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueA, ^&#123;</span><br><span class=\"line\">        dispatch_reentrant(block);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"苹果是如何实现autoreleasepool的？\"><a href=\"#苹果是如何实现autoreleasepool的？\" class=\"headerlink\" title=\"苹果是如何实现autoreleasepool的？\"></a>苹果是如何实现autoreleasepool的？</h2><p><code>autoreleasepool</code>以一个队列数组的形式现实，主要通过下列三个函数完成：</p>\n<ol>\n<li><code>objc_autoreleasepoolPush</code></li>\n<li><code>objc_autoreleasepoolPop</code></li>\n<li><code>objc_autorelease</code></li>\n</ol>\n<p>看函数名就可以知道，对autorelease分别执行push和pop操作，销毁对象时执行release操作。</p>\n<p>具体说明：我们都知道用类方法创建的对象都是autorelease的，那么一旦Person出了作用域，当在Person的dealloc方法中打上断点，我们就可以看到这样的调用堆栈信息。</p>\n<h2 id=\"使用系统的某些block-API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\"><a href=\"#使用系统的某些block-API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\" class=\"headerlink\" title=\"使用系统的某些block API（如UIView的block版本写动画时），是否也考虑循环引用的问题？\"></a>使用系统的某些block API（如UIView的block版本写动画时），是否也考虑循环引用的问题？</h2><p>系统的某些block API中，UIVIew的block版本写动画时不需要考虑循环引用，但有一些API需要考虑。所谓“循环引用”是指双向的强引用，所以那些“单向的强引用”没有问题，比如这些：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">UIView</span> animateWithDuration:duration animations:^&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.superview layoutIfNeeded];</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.someProperty = xyz;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class=\"string\">@&quot;someNotification&quot;</span> object:<span class=\"literal\">nil</span> queue:[<span class=\"built_in\">NSOperationQueue</span> mainQueue] usingBlock:^(<span class=\"built_in\">NSNotification</span> * _Nonnull note) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.someProperty = xyz;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>这些情况不需要考虑“循环引用”。</p>\n<p>但如果使用了一些参数中可能含有ivar的系统API，如GCD、NSNotificationCenter就要小心一点，比如GCD内部如果引用了self，而且GCD的其他参数是ivar，则要考虑到循环引用。</p>\n<h2 id=\"若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\"><a href=\"#若一个类有实例变量NSString-foo，调用setValue-forKey-时，可以以foo还是-foo作为key？\" class=\"headerlink\" title=\"若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\"></a>若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？</h2><p>都可以。</p>\n<h2 id=\"KVC和KVO的keyPath一定是属性么？\"><a href=\"#KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"KVC和KVO的keyPath一定是属性么？\"></a>KVC和KVO的keyPath一定是属性么？</h2><p>KVC支持实例变量，KVO只能手动支持手动设置实例变量的KVO实现监听。</p>\n<h2 id=\"KVC的keyPath中的集合运算符如何使用？\"><a href=\"#KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"KVC的keyPath中的集合运算符如何使用？\"></a>KVC的keyPath中的集合运算符如何使用？</h2><ol>\n<li>必须用在集合对象上或普通对象的集合上</li>\n<li>简单集合运算符有@avg,@count,@max,@min,@sum</li>\n<li>格式@”@sum.age”或 @”集合属性</li>\n</ol>\n<h3 id=\"如何手动触发一个value的KVO\"><a href=\"#如何手动触发一个value的KVO\" class=\"headerlink\" title=\"\b如何手动触发一个value的KVO\"></a>\b如何手动触发一个value的KVO</h3><p>所谓的“手动触发”是区别于“自动触发”：<br>自动触发是类似这种场景：在注册KVO之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了。<br>想知道如何手动触发，必须知道自动触发KVO的原理：</p>\n<p>键值观察通知依赖于NSObject的两个方法：\b<code>willChangeValueForKey:</code>和<code>didChangevlueForKey:</code>。在一个观察属性发生改变之前，<code>willChangeValueForKey:</code>一定会被调用，这就会记录旧的值。而当改变发生后，<code>observeValueForKey:ofObject:change:context:</code>会被调用，继而<code>didChangeValueForKey:</code>也会被调用。如果可以手动实现这些调用，就可以实现“手动触发”了。</p>\n<p>那么“手动触发”的使用场景是什么？\b一般我们只在希望能控制“回调的调用时机”时才会这么做。</p>\n<p>具体做法如下：<br>如果这个<code>value</code>是表示时间的<code>self.now</code>，那么代码如下：最后两行代码缺一不可。<br>\b``` objc<br>// @property (nonatomic, strong) NSDate *now;</p>\n<ul>\n<li>(void)viewDidLoad {<br> [super viewDidLoad];<br> _now = [NSDate date];<br> [self addObserver:self forKeyPath:@”now” options:NSKeyValueObservingOptionNew context:nil];<br> NSLog(@”1”);<br> [self willChangeValueForKey:@”now”]; // “手动触发self.now的KVO”，必写。<br> NSLog(@”2”);<br> [self didChangeValueForKey:@”now”]; // “手动触发self.now的KVO”，必写。<br> NSLog(@”4”);<br>}<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">但是平时我们一般不会这么干，我们都是等系统去“自动触发”。“自动触发”的实现原理：</span><br><span class=\"line\">&gt; 如何调用`setNow:`时，系统还会以某种方式在中间插入`wilChangeValueForKey:`、`didChangeValueForKey:`和`observeValueForKeyPath:ofObject:change:context:`的调用。</span><br><span class=\"line\"></span><br><span class=\"line\">\b大家可能\b以为是因为`setNow:`是合成方法，有时候我们也能看到有人这么写代码：</span><br><span class=\"line\">``` objc</span><br><span class=\"line\">- (void)setNow:(NSDate *)aDate &#123;</span><br><span class=\"line\">   [self willChangeValueForKey:@&quot;now&quot;]; // 没有必要</span><br><span class=\"line\">   _now = aDate;</span><br><span class=\"line\">   [self didChangeValueForKey:@&quot;now&quot;];// 没有必要</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这完全没有必要，不要做么做，这样的话，KVO代码会被调用两次。KVO在调用存取方法之前总是调用<code>willChangeValueForKey:</code>，之后总是调用<code>didChangeValueForkey:</code>。怎么做到的呢？答案是通过isa混写(isa-swizzling)。</li>\n</ul>\n<h2 id=\"如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h2><h3 id=\"KVO实现机制\"><a href=\"#KVO实现机制\" class=\"headerlink\" title=\"KVO实现机制\"></a>KVO实现机制</h3><p>KVO的实现也依赖于Objective-C强大的Runtime。Apple的文档有简单提到过KVO的实现：</p>\n<blockquote>\n<p>Automatic key-value observing is implemented using a technique called isa-swizzling… When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class …<br>\b从Apple官方文档我们可以看到：被观察者对象的<code>isa\b</code>\b指针会指向一个中间类，而不是原来真正的类。看来，Apple并不希望过多暴露KVO的实现细节。不过，要是你用Runtime提供的方法深入挖掘，所有被掩盖的细节都会原形毕露。</p>\n</blockquote>\n<p>简单概述下KVO的实现：<br>当你观察一个对象时，一个新的类会\b会被动态创建。这个类继承自该对象的原本的类，并重写了被观察属性的<code>setter</code>方法。自然，重写的<code>setter</code>方法会负责\b在调用原<code>setter</code>方法之前和之后，通知所有观察者对象值的改变。最后把这个对象的<code>isa</code>指针（<code>isa</code>指针告诉Runtime系统这个对象的类是什么）指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。</p>\n<h3 id=\"KVO缺陷\"><a href=\"#KVO缺陷\" class=\"headerlink\" title=\"KVO缺陷\"></a>KVO缺陷</h3><p>KVO和很强大，知道它内部实现，或许能够帮助我们更好地使用它，或在它出错时更方便调试。但官方实现的KVO提供的API实在不怎么样。比如，你只能通过重写<code>observeValueForKeyPath:ofObject:change:context:</code>方法来获得通知。想要提供自定义的<code>selector</code>，不行，想要传一个<code>block</code>，门都没有。而且你还要处理父类的情况-父类同样监听同一个对象的不同属性。但有时候，你不知道父类是不是对这个消息有兴趣。虽然<code>context</code>这个参数就是干这个的，也可以解决这个问题-在<code>observeValueForKeyPath:ofObject:change:context:</code>传进去一个父类不知道的<code>context</code>。但总觉得框在\b这个API的设计下，代码写得\b很别扭。\b至少，也应该支持<code>block</code>吧。</p>\n<p>有不少人觉得官方KVO不好使，所以在实际开发中KVO使用的情景并不多，更多时候还是用Delegate或NotificationCenter。</p>\n<h3 id=\"自己实现KVO\"><a href=\"#自己实现KVO\" class=\"headerlink\" title=\"自己实现KVO\"></a>自己实现KVO</h3><p>首先创建NSObject的Category，并在头文件中添加两个API：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span>(^PGObservingBlock)(<span class=\"type\">id</span> observedObject, <span class=\"built_in\">NSString</span> *observedKey, <span class=\"type\">id</span> oldValue, <span class=\"type\">id</span> newValue);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">KVO</span>)</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)PG_addObserver:(<span class=\"built_in\">NSObject</span> *)observer</span><br><span class=\"line\">                forKey:(<span class=\"built_in\">NSString</span> *)key</span><br><span class=\"line\">             withBlock:(PGObservingBlock)block;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)PG_removeObserver:(<span class=\"built_in\">NSObject</span> *)observer forKey:(<span class=\"built_in\">NSString</span> *)key;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>接下来，实现<code>PG_addObserver:forKey:withBlock:</code>方法。逻辑并不复杂：</p>\n<ol>\n<li>检查对象的类有没有相应的<code>setter</code>方法。如果没有抛出异常；</li>\n<li>检查对象<code>isa</code>指向的类是不是一个KVO类。如果不是，新建一个集成原来类的子类，并把<code>isa</code>指向这个新建的子类；</li>\n<li>\b检查对象的KVO类重写过没有这个<code>setter</code>方法。如果没有，添加重写的setter\b方法；</li>\n<li>添加\b观察者；</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)PG_addObserver:(<span class=\"built_in\">NSObject</span> *)observer</span><br><span class=\"line\">                forKey:(<span class=\"built_in\">NSString</span> *)key</span><br><span class=\"line\">             withBlock:(PGObservingBlock)block</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Step 1: Throw exception if its class or superclasses doesn&#x27;t implement the setter</span></span><br><span class=\"line\">    SEL setterSelector = <span class=\"built_in\">NSSelectorFromString</span>(setterForGetter(key));</span><br><span class=\"line\">    Method setterMethod = class_getInstanceMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], setterSelector);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!setterMethod) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// throw invalid argument exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class clazz = object_getClass(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *clazzName = <span class=\"built_in\">NSStringFromClass</span>(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 2: Make KVO class if this is first time adding observer and </span></span><br><span class=\"line\">    <span class=\"comment\">//          its class is not an KVO class yet</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (![clazzName hasPrefix:kPGKVOClassPrefix]) &#123;</span><br><span class=\"line\">        clazz = [<span class=\"keyword\">self</span> makeKvoClassWithOriginalClassName:clazzName];</span><br><span class=\"line\">        object_setClass(<span class=\"keyword\">self</span>, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 3: Add our kvo setter method if its class (not superclasses) </span></span><br><span class=\"line\">    <span class=\"comment\">//          hasn&#x27;t implemented the setter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span> hasSelector:setterSelector]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"type\">char</span> *types = method_getTypeEncoding(setterMethod);</span><br><span class=\"line\">        class_addMethod(clazz, setterSelector, (IMP)kvo_setter, types);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 4: Add this observation info to saved observation objects</span></span><br><span class=\"line\">    PGObservationInfo *info = [[PGObservationInfo alloc] initWithObserver:observer Key:key block:block];</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *observers = objc_getAssociatedObject(<span class=\"keyword\">self</span>, (__bridge <span class=\"keyword\">const</span> <span class=\"type\">void</span> *)(kPGKVOAssociatedObservers));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!observers) &#123;</span><br><span class=\"line\">        observers = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        objc_setAssociatedObject(<span class=\"keyword\">self</span>, (__bridge <span class=\"keyword\">const</span> <span class=\"type\">void</span> *)(kPGKVOAssociatedObservers), observers, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [observers addObject:info];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来一步步细看。</p>\n<p>第一步里，先通过<code>setterForGetter()</code>方法获得相应的<code>setter</code>的名字（SEL）。也就是把key的首字母大写，然后前面加上<code>set</code>后面加上<code>:</code>，这样<code>key</code>就变成了<code>setKey:</code>。然后再用<code>class_getInstanceMethod</code>去获得<code>setKey:</code>的实现（Method）。如果没有，自然要抛出异常。</p>\n<p>第二步，我们先看类名有没有我们定义的前缀。如果没有，我们就去创建新的子类，并通过<code>object_setClass()</code>修改<code>isa</code>指针。动态创建新的类需要用<code>objc/runtime.h</code>中定义的<code>objc_allocateClassPair()</code>函数。传一个父类，类名，然后额外的空间（通常为0），它返回给你一个类。然后就给这个类添加方法，也可以添加变量。这里，只重写了<code>class</code>方法。哈哈，根Apple一样，这时候我们也企图隐藏这个子类的存在。最后<code>objc_registerClassPair()</code>告诉Runtime这个类的存在。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (Class)makeKvoClassWithOriginalClassName:(<span class=\"built_in\">NSString</span> *)originalClazzName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *kvoClazzName = [kPGKVOClassPrefix stringByAppendingString:originalClazzName];</span><br><span class=\"line\">    Class clazz = <span class=\"built_in\">NSClassFromString</span>(kvoClazzName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// class doesn&#x27;t exist yet, make it</span></span><br><span class=\"line\">    Class originalClazz = object_getClass(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    Class kvoClazz = objc_allocateClassPair(originalClazz, kvoClazzName.UTF8String, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// grab class method&#x27;s signature so we can borrow it</span></span><br><span class=\"line\">    Method clazzMethod = class_getInstanceMethod(originalClazz, <span class=\"keyword\">@selector</span>(<span class=\"keyword\">class</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"type\">char</span> *types = method_getTypeEncoding(clazzMethod);</span><br><span class=\"line\">    class_addMethod(kvoClazz, <span class=\"keyword\">@selector</span>(<span class=\"keyword\">class</span>), (IMP)kvo_class, types);</span><br><span class=\"line\"></span><br><span class=\"line\">    objc_registerClassPair(kvoClazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> kvoClazz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三步，重写setter方法。新的setter在调用原setter方法后，通知每个观察者（调用之前传入的block）:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">void</span> kvo_setter(<span class=\"type\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"type\">id</span> newValue)  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *setterName = <span class=\"built_in\">NSStringFromSelector</span>(_cmd);</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *getterName = getterForSetter(setterName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!getterName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// throw invalid argument exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">id</span> oldValue = [<span class=\"keyword\">self</span> valueForKey:getterName];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_super superclazz = &#123;</span><br><span class=\"line\">        .receiver = <span class=\"keyword\">self</span>,</span><br><span class=\"line\">        .super_class = class_getSuperclass(object_getClass(<span class=\"keyword\">self</span>))</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// cast our pointer so the compiler won&#x27;t complain</span></span><br><span class=\"line\">    <span class=\"type\">void</span> (*objc_msgSendSuperCasted)(<span class=\"type\">void</span> *, SEL, <span class=\"type\">id</span>) = (<span class=\"type\">void</span> *)objc_msgSendSuper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// call super&#x27;s setter, which is original class&#x27;s setter method</span></span><br><span class=\"line\">    objc_msgSendSuperCasted(&amp;superclazz, _cmd, newValue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// look up observers and call the blocks</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *observers = objc_getAssociatedObject(<span class=\"keyword\">self</span>, (__bridge <span class=\"keyword\">const</span> <span class=\"type\">void</span> *)(kPGKVOAssociatedObservers));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PGObservationInfo *each <span class=\"keyword\">in</span> observers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([each.key isEqualToString:getterName]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">                each.block(<span class=\"keyword\">self</span>, getterName, oldValue, newValue);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后一步，把这个观察者的相关信息存在<code>associatedObject</code>\b里。观察的相关信息（观察者，被观察的key，和传入的block）封装在<code>PGObservationInfo</code>类\b里。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">PGObservationInfo</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">NSObject</span> *observer;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *key;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) PGObservingBlock block;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>到此为止，一个基本的KVO就可以work了。</p>\n<h2 id=\"IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"IB中User Defined Runtime Attributes如何使用？\"></a>IB中User Defined Runtime Attributes如何使用？</h2><p>它能够通过KVC的方式配置一些你在interface builder中不能配置的属性。当你希望在IB中作尽可能多得事情，这个特性能够帮助你编写更加轻量级的viewController。</p>\n<h2 id=\"BAD-ACCESS在什么情况下出现？\"><a href=\"#BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"BAD_ACCESS在什么情况下出现？\"></a>BAD_ACCESS在什么情况下出现？</h2><p>\b访问了悬垂指针，比如对一个已经释放的对象进行了release、访问已经释放对象的成员变量或则发送消息、死循环等。</p>\n<h2 id=\"如何调试BAD-ACCESS错误\"><a href=\"#如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"如何调试BAD_ACCESS错误\"></a>如何调试BAD_ACCESS错误</h2><ol>\n<li>重写\bobject的\brespondsToSelector方法，实现出现EXEC_BAD_ACCESS前访问的最后一个object</li>\n<li>通过设置Xcode中的zombie</li>\n<li>设置全局断点快速定位问题代码\b所在行</li>\n<li>Xcode7已经\b集成了BAD_ACCESS捕获功能：Address Sanitizer。用法如下：在\b配置中勾选Enable Address Sinitizer。</li>\n</ol>\n<h2 id=\"lldb（gdb）常用的调试命令？\"><a href=\"#lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"lldb（gdb）常用的调试命令？\"></a>lldb（gdb）常用的调试命令？</h2><ul>\n<li>breakpoint 设置断点定位到某一个函数</li>\n<li>n 断点指向下一步</li>\n<li>po 打印对象<br>更多lldb调试命令可以查看：<a href=\"http://lldb.llvm.org/lldb-gdb.html\">The LLDB Debugger</a></li>\n</ul>\n<h2 id=\"ios里面存数据有哪些方法？\"><a href=\"#ios里面存数据有哪些方法？\" class=\"headerlink\" title=\"ios里面存数据有哪些方法？\"></a>ios里面存数据有哪些方法？</h2><p>\b这里的存储就是所谓的持久化，就是讲将数据保存在硬盘，使得在应用程序或机器重启后可以继续访问之前保存的数据。在iOS开发中，有很多数据持久化的方案：</p>\n<ol>\n<li>plist文件（属性列表）</li>\n<li>preference（偏好设置）NSUserDefaults</li>\n<li>NSKeyedArchiver（归档）</li>\n<li>SQLite 3</li>\n<li>CoreData</li>\n</ol>\n<h2 id=\"frame-bounds-center-的区别\"><a href=\"#frame-bounds-center-的区别\" class=\"headerlink\" title=\"frame bounds center 的区别\"></a>frame bounds center 的区别</h2><ul>\n<li>frame：描述当前视图在其父视图中的位置和大小。</li>\n<li>bounds：描述当前视图在其自身坐标系统中的位置和大小</li>\n<li>center：描述当前视图的中心点在其视图中的位置</li>\n</ul>\n<h2 id=\"线程共享进程资源的实例\"><a href=\"#线程共享进程资源的实例\" class=\"headerlink\" title=\"线程共享进程资源的实例\"></a>线程共享进程资源的实例</h2><p>NSUserDefault</p>\n<h2 id=\"OC运行时能加实例变量吗\"><a href=\"#OC运行时能加实例变量吗\" class=\"headerlink\" title=\"OC运行时能加实例变量吗?\"></a>OC运行时能加实例变量吗?</h2><p>可以。运行时可以通过Runtime动态添加方法，再次方法里去初始化实例变量。</p>\n<h2 id=\"64位下NSNumber的优化\"><a href=\"#64位下NSNumber的优化\" class=\"headerlink\" title=\"64位下NSNumber的优化\"></a>64位下NSNumber的优化</h2><h3 id=\"64bit-tagged-pointer\"><a href=\"#64bit-tagged-pointer\" class=\"headerlink\" title=\"64bit-tagged pointer\"></a>64bit-tagged pointer</h3><ul>\n<li>指针地址对其：分配堆中的内存时，采用偶数倍或则以2的指数倍的地址为边界</li>\n<li>iOS中是以16个字节为对其边界的。所以分配的\b内存地址后面4为永远是0</li>\n<li>64为理论上可以支持最大的2^64字节内存空间。这么大的地址空间完全是浪费的。64位环境下内存地址前面有很多0</li>\n<li>Tagged Pointer 指针地址对齐和64位超大地址的出现，指针地址仅仅作为内存地址是比较浪费的，可以在指针地址中保存更多的信息。 所以就有了Tagged Pointer概念。</li>\n</ul>\n<h3 id=\"isa指针的优化\"><a href=\"#isa指针的优化\" class=\"headerlink\" title=\"isa指针的优化\"></a>isa指针的优化</h3><p>所有的类继承自NSObject，因此每个对象都有一个isa指针指向所属的类。</p>\n<p>在32位环境下，对象的引用都保存在外部的表中，对引用计数的增减操作都需要锁定这个表，操作完后，才解锁，这样的效率是很慢的。</p>\n<p>在64位环境下，isa也是64-bit的，实际操作部分只用到32位，剩余部分会用到tagged pointer的概念，其中19位将保存对象的引用计数，这样引用计数的操作只需要原子的修改这个指针即可，如果超出19位，才会将引用计数保存到外部表，这种情况是很少的，因此效率会大大提高。</p>\n<h2 id=\"NSThread-NSOperation-dispatch-和-gcd的关系\"><a href=\"#NSThread-NSOperation-dispatch-和-gcd的关系\" class=\"headerlink\" title=\"NSThread NSOperation dispatch 和 gcd的关系\"></a>NSThread NSOperation dispatch 和 gcd的关系</h2><p>NSThread优点：NSThread比其他两个轻量级，使用简单。<br>缺点：需要自己管理线程的生命周期、线程同步、加锁、睡眠以及唤醒等。线程同步对数据加锁会有一定的系统开销。</p>\n<p>NSOperation：不需要关系线程管理，数据同步的事情，可以把精力放在自己需要执行的操作上，NSOperation是面向对象的，属于OC类。</p>\n<p>GCD：Grand Central Dispatch是由苹果开发的一个多核编程的解决方案。是相比NSThread， NSOperation更高效和强大的技术–GCD是基于C的底层API。</p>\n<p>GCD主要是建立个个线程时间的依赖关系这类的情况，更高的并发执行能力。</p>\n<h2 id=\"iOS常用回调方式以及它们之间的区别\"><a href=\"#iOS常用回调方式以及它们之间的区别\" class=\"headerlink\" title=\"iOS常用回调方式以及它们之间的区别\"></a>iOS常用回调方式以及它们之间的区别</h2><p>delegate回调，kvo回调，NSNotification回调，block回调</p>\n<h2 id=\"声明delegate的时候为什么用assign，而不用weak等等\"><a href=\"#声明delegate的时候为什么用assign，而不用weak等等\" class=\"headerlink\" title=\"声明delegate的时候为什么用assign，而不用weak等等\"></a>声明delegate的时候为什么用assign，而不用weak等等</h2><p>weak比assgin线程更安全。</p>\n<p>但在delegate成员变量这个细分领域，我们即可以用weak，又可以用assign。因为在几乎所有场景下，delegate所指向的对象C的生存期都是覆盖了delegate成员变量本身所在的对象D的生存期的，所以，在D的生存期内，C所使用的D的指针都是有效的，所以这个时候使用assign是没有关系的。</p>\n<h2 id=\"Block的使用\"><a href=\"#Block的使用\" class=\"headerlink\" title=\"Block的使用\"></a>Block的使用</h2><p>网络响应block回调。对响应数据进行一个包装作为参数调用控制器的函数。</p>\n<h2 id=\"二叉树的深度优先遍历和广度优先遍历\"><a href=\"#二叉树的深度优先遍历和广度优先遍历\" class=\"headerlink\" title=\"二叉树的深度优先遍历和广度优先遍历\"></a>二叉树的深度优先遍历和广度优先遍历</h2><h2 id=\"iOS-crash后的调试方法？\"><a href=\"#iOS-crash后的调试方法？\" class=\"headerlink\" title=\"iOS crash后的调试方法？\"></a>iOS crash后的调试方法？</h2><p>线上收集，Xcode中下载崩溃日志。接入腾讯的Bugly。</p>\n<h2 id=\"OC中深拷贝-浅拷贝\"><a href=\"#OC中深拷贝-浅拷贝\" class=\"headerlink\" title=\"OC中深拷贝,浅拷贝\"></a>OC中深拷贝,浅拷贝</h2><p>对不可变对象，copy则执行浅拷贝，mutablCopy则执行深拷贝。对可变对象，copy和mutableCopy都执行深拷贝，但是copy返回的对象是不可变的。<br><img src=\"https://upload-images.jianshu.io/upload_images/10601171-d7aa0b24e2fefb9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/611/format/webp\"></p>\n<h2 id=\"iOS沙盒机制\"><a href=\"#iOS沙盒机制\" class=\"headerlink\" title=\"iOS沙盒机制\"></a>iOS沙盒机制</h2><p>iOS应用程序只能在为该改程序创建的文件系统中读取文件，不可以去其它地方访问，此区域被成为沙盒，所以所有的非代码文件都要保存在此，例如图像，图标，声音，映像，属性列表，文本文件等。 </p>\n<ol>\n<li>每个应用程序都有自己的存储空间 </li>\n<li>应用程序不能翻过自己的围墙去访问别的存储空间的内容 </li>\n<li>应用程序请求的数据都要通过权限检测，假如不符合条件的话，不会被放行</li>\n</ol>\n<h2 id=\"不更新版本的方式添加新特性（热更新）\"><a href=\"#不更新版本的方式添加新特性（热更新）\" class=\"headerlink\" title=\"不更新版本的方式添加新特性（热更新）\"></a>不更新版本的方式添加新特性（热更新）</h2><ol>\n<li>使用FaceBook的开源框架reactive native，使用js写原生的iOS应用。iOS app可以在运行时从服务器拉取最新的js文件到本地，然后执行，因为js是一门动态的脚本语言，所以可以在运行时直接读取js文件执行，因此能够实现iOS的热更新。</li>\n<li>使用lua脚本。lua脚本如同js一样，也能在运行时去读取lua脚本并执行。</li>\n<li>Xcode6之后，苹果开放了iOS的动态库编译权限。所谓的动态库，其实就是可以在运行时加载。可以利用这个实现iOS的热更新。能够从沙箱里面读取到代码文件，就意味着可以在线更新代码，远程升级</li>\n<li>JSPatch，热更新，不过被苹果禁止使用了。</li>\n</ol>\n<h2 id=\"如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\"><a href=\"#如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\" class=\"headerlink\" title=\"如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？\"></a>如果在发送异步请求的情况下，当前的界面删除了，会出现什么后果，如何解决？</h2><p>遇到这种情况程序会崩溃，因为当前界面释放的同时，在当前界面所定义的对象也会释放，会出现野指针的情况，解决的办法是将异步请求的对象保持到单例中，这样界面释放的同时异步请求的对象还存在。</p>\n<h2 id=\"怎么用C-实现kvo？\"><a href=\"#怎么用C-实现kvo？\" class=\"headerlink\" title=\"怎么用C++ 实现kvo？\"></a>怎么用C++ 实现kvo？</h2><p>开启一个新线程去轮询监听事件，并传入响应方法，如果事件发生就调用监听响应方法。</p>\n<h2 id=\"你会如何储存用户的认证信息？\"><a href=\"#你会如何储存用户的认证信息？\" class=\"headerlink\" title=\"你会如何储存用户的认证信息？\"></a>你会如何储存用户的认证信息？</h2><p>使用keychain来存储,也就是钥匙串。 使用keychain需要导入Security框架。 </p>\n<p>只需要把“KeychainItemWrapper.h”和“KeychainItemWrapper.m”拷贝到我们项目，并导入Security.framework 。KeychainItemWrapper的用法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 初始化一个保存用户帐号的KeychainItemWrapper */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">KeychainItemWrapper *wrapper = [[KeychainItemWrapper alloc] initWithIdentifier:<span class=\"string\">@&quot;Account Number&quot;</span> accessGroup:<span class=\"string\">@&quot;YOUR_APP_ID_HERE.com.yourcompany.AppIdentifier&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//保存数据 </span></span><br><span class=\"line\"></span><br><span class=\"line\">[wrapper setObject:<span class=\"string\">@&quot;&lt;帐号&gt;&quot;</span> forKey:(<span class=\"type\">id</span>)kSecAttrAccount]; </span><br><span class=\"line\"></span><br><span class=\"line\">[wrapper setObject:<span class=\"string\">@&quot;&lt;帐号密码&gt;&quot;</span> forKey:(<span class=\"type\">id</span>)kSecValueData];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从keychain里取出帐号密码 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *password = [wrapper objectForKey:(<span class=\"type\">id</span>)kSecValueData];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆和栈的区别\"><a href=\"#堆和栈的区别\" class=\"headerlink\" title=\"堆和栈的区别\"></a>堆和栈的区别</h2><p>栈区(stack)由编译器自动分配释放 ,存放方法(函数)的参数值, 局部变量的值等，栈是向低地址扩展的数据结构，是一块连续的内存的区域。即栈顶的地址和栈的最大容量是系统预先规定好的。 </p>\n<p>堆区(heap)一般由程序员分配释放, 若程序员不释放,程序结束时由OS回收，向高地址扩展的数据结构，是不连续的内存区域，从而堆获得的空间比较灵活。 </p>\n<p>碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出. </p>\n<p>分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 </p>\n<p>分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的。 </p>\n<p>全局区(静态区)(static),全局变量和静态变量的存储是放在一块 的,初始化的全局变量和静态变量在一块区域, 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后有系统释放。 </p>\n<p>文字常量区—常量字符串就是放在这里的。程序结束后由系统释放。 </p>\n<p>程序代码区—存放函数体的二进制代码</p>\n<h2 id=\"OC有多继承吗？没有的话用什么代替？\"><a href=\"#OC有多继承吗？没有的话用什么代替？\" class=\"headerlink\" title=\"OC有多继承吗？没有的话用什么代替？\"></a>OC有多继承吗？没有的话用什么代替？</h2><p>OC中没有多继承，可以用委托代理Protocol来实现。</p>\n<h2 id=\"SDWebImage原理\"><a href=\"#SDWebImage原理\" class=\"headerlink\" title=\"SDWebImage原理\"></a>SDWebImage原理</h2><p>从内存中（字典）找图片（当这个图片在本次程序加载过），找到直接使用； </p>\n<p>从沙盒中找，找到直接使用，缓存到内存。 </p>\n<p>从网络上获取，使用，缓存到内存，缓存到沙盒。</p>\n<h2 id=\"请问push-view-controller-和-present-view-controller有什么区别？\"><a href=\"#请问push-view-controller-和-present-view-controller有什么区别？\" class=\"headerlink\" title=\"请问push view controller 和 present view controller有什么区别？\"></a>请问push view controller 和 present view controller有什么区别？</h2><p>要是用push view controller ，首先必须确保根视图是NavigationController，不然是不可以用的。</p>\n<p>push与present都可以推出新的界面。 </p>\n<p>present与dismiss对应，push和pop对应。 </p>\n<p>present只能逐级返回，push所有视图由视图栈控制，可以返回上一级，也可以返回到根vc，其他vc。 </p>\n<p>present一般用于不同业务界面的切换，push一般用于同一业务不同界面之间的切换。</p>"},{"title":"动态规划初探-递推","date":"2019-01-07T07:25:53.000Z","abbrlink":"b4ed6af76fb62841","_content":"\n## 概述\n\n动态规划（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题[1]和最优子结构（英语：Optimal substructure）性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指數增長时特别有用。\n<!-- more -->\n动态规划在查找有很多重叠子问题的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问题，他们的结构都逐渐计算并保存，从简单的问题直到整个问题被解决。因此，动态规划保存递归时候的结果，因而不会再解决同样的问题时花费时间。动态规划只能用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能完全满足，故有时需要引入一定的近似）。简单地说，问题能够分解成子问题来解决。\n\n> 以上描述来自[维基百科](https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)。\n\n## 骨牌铺方格\n\n### 题目描述\n\n在2*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。\n\n### 问题分析\n\n我们用f[i]表示2xi的方格铺满骨牌的方案数，那么考虑到第i列，要么竖着放置一个骨牌；要么连同i-1列，横着放置两个骨牌，如下图所示。由于骨牌的长度为1x2，所以在第i列放置的骨牌无法影响到第i-2列。很显然，图中两块黑色的部分分别表示`f[i-1]`和`f[i-2]`，所以可以得到递推公式`f[i]=f[i-1]+f[i-2]`，并且边界条件为`f[0]=f[1]=1`。\n\n{% asset_img donggui_1.png %}\n\n### 问题升级I\n\n有两种形状的瓷砖：一种是2x1的多米诺形，另一种是形如\"L\"的托米洛形。两种形状都可以旋转。给定N的值，有多少种方法可以平铺2xN的面板？\n\n题目链接：https://leetcode.com/problems/domino-and-tromino-tiling/\n\n{% asset_img donggui_6.png %}\n\n如上图可得到递归公式为：\n```\ndp[n]=dp[n-1]+dp[n-2]+ 2*(dp[n-3]+...+d[0])\n=dp[n-1]+dp[n-2]+dp[n-3]+dp[n-3]+2*(dp[n-4]+...+d[0])\n=dp[n-1]+dp[n-3]+(dp[n-2]+dp[n-3]+2*(dp[n-4]+...+d[0]))\n=dp[n-1]+dp[n-3]+dp[n-1]\n=2*dp[n-1]+dp[n-3]\n```\n\n### 问题升级II\n\n在3*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。\n\n\b首先我们可以确定当n等于奇数的时候，方案数一定为0。所以如果用f[i](i为偶数)表示3xi的方格铺满骨牌的方案，`f[i]`的方案数不可能由`f[i-1]`递推而来。那么\b可以猜想`f[i]`和`f[i-2]`一定是有关系的，如下图所示，我们把第i列和第i-1列用1x2的骨牌填满后，轻易转化成了`f[i-2]`的问题，那是不是代表`f[i]=3*f[i-2]`呢？\n\n{% asset_img donggui_2.png %}\n\n仔细想才发现不对，我们少考虑了如下的情况，这些情况无法用上图的情况表示，发现和`f[i-4]`也有关系，但是还是漏掉了一些情况。\n\n{% asset_img donggui_3.png %}\n\n上面的问题说明我们在设计状态的时候的思维定式，当一维的状态已经无法满足我们的需求时，我们可以试着增加一维，用二维来表示状态，用`f[i][j]`表示3xi+j个多余块的摆放方案数，如下图所示：\n\n{% asset_img donggui_4.png %}\n\n\b转化成二维后，我们可以写出如下三种情况的递推式：\n```\nf[i][0]=f[i-2][0]+f[i-1][1]+f[i-2][2]\nf[i][1]=f[i-1][2]\nf[i][2]=f[i][0]+f[i-1][1]\n```\n边界条件`f[0][0]=f[1][1]=f[0][2]=1`。\n\n{% asset_img donggui_5.png %}\n","source":"_posts/pd-recurrence.md","raw":"---\ntitle: 动态规划初探-递推\ndate: 2019-01-07 15:25:53\ntags:\n  - 动态规划\n  - 算法\ncategories: 动态规划\nabbrlink: b4ed6af76fb62841\n---\n\n## 概述\n\n动态规划（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题[1]和最优子结构（英语：Optimal substructure）性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指數增長时特别有用。\n<!-- more -->\n动态规划在查找有很多重叠子问题的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问题，他们的结构都逐渐计算并保存，从简单的问题直到整个问题被解决。因此，动态规划保存递归时候的结果，因而不会再解决同样的问题时花费时间。动态规划只能用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能完全满足，故有时需要引入一定的近似）。简单地说，问题能够分解成子问题来解决。\n\n> 以上描述来自[维基百科](https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)。\n\n## 骨牌铺方格\n\n### 题目描述\n\n在2*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。\n\n### 问题分析\n\n我们用f[i]表示2xi的方格铺满骨牌的方案数，那么考虑到第i列，要么竖着放置一个骨牌；要么连同i-1列，横着放置两个骨牌，如下图所示。由于骨牌的长度为1x2，所以在第i列放置的骨牌无法影响到第i-2列。很显然，图中两块黑色的部分分别表示`f[i-1]`和`f[i-2]`，所以可以得到递推公式`f[i]=f[i-1]+f[i-2]`，并且边界条件为`f[0]=f[1]=1`。\n\n{% asset_img donggui_1.png %}\n\n### 问题升级I\n\n有两种形状的瓷砖：一种是2x1的多米诺形，另一种是形如\"L\"的托米洛形。两种形状都可以旋转。给定N的值，有多少种方法可以平铺2xN的面板？\n\n题目链接：https://leetcode.com/problems/domino-and-tromino-tiling/\n\n{% asset_img donggui_6.png %}\n\n如上图可得到递归公式为：\n```\ndp[n]=dp[n-1]+dp[n-2]+ 2*(dp[n-3]+...+d[0])\n=dp[n-1]+dp[n-2]+dp[n-3]+dp[n-3]+2*(dp[n-4]+...+d[0])\n=dp[n-1]+dp[n-3]+(dp[n-2]+dp[n-3]+2*(dp[n-4]+...+d[0]))\n=dp[n-1]+dp[n-3]+dp[n-1]\n=2*dp[n-1]+dp[n-3]\n```\n\n### 问题升级II\n\n在3*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。\n\n\b首先我们可以确定当n等于奇数的时候，方案数一定为0。所以如果用f[i](i为偶数)表示3xi的方格铺满骨牌的方案，`f[i]`的方案数不可能由`f[i-1]`递推而来。那么\b可以猜想`f[i]`和`f[i-2]`一定是有关系的，如下图所示，我们把第i列和第i-1列用1x2的骨牌填满后，轻易转化成了`f[i-2]`的问题，那是不是代表`f[i]=3*f[i-2]`呢？\n\n{% asset_img donggui_2.png %}\n\n仔细想才发现不对，我们少考虑了如下的情况，这些情况无法用上图的情况表示，发现和`f[i-4]`也有关系，但是还是漏掉了一些情况。\n\n{% asset_img donggui_3.png %}\n\n上面的问题说明我们在设计状态的时候的思维定式，当一维的状态已经无法满足我们的需求时，我们可以试着增加一维，用二维来表示状态，用`f[i][j]`表示3xi+j个多余块的摆放方案数，如下图所示：\n\n{% asset_img donggui_4.png %}\n\n\b转化成二维后，我们可以写出如下三种情况的递推式：\n```\nf[i][0]=f[i-2][0]+f[i-1][1]+f[i-2][2]\nf[i][1]=f[i-1][2]\nf[i][2]=f[i][0]+f[i-1][1]\n```\n边界条件`f[0][0]=f[1][1]=f[0][2]=1`。\n\n{% asset_img donggui_5.png %}\n","slug":"pd-recurrence","published":1,"updated":"2022-05-19T03:13:11.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo1003tl1l3fx8ehyrb","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>动态规划（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题[1]和最优子结构（英语：Optimal substructure）性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指數增長时特别有用。</p>\n<span id=\"more\"></span>\n<p>动态规划在查找有很多重叠子问题的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问题，他们的结构都逐渐计算并保存，从简单的问题直到整个问题被解决。因此，动态规划保存递归时候的结果，因而不会再解决同样的问题时花费时间。动态规划只能用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能完全满足，故有时需要引入一定的近似）。简单地说，问题能够分解成子问题来解决。</p>\n<blockquote>\n<p>以上描述来自<a href=\"https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">维基百科</a>。</p>\n</blockquote>\n<h2 id=\"骨牌铺方格\"><a href=\"#骨牌铺方格\" class=\"headerlink\" title=\"骨牌铺方格\"></a>骨牌铺方格</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在2*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。</p>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>我们用f[i]表示2xi的方格铺满骨牌的方案数，那么考虑到第i列，要么竖着放置一个骨牌；要么连同i-1列，横着放置两个骨牌，如下图所示。由于骨牌的长度为1x2，所以在第i列放置的骨牌无法影响到第i-2列。很显然，图中两块黑色的部分分别表示<code>f[i-1]</code>和<code>f[i-2]</code>，所以可以得到递推公式<code>f[i]=f[i-1]+f[i-2]</code>，并且边界条件为<code>f[0]=f[1]=1</code>。</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_1.png\" class=\"\">\n\n<h3 id=\"问题升级I\"><a href=\"#问题升级I\" class=\"headerlink\" title=\"问题升级I\"></a>问题升级I</h3><p>有两种形状的瓷砖：一种是2x1的多米诺形，另一种是形如”L”的托米洛形。两种形状都可以旋转。给定N的值，有多少种方法可以平铺2xN的面板？</p>\n<p>题目链接：<a href=\"https://leetcode.com/problems/domino-and-tromino-tiling/\">https://leetcode.com/problems/domino-and-tromino-tiling/</a></p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_6.png\" class=\"\">\n\n<p>如上图可得到递归公式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[n]=dp[n-1]+dp[n-2]+ 2*(dp[n-3]+...+d[0])</span><br><span class=\"line\">=dp[n-1]+dp[n-2]+dp[n-3]+dp[n-3]+2*(dp[n-4]+...+d[0])</span><br><span class=\"line\">=dp[n-1]+dp[n-3]+(dp[n-2]+dp[n-3]+2*(dp[n-4]+...+d[0]))</span><br><span class=\"line\">=dp[n-1]+dp[n-3]+dp[n-1]</span><br><span class=\"line\">=2*dp[n-1]+dp[n-3]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题升级II\"><a href=\"#问题升级II\" class=\"headerlink\" title=\"问题升级II\"></a>问题升级II</h3><p>在3*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。</p>\n<p>\b首先我们可以确定当n等于奇数的时候，方案数一定为0。所以如果用f<a href=\"i%E4%B8%BA%E5%81%B6%E6%95%B0\">i</a>表示3xi的方格铺满骨牌的方案，<code>f[i]</code>的方案数不可能由<code>f[i-1]</code>递推而来。那么\b可以猜想<code>f[i]</code>和<code>f[i-2]</code>一定是有关系的，如下图所示，我们把第i列和第i-1列用1x2的骨牌填满后，轻易转化成了<code>f[i-2]</code>的问题，那是不是代表<code>f[i]=3*f[i-2]</code>呢？</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_2.png\" class=\"\">\n\n<p>仔细想才发现不对，我们少考虑了如下的情况，这些情况无法用上图的情况表示，发现和<code>f[i-4]</code>也有关系，但是还是漏掉了一些情况。</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_3.png\" class=\"\">\n\n<p>上面的问题说明我们在设计状态的时候的思维定式，当一维的状态已经无法满足我们的需求时，我们可以试着增加一维，用二维来表示状态，用<code>f[i][j]</code>表示3xi+j个多余块的摆放方案数，如下图所示：</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_4.png\" class=\"\">\n\n<p>\b转化成二维后，我们可以写出如下三种情况的递推式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f[i][0]=f[i-2][0]+f[i-1][1]+f[i-2][2]</span><br><span class=\"line\">f[i][1]=f[i-1][2]</span><br><span class=\"line\">f[i][2]=f[i][0]+f[i-1][1]</span><br></pre></td></tr></table></figure>\n<p>边界条件<code>f[0][0]=f[1][1]=f[0][2]=1</code>。</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_5.png\" class=\"\">\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>动态规划（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题[1]和最优子结构（英语：Optimal substructure）性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指數增長时特别有用。</p>","more":"<p>动态规划在查找有很多重叠子问题的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问题，他们的结构都逐渐计算并保存，从简单的问题直到整个问题被解决。因此，动态规划保存递归时候的结果，因而不会再解决同样的问题时花费时间。动态规划只能用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能完全满足，故有时需要引入一定的近似）。简单地说，问题能够分解成子问题来解决。</p>\n<blockquote>\n<p>以上描述来自<a href=\"https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">维基百科</a>。</p>\n</blockquote>\n<h2 id=\"骨牌铺方格\"><a href=\"#骨牌铺方格\" class=\"headerlink\" title=\"骨牌铺方格\"></a>骨牌铺方格</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在2*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。</p>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>我们用f[i]表示2xi的方格铺满骨牌的方案数，那么考虑到第i列，要么竖着放置一个骨牌；要么连同i-1列，横着放置两个骨牌，如下图所示。由于骨牌的长度为1x2，所以在第i列放置的骨牌无法影响到第i-2列。很显然，图中两块黑色的部分分别表示<code>f[i-1]</code>和<code>f[i-2]</code>，所以可以得到递推公式<code>f[i]=f[i-1]+f[i-2]</code>，并且边界条件为<code>f[0]=f[1]=1</code>。</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_1.png\" class=\"\">\n\n<h3 id=\"问题升级I\"><a href=\"#问题升级I\" class=\"headerlink\" title=\"问题升级I\"></a>问题升级I</h3><p>有两种形状的瓷砖：一种是2x1的多米诺形，另一种是形如”L”的托米洛形。两种形状都可以旋转。给定N的值，有多少种方法可以平铺2xN的面板？</p>\n<p>题目链接：<a href=\"https://leetcode.com/problems/domino-and-tromino-tiling/\">https://leetcode.com/problems/domino-and-tromino-tiling/</a></p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_6.png\" class=\"\">\n\n<p>如上图可得到递归公式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[n]=dp[n-1]+dp[n-2]+ 2*(dp[n-3]+...+d[0])</span><br><span class=\"line\">=dp[n-1]+dp[n-2]+dp[n-3]+dp[n-3]+2*(dp[n-4]+...+d[0])</span><br><span class=\"line\">=dp[n-1]+dp[n-3]+(dp[n-2]+dp[n-3]+2*(dp[n-4]+...+d[0]))</span><br><span class=\"line\">=dp[n-1]+dp[n-3]+dp[n-1]</span><br><span class=\"line\">=2*dp[n-1]+dp[n-3]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题升级II\"><a href=\"#问题升级II\" class=\"headerlink\" title=\"问题升级II\"></a>问题升级II</h3><p>在3*n的长方形方格中，用一个1x2的骨牌铺满方格，输入n，输出铺满方格的方案总数。</p>\n<p>\b首先我们可以确定当n等于奇数的时候，方案数一定为0。所以如果用f<a href=\"i%E4%B8%BA%E5%81%B6%E6%95%B0\">i</a>表示3xi的方格铺满骨牌的方案，<code>f[i]</code>的方案数不可能由<code>f[i-1]</code>递推而来。那么\b可以猜想<code>f[i]</code>和<code>f[i-2]</code>一定是有关系的，如下图所示，我们把第i列和第i-1列用1x2的骨牌填满后，轻易转化成了<code>f[i-2]</code>的问题，那是不是代表<code>f[i]=3*f[i-2]</code>呢？</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_2.png\" class=\"\">\n\n<p>仔细想才发现不对，我们少考虑了如下的情况，这些情况无法用上图的情况表示，发现和<code>f[i-4]</code>也有关系，但是还是漏掉了一些情况。</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_3.png\" class=\"\">\n\n<p>上面的问题说明我们在设计状态的时候的思维定式，当一维的状态已经无法满足我们的需求时，我们可以试着增加一维，用二维来表示状态，用<code>f[i][j]</code>表示3xi+j个多余块的摆放方案数，如下图所示：</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_4.png\" class=\"\">\n\n<p>\b转化成二维后，我们可以写出如下三种情况的递推式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f[i][0]=f[i-2][0]+f[i-1][1]+f[i-2][2]</span><br><span class=\"line\">f[i][1]=f[i-1][2]</span><br><span class=\"line\">f[i][2]=f[i][0]+f[i-1][1]</span><br></pre></td></tr></table></figure>\n<p>边界条件<code>f[0][0]=f[1][1]=f[0][2]=1</code>。</p>\n<img src=\"/posts/b4ed6af76fb62841/donggui_5.png\" class=\"\">"},{"title":"【iOS】Objective-C关键知识点汇总","date":"2018-07-09T02:24:14.000Z","abbrlink":"fc9f6ee587f12a0d","_content":"","source":"_posts/【iOS】Objective-C关键知识点汇总.md","raw":"---\ntitle: 【iOS】Objective-C关键知识点汇总\ndate: 2018-07-09 10:24:14\ntags:\nabbrlink: fc9f6ee587f12a0d\n---\n","slug":"【iOS】Objective-C关键知识点汇总","published":1,"updated":"2022-05-19T03:13:11.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo2003wl1l3enmm8698","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"【iOS】Runtime应用","date":"2018-08-08T08:47:52.000Z","author":"Jvaeyhcd","abbrlink":"0e77c12e40f681c2","_content":"\n`Runtime`简直就是做大型架构的利器，它的应用场景非常多，下面就介绍一些常见的应用场景。\n* 关联对象（Objective-C Associated Objects）给分类添加属性\n* 方法魔法（Method Swizzling）方法添加、替换和KVO实现\n* 消息转发（热更新）解决Bug（JSPatch）\n* 实现NSCoding的自动归档和自动解档\n* 实现字典和模型的自由转换（MJExtension）\n\n## 关联对象（Objective-C Associated Objects）给分类添加属性\n\n通过对`objc_category`的结构体分析后我们知道分类是不能直接自定义属性和变量的，但是可以通过关联对象的方法给分类添加属性。\n\n<!-- more -->\n\n关联对象在`objc/runtime.h`中提供了以下几个接口：\n``` objc\n/** \n * Sets an associated value for a given object using a given key and association policy.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * @param value The value to associate with the key key for object. Pass nil to clear an existing association.\n * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”\n * \n * @see objc_setAssociatedObject\n * @see objc_removeAssociatedObjects\n */\n // 关联对象\nOBJC_EXPORT void\nobjc_setAssociatedObject(id _Nonnull object, const void * _Nonnull key,\n                         id _Nullable value, objc_AssociationPolicy policy)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n\n/** \n * Returns the value associated with a given object for a given key.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * \n * @return The value associated with the key \\e key for \\e object.\n * \n * @see objc_setAssociatedObject\n */\n // 获取关联的对象\nOBJC_EXPORT id _Nullable\nobjc_getAssociatedObject(id _Nonnull object, const void * _Nonnull key)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n\n/** \n * Removes all associations for a given object.\n * \n * @param object An object that maintains associated objects.\n * \n * @note The main purpose of this function is to make it easy to return an object \n *  to a \"pristine state”. You should not use this function for general removal of\n *  associations from objects, since it also removes associations that other clients\n *  may have added to the object. Typically you should use \\c objc_setAssociatedObject \n *  with a nil value to clear an association.\n * \n * @see objc_setAssociatedObject\n * @see objc_getAssociatedObject\n */\n // 移除关联的对象\nOBJC_EXPORT void\nobjc_removeAssociatedObjects(id _Nonnull object)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n```\n\n参数解释：\n* id object：被关联的对象\n* const void *key：被关联的key，要求唯一\n* id value：关联的对象\n* objc_AssociationPolicy policy：内存管理的策略\n\n内存管理策略的定义有：\n\n``` objc\n/**\n * Policies related to associative references.\n * These are options to objc_setAssociatedObject()\n */\ntypedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) {\n    OBJC_ASSOCIATION_ASSIGN = 0,           /**< Specifies a weak reference to the associated object. */\n    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**< Specifies a strong reference to the associated object. \n                                            *   The association is not made atomically. */\n    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,   /**< Specifies that the associated object is copied. \n                                            *   The association is not made atomically. */\n    OBJC_ASSOCIATION_RETAIN = 01401,       /**< Specifies a strong reference to the associated object.\n                                            *   The association is made atomically. */\n    OBJC_ASSOCIATION_COPY = 01403          /**< Specifies that the associated object is copied.\n                                            *   The association is made atomically. */\n};\n```\n\n下面实例实现了给`UIView`的`Category`添加自定义属性`defaultColor`。\n``` objc\n#import <UIKit/UIKit.h>\n#import \"objc/runtime.h\"\n\n@interface UIView (DefaultColor)\n@property (nonatomic, strong) UIColor *defaultColor;\n@end\n\n@implementation UIView (DefaultColor)\n@dynamic defaultColor;\n\nstatic char kDefaultColor;\n\n- (void)setDefaultColor:(UIColor *)defaultColor {\n    objc_setAssociatedObject(self, &kDefaultColor, defaultColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (UIColor *)defaultColor {\n    return objc_getAssociatedObject(self, &kDefaultColor);\n}\n@end\n\n@interface ViewController : UIViewController\n\n@end\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    UIView *view = [UIView new];\n    view.defaultColor = [UIColor blueColor];\n    \n    NSLog(@\"%@\", view.defaultColor);\n}\n@end\n```\n打印结果：\n> 2018-08-08 22:21:41.683715+0800 Runtime[59801:3820981] UIExtendedSRGBColorSpace 0 0 1 1\n\n从打印结果来看，我们成功在分类上添加了一个属性，\b实现了他的`getter`和`setter`方法。通过关联对象实现属性的内存管理也是有`ARC`管理的，所以我们只需要给定适当的内存策略就行了，不需要操心对象的释放。\n\n内存策略对应的属性修饰符\b对比如下表：\n<table><tr><td>内存策略</td><td>属性修饰</td><td>描述</td></tr><tr><td>OBJC_ASSOCIATION_ASSIGN</td><td>@property (assign) 或 @property (unsafe_unretained)</td><td>指定一个关联对象的弱引用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN<br/>_NONATOMIC</td><td>@property (nonatomic, strong)</td><td>@property (nonatomic, strong)\t指定一个关联对象的强引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY<br/>_NONATOMIC</td><td>@property (nonatomic, copy)</td><td>指定一个关联对象的copy引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN</td><td>@property (atomic, strong)</td><td>指定一个关联对象的强引用，能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY</td><td>@property (atomic, copy)</td><td>指定一个关联对象的copy引用，能被原子化使用</td></tr></table>\n\n## 方法魔法（Method Swizzling）方法添加、替换和KVO实现\n\n### 方法添加\n\n在[Rutime详解]()中介绍消息转发的时候，动态方法的添加就已经提到了。\n\n``` objc\n/** \n * Adds a new method to a class with a given name and implementation.\n * \n * @param cls The class to which to add a method.\n * @param name A selector that specifies the name of the method being added.\n * @param imp A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.\n * @param types An array of characters that describe the types of the arguments to the method. \n * \n * @return YES if the method was added successfully, otherwise NO \n *  (for example, the class already contains a method implementation with that name).\n *\n * @note class_addMethod will add an override of a superclass's implementation, \n *  but will not replace an existing implementation in this class. \n *  To change an existing implementation, use method_setImplementation.\n */\nOBJC_EXPORT BOOL\nclass_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, \n                const char * _Nullable types) \n    OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n```\n* cls：被添加方法的类\n* name：添加的方法名称的SEL\n* imp：方法的实现。改函数至少要有两个参数，`self`和`_cmd`\n* types：类型编码\n\n### 方法替换\n\n下面实现了一个替换`UIViewController`的`viewDidLoad`方法的例子：\n``` objc\n@implementation ViewController\n\n+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n        SEL originalSelector = @selector(viewDidLoad);\n        SEL swizzledSelector = @selector(swizzledViewDidLoad);\n        \n        Method originalMethod = class_getInstanceMethod(self, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(self, swizzledSelector);\n        \n        BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));\n        if (didAddMethod) {\n            class_replaceMethod(class, swizzledMethod, method_getImplementation(originalMethod), method_getTypeEncoding(originalSelector));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n- (void)swizzledViewDidLoad {\n    NSLog(@\"替换的方法\");\n    \n    [self swizzledViewDidLoad];\n}\n\n- (void)viewDidLoad {\n    NSLog(@\"自带的方法\");\n    \n    [super viewDidLoad];\n}\n...\n@end\n```\n\n打印结果：\n> 2018-08-08 23:30:51.912380+0800 Runtime[70331:3958814] 替换的方法\n> 2018-08-08 23:30:51.913268+0800 Runtime[70331:3958814] 自带的方法\n\n`method swizzling`在`+load`中完成，在`Objective-C`的运行时中，每个类有两个方法会自动调用。`+ (void)load`是在一个类被初始装载时调用的，`+ (void)initialize`是在应用第一次调用该类方法或实例方法前调用的\b。两个方法都是可选的，并且在方法被实现的情况下才会调用。\n\n`swizzling`只能在`dispatch_once`中完成，由于`swizzling`改变了全局的状态，所以我们需要确保每个预防措施在运行时都是可用的。原子操作就是这样用于确保代码只执行一次的预防措施，就算是在不同的线程中也能确保代码只执行一次。`gcd`的`dispatch_once`满足了所需要的需求。\n\n### KVO实现\n\n> KVO全称是key-value observing，翻译成中文就是键值观察。提供\b了一种当对象属性被修改的时候能通知当前对象的一种机制。在MVC设计架构下的项目，KVO机制很适合做Model与Controller之间的通讯。\n\nKVO的实现依赖于Objective-C强大的Runtime，Apple使用isa混写（isa-swizzling）来实现KVO。当观察对象A时，KVO机制动态创建一个新的名为`NSKVONotifying_A`的新类，该类继承自对象A的本类，且KVO为`NSKVONotifying_A`类重写观察属性的`setter`方法，`setter`方法会负责在调用原`setter`之前和之后，通知所观察对象属性值的更改情况。\n\n* NSKVONotifying_A类剖析\n\n从应用层面看，完全没有意识到新的类的产生，这是系统“隐瞒”了对KVO底层的实现过程，让我们误以为还是原来的类。但是此时我们如果新建一个名为`NSKVONotifying_A`的类，就会发现系统运行到注册KVO那段代码的时候程序就奔溃了，因为在注册监听的时候动态创建了名为`NSKVONotifying_A`的中间类，并指向这个中间类。\n\n* 子类setter方法剖析\n\nKVO的键值观察依赖`NSObject`的两个方法：`willChangeValueForKey:`和`didChangeValueForKey:`，在存取的前后分别\b调用这2个方法。在被观察属性发生改变之前，`willChangeValueForKey:`被调用，通知系统该`keyPath`属性值即将变更；当被观察属性发生改变之后，`didChangeValueForKey:`被调用，通知系统该`keyPath`属性值已经变更；之后`observeValueForKey:ofObject:change:context: `也会被调用。且重写观察属性的 `setter` 方法这种继承方式的注入是在运行时而不是编译时实现的。\n\nKVO子类setter方法的重写调用存取方法的工作原理在代码中相当于：\n``` objc\n-(void)setName:(NSString *)newName{ \n    [self willChangeValueForKey:@\"name\"];    //KVO 在调用存取方法之前总调用 \n    [super setValue:newName forKey:@\"name\"]; //调用父类的存取方法 \n    [self didChangeValueForKey:@\"name\"];     //KVO 在调用存取方法之后总调用\n}\n```\n\n## 消息转发（热更新）解决Bug（JSPatch）\n\n> [JSPatch](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3) 是一个 iOS 动态更新框架，只需在项目中引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。\n\n关于消息转发，我们知道分为三级，我们可以在每级实现替换功能，实现消息转发，从而不造成崩溃。JSPatch不仅能够实现消息转发，还可以实现方法的添加、替换等一系列功能。\n\n## 实现NSCoding的自动归档和自动解档\n\n原理描述：用`Runtime`提供的函数遍历`Model`自身所有属性，并对属性进行`encode`和`decode`操作。核心方法是在`Model`基类中重写方法：\n\n``` objc\n- (instancetype)initWithCoder:(NSCoder *)coder\n{\n    self = [super initWithCoder:coder];\n    if (self) {\n        unsigned int outCount;\n        Ivar * ivars = class_copyIvarList([self class], &outCount);\n        for (int i = 0; i < outCount; i ++) {\n            Ivar ivar = ivars[i];\n            NSString * key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n            [self setValue:[coder decodeObjectForKey:key] forKey:key];\n        }\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)coder\n{\n    [super encodeWithCoder:coder];\n    unsigned int outCount;\n    Ivar * ivars = class_copyIvarList([self class], &outCount);\n    for (int i = 0; i < outCount; i ++) {\n        Ivar ivar = ivars[i];\n        NSString * key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n        [coder encodeObject:[self valueForKey:key] forKey:key];\n    }\n}\n```\n\n## 实现字典和模型的自由转换（MJExtension）\n原理描述：用Runtime提供的函数遍历Model自身所有属性，如果属性在JSON中有对应的值，则将其赋值。核心方法在NSObject的分类中添加方法：\n``` objc\n- (instancetype)initWithDict:(NSDictionary *)dict {\n\n    if (self = [self init]) {\n        //(1)获取类的属性及属性对应的类型\n        NSMutableArray * keys = [NSMutableArray array];\n        NSMutableArray * attributes = [NSMutableArray array];\n        /*\n         * 例子\n         * name = value3 attribute = T@\"NSString\",C,N,V_value3\n         * name = value4 attribute = T^i,N,V_value4\n         */\n        unsigned int outCount;\n        objc_property_t * properties = class_copyPropertyList([self class], &outCount);\n        for (int i = 0; i < outCount; i ++) {\n            objc_property_t property = properties[i];\n            //通过property_getName函数获得属性的名字\n            NSString * propertyName = [NSString stringWithCString:property_getName(property) encoding:NSUTF8StringEncoding];\n            [keys addObject:propertyName];\n            //通过property_getAttributes函数可以获得属性的名字和@encode编码\n            NSString * propertyAttribute = [NSString stringWithCString:property_getAttributes(property) encoding:NSUTF8StringEncoding];\n            [attributes addObject:propertyAttribute];\n        }\n        //立即释放properties指向的内存\n        free(properties);\n\n        //(2)根据类型给属性赋值\n        for (NSString * key in keys) {\n            if ([dict valueForKey:key] == nil) continue;\n            [self setValue:[dict valueForKey:key] forKey:key];\n        }\n    }\n    return self;\n}\n```","source":"_posts/【iOS】Runtime应用.md","raw":"---\ntitle: 【iOS】Runtime应用\ndate: 2018-08-08 16:47:52\ntags:\n  - Runtime\nauthor: Jvaeyhcd\ncategories: iOS学习笔记\nabbrlink: 0e77c12e40f681c2\n---\n\n`Runtime`简直就是做大型架构的利器，它的应用场景非常多，下面就介绍一些常见的应用场景。\n* 关联对象（Objective-C Associated Objects）给分类添加属性\n* 方法魔法（Method Swizzling）方法添加、替换和KVO实现\n* 消息转发（热更新）解决Bug（JSPatch）\n* 实现NSCoding的自动归档和自动解档\n* 实现字典和模型的自由转换（MJExtension）\n\n## 关联对象（Objective-C Associated Objects）给分类添加属性\n\n通过对`objc_category`的结构体分析后我们知道分类是不能直接自定义属性和变量的，但是可以通过关联对象的方法给分类添加属性。\n\n<!-- more -->\n\n关联对象在`objc/runtime.h`中提供了以下几个接口：\n``` objc\n/** \n * Sets an associated value for a given object using a given key and association policy.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * @param value The value to associate with the key key for object. Pass nil to clear an existing association.\n * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”\n * \n * @see objc_setAssociatedObject\n * @see objc_removeAssociatedObjects\n */\n // 关联对象\nOBJC_EXPORT void\nobjc_setAssociatedObject(id _Nonnull object, const void * _Nonnull key,\n                         id _Nullable value, objc_AssociationPolicy policy)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n\n/** \n * Returns the value associated with a given object for a given key.\n * \n * @param object The source object for the association.\n * @param key The key for the association.\n * \n * @return The value associated with the key \\e key for \\e object.\n * \n * @see objc_setAssociatedObject\n */\n // 获取关联的对象\nOBJC_EXPORT id _Nullable\nobjc_getAssociatedObject(id _Nonnull object, const void * _Nonnull key)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n\n/** \n * Removes all associations for a given object.\n * \n * @param object An object that maintains associated objects.\n * \n * @note The main purpose of this function is to make it easy to return an object \n *  to a \"pristine state”. You should not use this function for general removal of\n *  associations from objects, since it also removes associations that other clients\n *  may have added to the object. Typically you should use \\c objc_setAssociatedObject \n *  with a nil value to clear an association.\n * \n * @see objc_setAssociatedObject\n * @see objc_getAssociatedObject\n */\n // 移除关联的对象\nOBJC_EXPORT void\nobjc_removeAssociatedObjects(id _Nonnull object)\n    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);\n```\n\n参数解释：\n* id object：被关联的对象\n* const void *key：被关联的key，要求唯一\n* id value：关联的对象\n* objc_AssociationPolicy policy：内存管理的策略\n\n内存管理策略的定义有：\n\n``` objc\n/**\n * Policies related to associative references.\n * These are options to objc_setAssociatedObject()\n */\ntypedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) {\n    OBJC_ASSOCIATION_ASSIGN = 0,           /**< Specifies a weak reference to the associated object. */\n    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**< Specifies a strong reference to the associated object. \n                                            *   The association is not made atomically. */\n    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,   /**< Specifies that the associated object is copied. \n                                            *   The association is not made atomically. */\n    OBJC_ASSOCIATION_RETAIN = 01401,       /**< Specifies a strong reference to the associated object.\n                                            *   The association is made atomically. */\n    OBJC_ASSOCIATION_COPY = 01403          /**< Specifies that the associated object is copied.\n                                            *   The association is made atomically. */\n};\n```\n\n下面实例实现了给`UIView`的`Category`添加自定义属性`defaultColor`。\n``` objc\n#import <UIKit/UIKit.h>\n#import \"objc/runtime.h\"\n\n@interface UIView (DefaultColor)\n@property (nonatomic, strong) UIColor *defaultColor;\n@end\n\n@implementation UIView (DefaultColor)\n@dynamic defaultColor;\n\nstatic char kDefaultColor;\n\n- (void)setDefaultColor:(UIColor *)defaultColor {\n    objc_setAssociatedObject(self, &kDefaultColor, defaultColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (UIColor *)defaultColor {\n    return objc_getAssociatedObject(self, &kDefaultColor);\n}\n@end\n\n@interface ViewController : UIViewController\n\n@end\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    UIView *view = [UIView new];\n    view.defaultColor = [UIColor blueColor];\n    \n    NSLog(@\"%@\", view.defaultColor);\n}\n@end\n```\n打印结果：\n> 2018-08-08 22:21:41.683715+0800 Runtime[59801:3820981] UIExtendedSRGBColorSpace 0 0 1 1\n\n从打印结果来看，我们成功在分类上添加了一个属性，\b实现了他的`getter`和`setter`方法。通过关联对象实现属性的内存管理也是有`ARC`管理的，所以我们只需要给定适当的内存策略就行了，不需要操心对象的释放。\n\n内存策略对应的属性修饰符\b对比如下表：\n<table><tr><td>内存策略</td><td>属性修饰</td><td>描述</td></tr><tr><td>OBJC_ASSOCIATION_ASSIGN</td><td>@property (assign) 或 @property (unsafe_unretained)</td><td>指定一个关联对象的弱引用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN<br/>_NONATOMIC</td><td>@property (nonatomic, strong)</td><td>@property (nonatomic, strong)\t指定一个关联对象的强引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY<br/>_NONATOMIC</td><td>@property (nonatomic, copy)</td><td>指定一个关联对象的copy引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN</td><td>@property (atomic, strong)</td><td>指定一个关联对象的强引用，能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY</td><td>@property (atomic, copy)</td><td>指定一个关联对象的copy引用，能被原子化使用</td></tr></table>\n\n## 方法魔法（Method Swizzling）方法添加、替换和KVO实现\n\n### 方法添加\n\n在[Rutime详解]()中介绍消息转发的时候，动态方法的添加就已经提到了。\n\n``` objc\n/** \n * Adds a new method to a class with a given name and implementation.\n * \n * @param cls The class to which to add a method.\n * @param name A selector that specifies the name of the method being added.\n * @param imp A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.\n * @param types An array of characters that describe the types of the arguments to the method. \n * \n * @return YES if the method was added successfully, otherwise NO \n *  (for example, the class already contains a method implementation with that name).\n *\n * @note class_addMethod will add an override of a superclass's implementation, \n *  but will not replace an existing implementation in this class. \n *  To change an existing implementation, use method_setImplementation.\n */\nOBJC_EXPORT BOOL\nclass_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, \n                const char * _Nullable types) \n    OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n```\n* cls：被添加方法的类\n* name：添加的方法名称的SEL\n* imp：方法的实现。改函数至少要有两个参数，`self`和`_cmd`\n* types：类型编码\n\n### 方法替换\n\n下面实现了一个替换`UIViewController`的`viewDidLoad`方法的例子：\n``` objc\n@implementation ViewController\n\n+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n        SEL originalSelector = @selector(viewDidLoad);\n        SEL swizzledSelector = @selector(swizzledViewDidLoad);\n        \n        Method originalMethod = class_getInstanceMethod(self, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(self, swizzledSelector);\n        \n        BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));\n        if (didAddMethod) {\n            class_replaceMethod(class, swizzledMethod, method_getImplementation(originalMethod), method_getTypeEncoding(originalSelector));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n- (void)swizzledViewDidLoad {\n    NSLog(@\"替换的方法\");\n    \n    [self swizzledViewDidLoad];\n}\n\n- (void)viewDidLoad {\n    NSLog(@\"自带的方法\");\n    \n    [super viewDidLoad];\n}\n...\n@end\n```\n\n打印结果：\n> 2018-08-08 23:30:51.912380+0800 Runtime[70331:3958814] 替换的方法\n> 2018-08-08 23:30:51.913268+0800 Runtime[70331:3958814] 自带的方法\n\n`method swizzling`在`+load`中完成，在`Objective-C`的运行时中，每个类有两个方法会自动调用。`+ (void)load`是在一个类被初始装载时调用的，`+ (void)initialize`是在应用第一次调用该类方法或实例方法前调用的\b。两个方法都是可选的，并且在方法被实现的情况下才会调用。\n\n`swizzling`只能在`dispatch_once`中完成，由于`swizzling`改变了全局的状态，所以我们需要确保每个预防措施在运行时都是可用的。原子操作就是这样用于确保代码只执行一次的预防措施，就算是在不同的线程中也能确保代码只执行一次。`gcd`的`dispatch_once`满足了所需要的需求。\n\n### KVO实现\n\n> KVO全称是key-value observing，翻译成中文就是键值观察。提供\b了一种当对象属性被修改的时候能通知当前对象的一种机制。在MVC设计架构下的项目，KVO机制很适合做Model与Controller之间的通讯。\n\nKVO的实现依赖于Objective-C强大的Runtime，Apple使用isa混写（isa-swizzling）来实现KVO。当观察对象A时，KVO机制动态创建一个新的名为`NSKVONotifying_A`的新类，该类继承自对象A的本类，且KVO为`NSKVONotifying_A`类重写观察属性的`setter`方法，`setter`方法会负责在调用原`setter`之前和之后，通知所观察对象属性值的更改情况。\n\n* NSKVONotifying_A类剖析\n\n从应用层面看，完全没有意识到新的类的产生，这是系统“隐瞒”了对KVO底层的实现过程，让我们误以为还是原来的类。但是此时我们如果新建一个名为`NSKVONotifying_A`的类，就会发现系统运行到注册KVO那段代码的时候程序就奔溃了，因为在注册监听的时候动态创建了名为`NSKVONotifying_A`的中间类，并指向这个中间类。\n\n* 子类setter方法剖析\n\nKVO的键值观察依赖`NSObject`的两个方法：`willChangeValueForKey:`和`didChangeValueForKey:`，在存取的前后分别\b调用这2个方法。在被观察属性发生改变之前，`willChangeValueForKey:`被调用，通知系统该`keyPath`属性值即将变更；当被观察属性发生改变之后，`didChangeValueForKey:`被调用，通知系统该`keyPath`属性值已经变更；之后`observeValueForKey:ofObject:change:context: `也会被调用。且重写观察属性的 `setter` 方法这种继承方式的注入是在运行时而不是编译时实现的。\n\nKVO子类setter方法的重写调用存取方法的工作原理在代码中相当于：\n``` objc\n-(void)setName:(NSString *)newName{ \n    [self willChangeValueForKey:@\"name\"];    //KVO 在调用存取方法之前总调用 \n    [super setValue:newName forKey:@\"name\"]; //调用父类的存取方法 \n    [self didChangeValueForKey:@\"name\"];     //KVO 在调用存取方法之后总调用\n}\n```\n\n## 消息转发（热更新）解决Bug（JSPatch）\n\n> [JSPatch](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3) 是一个 iOS 动态更新框架，只需在项目中引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。\n\n关于消息转发，我们知道分为三级，我们可以在每级实现替换功能，实现消息转发，从而不造成崩溃。JSPatch不仅能够实现消息转发，还可以实现方法的添加、替换等一系列功能。\n\n## 实现NSCoding的自动归档和自动解档\n\n原理描述：用`Runtime`提供的函数遍历`Model`自身所有属性，并对属性进行`encode`和`decode`操作。核心方法是在`Model`基类中重写方法：\n\n``` objc\n- (instancetype)initWithCoder:(NSCoder *)coder\n{\n    self = [super initWithCoder:coder];\n    if (self) {\n        unsigned int outCount;\n        Ivar * ivars = class_copyIvarList([self class], &outCount);\n        for (int i = 0; i < outCount; i ++) {\n            Ivar ivar = ivars[i];\n            NSString * key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n            [self setValue:[coder decodeObjectForKey:key] forKey:key];\n        }\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)coder\n{\n    [super encodeWithCoder:coder];\n    unsigned int outCount;\n    Ivar * ivars = class_copyIvarList([self class], &outCount);\n    for (int i = 0; i < outCount; i ++) {\n        Ivar ivar = ivars[i];\n        NSString * key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n        [coder encodeObject:[self valueForKey:key] forKey:key];\n    }\n}\n```\n\n## 实现字典和模型的自由转换（MJExtension）\n原理描述：用Runtime提供的函数遍历Model自身所有属性，如果属性在JSON中有对应的值，则将其赋值。核心方法在NSObject的分类中添加方法：\n``` objc\n- (instancetype)initWithDict:(NSDictionary *)dict {\n\n    if (self = [self init]) {\n        //(1)获取类的属性及属性对应的类型\n        NSMutableArray * keys = [NSMutableArray array];\n        NSMutableArray * attributes = [NSMutableArray array];\n        /*\n         * 例子\n         * name = value3 attribute = T@\"NSString\",C,N,V_value3\n         * name = value4 attribute = T^i,N,V_value4\n         */\n        unsigned int outCount;\n        objc_property_t * properties = class_copyPropertyList([self class], &outCount);\n        for (int i = 0; i < outCount; i ++) {\n            objc_property_t property = properties[i];\n            //通过property_getName函数获得属性的名字\n            NSString * propertyName = [NSString stringWithCString:property_getName(property) encoding:NSUTF8StringEncoding];\n            [keys addObject:propertyName];\n            //通过property_getAttributes函数可以获得属性的名字和@encode编码\n            NSString * propertyAttribute = [NSString stringWithCString:property_getAttributes(property) encoding:NSUTF8StringEncoding];\n            [attributes addObject:propertyAttribute];\n        }\n        //立即释放properties指向的内存\n        free(properties);\n\n        //(2)根据类型给属性赋值\n        for (NSString * key in keys) {\n            if ([dict valueForKey:key] == nil) continue;\n            [self setValue:[dict valueForKey:key] forKey:key];\n        }\n    }\n    return self;\n}\n```","slug":"【iOS】Runtime应用","published":1,"updated":"2022-05-19T03:13:11.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo20041l1l34ijh8d7y","content":"<p><code>Runtime</code>简直就是做大型架构的利器，它的应用场景非常多，下面就介绍一些常见的应用场景。</p>\n<ul>\n<li>关联对象（Objective-C Associated Objects）给分类添加属性</li>\n<li>方法魔法（Method Swizzling）方法添加、替换和KVO实现</li>\n<li>消息转发（热更新）解决Bug（JSPatch）</li>\n<li>实现NSCoding的自动归档和自动解档</li>\n<li>实现字典和模型的自由转换（MJExtension）</li>\n</ul>\n<h2 id=\"关联对象（Objective-C-Associated-Objects）给分类添加属性\"><a href=\"#关联对象（Objective-C-Associated-Objects）给分类添加属性\" class=\"headerlink\" title=\"关联对象（Objective-C Associated Objects）给分类添加属性\"></a>关联对象（Objective-C Associated Objects）给分类添加属性</h2><p>通过对<code>objc_category</code>的结构体分析后我们知道分类是不能直接自定义属性和变量的，但是可以通过关联对象的方法给分类添加属性。</p>\n<span id=\"more\"></span>\n\n<p>关联对象在<code>objc/runtime.h</code>中提供了以下几个接口：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Sets an associated value for a given object using a given key and association policy.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value The value to associate with the key key for object. Pass nil to clear an existing association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_removeAssociatedObjects</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 关联对象</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">void</span></span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"type\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"type\">void</span> * _Nonnull key,</span><br><span class=\"line\">                         <span class=\"type\">id</span> _Nullable value, objc_AssociationPolicy policy)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the value associated with a given object for a given key.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @return The value associated with the key \\e key for \\e object.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 获取关联的对象</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">id</span> _Nullable</span><br><span class=\"line\">objc_getAssociatedObject(<span class=\"type\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"type\">void</span> * _Nonnull key)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Removes all associations for a given object.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object An object that maintains associated objects.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @note The main purpose of this function is to make it easy to return an object </span></span><br><span class=\"line\"><span class=\"comment\"> *  to a &quot;pristine state”. You should not use this function for general removal of</span></span><br><span class=\"line\"><span class=\"comment\"> *  associations from objects, since it also removes associations that other clients</span></span><br><span class=\"line\"><span class=\"comment\"> *  may have added to the object. Typically you should use \\c objc_setAssociatedObject </span></span><br><span class=\"line\"><span class=\"comment\"> *  with a nil value to clear an association.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_getAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 移除关联的对象</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">void</span></span><br><span class=\"line\">objc_removeAssociatedObjects(<span class=\"type\">id</span> _Nonnull object)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li>id object：被关联的对象</li>\n<li>const void *key：被关联的key，要求唯一</li>\n<li>id value：关联的对象</li>\n<li>objc_AssociationPolicy policy：内存管理的策略</li>\n</ul>\n<p>内存管理策略的定义有：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Policies related to associative references.</span></span><br><span class=\"line\"><span class=\"comment\"> * These are options to objc_setAssociatedObject()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</span><br><span class=\"line\">    OBJC_ASSOCIATION_ASSIGN = <span class=\"number\">0</span>,           <span class=\"comment\">/**&lt; Specifies a weak reference to the associated object. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class=\"number\">1</span>, <span class=\"comment\">/**&lt; Specifies a strong reference to the associated object. </span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is not made atomically. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class=\"number\">3</span>,   <span class=\"comment\">/**&lt; Specifies that the associated object is copied. </span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is not made atomically. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_RETAIN = <span class=\"number\">01401</span>,       <span class=\"comment\">/**&lt; Specifies a strong reference to the associated object.</span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is made atomically. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_COPY = <span class=\"number\">01403</span>          <span class=\"comment\">/**&lt; Specifies that the associated object is copied.</span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is made atomically. */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面实例实现了给<code>UIView</code>的<code>Category</code>添加自定义属性<code>defaultColor</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;objc/runtime.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIView</span> (<span class=\"title\">DefaultColor</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *defaultColor;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIView</span> (<span class=\"title\">DefaultColor</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">@dynamic</span> defaultColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">char</span> kDefaultColor;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)setDefaultColor:(<span class=\"built_in\">UIColor</span> *)defaultColor &#123;</span><br><span class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;kDefaultColor, defaultColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIColor</span> *)defaultColor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, &amp;kDefaultColor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *view = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">    view.defaultColor = [<span class=\"built_in\">UIColor</span> blueColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, view.defaultColor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 22:21:41.683715+0800 Runtime[59801:3820981] UIExtendedSRGBColorSpace 0 0 1 1</p>\n</blockquote>\n<p>从打印结果来看，我们成功在分类上添加了一个属性，\b实现了他的<code>getter</code>和<code>setter</code>方法。通过关联对象实现属性的内存管理也是有<code>ARC</code>管理的，所以我们只需要给定适当的内存策略就行了，不需要操心对象的释放。</p>\n<p>内存策略对应的属性修饰符\b对比如下表：</p>\n<table><tr><td>内存策略</td><td>属性修饰</td><td>描述</td></tr><tr><td>OBJC_ASSOCIATION_ASSIGN</td><td>@property (assign) 或 @property (unsafe_unretained)</td><td>指定一个关联对象的弱引用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN<br/>_NONATOMIC</td><td>@property (nonatomic, strong)</td><td>@property (nonatomic, strong)    指定一个关联对象的强引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY<br/>_NONATOMIC</td><td>@property (nonatomic, copy)</td><td>指定一个关联对象的copy引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN</td><td>@property (atomic, strong)</td><td>指定一个关联对象的强引用，能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY</td><td>@property (atomic, copy)</td><td>指定一个关联对象的copy引用，能被原子化使用</td></tr></table>\n\n<h2 id=\"方法魔法（Method-Swizzling）方法添加、替换和KVO实现\"><a href=\"#方法魔法（Method-Swizzling）方法添加、替换和KVO实现\" class=\"headerlink\" title=\"方法魔法（Method Swizzling）方法添加、替换和KVO实现\"></a>方法魔法（Method Swizzling）方法添加、替换和KVO实现</h2><h3 id=\"方法添加\"><a href=\"#方法添加\" class=\"headerlink\" title=\"方法添加\"></a>方法添加</h3><p>在<a href=\"\">Rutime详解</a>中介绍消息转发的时候，动态方法的添加就已经提到了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Adds a new method to a class with a given name and implementation.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param cls The class to which to add a method.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param name A selector that specifies the name of the method being added.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param imp A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param types An array of characters that describe the types of the arguments to the method. </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @return YES if the method was added successfully, otherwise NO </span></span><br><span class=\"line\"><span class=\"comment\"> *  (for example, the class already contains a method implementation with that name).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @note class_addMethod will add an override of a superclass&#x27;s implementation, </span></span><br><span class=\"line\"><span class=\"comment\"> *  but will not replace an existing implementation in this class. </span></span><br><span class=\"line\"><span class=\"comment\"> *  To change an existing implementation, use method_setImplementation.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">BOOL</span></span><br><span class=\"line\">class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, </span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"type\">char</span> * _Nullable types) </span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cls：被添加方法的类</li>\n<li>name：添加的方法名称的SEL</li>\n<li>imp：方法的实现。改函数至少要有两个参数，<code>self</code>和<code>_cmd</code></li>\n<li>types：类型编码</li>\n</ul>\n<h3 id=\"方法替换\"><a href=\"#方法替换\" class=\"headerlink\" title=\"方法替换\"></a>方法替换</h3><p>下面实现了一个替换<code>UIViewController</code>的<code>viewDidLoad</code>方法的例子：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(viewDidLoad);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(swizzledViewDidLoad);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, swizzledSelector);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">BOOL</span> didAddMethod = class_addMethod(<span class=\"keyword\">class</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>, swizzledMethod, method_getImplementation(originalMethod), method_getTypeEncoding(originalSelector));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)swizzledViewDidLoad &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;替换的方法&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> swizzledViewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;自带的方法&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 23:30:51.912380+0800 Runtime[70331:3958814] 替换的方法<br>2018-08-08 23:30:51.913268+0800 Runtime[70331:3958814] 自带的方法</p>\n</blockquote>\n<p><code>method swizzling</code>在<code>+load</code>中完成，在<code>Objective-C</code>的运行时中，每个类有两个方法会自动调用。<code>+ (void)load</code>是在一个类被初始装载时调用的，<code>+ (void)initialize</code>是在应用第一次调用该类方法或实例方法前调用的\b。两个方法都是可选的，并且在方法被实现的情况下才会调用。</p>\n<p><code>swizzling</code>只能在<code>dispatch_once</code>中完成，由于<code>swizzling</code>改变了全局的状态，所以我们需要确保每个预防措施在运行时都是可用的。原子操作就是这样用于确保代码只执行一次的预防措施，就算是在不同的线程中也能确保代码只执行一次。<code>gcd</code>的<code>dispatch_once</code>满足了所需要的需求。</p>\n<h3 id=\"KVO实现\"><a href=\"#KVO实现\" class=\"headerlink\" title=\"KVO实现\"></a>KVO实现</h3><blockquote>\n<p>KVO全称是key-value observing，翻译成中文就是键值观察。提供\b了一种当对象属性被修改的时候能通知当前对象的一种机制。在MVC设计架构下的项目，KVO机制很适合做Model与Controller之间的通讯。</p>\n</blockquote>\n<p>KVO的实现依赖于Objective-C强大的Runtime，Apple使用isa混写（isa-swizzling）来实现KVO。当观察对象A时，KVO机制动态创建一个新的名为<code>NSKVONotifying_A</code>的新类，该类继承自对象A的本类，且KVO为<code>NSKVONotifying_A</code>类重写观察属性的<code>setter</code>方法，<code>setter</code>方法会负责在调用原<code>setter</code>之前和之后，通知所观察对象属性值的更改情况。</p>\n<ul>\n<li>NSKVONotifying_A类剖析</li>\n</ul>\n<p>从应用层面看，完全没有意识到新的类的产生，这是系统“隐瞒”了对KVO底层的实现过程，让我们误以为还是原来的类。但是此时我们如果新建一个名为<code>NSKVONotifying_A</code>的类，就会发现系统运行到注册KVO那段代码的时候程序就奔溃了，因为在注册监听的时候动态创建了名为<code>NSKVONotifying_A</code>的中间类，并指向这个中间类。</p>\n<ul>\n<li>子类setter方法剖析</li>\n</ul>\n<p>KVO的键值观察依赖<code>NSObject</code>的两个方法：<code>willChangeValueForKey:</code>和<code>didChangeValueForKey:</code>，在存取的前后分别\b调用这2个方法。在被观察属性发生改变之前，<code>willChangeValueForKey:</code>被调用，通知系统该<code>keyPath</code>属性值即将变更；当被观察属性发生改变之后，<code>didChangeValueForKey:</code>被调用，通知系统该<code>keyPath</code>属性值已经变更；之后<code>observeValueForKey:ofObject:change:context: </code>也会被调用。且重写观察属性的 <code>setter</code> 方法这种继承方式的注入是在运行时而不是编译时实现的。</p>\n<p>KVO子类setter方法的重写调用存取方法的工作原理在代码中相当于：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"type\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)newName&#123; </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@&quot;name&quot;</span>];    <span class=\"comment\">//KVO 在调用存取方法之前总调用 </span></span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> setValue:newName forKey:<span class=\"string\">@&quot;name&quot;</span>]; <span class=\"comment\">//调用父类的存取方法 </span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@&quot;name&quot;</span>];     <span class=\"comment\">//KVO 在调用存取方法之后总调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息转发（热更新）解决Bug（JSPatch）\"><a href=\"#消息转发（热更新）解决Bug（JSPatch）\" class=\"headerlink\" title=\"消息转发（热更新）解决Bug（JSPatch）\"></a>消息转发（热更新）解决Bug（JSPatch）</h2><blockquote>\n<p><a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\">JSPatch</a> 是一个 iOS 动态更新框架，只需在项目中引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。</p>\n</blockquote>\n<p>关于消息转发，我们知道分为三级，我们可以在每级实现替换功能，实现消息转发，从而不造成崩溃。JSPatch不仅能够实现消息转发，还可以实现方法的添加、替换等一系列功能。</p>\n<h2 id=\"实现NSCoding的自动归档和自动解档\"><a href=\"#实现NSCoding的自动归档和自动解档\" class=\"headerlink\" title=\"实现NSCoding的自动归档和自动解档\"></a>实现NSCoding的自动归档和自动解档</h2><p>原理描述：用<code>Runtime</code>提供的函数遍历<code>Model</code>自身所有属性，并对属性进行<code>encode</code>和<code>decode</code>操作。核心方法是在<code>Model</code>基类中重写方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> initWithCoder:coder];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> outCount;</span><br><span class=\"line\">        Ivar * ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class=\"line\">            Ivar ivar = ivars[i];</span><br><span class=\"line\">            <span class=\"built_in\">NSString</span> * key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setValue:[coder decodeObjectForKey:key] forKey:key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> encodeWithCoder:coder];</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> outCount;</span><br><span class=\"line\">    Ivar * ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class=\"line\">        Ivar ivar = ivars[i];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> * key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class=\"line\">        [coder encodeObject:[<span class=\"keyword\">self</span> valueForKey:key] forKey:key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现字典和模型的自由转换（MJExtension）\"><a href=\"#实现字典和模型的自由转换（MJExtension）\" class=\"headerlink\" title=\"实现字典和模型的自由转换（MJExtension）\"></a>实现字典和模型的自由转换（MJExtension）</h2><p>原理描述：用Runtime提供的函数遍历Model自身所有属性，如果属性在JSON中有对应的值，则将其赋值。核心方法在NSObject的分类中添加方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithDict:(<span class=\"built_in\">NSDictionary</span> *)dict &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> init]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//(1)获取类的属性及属性对应的类型</span></span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span> * keys = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span> * attributes = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 例子</span></span><br><span class=\"line\"><span class=\"comment\">         * name = value3 attribute = T@&quot;NSString&quot;,C,N,V_value3</span></span><br><span class=\"line\"><span class=\"comment\">         * name = value4 attribute = T^i,N,V_value4</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> outCount;</span><br><span class=\"line\">        objc_property_t * properties = class_copyPropertyList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class=\"line\">            objc_property_t property = properties[i];</span><br><span class=\"line\">            <span class=\"comment\">//通过property_getName函数获得属性的名字</span></span><br><span class=\"line\">            <span class=\"built_in\">NSString</span> * propertyName = [<span class=\"built_in\">NSString</span> stringWithCString:property_getName(property) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">            [keys addObject:propertyName];</span><br><span class=\"line\">            <span class=\"comment\">//通过property_getAttributes函数可以获得属性的名字和@encode编码</span></span><br><span class=\"line\">            <span class=\"built_in\">NSString</span> * propertyAttribute = [<span class=\"built_in\">NSString</span> stringWithCString:property_getAttributes(property) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">            [attributes addObject:propertyAttribute];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//立即释放properties指向的内存</span></span><br><span class=\"line\">        free(properties);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//(2)根据类型给属性赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> * key <span class=\"keyword\">in</span> keys) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([dict valueForKey:key] == <span class=\"literal\">nil</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setValue:[dict valueForKey:key] forKey:key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><code>Runtime</code>简直就是做大型架构的利器，它的应用场景非常多，下面就介绍一些常见的应用场景。</p>\n<ul>\n<li>关联对象（Objective-C Associated Objects）给分类添加属性</li>\n<li>方法魔法（Method Swizzling）方法添加、替换和KVO实现</li>\n<li>消息转发（热更新）解决Bug（JSPatch）</li>\n<li>实现NSCoding的自动归档和自动解档</li>\n<li>实现字典和模型的自由转换（MJExtension）</li>\n</ul>\n<h2 id=\"关联对象（Objective-C-Associated-Objects）给分类添加属性\"><a href=\"#关联对象（Objective-C-Associated-Objects）给分类添加属性\" class=\"headerlink\" title=\"关联对象（Objective-C Associated Objects）给分类添加属性\"></a>关联对象（Objective-C Associated Objects）给分类添加属性</h2><p>通过对<code>objc_category</code>的结构体分析后我们知道分类是不能直接自定义属性和变量的，但是可以通过关联对象的方法给分类添加属性。</p>","more":"<p>关联对象在<code>objc/runtime.h</code>中提供了以下几个接口：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Sets an associated value for a given object using a given key and association policy.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value The value to associate with the key key for object. Pass nil to clear an existing association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param policy The policy for the association. For possible values, see “Associative Object Behaviors.”</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_removeAssociatedObjects</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 关联对象</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">void</span></span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"type\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"type\">void</span> * _Nonnull key,</span><br><span class=\"line\">                         <span class=\"type\">id</span> _Nullable value, objc_AssociationPolicy policy)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the value associated with a given object for a given key.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object The source object for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key The key for the association.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @return The value associated with the key \\e key for \\e object.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 获取关联的对象</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">id</span> _Nullable</span><br><span class=\"line\">objc_getAssociatedObject(<span class=\"type\">id</span> _Nonnull object, <span class=\"keyword\">const</span> <span class=\"type\">void</span> * _Nonnull key)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Removes all associations for a given object.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param object An object that maintains associated objects.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @note The main purpose of this function is to make it easy to return an object </span></span><br><span class=\"line\"><span class=\"comment\"> *  to a &quot;pristine state”. You should not use this function for general removal of</span></span><br><span class=\"line\"><span class=\"comment\"> *  associations from objects, since it also removes associations that other clients</span></span><br><span class=\"line\"><span class=\"comment\"> *  may have added to the object. Typically you should use \\c objc_setAssociatedObject </span></span><br><span class=\"line\"><span class=\"comment\"> *  with a nil value to clear an association.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_setAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> * @see objc_getAssociatedObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 移除关联的对象</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">void</span></span><br><span class=\"line\">objc_removeAssociatedObjects(<span class=\"type\">id</span> _Nonnull object)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li>id object：被关联的对象</li>\n<li>const void *key：被关联的key，要求唯一</li>\n<li>id value：关联的对象</li>\n<li>objc_AssociationPolicy policy：内存管理的策略</li>\n</ul>\n<p>内存管理策略的定义有：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Policies related to associative references.</span></span><br><span class=\"line\"><span class=\"comment\"> * These are options to objc_setAssociatedObject()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</span><br><span class=\"line\">    OBJC_ASSOCIATION_ASSIGN = <span class=\"number\">0</span>,           <span class=\"comment\">/**&lt; Specifies a weak reference to the associated object. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class=\"number\">1</span>, <span class=\"comment\">/**&lt; Specifies a strong reference to the associated object. </span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is not made atomically. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class=\"number\">3</span>,   <span class=\"comment\">/**&lt; Specifies that the associated object is copied. </span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is not made atomically. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_RETAIN = <span class=\"number\">01401</span>,       <span class=\"comment\">/**&lt; Specifies a strong reference to the associated object.</span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is made atomically. */</span></span><br><span class=\"line\">    OBJC_ASSOCIATION_COPY = <span class=\"number\">01403</span>          <span class=\"comment\">/**&lt; Specifies that the associated object is copied.</span></span><br><span class=\"line\"><span class=\"comment\">                                            *   The association is made atomically. */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面实例实现了给<code>UIView</code>的<code>Category</code>添加自定义属性<code>defaultColor</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;objc/runtime.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIView</span> (<span class=\"title\">DefaultColor</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *defaultColor;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIView</span> (<span class=\"title\">DefaultColor</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">@dynamic</span> defaultColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">char</span> kDefaultColor;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)setDefaultColor:(<span class=\"built_in\">UIColor</span> *)defaultColor &#123;</span><br><span class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;kDefaultColor, defaultColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIColor</span> *)defaultColor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, &amp;kDefaultColor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *view = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">    view.defaultColor = [<span class=\"built_in\">UIColor</span> blueColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, view.defaultColor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 22:21:41.683715+0800 Runtime[59801:3820981] UIExtendedSRGBColorSpace 0 0 1 1</p>\n</blockquote>\n<p>从打印结果来看，我们成功在分类上添加了一个属性，\b实现了他的<code>getter</code>和<code>setter</code>方法。通过关联对象实现属性的内存管理也是有<code>ARC</code>管理的，所以我们只需要给定适当的内存策略就行了，不需要操心对象的释放。</p>\n<p>内存策略对应的属性修饰符\b对比如下表：</p>\n<table><tr><td>内存策略</td><td>属性修饰</td><td>描述</td></tr><tr><td>OBJC_ASSOCIATION_ASSIGN</td><td>@property (assign) 或 @property (unsafe_unretained)</td><td>指定一个关联对象的弱引用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN<br/>_NONATOMIC</td><td>@property (nonatomic, strong)</td><td>@property (nonatomic, strong)    指定一个关联对象的强引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY<br/>_NONATOMIC</td><td>@property (nonatomic, copy)</td><td>指定一个关联对象的copy引用，不能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN</td><td>@property (atomic, strong)</td><td>指定一个关联对象的强引用，能被原子化使用</td></tr><tr><td>OBJC_ASSOCIATION_COPY</td><td>@property (atomic, copy)</td><td>指定一个关联对象的copy引用，能被原子化使用</td></tr></table>\n\n<h2 id=\"方法魔法（Method-Swizzling）方法添加、替换和KVO实现\"><a href=\"#方法魔法（Method-Swizzling）方法添加、替换和KVO实现\" class=\"headerlink\" title=\"方法魔法（Method Swizzling）方法添加、替换和KVO实现\"></a>方法魔法（Method Swizzling）方法添加、替换和KVO实现</h2><h3 id=\"方法添加\"><a href=\"#方法添加\" class=\"headerlink\" title=\"方法添加\"></a>方法添加</h3><p>在<a href=\"\">Rutime详解</a>中介绍消息转发的时候，动态方法的添加就已经提到了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Adds a new method to a class with a given name and implementation.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param cls The class to which to add a method.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param name A selector that specifies the name of the method being added.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param imp A function which is the implementation of the new method. The function must take at least two arguments—self and _cmd.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param types An array of characters that describe the types of the arguments to the method. </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @return YES if the method was added successfully, otherwise NO </span></span><br><span class=\"line\"><span class=\"comment\"> *  (for example, the class already contains a method implementation with that name).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @note class_addMethod will add an override of a superclass&#x27;s implementation, </span></span><br><span class=\"line\"><span class=\"comment\"> *  but will not replace an existing implementation in this class. </span></span><br><span class=\"line\"><span class=\"comment\"> *  To change an existing implementation, use method_setImplementation.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">OBJC_EXPORT <span class=\"type\">BOOL</span></span><br><span class=\"line\">class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, </span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"type\">char</span> * _Nullable types) </span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cls：被添加方法的类</li>\n<li>name：添加的方法名称的SEL</li>\n<li>imp：方法的实现。改函数至少要有两个参数，<code>self</code>和<code>_cmd</code></li>\n<li>types：类型编码</li>\n</ul>\n<h3 id=\"方法替换\"><a href=\"#方法替换\" class=\"headerlink\" title=\"方法替换\"></a>方法替换</h3><p>下面实现了一个替换<code>UIViewController</code>的<code>viewDidLoad</code>方法的例子：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(viewDidLoad);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(swizzledViewDidLoad);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, swizzledSelector);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">BOOL</span> didAddMethod = class_addMethod(<span class=\"keyword\">class</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>, swizzledMethod, method_getImplementation(originalMethod), method_getTypeEncoding(originalSelector));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)swizzledViewDidLoad &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;替换的方法&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> swizzledViewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;自带的方法&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 23:30:51.912380+0800 Runtime[70331:3958814] 替换的方法<br>2018-08-08 23:30:51.913268+0800 Runtime[70331:3958814] 自带的方法</p>\n</blockquote>\n<p><code>method swizzling</code>在<code>+load</code>中完成，在<code>Objective-C</code>的运行时中，每个类有两个方法会自动调用。<code>+ (void)load</code>是在一个类被初始装载时调用的，<code>+ (void)initialize</code>是在应用第一次调用该类方法或实例方法前调用的\b。两个方法都是可选的，并且在方法被实现的情况下才会调用。</p>\n<p><code>swizzling</code>只能在<code>dispatch_once</code>中完成，由于<code>swizzling</code>改变了全局的状态，所以我们需要确保每个预防措施在运行时都是可用的。原子操作就是这样用于确保代码只执行一次的预防措施，就算是在不同的线程中也能确保代码只执行一次。<code>gcd</code>的<code>dispatch_once</code>满足了所需要的需求。</p>\n<h3 id=\"KVO实现\"><a href=\"#KVO实现\" class=\"headerlink\" title=\"KVO实现\"></a>KVO实现</h3><blockquote>\n<p>KVO全称是key-value observing，翻译成中文就是键值观察。提供\b了一种当对象属性被修改的时候能通知当前对象的一种机制。在MVC设计架构下的项目，KVO机制很适合做Model与Controller之间的通讯。</p>\n</blockquote>\n<p>KVO的实现依赖于Objective-C强大的Runtime，Apple使用isa混写（isa-swizzling）来实现KVO。当观察对象A时，KVO机制动态创建一个新的名为<code>NSKVONotifying_A</code>的新类，该类继承自对象A的本类，且KVO为<code>NSKVONotifying_A</code>类重写观察属性的<code>setter</code>方法，<code>setter</code>方法会负责在调用原<code>setter</code>之前和之后，通知所观察对象属性值的更改情况。</p>\n<ul>\n<li>NSKVONotifying_A类剖析</li>\n</ul>\n<p>从应用层面看，完全没有意识到新的类的产生，这是系统“隐瞒”了对KVO底层的实现过程，让我们误以为还是原来的类。但是此时我们如果新建一个名为<code>NSKVONotifying_A</code>的类，就会发现系统运行到注册KVO那段代码的时候程序就奔溃了，因为在注册监听的时候动态创建了名为<code>NSKVONotifying_A</code>的中间类，并指向这个中间类。</p>\n<ul>\n<li>子类setter方法剖析</li>\n</ul>\n<p>KVO的键值观察依赖<code>NSObject</code>的两个方法：<code>willChangeValueForKey:</code>和<code>didChangeValueForKey:</code>，在存取的前后分别\b调用这2个方法。在被观察属性发生改变之前，<code>willChangeValueForKey:</code>被调用，通知系统该<code>keyPath</code>属性值即将变更；当被观察属性发生改变之后，<code>didChangeValueForKey:</code>被调用，通知系统该<code>keyPath</code>属性值已经变更；之后<code>observeValueForKey:ofObject:change:context: </code>也会被调用。且重写观察属性的 <code>setter</code> 方法这种继承方式的注入是在运行时而不是编译时实现的。</p>\n<p>KVO子类setter方法的重写调用存取方法的工作原理在代码中相当于：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"type\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)newName&#123; </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@&quot;name&quot;</span>];    <span class=\"comment\">//KVO 在调用存取方法之前总调用 </span></span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> setValue:newName forKey:<span class=\"string\">@&quot;name&quot;</span>]; <span class=\"comment\">//调用父类的存取方法 </span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@&quot;name&quot;</span>];     <span class=\"comment\">//KVO 在调用存取方法之后总调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息转发（热更新）解决Bug（JSPatch）\"><a href=\"#消息转发（热更新）解决Bug（JSPatch）\" class=\"headerlink\" title=\"消息转发（热更新）解决Bug（JSPatch）\"></a>消息转发（热更新）解决Bug（JSPatch）</h2><blockquote>\n<p><a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\">JSPatch</a> 是一个 iOS 动态更新框架，只需在项目中引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。</p>\n</blockquote>\n<p>关于消息转发，我们知道分为三级，我们可以在每级实现替换功能，实现消息转发，从而不造成崩溃。JSPatch不仅能够实现消息转发，还可以实现方法的添加、替换等一系列功能。</p>\n<h2 id=\"实现NSCoding的自动归档和自动解档\"><a href=\"#实现NSCoding的自动归档和自动解档\" class=\"headerlink\" title=\"实现NSCoding的自动归档和自动解档\"></a>实现NSCoding的自动归档和自动解档</h2><p>原理描述：用<code>Runtime</code>提供的函数遍历<code>Model</code>自身所有属性，并对属性进行<code>encode</code>和<code>decode</code>操作。核心方法是在<code>Model</code>基类中重写方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> initWithCoder:coder];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> outCount;</span><br><span class=\"line\">        Ivar * ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class=\"line\">            Ivar ivar = ivars[i];</span><br><span class=\"line\">            <span class=\"built_in\">NSString</span> * key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setValue:[coder decodeObjectForKey:key] forKey:key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> encodeWithCoder:coder];</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> outCount;</span><br><span class=\"line\">    Ivar * ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class=\"line\">        Ivar ivar = ivars[i];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> * key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class=\"line\">        [coder encodeObject:[<span class=\"keyword\">self</span> valueForKey:key] forKey:key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现字典和模型的自由转换（MJExtension）\"><a href=\"#实现字典和模型的自由转换（MJExtension）\" class=\"headerlink\" title=\"实现字典和模型的自由转换（MJExtension）\"></a>实现字典和模型的自由转换（MJExtension）</h2><p>原理描述：用Runtime提供的函数遍历Model自身所有属性，如果属性在JSON中有对应的值，则将其赋值。核心方法在NSObject的分类中添加方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithDict:(<span class=\"built_in\">NSDictionary</span> *)dict &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> init]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//(1)获取类的属性及属性对应的类型</span></span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span> * keys = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableArray</span> * attributes = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 例子</span></span><br><span class=\"line\"><span class=\"comment\">         * name = value3 attribute = T@&quot;NSString&quot;,C,N,V_value3</span></span><br><span class=\"line\"><span class=\"comment\">         * name = value4 attribute = T^i,N,V_value4</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> outCount;</span><br><span class=\"line\">        objc_property_t * properties = class_copyPropertyList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class=\"line\">            objc_property_t property = properties[i];</span><br><span class=\"line\">            <span class=\"comment\">//通过property_getName函数获得属性的名字</span></span><br><span class=\"line\">            <span class=\"built_in\">NSString</span> * propertyName = [<span class=\"built_in\">NSString</span> stringWithCString:property_getName(property) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">            [keys addObject:propertyName];</span><br><span class=\"line\">            <span class=\"comment\">//通过property_getAttributes函数可以获得属性的名字和@encode编码</span></span><br><span class=\"line\">            <span class=\"built_in\">NSString</span> * propertyAttribute = [<span class=\"built_in\">NSString</span> stringWithCString:property_getAttributes(property) encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">            [attributes addObject:propertyAttribute];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//立即释放properties指向的内存</span></span><br><span class=\"line\">        free(properties);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//(2)根据类型给属性赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> * key <span class=\"keyword\">in</span> keys) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([dict valueForKey:key] == <span class=\"literal\">nil</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setValue:[dict valueForKey:key] forKey:key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【iOS】Runtime详解","date":"2018-08-08T01:50:48.000Z","author":"Jvaeyhcd","abbrlink":"187e06540a0329db","_content":"做了很久的iOS开发了，但依然还是没有将一些基础的\b知识弄清楚，想要真正的掌握一门技术或则语言，真的不能一知半解，\b就像你说你熟练掌握了iOS的开发，但是如果别人问你什么是Runtime，它的原理是什么，如果这你都不知道真的算不上对iOS已经熟练掌握了。以前一直有一个误区，拿到一门语言或则技术直接就开始写东西了，但是对很多的原理都是一知半解，以致于忽略了很多基本知识，这篇笔记我要将我丢掉runtime的一些知识都捡起来。\n\n## Runtime简介\n\n> Objective-C是一门动态语言，它将很多静态语言在编译和链接时期做的事情放到了运行时来处理。对于Objective-C来说，这个Runtime就像是一个操作系统一样，它让所有的工作可以正常运行。Runtime简称运行时。Objective-C就是运行时机制，也就是在运行时的一些机制，最主要的就是消息机制。\n* 对于C语言，函数的调用在编译的时候会决定调用那个函数。\n* 对于Objective-C的函数，属于动态调用过程，在编译的时候并不能真正的决定调用哪个函数，只有真正运行的时候才会根据函数的名称找到对应的函数来调用。\n\n<!-- more -->\n\n## Runtime消息传递\n\n一个对象的方法像这样`[obj foo]`，编译器转成\b消息发送`objc_msgSend(obj, foo)`，Runtime时的执行流程是这样的：\n* 首先，通过它的`obj`的`isa`指针找到它的`class`；\n* 在`class`的`method_list`中找到`foo`方法；\n* 如果`class`中没有找到`foo`，就继续往它的`super_class`中找；\n* 一旦找到`foo`这个函数，就去执行它的实现`IMP`（如果还是找不到就会报`unrecognized selector`的错）。\n\n### 类对象（objc_class）\nObjective-C类是由Class类型来表示，它实际上是指向objc_class结构体的一个指针。\n``` objc\ntypedef struct objc_class *Class\n```\n\n查看`objc/runtime.h`文件中objc_class结构体的定义如下：\n``` c\n// 类\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;   // 父类\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;   // 类名\n    long version                                             OBJC2_UNAVAILABLE;   // 类的版本信息，默认为0\n    long info                                                OBJC2_UNAVAILABLE;   // 类信息，供运行期使用的一些位标识\n    long instance_size                                       OBJC2_UNAVAILABLE;   // 类的实例变量大小\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;   // 该类的成员变量链表\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;   // 方法定义的链表\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;   // 方法缓存\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;   // 协议链表\n#endif\n\n} OBJC2_UNAVAILABLE;\n\n// 方法\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n// 方法列表\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\n```\n\n### 实例（objc_object）\nobjc_object是表示一个类的实例的结构体，在`objc/objc.h`文件中定义如下：\n``` objc\ntypedef struct objc_class *Class;\n\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\ntypedef struct objc_object *id;\n```\n\n可以看到这个结构体只有一个字段，及指向其类的isa指针。这样当我们向一个Objective-C对象发送消息时，Runtime库会根据实例对象的isa指针找到这个实例对象所属的类。Runtime库会在类方法列表以及父类的方法列表中去寻找消息对应的\bselector指向的方法，找到后即运行这个方法。\n\n### 元类(Meta Class)\n\n类对象中的元数据存储的是如何创建一个实例的相关信息，类对象和类方法都应该从哪里创建呢？就是从isa指针指向的结构体创建，类对象的isa指针指向的我们称之为元类（Meta Class），元类中保存了创建类对象以及类方法所需的所有信息。因此整个结构应该如下图所示：\n\n{% asset_img 1628088a3e4f0167.png Meta Class %}\n\n通过上图我们可以看出整个体系构成了一个自闭环，`struct objc_object`结构体实例它的isa指针指向类对象，类对象的isa指向了元类，`super_class`指向了父类的类对象，而元类的`super_class`指向了父类的元类，那元类的isa又指向了自己。\n\n元类（Meta Class）是一个类对象的类。所有的类自身也是一个对象，我们可以向这个对象发送消息（即调用方法）。为了调用方法，这个类的isa\b指针必须指向一个包含类方法的一个`objc_class`结构体。这就引入了Meta Class概念，元类中保存了创建类对象以及类方法需要的所有信息。任何`NSObject`集成体系下的`meta-class`都使用`NSObject`的`meta-class`作为自己的所属类，而基类的`meta-class`的isa指向它自己。\n\n### Method(objc_method)\n\n在`objc/runtime.h`中的定义如下：\n``` objc\n// 方法\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;   // 方法名\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;   // 方法类型\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;   // 方法实现\n}         \n```\n`Method`和我们平时理解的函数是一致的，就是表示能够独立完成一个功能的一段代码，比如：\n``` objc\n- (void)logName\n{\n    NSLog(@\"name\");\n}\n```\n上面这段代码就是一个函数。\n\n在`objc_method`的结构体中，看到了`SEL`和`IMP`，说明`SEL`和`IMP`其实都是`Method`的属性。\n\n### SEL(objc_selector)\n\n在`objc/objc.h`中的定义为：\n``` objc\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n```\n\n`objc_msgSend`函数第二个参数类型为`SEL`，它是`selector`在`Objective-C`中的表示类型。`selector`是方法选择器，可以理解为区分方法的`ID`，而这个`ID`的数据结构是`SEL`：\n``` objc\n@property SEL selector;\n```\n可以看到`selector`是`SEL`的一个实例。\n\n其实`selector`就是映射到方法的C字符串，你可以用`Objective-C`编译器命令`@selector()`或则Runtime系统的`sel_registerName`函数来获得一个`SEL`类型的方法选择器。\n\n`selector`既然是\b一个string，我觉得应该是类似于`className+MethodName`的组合，命名规则有\b两条：\n* 同一个类，selector不能重复\n* 不同的类，selector可以重复\n\n所以在Objective-C中\b如下的代码会报错：\n``` objc\n- (void)caculate(NSInteger)num;\n- (void)caculate(CGFloat)num;\n```\n只能通过方法名来进行区别：\n``` objc\n- (void)caculateWithInt(NSInteger)num;\n- (void)caculateWithFloat(CGFloat)num;\n```\n\n### IMP\n\n在`objc/objc.h`中IMP的定义如下：\n``` objc\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n```\n就是指向最终实现程序函数的内存地址的指针。\n\n在`iOS`的`Runtime`中，`Method`通过`SEL`和`IMP`两个属性，实现了快速方法的查询\b以及实现，相对提高了性能又保持了灵活性。\n\n### 类缓存(objc_cache)\n\n当Objective-C运行时通过跟踪它的isa指针检查对象时，它可以找到一个实现多个方法的对象。然而你只调用其中的以一小部分，并且每次检查时，搜索所有选择器的分派表没有意义。所以实现一个缓存，每当你搜索一个类分派表，并找到相应的选择器，它把它放入缓存。所以当`objc_msgSend`查找一个类的选择器，它首先搜索缓存。\n\n为了加速消息分发，系统会对方法和对应的地址进行缓存，就放在上面所述的`objc_cache`，所以在实际运行中，大部分常用的方法都会被缓存起来，`Runtime`系统实际上非常快，接近于直接执行内存地址程序的速度。\n\n### Category(objc_category)\n\n在`obj/runtime.h`中`objc_category`的定义如下：\n``` objc\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;   // 分类\b名\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;   // 分类所属的类名\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;   // 实例方法列表\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;   // 类方法列表\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;   // 分类所现实的协议列表\n}     \n```\n从上面的`objc_category`的结构体可以看出，分类中可以添加实例方法、类方法，甚至可以实现协议，不能添加实例变量和属性。\n\n## Runtime消息转发\n\n上面Runtime消息传递中已经介绍了一次发送消息会在相关的类对象中搜索方法列表，如果找不到则会沿着继承树向上一直搜索直到继承树根部（通常为NSObject），如果还是找不到\b并且消息转发都失败了就会执行`doesNotRecognizeSelector:`方法报`unrecognized selector`错。\n\n因此对于对象尝试调用未实现的\b方法会报错，遇到这种情况会不会有什么“补救措施”，当然有，这就需要了解消息的转发机制。\n\n当没有找到实现方法时，会调用一下函数：\n* 动态方法解析\n  ``` objc\n  +(BOOL)resolveInstanceMethod:(SEL)sel\n  +(BOOL)resolveClassMethod:(SEL)sel\n  ```\n* 备用接受者\n  ``` objc\n  -(id)forwardingTargetForSelector:(SEL)aSelector\n  ```\n* 完整地消息转发\n  ``` objc\n  -(NSMethodSignature*)methodSignatureForSelector:(SEL)aSelector\n  -(void)forwardInvocation:(NSInvocation *)anInvocation\n  ```\n\n消息转发流程简图：\n\n{% asset_img runtime_msg_send.svg 消息转发流程简图 %}\n\n\n### 动态解析方法\n\n首先\b会调用动态方法的解析方法，我们可以尝试在`+(BOOL)resolveInstanceMethod:(SEL)selector`（针对实例方法）和`+(BOOL)resolveClassMethod:(SEL)sel`（针对类方法）中添加实现方法。\n\n实现一个动态方法解析的例子如下：\n\n``` objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    //执行eat函数\n    [self performSelector:@selector(eat:)];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    if (sel == @selector(eat:)) {//如果是执行eat函数，就动态解析，指定新的IMP\n        class_addMethod([self class], sel, (IMP)eatMethod, \"v@:\");\n        return YES;\n    }\n    return [super resolveInstanceMethod:sel];\n}\n\nvoid eatMethod(id obj, SEL _cmd) {\n    NSLog(@\"Person eat\");//新的eat函数\n}\n```\n> 2018-08-08 15:54:30.652862+0800 Runtime[32473:3482683] Person eat\n\n从上面的例子可以看到虽然没有实现`eat:`这个函数，但是通过`class_addMethod`动态添加`eatMethod`函数，并执行`eatMethod`这个函数的`IMP`。\n\n如果`+ (BOOL)resolveInstanceMethod:(SEL)sel`或`+(BOOL)resolveClassMethod:(SEL)sel`方法没有处理`eat:`方法，运行时就会移到下一步：`- (id)forwardingTargetForSelector:(SEL)aSelector`。\n\n### 备用接受者\n\n如果目标对象实现了`- (id)forwardingTargetForSelector:(SEL)aSelector`，那么运行时就会调用这个方法，把这个消息转发给其他对象。\n\n\n``` objc\n#import \"ViewController.h\"\n#import \"objc/runtime.h\"\n\n@interface Person: NSObject\n\n@end\n\n@implementation Person\n- (void)eat {\n    NSLog(@\"forwardingTargetForSelector Person eat\");\n}\n@end\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    //执行eat函数\n    [self performSelector:@selector(eat)];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    return NO; // 这里不管返回是YES还是NO都会进入forwardingTargetForSelector\n}\n\n- (id)forwardingTargetForSelector:(SEL)aSelector {\n    if (aSelector == @selector(eat)) {\n        return [Person new];\n    }\n    return [super forwardingTargetForSelector:aSelector];\n}\n\nvoid eatMethod(id obj, SEL _cmd) {\n    NSLog(@\"resolveInstanceMethod Person eat\");//新的eat函数\n}\n\n@end\n```\n\n打印结果：\n> 2018-08-08 16:14:54.714890+0800 Runtime[35945:3529505] forwardingTargetForSelector Person eat\n\n从上面的例子我们可以看到通过`forwardingTargetForSelector`把当前`ViewController`的方法传给了`Person`去执行了。\n\n### 完整消息转发\n\n如果上面两部步都无法处理未知消息，那么唯一能做的就是启用完整消息转发机制了。首先它会发送`- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector`消息获得函数的参数和返回值类型。如果`- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector`返回`nil`，`Runtime`则会发`-doesNotRecognizeSelector:`消息，程序也会挂掉。如果返回的了一个函数签名，`Runtime`就会创建一个`NSInvocation`对象并发送`- (void)forwardInvocation:(NSInvocation *)anInvocation`消息给目标对象。\n\n实现的例子如下：\n``` objc\n#import \"ViewController.h\"\n#import \"objc/runtime.h\"\n\n@interface Person: NSObject\n\n@end\n\n@implementation Person\n- (void)eat {\n    NSLog(@\"完整消息转发 Person eat\");\n}\n@end\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    //执行eat函数\n    [self performSelector:@selector(eat)];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    return NO; // 这里不管返回是YES还是NO都会进入forwardingTargetForSelector\n}\n\n- (id)forwardingTargetForSelector:(SEL)aSelector {\n    return nil;\n}\n\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector {\n    if ([NSStringFromSelector(aSelector) isEqualToString:@\"eat\"]) {\n        return [NSMethodSignature signatureWithObjCTypes:\"v@:\"];\n    }\n    return [super methodSignatureForSelector:aSelector];\n}\n\n- (void)forwardInvocation:(NSInvocation *)anInvocation {\n    SEL sel = anInvocation.selector;\n    Person *p = [Person new];\n    if ([p respondsToSelector:sel]) {\n        [anInvocation invokeWithTarget:p];\n    } else {\n        [self doesNotRecognizeSelector:sel];\n    }\n}\n\nvoid eatMethod(id obj, SEL _cmd) {\n    NSLog(@\"resolveInstanceMethod Person eat\");//新的eat函数\n}\n\n@end\n```\n\n打印结果：\n> 2018-08-08 16:38:29.076233+0800 Runtime[39848:3579675] 完整消息转发 Person eat\n\n从打印结果来看，我们实现了\b完整的消息转发。通过签名，`Runtime`生成了一个对象`(NSInvocation *)anInvocation`发送给`forwardInvocation`方法，我们在`forwardInvocation`方法中让`Person`对象去执行`eat`函数。\n\n> 关于签名参数`v@:`的解释，在苹果官方文档[Type\b Encoding](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1)中有详细的解释。","source":"_posts/【iOS】Runtime详解.md","raw":"---\ntitle: 【iOS】Runtime详解\ndate: 2018-08-08 09:50:48\ntags:\n  - Runtime\nauthor: Jvaeyhcd\ncategories: iOS学习笔记\nabbrlink: 187e06540a0329db\n---\n做了很久的iOS开发了，但依然还是没有将一些基础的\b知识弄清楚，想要真正的掌握一门技术或则语言，真的不能一知半解，\b就像你说你熟练掌握了iOS的开发，但是如果别人问你什么是Runtime，它的原理是什么，如果这你都不知道真的算不上对iOS已经熟练掌握了。以前一直有一个误区，拿到一门语言或则技术直接就开始写东西了，但是对很多的原理都是一知半解，以致于忽略了很多基本知识，这篇笔记我要将我丢掉runtime的一些知识都捡起来。\n\n## Runtime简介\n\n> Objective-C是一门动态语言，它将很多静态语言在编译和链接时期做的事情放到了运行时来处理。对于Objective-C来说，这个Runtime就像是一个操作系统一样，它让所有的工作可以正常运行。Runtime简称运行时。Objective-C就是运行时机制，也就是在运行时的一些机制，最主要的就是消息机制。\n* 对于C语言，函数的调用在编译的时候会决定调用那个函数。\n* 对于Objective-C的函数，属于动态调用过程，在编译的时候并不能真正的决定调用哪个函数，只有真正运行的时候才会根据函数的名称找到对应的函数来调用。\n\n<!-- more -->\n\n## Runtime消息传递\n\n一个对象的方法像这样`[obj foo]`，编译器转成\b消息发送`objc_msgSend(obj, foo)`，Runtime时的执行流程是这样的：\n* 首先，通过它的`obj`的`isa`指针找到它的`class`；\n* 在`class`的`method_list`中找到`foo`方法；\n* 如果`class`中没有找到`foo`，就继续往它的`super_class`中找；\n* 一旦找到`foo`这个函数，就去执行它的实现`IMP`（如果还是找不到就会报`unrecognized selector`的错）。\n\n### 类对象（objc_class）\nObjective-C类是由Class类型来表示，它实际上是指向objc_class结构体的一个指针。\n``` objc\ntypedef struct objc_class *Class\n```\n\n查看`objc/runtime.h`文件中objc_class结构体的定义如下：\n``` c\n// 类\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;   // 父类\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;   // 类名\n    long version                                             OBJC2_UNAVAILABLE;   // 类的版本信息，默认为0\n    long info                                                OBJC2_UNAVAILABLE;   // 类信息，供运行期使用的一些位标识\n    long instance_size                                       OBJC2_UNAVAILABLE;   // 类的实例变量大小\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;   // 该类的成员变量链表\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;   // 方法定义的链表\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;   // 方法缓存\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;   // 协议链表\n#endif\n\n} OBJC2_UNAVAILABLE;\n\n// 方法\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n// 方法列表\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\n\n```\n\n### 实例（objc_object）\nobjc_object是表示一个类的实例的结构体，在`objc/objc.h`文件中定义如下：\n``` objc\ntypedef struct objc_class *Class;\n\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\ntypedef struct objc_object *id;\n```\n\n可以看到这个结构体只有一个字段，及指向其类的isa指针。这样当我们向一个Objective-C对象发送消息时，Runtime库会根据实例对象的isa指针找到这个实例对象所属的类。Runtime库会在类方法列表以及父类的方法列表中去寻找消息对应的\bselector指向的方法，找到后即运行这个方法。\n\n### 元类(Meta Class)\n\n类对象中的元数据存储的是如何创建一个实例的相关信息，类对象和类方法都应该从哪里创建呢？就是从isa指针指向的结构体创建，类对象的isa指针指向的我们称之为元类（Meta Class），元类中保存了创建类对象以及类方法所需的所有信息。因此整个结构应该如下图所示：\n\n{% asset_img 1628088a3e4f0167.png Meta Class %}\n\n通过上图我们可以看出整个体系构成了一个自闭环，`struct objc_object`结构体实例它的isa指针指向类对象，类对象的isa指向了元类，`super_class`指向了父类的类对象，而元类的`super_class`指向了父类的元类，那元类的isa又指向了自己。\n\n元类（Meta Class）是一个类对象的类。所有的类自身也是一个对象，我们可以向这个对象发送消息（即调用方法）。为了调用方法，这个类的isa\b指针必须指向一个包含类方法的一个`objc_class`结构体。这就引入了Meta Class概念，元类中保存了创建类对象以及类方法需要的所有信息。任何`NSObject`集成体系下的`meta-class`都使用`NSObject`的`meta-class`作为自己的所属类，而基类的`meta-class`的isa指向它自己。\n\n### Method(objc_method)\n\n在`objc/runtime.h`中的定义如下：\n``` objc\n// 方法\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;   // 方法名\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;   // 方法类型\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;   // 方法实现\n}         \n```\n`Method`和我们平时理解的函数是一致的，就是表示能够独立完成一个功能的一段代码，比如：\n``` objc\n- (void)logName\n{\n    NSLog(@\"name\");\n}\n```\n上面这段代码就是一个函数。\n\n在`objc_method`的结构体中，看到了`SEL`和`IMP`，说明`SEL`和`IMP`其实都是`Method`的属性。\n\n### SEL(objc_selector)\n\n在`objc/objc.h`中的定义为：\n``` objc\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n```\n\n`objc_msgSend`函数第二个参数类型为`SEL`，它是`selector`在`Objective-C`中的表示类型。`selector`是方法选择器，可以理解为区分方法的`ID`，而这个`ID`的数据结构是`SEL`：\n``` objc\n@property SEL selector;\n```\n可以看到`selector`是`SEL`的一个实例。\n\n其实`selector`就是映射到方法的C字符串，你可以用`Objective-C`编译器命令`@selector()`或则Runtime系统的`sel_registerName`函数来获得一个`SEL`类型的方法选择器。\n\n`selector`既然是\b一个string，我觉得应该是类似于`className+MethodName`的组合，命名规则有\b两条：\n* 同一个类，selector不能重复\n* 不同的类，selector可以重复\n\n所以在Objective-C中\b如下的代码会报错：\n``` objc\n- (void)caculate(NSInteger)num;\n- (void)caculate(CGFloat)num;\n```\n只能通过方法名来进行区别：\n``` objc\n- (void)caculateWithInt(NSInteger)num;\n- (void)caculateWithFloat(CGFloat)num;\n```\n\n### IMP\n\n在`objc/objc.h`中IMP的定义如下：\n``` objc\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n```\n就是指向最终实现程序函数的内存地址的指针。\n\n在`iOS`的`Runtime`中，`Method`通过`SEL`和`IMP`两个属性，实现了快速方法的查询\b以及实现，相对提高了性能又保持了灵活性。\n\n### 类缓存(objc_cache)\n\n当Objective-C运行时通过跟踪它的isa指针检查对象时，它可以找到一个实现多个方法的对象。然而你只调用其中的以一小部分，并且每次检查时，搜索所有选择器的分派表没有意义。所以实现一个缓存，每当你搜索一个类分派表，并找到相应的选择器，它把它放入缓存。所以当`objc_msgSend`查找一个类的选择器，它首先搜索缓存。\n\n为了加速消息分发，系统会对方法和对应的地址进行缓存，就放在上面所述的`objc_cache`，所以在实际运行中，大部分常用的方法都会被缓存起来，`Runtime`系统实际上非常快，接近于直接执行内存地址程序的速度。\n\n### Category(objc_category)\n\n在`obj/runtime.h`中`objc_category`的定义如下：\n``` objc\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;   // 分类\b名\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;   // 分类所属的类名\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;   // 实例方法列表\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;   // 类方法列表\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;   // 分类所现实的协议列表\n}     \n```\n从上面的`objc_category`的结构体可以看出，分类中可以添加实例方法、类方法，甚至可以实现协议，不能添加实例变量和属性。\n\n## Runtime消息转发\n\n上面Runtime消息传递中已经介绍了一次发送消息会在相关的类对象中搜索方法列表，如果找不到则会沿着继承树向上一直搜索直到继承树根部（通常为NSObject），如果还是找不到\b并且消息转发都失败了就会执行`doesNotRecognizeSelector:`方法报`unrecognized selector`错。\n\n因此对于对象尝试调用未实现的\b方法会报错，遇到这种情况会不会有什么“补救措施”，当然有，这就需要了解消息的转发机制。\n\n当没有找到实现方法时，会调用一下函数：\n* 动态方法解析\n  ``` objc\n  +(BOOL)resolveInstanceMethod:(SEL)sel\n  +(BOOL)resolveClassMethod:(SEL)sel\n  ```\n* 备用接受者\n  ``` objc\n  -(id)forwardingTargetForSelector:(SEL)aSelector\n  ```\n* 完整地消息转发\n  ``` objc\n  -(NSMethodSignature*)methodSignatureForSelector:(SEL)aSelector\n  -(void)forwardInvocation:(NSInvocation *)anInvocation\n  ```\n\n消息转发流程简图：\n\n{% asset_img runtime_msg_send.svg 消息转发流程简图 %}\n\n\n### 动态解析方法\n\n首先\b会调用动态方法的解析方法，我们可以尝试在`+(BOOL)resolveInstanceMethod:(SEL)selector`（针对实例方法）和`+(BOOL)resolveClassMethod:(SEL)sel`（针对类方法）中添加实现方法。\n\n实现一个动态方法解析的例子如下：\n\n``` objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    //执行eat函数\n    [self performSelector:@selector(eat:)];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    if (sel == @selector(eat:)) {//如果是执行eat函数，就动态解析，指定新的IMP\n        class_addMethod([self class], sel, (IMP)eatMethod, \"v@:\");\n        return YES;\n    }\n    return [super resolveInstanceMethod:sel];\n}\n\nvoid eatMethod(id obj, SEL _cmd) {\n    NSLog(@\"Person eat\");//新的eat函数\n}\n```\n> 2018-08-08 15:54:30.652862+0800 Runtime[32473:3482683] Person eat\n\n从上面的例子可以看到虽然没有实现`eat:`这个函数，但是通过`class_addMethod`动态添加`eatMethod`函数，并执行`eatMethod`这个函数的`IMP`。\n\n如果`+ (BOOL)resolveInstanceMethod:(SEL)sel`或`+(BOOL)resolveClassMethod:(SEL)sel`方法没有处理`eat:`方法，运行时就会移到下一步：`- (id)forwardingTargetForSelector:(SEL)aSelector`。\n\n### 备用接受者\n\n如果目标对象实现了`- (id)forwardingTargetForSelector:(SEL)aSelector`，那么运行时就会调用这个方法，把这个消息转发给其他对象。\n\n\n``` objc\n#import \"ViewController.h\"\n#import \"objc/runtime.h\"\n\n@interface Person: NSObject\n\n@end\n\n@implementation Person\n- (void)eat {\n    NSLog(@\"forwardingTargetForSelector Person eat\");\n}\n@end\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    //执行eat函数\n    [self performSelector:@selector(eat)];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    return NO; // 这里不管返回是YES还是NO都会进入forwardingTargetForSelector\n}\n\n- (id)forwardingTargetForSelector:(SEL)aSelector {\n    if (aSelector == @selector(eat)) {\n        return [Person new];\n    }\n    return [super forwardingTargetForSelector:aSelector];\n}\n\nvoid eatMethod(id obj, SEL _cmd) {\n    NSLog(@\"resolveInstanceMethod Person eat\");//新的eat函数\n}\n\n@end\n```\n\n打印结果：\n> 2018-08-08 16:14:54.714890+0800 Runtime[35945:3529505] forwardingTargetForSelector Person eat\n\n从上面的例子我们可以看到通过`forwardingTargetForSelector`把当前`ViewController`的方法传给了`Person`去执行了。\n\n### 完整消息转发\n\n如果上面两部步都无法处理未知消息，那么唯一能做的就是启用完整消息转发机制了。首先它会发送`- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector`消息获得函数的参数和返回值类型。如果`- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector`返回`nil`，`Runtime`则会发`-doesNotRecognizeSelector:`消息，程序也会挂掉。如果返回的了一个函数签名，`Runtime`就会创建一个`NSInvocation`对象并发送`- (void)forwardInvocation:(NSInvocation *)anInvocation`消息给目标对象。\n\n实现的例子如下：\n``` objc\n#import \"ViewController.h\"\n#import \"objc/runtime.h\"\n\n@interface Person: NSObject\n\n@end\n\n@implementation Person\n- (void)eat {\n    NSLog(@\"完整消息转发 Person eat\");\n}\n@end\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    //执行eat函数\n    [self performSelector:@selector(eat)];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel {\n    return NO; // 这里不管返回是YES还是NO都会进入forwardingTargetForSelector\n}\n\n- (id)forwardingTargetForSelector:(SEL)aSelector {\n    return nil;\n}\n\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector {\n    if ([NSStringFromSelector(aSelector) isEqualToString:@\"eat\"]) {\n        return [NSMethodSignature signatureWithObjCTypes:\"v@:\"];\n    }\n    return [super methodSignatureForSelector:aSelector];\n}\n\n- (void)forwardInvocation:(NSInvocation *)anInvocation {\n    SEL sel = anInvocation.selector;\n    Person *p = [Person new];\n    if ([p respondsToSelector:sel]) {\n        [anInvocation invokeWithTarget:p];\n    } else {\n        [self doesNotRecognizeSelector:sel];\n    }\n}\n\nvoid eatMethod(id obj, SEL _cmd) {\n    NSLog(@\"resolveInstanceMethod Person eat\");//新的eat函数\n}\n\n@end\n```\n\n打印结果：\n> 2018-08-08 16:38:29.076233+0800 Runtime[39848:3579675] 完整消息转发 Person eat\n\n从打印结果来看，我们实现了\b完整的消息转发。通过签名，`Runtime`生成了一个对象`(NSInvocation *)anInvocation`发送给`forwardInvocation`方法，我们在`forwardInvocation`方法中让`Person`对象去执行`eat`函数。\n\n> 关于签名参数`v@:`的解释，在苹果官方文档[Type\b Encoding](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1)中有详细的解释。","slug":"【iOS】Runtime详解","published":1,"updated":"2022-05-19T03:13:11.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo30044l1l3gw9l6ube","content":"<p>做了很久的iOS开发了，但依然还是没有将一些基础的\b知识弄清楚，想要真正的掌握一门技术或则语言，真的不能一知半解，\b就像你说你熟练掌握了iOS的开发，但是如果别人问你什么是Runtime，它的原理是什么，如果这你都不知道真的算不上对iOS已经熟练掌握了。以前一直有一个误区，拿到一门语言或则技术直接就开始写东西了，但是对很多的原理都是一知半解，以致于忽略了很多基本知识，这篇笔记我要将我丢掉runtime的一些知识都捡起来。</p>\n<h2 id=\"Runtime简介\"><a href=\"#Runtime简介\" class=\"headerlink\" title=\"Runtime简介\"></a>Runtime简介</h2><blockquote>\n<p>Objective-C是一门动态语言，它将很多静态语言在编译和链接时期做的事情放到了运行时来处理。对于Objective-C来说，这个Runtime就像是一个操作系统一样，它让所有的工作可以正常运行。Runtime简称运行时。Objective-C就是运行时机制，也就是在运行时的一些机制，最主要的就是消息机制。</p>\n</blockquote>\n<ul>\n<li>对于C语言，函数的调用在编译的时候会决定调用那个函数。</li>\n<li>对于Objective-C的函数，属于动态调用过程，在编译的时候并不能真正的决定调用哪个函数，只有真正运行的时候才会根据函数的名称找到对应的函数来调用。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Runtime消息传递\"><a href=\"#Runtime消息传递\" class=\"headerlink\" title=\"Runtime消息传递\"></a>Runtime消息传递</h2><p>一个对象的方法像这样<code>[obj foo]</code>，编译器转成\b消息发送<code>objc_msgSend(obj, foo)</code>，Runtime时的执行流程是这样的：</p>\n<ul>\n<li>首先，通过它的<code>obj</code>的<code>isa</code>指针找到它的<code>class</code>；</li>\n<li>在<code>class</code>的<code>method_list</code>中找到<code>foo</code>方法；</li>\n<li>如果<code>class</code>中没有找到<code>foo</code>，就继续往它的<code>super_class</code>中找；</li>\n<li>一旦找到<code>foo</code>这个函数，就去执行它的实现<code>IMP</code>（如果还是找不到就会报<code>unrecognized selector</code>的错）。</li>\n</ul>\n<h3 id=\"类对象（objc-class）\"><a href=\"#类对象（objc-class）\" class=\"headerlink\" title=\"类对象（objc_class）\"></a>类对象（objc_class）</h3><p>Objective-C类是由Class类型来表示，它实际上是指向objc_class结构体的一个指针。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>objc/runtime.h</code>文件中objc_class结构体的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> &#123;</span></span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !__OBJC2__</span></span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;   <span class=\"comment\">// 父类</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类名</span></span><br><span class=\"line\">    <span class=\"type\">long</span> version                                             OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类的版本信息，默认为0</span></span><br><span class=\"line\">    <span class=\"type\">long</span> info                                                OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类信息，供运行期使用的一些位标识</span></span><br><span class=\"line\">    <span class=\"type\">long</span> instance_size                                       OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类的实例变量大小</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_ivar_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">ivars</span>                  <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 该类的成员变量链表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">methodLists</span>                    <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 方法定义的链表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> * _<span class=\"title\">Nonnull</span> <span class=\"title\">cache</span>                       <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 方法缓存</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">protocols</span>          <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 协议链表</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method</span> &#123;</span></span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nullable method_types                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法列表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">obsolete</span>             <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> method_count                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __LP64__</span></span><br><span class=\"line\">    <span class=\"type\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">/* variable length structure */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method</span> <span class=\"title\">method_list</span>[1]                        <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例（objc-object）\"><a href=\"#实例（objc-object）\" class=\"headerlink\" title=\"实例（objc_object）\"></a>实例（objc_object）</h3><p>objc_object是表示一个类的实例的结构体，在<code>objc/objc.h</code>文件中定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object *<span class=\"type\">id</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个结构体只有一个字段，及指向其类的isa指针。这样当我们向一个Objective-C对象发送消息时，Runtime库会根据实例对象的isa指针找到这个实例对象所属的类。Runtime库会在类方法列表以及父类的方法列表中去寻找消息对应的\bselector指向的方法，找到后即运行这个方法。</p>\n<h3 id=\"元类-Meta-Class\"><a href=\"#元类-Meta-Class\" class=\"headerlink\" title=\"元类(Meta Class)\"></a>元类(Meta Class)</h3><p>类对象中的元数据存储的是如何创建一个实例的相关信息，类对象和类方法都应该从哪里创建呢？就是从isa指针指向的结构体创建，类对象的isa指针指向的我们称之为元类（Meta Class），元类中保存了创建类对象以及类方法所需的所有信息。因此整个结构应该如下图所示：</p>\n<img src=\"/posts/187e06540a0329db/1628088a3e4f0167.png\" class=\"\" title=\"Meta Class\">\n\n<p>通过上图我们可以看出整个体系构成了一个自闭环，<code>struct objc_object</code>结构体实例它的isa指针指向类对象，类对象的isa指向了元类，<code>super_class</code>指向了父类的类对象，而元类的<code>super_class</code>指向了父类的元类，那元类的isa又指向了自己。</p>\n<p>元类（Meta Class）是一个类对象的类。所有的类自身也是一个对象，我们可以向这个对象发送消息（即调用方法）。为了调用方法，这个类的isa\b指针必须指向一个包含类方法的一个<code>objc_class</code>结构体。这就引入了Meta Class概念，元类中保存了创建类对象以及类方法需要的所有信息。任何<code>NSObject</code>集成体系下的<code>meta-class</code>都使用<code>NSObject</code>的<code>meta-class</code>作为自己的所属类，而基类的<code>meta-class</code>的isa指向它自己。</p>\n<h3 id=\"Method-objc-method\"><a href=\"#Method-objc-method\" class=\"headerlink\" title=\"Method(objc_method)\"></a>Method(objc_method)</h3><p>在<code>objc/runtime.h</code>中的定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;   <span class=\"comment\">// 方法名</span></span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nullable method_types                            OBJC2_UNAVAILABLE;   <span class=\"comment\">// 方法类型</span></span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;   <span class=\"comment\">// 方法实现</span></span><br><span class=\"line\">&#125;         </span><br></pre></td></tr></table></figure>\n<p><code>Method</code>和我们平时理解的函数是一致的，就是表示能够独立完成一个功能的一段代码，比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)logName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;name&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码就是一个函数。</p>\n<p>在<code>objc_method</code>的结构体中，看到了<code>SEL</code>和<code>IMP</code>，说明<code>SEL</code>和<code>IMP</code>其实都是<code>Method</code>的属性。</p>\n<h3 id=\"SEL-objc-selector\"><a href=\"#SEL-objc-selector\" class=\"headerlink\" title=\"SEL(objc_selector)\"></a>SEL(objc_selector)</h3><p>在<code>objc/objc.h</code>中的定义为：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a method selector.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector *SEL;</span><br></pre></td></tr></table></figure>\n\n<p><code>objc_msgSend</code>函数第二个参数类型为<code>SEL</code>，它是<code>selector</code>在<code>Objective-C</code>中的表示类型。<code>selector</code>是方法选择器，可以理解为区分方法的<code>ID</code>，而这个<code>ID</code>的数据结构是<code>SEL</code>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> SEL selector;</span><br></pre></td></tr></table></figure>\n<p>可以看到<code>selector</code>是<code>SEL</code>的一个实例。</p>\n<p>其实<code>selector</code>就是映射到方法的C字符串，你可以用<code>Objective-C</code>编译器命令<code>@selector()</code>或则Runtime系统的<code>sel_registerName</code>函数来获得一个<code>SEL</code>类型的方法选择器。</p>\n<p><code>selector</code>既然是\b一个string，我觉得应该是类似于<code>className+MethodName</code>的组合，命名规则有\b两条：</p>\n<ul>\n<li>同一个类，selector不能重复</li>\n<li>不同的类，selector可以重复</li>\n</ul>\n<p>所以在Objective-C中\b如下的代码会报错：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)caculate(<span class=\"built_in\">NSInteger</span>)num;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)caculate(<span class=\"built_in\">CGFloat</span>)num;</span><br></pre></td></tr></table></figure>\n<p>只能通过方法名来进行区别：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)caculateWithInt(<span class=\"built_in\">NSInteger</span>)num;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)caculateWithFloat(<span class=\"built_in\">CGFloat</span>)num;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IMP\"><a href=\"#IMP\" class=\"headerlink\" title=\"IMP\"></a>IMP</h3><p>在<code>objc/objc.h</code>中IMP的定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// A pointer to the function of a method implementation. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !OBJC_OLD_DISPATCH_PROTOTYPES</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span> (*IMP)(<span class=\"type\">void</span> <span class=\"comment\">/* id, SEL, ... */</span> ); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">id</span> _Nullable (*IMP)(<span class=\"type\">id</span> _Nonnull, SEL _Nonnull, ...); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>就是指向最终实现程序函数的内存地址的指针。</p>\n<p>在<code>iOS</code>的<code>Runtime</code>中，<code>Method</code>通过<code>SEL</code>和<code>IMP</code>两个属性，实现了快速方法的查询\b以及实现，相对提高了性能又保持了灵活性。</p>\n<h3 id=\"类缓存-objc-cache\"><a href=\"#类缓存-objc-cache\" class=\"headerlink\" title=\"类缓存(objc_cache)\"></a>类缓存(objc_cache)</h3><p>当Objective-C运行时通过跟踪它的isa指针检查对象时，它可以找到一个实现多个方法的对象。然而你只调用其中的以一小部分，并且每次检查时，搜索所有选择器的分派表没有意义。所以实现一个缓存，每当你搜索一个类分派表，并找到相应的选择器，它把它放入缓存。所以当<code>objc_msgSend</code>查找一个类的选择器，它首先搜索缓存。</p>\n<p>为了加速消息分发，系统会对方法和对应的地址进行缓存，就放在上面所述的<code>objc_cache</code>，所以在实际运行中，大部分常用的方法都会被缓存起来，<code>Runtime</code>系统实际上非常快，接近于直接执行内存地址程序的速度。</p>\n<h3 id=\"Category-objc-category\"><a href=\"#Category-objc-category\" class=\"headerlink\" title=\"Category(objc_category)\"></a>Category(objc_category)</h3><p>在<code>obj/runtime.h</code>中<code>objc_category</code>的定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_category &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nonnull category_name                            OBJC2_UNAVAILABLE;   <span class=\"comment\">// 分类\b名</span></span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nonnull class_name                               OBJC2_UNAVAILABLE;   <span class=\"comment\">// 分类所属的类名</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;   <span class=\"comment\">// 实例方法列表</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类方法列表</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;   <span class=\"comment\">// 分类所现实的协议列表</span></span><br><span class=\"line\">&#125;     </span><br></pre></td></tr></table></figure>\n<p>从上面的<code>objc_category</code>的结构体可以看出，分类中可以添加实例方法、类方法，甚至可以实现协议，不能添加实例变量和属性。</p>\n<h2 id=\"Runtime消息转发\"><a href=\"#Runtime消息转发\" class=\"headerlink\" title=\"Runtime消息转发\"></a>Runtime消息转发</h2><p>上面Runtime消息传递中已经介绍了一次发送消息会在相关的类对象中搜索方法列表，如果找不到则会沿着继承树向上一直搜索直到继承树根部（通常为NSObject），如果还是找不到\b并且消息转发都失败了就会执行<code>doesNotRecognizeSelector:</code>方法报<code>unrecognized selector</code>错。</p>\n<p>因此对于对象尝试调用未实现的\b方法会报错，遇到这种情况会不会有什么“补救措施”，当然有，这就需要了解消息的转发机制。</p>\n<p>当没有找到实现方法时，会调用一下函数：</p>\n<ul>\n<li>动态方法解析<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br><span class=\"line\">+(<span class=\"type\">BOOL</span>)resolveClassMethod:(SEL)sel</span><br></pre></td></tr></table></figure></li>\n<li>备用接受者<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure></li>\n<li>完整地消息转发<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"built_in\">NSMethodSignature</span>*)methodSignatureForSelector:(SEL)aSelector</span><br><span class=\"line\">-(<span class=\"type\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>消息转发流程简图：</p>\n<img src=\"/posts/187e06540a0329db/runtime_msg_send.svg\" class=\"\" title=\"消息转发流程简图\">\n\n\n<h3 id=\"动态解析方法\"><a href=\"#动态解析方法\" class=\"headerlink\" title=\"动态解析方法\"></a>动态解析方法</h3><p>首先\b会调用动态方法的解析方法，我们可以尝试在<code>+(BOOL)resolveInstanceMethod:(SEL)selector</code>（针对实例方法）和<code>+(BOOL)resolveClassMethod:(SEL)sel</code>（针对类方法）中添加实现方法。</p>\n<p>实现一个动态方法解析的例子如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    <span class=\"comment\">//执行eat函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(eat:)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sel == <span class=\"keyword\">@selector</span>(eat:)) &#123;<span class=\"comment\">//如果是执行eat函数，就动态解析，指定新的IMP</span></span><br><span class=\"line\">        class_addMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], sel, (IMP)eatMethod, <span class=\"string\">&quot;v@:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"variable language_\">super</span> resolveInstanceMethod:sel];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> eatMethod(<span class=\"type\">id</span> obj, SEL _cmd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Person eat&quot;</span>);<span class=\"comment\">//新的eat函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2018-08-08 15:54:30.652862+0800 Runtime[32473:3482683] Person eat</p>\n</blockquote>\n<p>从上面的例子可以看到虽然没有实现<code>eat:</code>这个函数，但是通过<code>class_addMethod</code>动态添加<code>eatMethod</code>函数，并执行<code>eatMethod</code>这个函数的<code>IMP</code>。</p>\n<p>如果<code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code>或<code>+(BOOL)resolveClassMethod:(SEL)sel</code>方法没有处理<code>eat:</code>方法，运行时就会移到下一步：<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>。</p>\n<h3 id=\"备用接受者\"><a href=\"#备用接受者\" class=\"headerlink\" title=\"备用接受者\"></a>备用接受者</h3><p>如果目标对象实现了<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>，那么运行时就会调用这个方法，把这个消息转发给其他对象。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;objc/runtime.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>: <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)eat &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;forwardingTargetForSelector Person eat&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    <span class=\"comment\">//执行eat函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(eat)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; <span class=\"comment\">// 这里不管返回是YES还是NO都会进入forwardingTargetForSelector</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aSelector == <span class=\"keyword\">@selector</span>(eat)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [Person new];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"variable language_\">super</span> forwardingTargetForSelector:aSelector];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> eatMethod(<span class=\"type\">id</span> obj, SEL _cmd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;resolveInstanceMethod Person eat&quot;</span>);<span class=\"comment\">//新的eat函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 16:14:54.714890+0800 Runtime[35945:3529505] forwardingTargetForSelector Person eat</p>\n</blockquote>\n<p>从上面的例子我们可以看到通过<code>forwardingTargetForSelector</code>把当前<code>ViewController</code>的方法传给了<code>Person</code>去执行了。</p>\n<h3 id=\"完整消息转发\"><a href=\"#完整消息转发\" class=\"headerlink\" title=\"完整消息转发\"></a>完整消息转发</h3><p>如果上面两部步都无法处理未知消息，那么唯一能做的就是启用完整消息转发机制了。首先它会发送<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>消息获得函数的参数和返回值类型。如果<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>返回<code>nil</code>，<code>Runtime</code>则会发<code>-doesNotRecognizeSelector:</code>消息，程序也会挂掉。如果返回的了一个函数签名，<code>Runtime</code>就会创建一个<code>NSInvocation</code>对象并发送<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>消息给目标对象。</p>\n<p>实现的例子如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;objc/runtime.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>: <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)eat &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;完整消息转发 Person eat&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    <span class=\"comment\">//执行eat函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(eat)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; <span class=\"comment\">// 这里不管返回是YES还是NO都会进入forwardingTargetForSelector</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">NSStringFromSelector</span>(aSelector) isEqualToString:<span class=\"string\">@&quot;eat&quot;</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"built_in\">NSMethodSignature</span> signatureWithObjCTypes:<span class=\"string\">&quot;v@:&quot;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"variable language_\">super</span> methodSignatureForSelector:aSelector];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation &#123;</span><br><span class=\"line\">    SEL sel = anInvocation.selector;</span><br><span class=\"line\">    Person *p = [Person new];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([p respondsToSelector:sel]) &#123;</span><br><span class=\"line\">        [anInvocation invokeWithTarget:p];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> doesNotRecognizeSelector:sel];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> eatMethod(<span class=\"type\">id</span> obj, SEL _cmd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;resolveInstanceMethod Person eat&quot;</span>);<span class=\"comment\">//新的eat函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 16:38:29.076233+0800 Runtime[39848:3579675] 完整消息转发 Person eat</p>\n</blockquote>\n<p>从打印结果来看，我们实现了\b完整的消息转发。通过签名，<code>Runtime</code>生成了一个对象<code>(NSInvocation *)anInvocation</code>发送给<code>forwardInvocation</code>方法，我们在<code>forwardInvocation</code>方法中让<code>Person</code>对象去执行<code>eat</code>函数。</p>\n<blockquote>\n<p>关于签名参数<code>v@:</code>的解释，在苹果官方文档<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1\">Type\b Encoding</a>中有详细的解释。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>做了很久的iOS开发了，但依然还是没有将一些基础的\b知识弄清楚，想要真正的掌握一门技术或则语言，真的不能一知半解，\b就像你说你熟练掌握了iOS的开发，但是如果别人问你什么是Runtime，它的原理是什么，如果这你都不知道真的算不上对iOS已经熟练掌握了。以前一直有一个误区，拿到一门语言或则技术直接就开始写东西了，但是对很多的原理都是一知半解，以致于忽略了很多基本知识，这篇笔记我要将我丢掉runtime的一些知识都捡起来。</p>\n<h2 id=\"Runtime简介\"><a href=\"#Runtime简介\" class=\"headerlink\" title=\"Runtime简介\"></a>Runtime简介</h2><blockquote>\n<p>Objective-C是一门动态语言，它将很多静态语言在编译和链接时期做的事情放到了运行时来处理。对于Objective-C来说，这个Runtime就像是一个操作系统一样，它让所有的工作可以正常运行。Runtime简称运行时。Objective-C就是运行时机制，也就是在运行时的一些机制，最主要的就是消息机制。</p>\n</blockquote>\n<ul>\n<li>对于C语言，函数的调用在编译的时候会决定调用那个函数。</li>\n<li>对于Objective-C的函数，属于动态调用过程，在编译的时候并不能真正的决定调用哪个函数，只有真正运行的时候才会根据函数的名称找到对应的函数来调用。</li>\n</ul>","more":"<h2 id=\"Runtime消息传递\"><a href=\"#Runtime消息传递\" class=\"headerlink\" title=\"Runtime消息传递\"></a>Runtime消息传递</h2><p>一个对象的方法像这样<code>[obj foo]</code>，编译器转成\b消息发送<code>objc_msgSend(obj, foo)</code>，Runtime时的执行流程是这样的：</p>\n<ul>\n<li>首先，通过它的<code>obj</code>的<code>isa</code>指针找到它的<code>class</code>；</li>\n<li>在<code>class</code>的<code>method_list</code>中找到<code>foo</code>方法；</li>\n<li>如果<code>class</code>中没有找到<code>foo</code>，就继续往它的<code>super_class</code>中找；</li>\n<li>一旦找到<code>foo</code>这个函数，就去执行它的实现<code>IMP</code>（如果还是找不到就会报<code>unrecognized selector</code>的错）。</li>\n</ul>\n<h3 id=\"类对象（objc-class）\"><a href=\"#类对象（objc-class）\" class=\"headerlink\" title=\"类对象（objc_class）\"></a>类对象（objc_class）</h3><p>Objective-C类是由Class类型来表示，它实际上是指向objc_class结构体的一个指针。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>objc/runtime.h</code>文件中objc_class结构体的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_class</span> &#123;</span></span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !__OBJC2__</span></span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;   <span class=\"comment\">// 父类</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类名</span></span><br><span class=\"line\">    <span class=\"type\">long</span> version                                             OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类的版本信息，默认为0</span></span><br><span class=\"line\">    <span class=\"type\">long</span> info                                                OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类信息，供运行期使用的一些位标识</span></span><br><span class=\"line\">    <span class=\"type\">long</span> instance_size                                       OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类的实例变量大小</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_ivar_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">ivars</span>                  <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 该类的成员变量链表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">methodLists</span>                    <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 方法定义的链表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_cache</span> * _<span class=\"title\">Nonnull</span> <span class=\"title\">cache</span>                       <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 方法缓存</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">protocols</span>          <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span>   <span class=\"comment\">// 协议链表</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method</span> &#123;</span></span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nullable method_types                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法列表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span> * _<span class=\"title\">Nullable</span> <span class=\"title\">obsolete</span>             <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> method_count                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __LP64__</span></span><br><span class=\"line\">    <span class=\"type\">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">/* variable length structure */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method</span> <span class=\"title\">method_list</span>[1]                        <span class=\"title\">OBJC2_UNAVAILABLE</span>;</span></span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例（objc-object）\"><a href=\"#实例（objc-object）\" class=\"headerlink\" title=\"实例（objc_object）\"></a>实例（objc_object）</h3><p>objc_object是表示一个类的实例的结构体，在<code>objc/objc.h</code>文件中定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object *<span class=\"type\">id</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个结构体只有一个字段，及指向其类的isa指针。这样当我们向一个Objective-C对象发送消息时，Runtime库会根据实例对象的isa指针找到这个实例对象所属的类。Runtime库会在类方法列表以及父类的方法列表中去寻找消息对应的\bselector指向的方法，找到后即运行这个方法。</p>\n<h3 id=\"元类-Meta-Class\"><a href=\"#元类-Meta-Class\" class=\"headerlink\" title=\"元类(Meta Class)\"></a>元类(Meta Class)</h3><p>类对象中的元数据存储的是如何创建一个实例的相关信息，类对象和类方法都应该从哪里创建呢？就是从isa指针指向的结构体创建，类对象的isa指针指向的我们称之为元类（Meta Class），元类中保存了创建类对象以及类方法所需的所有信息。因此整个结构应该如下图所示：</p>\n<img src=\"/posts/187e06540a0329db/1628088a3e4f0167.png\" class=\"\" title=\"Meta Class\">\n\n<p>通过上图我们可以看出整个体系构成了一个自闭环，<code>struct objc_object</code>结构体实例它的isa指针指向类对象，类对象的isa指向了元类，<code>super_class</code>指向了父类的类对象，而元类的<code>super_class</code>指向了父类的元类，那元类的isa又指向了自己。</p>\n<p>元类（Meta Class）是一个类对象的类。所有的类自身也是一个对象，我们可以向这个对象发送消息（即调用方法）。为了调用方法，这个类的isa\b指针必须指向一个包含类方法的一个<code>objc_class</code>结构体。这就引入了Meta Class概念，元类中保存了创建类对象以及类方法需要的所有信息。任何<code>NSObject</code>集成体系下的<code>meta-class</code>都使用<code>NSObject</code>的<code>meta-class</code>作为自己的所属类，而基类的<code>meta-class</code>的isa指向它自己。</p>\n<h3 id=\"Method-objc-method\"><a href=\"#Method-objc-method\" class=\"headerlink\" title=\"Method(objc_method)\"></a>Method(objc_method)</h3><p>在<code>objc/runtime.h</code>中的定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;   <span class=\"comment\">// 方法名</span></span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nullable method_types                            OBJC2_UNAVAILABLE;   <span class=\"comment\">// 方法类型</span></span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;   <span class=\"comment\">// 方法实现</span></span><br><span class=\"line\">&#125;         </span><br></pre></td></tr></table></figure>\n<p><code>Method</code>和我们平时理解的函数是一致的，就是表示能够独立完成一个功能的一段代码，比如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)logName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;name&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码就是一个函数。</p>\n<p>在<code>objc_method</code>的结构体中，看到了<code>SEL</code>和<code>IMP</code>，说明<code>SEL</code>和<code>IMP</code>其实都是<code>Method</code>的属性。</p>\n<h3 id=\"SEL-objc-selector\"><a href=\"#SEL-objc-selector\" class=\"headerlink\" title=\"SEL(objc_selector)\"></a>SEL(objc_selector)</h3><p>在<code>objc/objc.h</code>中的定义为：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a method selector.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector *SEL;</span><br></pre></td></tr></table></figure>\n\n<p><code>objc_msgSend</code>函数第二个参数类型为<code>SEL</code>，它是<code>selector</code>在<code>Objective-C</code>中的表示类型。<code>selector</code>是方法选择器，可以理解为区分方法的<code>ID</code>，而这个<code>ID</code>的数据结构是<code>SEL</code>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> SEL selector;</span><br></pre></td></tr></table></figure>\n<p>可以看到<code>selector</code>是<code>SEL</code>的一个实例。</p>\n<p>其实<code>selector</code>就是映射到方法的C字符串，你可以用<code>Objective-C</code>编译器命令<code>@selector()</code>或则Runtime系统的<code>sel_registerName</code>函数来获得一个<code>SEL</code>类型的方法选择器。</p>\n<p><code>selector</code>既然是\b一个string，我觉得应该是类似于<code>className+MethodName</code>的组合，命名规则有\b两条：</p>\n<ul>\n<li>同一个类，selector不能重复</li>\n<li>不同的类，selector可以重复</li>\n</ul>\n<p>所以在Objective-C中\b如下的代码会报错：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)caculate(<span class=\"built_in\">NSInteger</span>)num;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)caculate(<span class=\"built_in\">CGFloat</span>)num;</span><br></pre></td></tr></table></figure>\n<p>只能通过方法名来进行区别：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)caculateWithInt(<span class=\"built_in\">NSInteger</span>)num;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)caculateWithFloat(<span class=\"built_in\">CGFloat</span>)num;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IMP\"><a href=\"#IMP\" class=\"headerlink\" title=\"IMP\"></a>IMP</h3><p>在<code>objc/objc.h</code>中IMP的定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// A pointer to the function of a method implementation. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !OBJC_OLD_DISPATCH_PROTOTYPES</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">void</span> (*IMP)(<span class=\"type\">void</span> <span class=\"comment\">/* id, SEL, ... */</span> ); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">id</span> _Nullable (*IMP)(<span class=\"type\">id</span> _Nonnull, SEL _Nonnull, ...); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>就是指向最终实现程序函数的内存地址的指针。</p>\n<p>在<code>iOS</code>的<code>Runtime</code>中，<code>Method</code>通过<code>SEL</code>和<code>IMP</code>两个属性，实现了快速方法的查询\b以及实现，相对提高了性能又保持了灵活性。</p>\n<h3 id=\"类缓存-objc-cache\"><a href=\"#类缓存-objc-cache\" class=\"headerlink\" title=\"类缓存(objc_cache)\"></a>类缓存(objc_cache)</h3><p>当Objective-C运行时通过跟踪它的isa指针检查对象时，它可以找到一个实现多个方法的对象。然而你只调用其中的以一小部分，并且每次检查时，搜索所有选择器的分派表没有意义。所以实现一个缓存，每当你搜索一个类分派表，并找到相应的选择器，它把它放入缓存。所以当<code>objc_msgSend</code>查找一个类的选择器，它首先搜索缓存。</p>\n<p>为了加速消息分发，系统会对方法和对应的地址进行缓存，就放在上面所述的<code>objc_cache</code>，所以在实际运行中，大部分常用的方法都会被缓存起来，<code>Runtime</code>系统实际上非常快，接近于直接执行内存地址程序的速度。</p>\n<h3 id=\"Category-objc-category\"><a href=\"#Category-objc-category\" class=\"headerlink\" title=\"Category(objc_category)\"></a>Category(objc_category)</h3><p>在<code>obj/runtime.h</code>中<code>objc_category</code>的定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_category &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nonnull category_name                            OBJC2_UNAVAILABLE;   <span class=\"comment\">// 分类\b名</span></span><br><span class=\"line\">    <span class=\"type\">char</span> * _Nonnull class_name                               OBJC2_UNAVAILABLE;   <span class=\"comment\">// 分类所属的类名</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;   <span class=\"comment\">// 实例方法列表</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;   <span class=\"comment\">// 类方法列表</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;   <span class=\"comment\">// 分类所现实的协议列表</span></span><br><span class=\"line\">&#125;     </span><br></pre></td></tr></table></figure>\n<p>从上面的<code>objc_category</code>的结构体可以看出，分类中可以添加实例方法、类方法，甚至可以实现协议，不能添加实例变量和属性。</p>\n<h2 id=\"Runtime消息转发\"><a href=\"#Runtime消息转发\" class=\"headerlink\" title=\"Runtime消息转发\"></a>Runtime消息转发</h2><p>上面Runtime消息传递中已经介绍了一次发送消息会在相关的类对象中搜索方法列表，如果找不到则会沿着继承树向上一直搜索直到继承树根部（通常为NSObject），如果还是找不到\b并且消息转发都失败了就会执行<code>doesNotRecognizeSelector:</code>方法报<code>unrecognized selector</code>错。</p>\n<p>因此对于对象尝试调用未实现的\b方法会报错，遇到这种情况会不会有什么“补救措施”，当然有，这就需要了解消息的转发机制。</p>\n<p>当没有找到实现方法时，会调用一下函数：</p>\n<ul>\n<li>动态方法解析<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br><span class=\"line\">+(<span class=\"type\">BOOL</span>)resolveClassMethod:(SEL)sel</span><br></pre></td></tr></table></figure></li>\n<li>备用接受者<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure></li>\n<li>完整地消息转发<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"built_in\">NSMethodSignature</span>*)methodSignatureForSelector:(SEL)aSelector</span><br><span class=\"line\">-(<span class=\"type\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>消息转发流程简图：</p>\n<img src=\"/posts/187e06540a0329db/runtime_msg_send.svg\" class=\"\" title=\"消息转发流程简图\">\n\n\n<h3 id=\"动态解析方法\"><a href=\"#动态解析方法\" class=\"headerlink\" title=\"动态解析方法\"></a>动态解析方法</h3><p>首先\b会调用动态方法的解析方法，我们可以尝试在<code>+(BOOL)resolveInstanceMethod:(SEL)selector</code>（针对实例方法）和<code>+(BOOL)resolveClassMethod:(SEL)sel</code>（针对类方法）中添加实现方法。</p>\n<p>实现一个动态方法解析的例子如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    <span class=\"comment\">//执行eat函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(eat:)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sel == <span class=\"keyword\">@selector</span>(eat:)) &#123;<span class=\"comment\">//如果是执行eat函数，就动态解析，指定新的IMP</span></span><br><span class=\"line\">        class_addMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], sel, (IMP)eatMethod, <span class=\"string\">&quot;v@:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"variable language_\">super</span> resolveInstanceMethod:sel];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> eatMethod(<span class=\"type\">id</span> obj, SEL _cmd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Person eat&quot;</span>);<span class=\"comment\">//新的eat函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2018-08-08 15:54:30.652862+0800 Runtime[32473:3482683] Person eat</p>\n</blockquote>\n<p>从上面的例子可以看到虽然没有实现<code>eat:</code>这个函数，但是通过<code>class_addMethod</code>动态添加<code>eatMethod</code>函数，并执行<code>eatMethod</code>这个函数的<code>IMP</code>。</p>\n<p>如果<code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code>或<code>+(BOOL)resolveClassMethod:(SEL)sel</code>方法没有处理<code>eat:</code>方法，运行时就会移到下一步：<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>。</p>\n<h3 id=\"备用接受者\"><a href=\"#备用接受者\" class=\"headerlink\" title=\"备用接受者\"></a>备用接受者</h3><p>如果目标对象实现了<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>，那么运行时就会调用这个方法，把这个消息转发给其他对象。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;objc/runtime.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>: <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)eat &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;forwardingTargetForSelector Person eat&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    <span class=\"comment\">//执行eat函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(eat)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; <span class=\"comment\">// 这里不管返回是YES还是NO都会进入forwardingTargetForSelector</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aSelector == <span class=\"keyword\">@selector</span>(eat)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [Person new];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"variable language_\">super</span> forwardingTargetForSelector:aSelector];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> eatMethod(<span class=\"type\">id</span> obj, SEL _cmd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;resolveInstanceMethod Person eat&quot;</span>);<span class=\"comment\">//新的eat函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 16:14:54.714890+0800 Runtime[35945:3529505] forwardingTargetForSelector Person eat</p>\n</blockquote>\n<p>从上面的例子我们可以看到通过<code>forwardingTargetForSelector</code>把当前<code>ViewController</code>的方法传给了<code>Person</code>去执行了。</p>\n<h3 id=\"完整消息转发\"><a href=\"#完整消息转发\" class=\"headerlink\" title=\"完整消息转发\"></a>完整消息转发</h3><p>如果上面两部步都无法处理未知消息，那么唯一能做的就是启用完整消息转发机制了。首先它会发送<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>消息获得函数的参数和返回值类型。如果<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>返回<code>nil</code>，<code>Runtime</code>则会发<code>-doesNotRecognizeSelector:</code>消息，程序也会挂掉。如果返回的了一个函数签名，<code>Runtime</code>就会创建一个<code>NSInvocation</code>对象并发送<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>消息给目标对象。</p>\n<p>实现的例子如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;objc/runtime.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>: <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)eat &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;完整消息转发 Person eat&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    <span class=\"comment\">//执行eat函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(eat)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>; <span class=\"comment\">// 这里不管返回是YES还是NO都会进入forwardingTargetForSelector</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">NSStringFromSelector</span>(aSelector) isEqualToString:<span class=\"string\">@&quot;eat&quot;</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"built_in\">NSMethodSignature</span> signatureWithObjCTypes:<span class=\"string\">&quot;v@:&quot;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"variable language_\">super</span> methodSignatureForSelector:aSelector];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation &#123;</span><br><span class=\"line\">    SEL sel = anInvocation.selector;</span><br><span class=\"line\">    Person *p = [Person new];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([p respondsToSelector:sel]) &#123;</span><br><span class=\"line\">        [anInvocation invokeWithTarget:p];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> doesNotRecognizeSelector:sel];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> eatMethod(<span class=\"type\">id</span> obj, SEL _cmd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;resolveInstanceMethod Person eat&quot;</span>);<span class=\"comment\">//新的eat函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<blockquote>\n<p>2018-08-08 16:38:29.076233+0800 Runtime[39848:3579675] 完整消息转发 Person eat</p>\n</blockquote>\n<p>从打印结果来看，我们实现了\b完整的消息转发。通过签名，<code>Runtime</code>生成了一个对象<code>(NSInvocation *)anInvocation</code>发送给<code>forwardInvocation</code>方法，我们在<code>forwardInvocation</code>方法中让<code>Person</code>对象去执行<code>eat</code>函数。</p>\n<blockquote>\n<p>关于签名参数<code>v@:</code>的解释，在苹果官方文档<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1\">Type\b Encoding</a>中有详细的解释。</p>\n</blockquote>"},{"title":"iOS高级开发面试题（上）","date":"2017-08-06T02:37:30.000Z","abbrlink":"4ea43a8072083e39","_content":"\n## nil、Nil、NULL、NSNull的区别？\n<table><tr><td>Symbol</td><td>Value</td><td>Meaning</td></tr><tr><td>NULL</td><td>(void *)0</td><td>literal null value for C pointers</td></tr><tr><td>nil</td><td>(id)0</td><td>literal null value for Objective-C objects</td></tr><tr><td>Nil</td><td>(Class)0</td><td>literal null value for Objective-C classes</td></tr><tr><td>NSNull</td><td>[NSNull null]</td><td>singleton object used to represent null\n</td></tr></table>\n\n### nil：对象为空\n定义某一实例对象为空值。例如：\n``` objc\nNSObject* obj = nil;\nif (obj == nil) {\n  NSLog(@\"obj is nil\");\n} else {\n  NSLog(@\"obj is not nil\");\n}\n```\n<!-- more -->\n### Nil：类为空\n定义一个类为空。例如：\n``` objc\nClass someClass = Nil;\nClass anotherClass = [NSString class];\n```\n### NULL：基本数据对象指针为空\n用于C语言的各种数据类型的指针为空。例如：\n``` objc\n\nint *pointerToInt = NULL; \nchar *pointerToChar = NULL; \nstruct TreeNode *rootNode = NULL;\n```\n### NSNull\n集合对下那个无法包含nil作为其具体值，如NSArray、NSSet和NSDictionary。相应的，nil值使用一个特定的对象NSNull来表示。`NSNull`提供了一个单一实例用于表示对象属性中的的nil值。\n\n通常初始化NSArray对象，我们是这样的：\n``` objc\nNSArray *arr = [NSArray arrayWithObjects:@\"wang\", @\"zz\", nil];\n```\n当NSArray里遇到nil时，说明这个数组对象\b元素截止了，即NSArray只关注nil之前的对象，nil之后的对象会被抛弃，比如下面的写法，与上面的arr值是一样的。\n``` objc\nNSArray *arr = [NSArray arrayWithObjects:@\"wang\", @\"zz\", nil, @\"foogry\"];\n```\n如果要让nil后的元素不被抛弃就只能借助NSNull了。\n``` objc\nNSArray *arr = [NSArray arrayWithObjects:@\"wang\", @\"zz\", [NSNull null], @\"foogry\"];\n```\n\n一句话总结Nil、nil、NSNull之间的区别就是：不管是NULL、Nil、nil，他们本质上都是一样的，都是(void *)0，只是写法不同。这样做的意义是区分不同的数据类型，比如你看到NULL就知道他是一个C指针，看到nil就知道这是一个Objective-C对象，看到Nil就知道这是一个Class类型的数据。\n\n## load和initialize\n\n### load函数调用特点如下\n\n当类被引用进项目的时候就会执行load函数（在main函数开始执行之前），与这个类是否被用到无关，每个类的load函数只会自动调用一次。由于load函数是系统自动加载的，因此不需要调用父类的load函数，否则父类load函数会执行多次。\n* 当父类和子类都实现load函数时，父类的load方法执行顺序要优于子类。\n* 当子类未实现load方法时，不会调用父类load方法。\n* 类中的load方法执行顺序要优先于类别（Category）。\n* 当有多个类别（Category）都实现了load方法，每个类load执行顺序与其在Compile Source出现的顺序一致。\n\nload调用时机比较早，当load调用时，其他类可能还没加载完成，运行环境不安全。\n\nload方法是线程安全的，它使用了锁，我们应该避免线程阻塞在load方法。\n\n### initialize函数调用特点如下\n\ninitialize在类或者其子类的第一个方法被调用前调用。即使类文件被引用进项目，但是没有使用，initialize不会被调用。由于是系统自动调用，也不需要再调用`[super initialize]`，否组父类的initialize会被调用多次执行。假如这个类放到代码中，而这段代码并没有被执行，这个函数是不会被执行的。\n* 父类的initialize方法会比子类先执行。\n* 当父类未实现initialize方法时，会调用父类initialize方法，子类实现initialize方法时，会覆盖initialize方法。\n* 当多个Category都实现了initialize方法，会覆盖类中的方法，只执行一个（会执行Compile Source列表中最后一个Category的initialize方法）。\n\n在initialize方法收到调用时，运行环境基本健全。\n\ninitialize内部使用了锁，所以线程是安全的。但同时要避免阻塞线程，不要再使用锁。\n\n### 分别在什么情况下使用？\n\n#### +load\n由于调用load方法时的环境很不安全，我们应该尽量减少load方法的逻辑。另一个原因是load方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在load方法中，load很常见的一个使用场景，交换两个方法的实现。\n\n比如MJRefresh中的一段代码：\n``` objc\n+ (void)load\n{\n    [self exchangeInstanceMethod1:@selector(reloadData) method2:@selector(mj_reloadData)];\n    [self exchangeInstanceMethod1:@selector(reloadRowsAtIndexPaths:withRowAnimation:) method2:@selector(mj_reloadRowsAtIndexPaths:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(deleteRowsAtIndexPaths:withRowAnimation:) method2:@selector(mj_deleteRowsAtIndexPaths:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(insertRowsAtIndexPaths:withRowAnimation:) method2:@selector(mj_insertRowsAtIndexPaths:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(reloadSections:withRowAnimation:) method2:@selector(mj_reloadSections:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(deleteSections:withRowAnimation:) method2:@selector(mj_deleteSections:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(insertSections:withRowAnimation:) method2:@selector(mj_insertSections:withRowAnimation:)];\n}\n\n+ (void)exchangeInstanceMethod1:(SEL)method1 method2:(SEL)method2\n{\n    method_exchangeImplementations(class_getInstanceMethod(self, method1), class_getInstanceMethod(self, method2));\n}\n```\n\n#### +initialize\ninitialize方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如NSMutableArray这种类型的实例化依赖于Runtime的消息发送，所以显然无法在编译器初始化：\n``` objc\n// In Person.m\n// int类型可以在编译期赋值\nstatic int someNumber = 0; \nstatic NSMutableArray *someArray;\n+ (void)initialize {\n    if (self == [Person class]) {\n        // 不方便编译期复制的对象在这里赋值\n        someArray = [[NSMutableArray alloc] init];\n    }\n}\n```\n\n### load和initialize的共同点\n* 如果父类和子类都被调用，父类的调用一定在子类之前。\n\n\n## 线程与进程的区别和联系？\n简单概括下线程与进程之间的区别和联系：\n* 一个程序至少\b要有一个进程，一个进程至少要有一个线程。\n* 进程是\b资源分配的最小独立单元，进程是具有\b一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。\n* 线程是进程的一个分支，是进程的实体，是CPU调度和分配的基本单元，它是比进程更小的能独立运行的基本单位，线程自己基本不拥有系统资源，只拥有一点在运行中必不可少的资源（计数器、栈、寄存器），但是它可以与\b同属一个进程的其他线程共享线程所拥有的全部资源。\n* 线程和进程的主要区别在于他们是不同的操作\b系统资源的管理方式。进程有独立的\b地址空间，一个进程崩溃以后，在保护模式下不会对其他进程\b造成影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉以后就等于整个进程死掉，所以多进程的程序比多线线程的程序要健壮，但在进程切换时，耗费资源较大，效率要差些。\n* 但对于一些要求同时进行并\b且又要共享某些变量的并发操作，只能用线程，不能\b用进程。\n\n## assign、retain、copy、weak、strong的区别以及nonatomic的含义\n首先从ARC\b和非ARC层面上可以分为两部分，第一部分是assign、retain、copy，第二部分是\bweak、strong。\n\n\b首先看看第一部分assign、retain、copy的含义：\n### assign\n\nassign一般用来修饰基本的数据类型，包括基本数据类型（NSInteger、CGFloat）和C数据类型（int、float、double、char）等。\b因为assign声明的属性不会增加引用计数，也就是说声明的属性释放后，就没有了，及时其他\b对用用到\b了他也无法留住他，只会crash。但是即使是释放了，指针却还在，成为了野指针，如果新的对象被分配到了这个内存地址上，也会crash。所一般只能修饰基本数据类型，因为他会\b被分配在栈上，而栈会由系统自动处理，不会造成野指针。\n\n### retain\n\n与assign相对，我们要解决\b对象\b被其他对象引用后释放造成的问题，就要用retain来声明。retain声明后的\b对象会更改引用计数，那么每次被引用，引用计数都会+1，释放后都会-1，及时这个对象本身被释放了，只要还有对象在引用它，就会持有不会造成什么问题，只有当引用计数为0时候，就会被dealloc构析函数回收内存了。\n\n### copy\n\n最常见的使用copy修饰应该是NSString。copy与retain的区别在于retain的引用是拷贝指针地址，copy是拷贝对象本身，也就是说retain是浅复制，copy是深复制。<b>如果是浅复制，当修改对象时，都会被修改，而深复制不会。</b>之所以在NSString这类有可变类型的对象上使用，是因为他们有可能和对应的可变类型如NSMutableString之间进行赋值操作，为了防止内容被改变，使用copy去深复制一份。copy工作由copy方法执行，此属性只对那些实现了NSCopying协议的对象有效。\n\n以上三个可以在MRC中使用，但是weak和strong就只能在ARC中使用，也就是自动引用计数，这时就不能手动去进行retain、release等操作了，ARC会帮我们完成这些工作。\n\n### weak\n\nweak其实类似于assign，叫弱引用，也就是不增加引用计数。一般只有在防止循环引用时使用，比如父类引用了子类，子类又去引用父类。IBOutlet、Delegate一般用的就是weak，这是因为它们会在类外部被调用，防止循环引用。\n\n### strong\n\n相对的，strong就类似retain了，叫强引用，会增加引用计数，类内部使用的属性一般都是strong修饰的，现在ARC已经基本代替了MRC，所以我们最常见的就是strong了。\n\n### nonatomic\n\n在修饰属性时，我们往往会加上一个nonamatic，这又是什么呢？它的名字叫非原子访问。对应有atomic，是原子访问。我们知道使用多线程为了避免在写操作时同时进行写导致问题，经常会对要写的对象进行加锁，也就是同一时刻只允许一个线程去操作它。如果一个属性是由atomic修饰的，那么系统就会对线程进行保护，防止多个写操作同时进行。这有好处，也有坏处，那就是消耗系统资源，所以对于iPhone这种小型设备，如果不是进行多线程的写操作，就可以使用nonatomic，取消线程保护，提高性能。\n\n## 定义一个NSString类类型属性时，为什么使用copy不用strong？\n\nNSString类型属性是一个指针，定义成copy，操作是拷贝一份等同的对象，这个指针指向新生成的拷贝对象。当使用copy时，这个拷贝的对象无论是拷贝自NSMutableString还是NSString结构都是不可变的NSString。而如果是用strong，则指向一个字符串对象，若指向的是一个NSMutableString，则当指向的对象改变时，属性值也会发生相应改变，导致错误，因为是一个不可变的字符串。\n\n## 引用多线程时会出现什么问题，应如何避免问题的发生？\n\n多线程容易导致资源争抢，发生死锁现象。死锁通常是一个线程锁定一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在相互等待，造成了无法执行的情况。\n\n避免死锁的一个通用的经验法则是：当几个线程都要访问共享资源A、B、C时，保证使每个线程都按照同样的顺序去访问它们，比如先访问A，在访问B和C。\n\n采用GCD中的栅栏方法，用并行队列去装载事件并异步去执行。\n\n## 循环引用是如何产生的，如何解决循环引用？\n\n两个类中有属性分别为彼此的实例，这样就会引发循环引用。\n\n使用block、NSTimer时也容易导致循环引用，设置一个引用为弱引用可以解决强引用循环。\n\n## NSTimer使用中的注意事项\n\n在类中定义定时器并把目标对象设置为self时，NSTimer实例会保存此实例，但定时器是用在类中用实例变量存放的，所以此实例也保留了定时器，这就造成了循环引用。除非调用invalidate方法并把定时器设置为nil，或则系统回收实例，才能打破循环引用。如果无法确保stop一定被调用，就极易造成内存泄漏。\n\n使用block可以防止NSTimer导致的内存泄漏。\n\n在NSTimer分类中定义方法，让NSTimer的target为NSTimer实例本身，然后block从实例中copy一份，在NSTimer中定义方法去执行拷贝block。\n\n## App的生命周期以及运行状态\n\n状态：未运行、未激活、激活、后台、挂起。\n\n未运行：程序未启动\n\n未激活：程序在前台运行，不过没有接受到事件\n\n激活：程序在前台运行且收到了事件\n\n后台：程序在后台而且能执行代码，大多程序进入这个状态后会在这个状态停留一会，时间到之后会进入挂起状态\n\n挂起：程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中，系统内存低时，系统就把挂起的程序清除掉\n\n## 栈、堆、静态区域的区别\n\nOC中，非对象的变量都存在栈中，对象都存在堆中，静态区域的内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都在，主要存放静态数据、全局数据和常量。\n\n栈区：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存效率高，内存容量有限。\n\n堆区：OC对象存储于堆中，当对象的引用计数为0时自动释放该对象。\n\n## 子试图超出父视图部分能看到吗？超出的部分有什么影响？\n\n子视图超出父视图的部分能看到，但是超出部分不能响应事件。\n想让超出部分响应事件，就该写父视图的hitTest方法。判断触碰区是否在子视图内，如果在子视图内，则返回子视图。让子视图去响应事件。\n\n## respond链是如何响应的，响应顺序是什么样的？\n\n在iOS系统中，能够响应并处理事件的对象称之为responder object，UIResponder是所有responder对象的基类，在UIResponder类中定义了处理各种事件，包括触摸事件、运动事件和远程控制事件的编程接口，UIApplication、UIViewController、UIVIew和所有继承自UIVIew的UIKit类（包括UIWindow继承自UIVIew）都直接或间接的继承自UIResponder，所以它们的实例都是responder object对象，都实现了上述4个方法。UIResponder中的默认实现是什么都不做，但UIKit中UIResponder的直接子类（UIView，UIVIewController...）的默认实现是将事件延着responder chain继续向上传递到下一个responder，即nextResponder。所以在定制UIView子类的上述事件处理方法时，如果需要将事件传递给next responder，可以直接调用super的对应事件处理方法，super的对应方法将事件传递给next responder，即使用`[super touchesBegan:touches withEvent:event];`，不建议直接向nextResponder发送消息，这样可能会漏掉父类对这一事件的其他处理。\n``` objc\n[self.nextResponder touchesBegan:touches withEvent:event];\n```\n另外在定制UIVIew子类的事件处理方法时，如果其中一个方法没有调用super的对应方法，则其他方法也需要重写，不使用super的方法，否则事件处理流程会很混乱。\n<strong>responder chain是一系列连接的responder对象，通过responder对象可以将处理事件的责任传递给下一个，更高级的对象，即当前responder对象的nextResponder。</strong>\n\niOS中responder chain的结构为：\n{% asset_img responder_chain.webp responder chain %}\n第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现`- (BOOL)canBecomeFirstResponder`方法并返回YES可以使当前View成为第一响应者，或则调用View的`becomeFirstResponder`方法也可以，例如当UITextField调用该方法时，会弹出键盘进行输入，此时输入框控件就是第一响应者。\n\niOS系统在处理事件时，通过UIApplication对象和每个UIWindow对象的`sendEvent:`方法将事件分发给具体处理此事件的responder对象（对于触摸事件为hitTest view，其他事件为first responder），当具体处理此事件的responder不处理此事件时，可以通过responder chain交给上一级处理。\n\n如果hit-test view或first responder不处理此事件，则将事件传递给其nextResponder处理，若有UIViewController对象则传递给UIViewController，传递给其superView。\n\n如果view的viewController也不处理事件，则viewController将事件传递给其管理view的superView。\n\n视图层级结构的顶级为UIWindow对象，如果window仍不处理此事件，传递给UIApplication。\n\n若UIApplication对象不处理此事件，则事件被丢弃。\n\n使用响应链，能够让一条链上的多个对象对同一个事件做出响应。每一个应用有一个响应链，我们得视图结构是一个N叉树（一个视图可以有多个子视图，一个子视图同一时刻只有一个父视图），而每一个继承自UIResponder的对象都可以在这个N叉树中成为一个节点。当叶节点成为最高响应者的时候，从这个叶节点开始往其父节点开始追溯出一条链，那么对于这一个叶节点来说，这一条链就是当前的响应者链。响应者链将系统捕获到的UIEvent与UITouch从叶节点层层向上分发，期间可以选择停止分发，也可以继续向上分发。一句话就是事件传递过程。\n\n## GCD中栅栏机制\n\n栅栏函数只能用在调度并发队列中，不能使用在全局并发队列中。\n1. 实现高效率的数据库访问和文件访问\n2. 避免数据竞争\ndispatch_barrier_async函数会等待追加到并行队列上的并行执行的处理全部结束之后，再将制定的处理追加到该并行队列中。然后再由dispatch_barrier_async函数追加的处理执行完毕后，并行队列才恢复为一般的动作，追加到该并行队列的处理又开始执行。\n\n## Notification响应顺序\n\nNSNOtification使用的是同步操作。即如果你在程序中的A位置post了一个NSNotification，在B注册了一个observer，通知发出后，必须等到B位置的通知回调执行完以后才能返回到A处继续往下执行。如果想让NSNotification的post处和observer处异步执行，可以通过NSNotificationQueue实现。\n\n多线程应用中，Notification在哪个线程中post，就在哪个线程中被转发，而不一定是在注册观察者的那个线程中。Notification的发送与接收处理都是在同一个线程中。\n\n为了顺应语法的变化，apple从iOS4之后提供了带有block的NSNotification。\n\n一种重定向的实现思路是自定义一个通知队列（注意，不是NSNotificationQueue对象，而是一个数组），让这个队列去维护那些我们需要重定向的Notification。我们仍然是像平常一样去注册一个通知的观察者，当Notification来了时，先看看post这个Notification的线程是不是我们所期望的线程，如果不是，则将这个Notification存储到我们得队列中，并发送一个信号（signal）到期望的线程中，来告诉这个线程需要处理一个Notification。指定的线程在收到信号后，将Notification从队列中移除，并进行处理。\n\n当我们注册一个观察者时，通知中心会持有观察者的一个弱引用，来确保观察者是可用的。主线程调用dealloc操作会让observer对象的引用计数减为0，这时对象会释放掉。后台线程发送一个通知，如果此时observer还未被释放，则会用其转出消息，并执行回调方法。而如果在回调执行的过程中对象被释放了，就会出现上面的问题。\n\n## Core Data、SQLite是如何使用的？\n\nCore Data是一个功能强大的层，位于SQLite数据库之上，它避免了SQL的复杂性，能让我们以更自然的方式与数据库进行交互。Core Data将数据库进行转换为OC对象（托管对象）来实现，这样无需任何SQL知识就能操作他们。\n\nCore Data能将应用程序中的对象直接保存到数据库中，无需进行复杂的查询，也无需确保对象的属性名和数据库字段名对应，这一切由Core Data完成。\n\n## 归档是如何使用的？\n\n归档是指某种格式来保存一个或多个对象，以便以后还原这些对象的过程。\n\n只要在类中实现的每个属性都是标量（如int或float）或都是符合NSCoding协议的某个类的实例，就可以对你的对象进行完整归档。\n\n## 对Http的理解，socket编程的套路\nHTTP协议是基于TCP连接的，是应用层协议，主要解决如何包装数据。Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。\n\nHTTP连接：短连接，客户端向服务器发送一次请求，服务器响应后连接断开，节省资源。服务器不能主动给客户端响应（除非采用HTTP长连接技术），iPhone主要使用NSURLConnection。\n\nSocket连接：长连接，客户端跟服务器端直接使用Socket进行连接，没有规定连接后断开，因此客户端和服务器端保持连接通道，双方可以主动发送数据，一般多用于游戏。Socket默认连接超时时间是30秒，默认大小是8k（理解为一个数据包大小）。\n\n## NSUserDefault使用的时候需要注意什么？\nNSUserDefault非常好用，并不需要用户在程序中设置NSUserDefault的全局变量，需要在哪里使用NSUserDefault的数据，那么就在哪里创建一个NSUserDefault对象，然后进行读或写操作。\n\n针对同一个关键字对应的对象或者数据，可以对它进行重写，重写之后关键字就对应新的对象或者数据，旧的对象或者数据会自动清理。\n\n注意一点：只能存储基本对象，如果是自定义的对象，需要转换成NSData存储进去才可以。\n\niOS中本地存储数据简单的说有三种方式：数据库、NSUserDefault和文件。\n\nNSUserDefault用于存储数据量小的数据，例如用户配置。并不是所有的东西都能往里放，只支持：NSString、NSNumber、NSData、NSMArray、NSDictionary。但是如果把一个自定义的类存到一个NSArray里，然后再存到NSUserDefault里也是不能成功的。\n## ARC的底层实现机制\n通过retainCount的机制来决定对象是否需要释放。每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\nARC相对于MRC，不是编译时添加retain、release、autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。在编译期，ARC用的是更底层的C接口实现的retain、release、autorelease，这样做新能更好，也是为什么不能在ARC环境下手动retain、release、autorelease，同时对同一上下文的同一对象的成对retain、release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。\n\n1. ARC会自动执行retain、release、autorelease等操作，在ARC下不能主动调用这些内存管理方法。\n2. ARC在调用这些方法时，并不通过Objective-C的消息转发机制，而是直接调用其底层C语言版本API，这样做新能更好，因为保留及释放操作需要频繁的执行，直接调用其底层的函数节省很多CPU周期，如ARC会调用与retain等价的底层函数objc_retain。\n3. 在使用ARC时必须遵循方法命名规则，alloc、new、copy、mutablecopy。ARC通过命名约定将内存管理标准化。\n4. ARC管理对象生命周期的办法是：在合适的地方“插入”、“保留”及“释放”操作。在方法中创建的对象，在方法中自动release；类中的对象，在dealloc方法中释放。\n5. ARC下，变量的内存管理语义可以通过修饰符指明。\n6. ARC只负责管理Objective-C对象的内存，CoreFoundation对象不归ARC管理。\n\n## 滑动TableView视图的时候NSTimer会不会工作？\n1. 默认情况下NSTimer不能在后台正常工作。\n2. 滑动UI是NSTimer不能工作。\n\n这其实就是Runloop的mode再做怪。\nRunloop可以理解为cocoa下的一种消息循环机制，用来处理各种消息事件，我们在开发的时候并不需要手动去创建一个runloop，因为框架为我们创建了一个默认的runloop，通过`[NSRunloop currentRunloop]`我们可以得到一个当前线程下面对应的runloop对象，不过我们需要注意的是不同的runloop之间消息的通知方式。\n\n在开启一个NSTimer实质上是在当前的runloop中注册一个新的事件源，而当scrollView滚动的时候，当前MainRunloop是处于UITrackingRunLoopMode的模式下，在这个模式下，是不会处理NSDefaultRunLoopMode的消息（因为RunLoop Mode不一样），要想在scrollView滚动的同时也接受其他runloop的消息，我们需要改变两者之间的runloop mode。\n``` objc\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n```\n简单的说就是NSTimer不会开启新的进程，只是在runloop里注册了一下，runloop每次loop时都会检测这个timer，看是否可以触发。当runloop在A mode，而timer注册在B mode时就无法去检测这个timer，所以需要把NSTimer也注册到A mode，这样就可以被检测到。\n\n## 绘制图形\n\n``` bash\n- (void)drawRect:(CGRect)rect{\n    // Drawing code\n    // 1.获得图形上下文\n    CGContextRef ctx = UIGraphicsGetCurrentContext();\n    // 2.拼接图形(路径)\n    // 设置线段宽度\n    CGContextSetLineWidth(ctx, 10);\n    // 设置线段头尾部的样式\n    CGContextSetLineCap(ctx, kCGLineCapRound);\n    // 设置线段转折点的样式\n    CGContextSetLineJoin(ctx, kCGLineJoinRound);\n    /**  第1根线段  **/\n    // 设置颜色\n    CGContextSetRGBStrokeColor(ctx, 1, 0, 0, 1);\n    // 设置一个起点\n    CGContextMoveToPoint(ctx, 10, 10);\n    // 添加一条线段到(100, 100)\n    CGContextAddLineToPoint(ctx, 100, 100);\n    // 渲染一次\n    CGContextStrokePath(ctx);\n    /**  第2根线段  **/\n    // 设置颜色\n    CGContextSetRGBStrokeColor(ctx, 0, 0, 1, 1);\n    // 设置一个起点\n    CGContextMoveToPoint(ctx, 200, 190);\n    // 添加一条线段到(150, 40)\n    CGContextAddLineToPoint(ctx, 150, 40);\n    CGContextAddLineToPoint(ctx, 120, 60);\n    // 3.渲染显示到view上面\n    CGContextStrokePath(ctx);\n}\n```\n\n## 构建缓存时选用NSCache而非NSDictionary\n当系统资源将要耗尽时，NSCache可以自动删减缓存。如果采用普通的字典，那么就要自己编写挂钩，在系统发出“低内存”通知时手动删减缓存，NSCache会先删减“最久未使用”的对象。\n\nNSCache不会拷贝键，而是会保留它。此行为用NSDictionary也可以实现，但是需要编写比较复杂的代码。NSCache对象不拷贝键的原因在于：很多时候，键都是由不支持拷贝操作的对象来充当的。因此，NSCache对象不会自动拷贝键，所以说，在键不支持拷贝操作的情况下，该类用起来比字典方便。\n\nNSCache是线程安全的，NSDictionary不是。在开发者自己不编写加锁代码的前提下，多个线程可以同时访问NSCache。对缓存来说，线程安全很重要，因为开发者可能要在某个线程中读取数据，此时如果发现缓存里找不到指定的键，那么就要下载该键对应的数据了。\n\n如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种“重新计算起来很费事”的数据，才值得放入缓存，比如那些需要从网络获取从磁盘读取的数据。\n\n## Runtime机制\n\b详情见[【iOS】Runtime详解](https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E8%AF%A6%E8%A7%A3/)\n\n## Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\nRunLoop是一个让线程能随时处理事件但不退出的机制。RunLoop实际上是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行EventLoop的逻辑。线程执行了这个函数后，就会一直处于这个函数内部“接受消息->等待->处理”的循环中，知道循环结束（比如传入quit的消息），函数返回。让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。\n\nOSX/iOS系统中，提供了两个这样的对象：NSRunLoop和CFRunLoopRef。CFRunLoopRef是在CoreFoundation框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。NSRunLoop是基于CFRunLoopRef的封装，提供了面向对象的API，但是这些API不是线程安全的。\n\n线程和RunLoop之间是一一对应的，其关系是保存在一个全局的Dictionary里。线程刚创建时并没有RunLoop，如果你不主动获取，那它一直都不会有。RunLoop的创建是发生在第一次获取时，RunLoop的销毁是发生在线程结束时。你只能在一个线程的内部获取其RunLoop（主线程除外）。\n\n系统默认注册了5个RunLoop的Mode：\n1. `kCFRunLoopDefaultMode`：App的默认Mode，通常主线程是在这个Mode下运行的。\n2. `UITrackingRunLoopMode`：界面跟踪Mode，用于ScrollView追踪触摸滑动，保证界面滑动时不受其他Mode影响。\n3. `UIInitializationRunLoopMode`：在刚启动App时进入的第一个Mode，启动完成后不再使用。\n4. `GSEventReceiveRunLoopMode`：接受系统事件的内部Mode，通常用不到。\n5. `kCFRunLoopCommonModes`：这是一个占位的Mode，没有实际作用。\n\nRunLoop的四个作用：\n1. 使程序一直运行接受用户输入\n2. 决定程序在何时应该处理哪些Event\n3. 调用解耦\n4. 节省CPU时间\n\n主线程的RunLoop默认是启动的。iOS的应用程序里面，程序启动后会有一个如下的main()函数：\n``` objc\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n```\n\n参考文章：https://blog.csdn.net/potato512/article/details/51455728\n\n## \b临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\n\n产生死锁的四个必要条件：\n1. 互斥条件：一个资源每一次只能被一个进程使用。\n2. 请求与保持条件：一个进程因请求资源阻塞时，对已获得的资源保持不放。\n3. 不剥夺条件：进程已获得的资源，在未使用完之前，不能进行强制剥夺。\n4. 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。\n\n## 动画掉帧，CADisPlayLink， Core graphics\n使用[KMCGeigerCounter](https://github.com/kconner/KMCGeigerCounter)检测动画掉帧问题。\n\nCADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的CADisplayLink对象，把它添加到一个RunLoop中，并给它提供一个target和selector在屏幕刷新的时候调用。另外CADisplayLink不能被继承。frameInterval属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60hz也就是每秒60次，如果将frameInterval设为2那么就会两帧调用一次，也就是变成了每秒刷新30次。\n\n我们通过pause属性开控制CADisplayLink的运行。当我们想结束一个CADisplayLink的时候，应该调用`invalidate`从RunLoop中删除并删除之前绑定的target和selector，另外CADisplayLink不能被继承。\n\niOS设备的屏幕刷新率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。\n\nNSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，RunLoop如果在阻塞状态，触发时间就会推迟到下一个RunLoop周期。并且NSTimer新增了tolerance属性，让用户可以设置可以容忍触发的时间的延迟范围。\n\nCADisplayLink使用场合相对专一，适合做UI的不停绘制，比如自定义动画引擎或则视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用CADisplayLink比起用NSTimer的好处就是我们不需要在格外关系屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。\n\n注意：\n通常来讲：iOS设备的刷新频率是60Hz也就是每秒60次。那么每一次刷新的时间就是1/60秒（大概16.7毫秒）。当我们得frameInterval值为1的时候我们需要保证的是CADisplayLink调用`target`的函数计算时间不应该大于16.7，否则就会出现严重的丢帧现象。\n\n在mac应用中我们使用的不是CADisplayLink而是CVDisplayLink它是基于C接口的用起来配置有些麻烦但是用起来还是很简单的。\n\n## 使用ARC是否会出现野指针，为什么？\n会出现野指针，在定义block的时候，是将block内存分配在堆上的。当在函数作用范围外的时候，block的内存会被回收释放，就会生成野指针，这时候去掉用block，就会crash。\n## 如何让异步方法进行二次封装让其同步执行\n可以用dispatch_group_async，dispatch_group_notify。\n## 为什么这样定义单例？\n``` objc\nstatic HLTestObject *instance = nil;\n+ (instancetype)sharedInstance\n{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[[self class] alloc] init];\n    });\n    return instance;\n}\n```\n为什么使用GCD去创建单例，GCD中的dispatch_once函数只调用一次，多线程若有两个线程先后去执行到dispatch_once这个地方，则先执行到的回去调用，后执行的就不会调用了。\n\n为什么要让对象指针static，多线程情况下，因为dispatch_once只执行一次，除了第一个执行的，之后的线程都不执行，直接返回对象指针，若此时指针是临时变量，则会导致返回一个空指针，若为static 则返回的永远是同一个又第一个执行的生成的对象。\n## 如何给按钮画边框\n``` objc\nringButton.tintColor = [UIColor colorWithRed:0.000 green:0.537 blue:0.506 alpha:1];\n[ringButton.layer setMasksToBounds:YES];\n[ringButton.layer setCornerRadius:8.0];\n[ringButton.layer setBorderWidth:1.0];\nCGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\nCGColorRef colorref = CGColorCreate(colorSpace, (CGFloat[]){0.000,0.537,0.506,1});\n[ringButton.layer setBorderColor:colorref];\n```\n## Socket和Http的区别，和TCP的区别\n### Socket套接字\n套接字（Socket）是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议、本地主机的IP地址、本地进程的协议端口、远程主机的IP地址、远程进程的协议端口。\n\n应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序提供并发服务的问题。多个TCP连接或多个应用程序可能需要通过一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字（Socket）接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。\n\n套接字之间的连接过程分为三个步骤：服务器监听、客户端请求、连接确认。\n服务器监听：服务器端套接字并不定位具体的客户端套接字，而是出于等待连接的状态，实时监控网络状态，等待客户端的链接请求。\n\n客户端请求：指客户端的套接字提出链接请求，要链接的目标是服务端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器套接字，指出服务器端套接字的地址和端口，然后就向服务端套接字提出链接请求。\n\n连接确认：当服务器端套接字监听到或则说收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务端套接字的描述发送给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接受其他客户端套接字的链接请求。\n\n创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当时使用TCP协议进行连接时，该Socket连接就是一个TCP连接。\n\n若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。\n\nTCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输层的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、TCP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作为应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”\n## OC对象模型\n对象是OC中基本构造单元（building block），用于存储和传递数据。类和对象的最终实现都是一种数据结构。可以完整的类应该包括类方法、实例方法和成员变量（实例变量），每个对象都包括一个isa（is a class）指针指向类对象（运行时方法发送给对象消息，才确定类别并调用相应的方法实现），元类对象中的方法列表是类方法（+，class methods）。\n## HTTPS和HTTP的区别\n1. HTTPS是加密传输协议，HTTP是明文传输协议\n2. HTTPS需要用到SSL证书，而HTTP不用\n3. HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO\n4. HTTPS标准端口443，HTTP标准端口90\n5. HTTPS基于传输层，HTTP基于应用层\n6. HTTPS在浏览器显示绿色安全锁，HTTP没有显示\n\n## 使用atomic一定是线程安全的吗？\n不是的。\nnonatomic的内存管理语义是非原子性的，非原子性的操作本来就是线程不安全的，而atomic的操作是原子性的，但是并不意味着它是线程安全的，它会增加正确的几率，能够更好的避免线程的错误，但是它仍然是线程不安全的。\n\n当使用atomic时，虽然对属性和读和写是原则性的，但是仍然可能出现线程错误：当线程A进行写操作，这时其他线程的读或则写操作会因为该操作而等待。当A线程的写操作结束后，B线程进行写操作，然后有线程C在A线程读操作前release了该属性，那么还会导致程序崩溃。所以仅仅使用atomic并不会使得线程安全，我们还要为线程添加lock来确保线程的安全。\n\n也就是要注意：<b>atomic所说的线程安全只是保证了getter和setter存取方法的线程安全，并不能保证整个对象是线程安全的。</b>如下例所示：\n``` objc\n@property(atomic,strong)NSMutableArray *arr;\n```\n如果一个线程循环的读数据，一个线程循环写数据，那么肯定会产生内存问题，因为这和setter、getter没有关系。如使用`[self.arr objectAtIndex:index]`就不是线程安全的。好的解决方案就是加锁。\n\n<b>探讨一下Objective-C中几种不同方式实现的锁</b>，在这之前先构建一个测试类，假设它是我们的一个共享资源，method1和method2是互斥的，代码如下：\n``` objc\n@implementation TestObj\n\n- (void)method1 \n{\n    NSLog(@\"%@\",NSStringFromSelector(_cmd));\n}\n- (void)method2\n{\n    NSLog(@\"%@\",NSStringFromSelector(_cmd));\n}\n@end\n```\n\n### 使用NSLock实现的锁\n``` objc\n// 主线程中\nTestObj *ojc = [[TestObj alloc] init];\nNSLock *lock = [[NSLock alloc] init];\n\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    [lock lock];\n    [ojc method1];\n    sleep(10);\n    [lock unlock];\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    [lock lock];\n    [ojc method2];\n    [lock unlock];\n});\n```\n根据打印的结果已经看到，线程一锁住之后，线程二回一直等待线程一走完并将锁设置为unlock后，才会执行method2中的方法。\n\nNSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate两个方法，前一个方法会尝试加锁，如果锁不可用（已经被锁住），并不会阻塞线程，并返回NO。lockBeforeDate方法会在指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。\n\n### 使用synchronized关键字构建的锁\n当然在Objective-C中你还可以用@synchronized指令快速的实现锁：\n``` objc\nTestObj *ojc = [[TestObj alloc] init];\nNSLock *lock = [[NSLock alloc] init];\n\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    @synchronized(ojc){\n        [ojc method1];\n        sleep(10);\n    }\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    @synchronized(ojc){\n        [ojc method2];\n    }\n});\n```\n\n@synchronized指令使用的obj为该锁的唯一标识，只有当标识相同时，才会满足互斥，如果线程二中的@synchronized(obj)改为@synchronized(other)，线程二就不会被阻塞，@synchronized指令实现锁的优点就是我们不需要在代码中显式的创建锁对象，便可以实现锁的机制，但作为一种预防措施，@synchronized块会隐式的添加一个异常处理例程来保护代码，该处理例程会在异常抛出的时候自动释放互斥锁。所以如果不想让隐式的异常处理例程带来额外的开销，可以考虑使用锁对象。\n\n### 使用C语言的pthread_mutex_t实现的锁\n\n``` objc\nTestObj *ojc = [[TestObj alloc] init];\n__block pthread_mutex_t mutex;\npthread_mutex_init(&mutex,NULL);\n\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    pthread_mutex_lock(&mutex);\n    [ojc method1];\n    sleep(10);\n    pthread_mutex_unlock(&mutex);\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    pthread_mutex_lock(&mutex);\n    [ojc method2];\n    pthread_mutex_unlock(&mutex);\n});\n```\npthread_mutex_t定义在pthread.h中，需要引入`#import <pthread.h>`。\n\n### 使用GCD来实现的锁\n\n以上代码的多线程中已经使用到了GCD的dispatch_async方法，其实在GCD中也已经提供了一种信号机制，使用它我们也可以构建一把“锁”（本质意义上讲，信号量与锁是有区别的，具体差异参考信号量与互斥锁之间的区别）：\n``` objc\nTestObj *ojc = [[TestObj alloc] init];\ndispatch_semaphore_t semaphore = dispatch_semaphore_create(1);\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n    [ojc method1];\n    dispatch_semaphore_signal(semaphore);\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n    [ojc method2];\n    dispatch_semaphore_signal(semaphore);\n});\n```\n\n### 使用自旋锁OSSpinLock来实现的“锁”\n``` objc\n//主线程中\nTestObj *obj = [[TestObj alloc] init];\nOSSpinLock spinlock = OS_SPINLOCK_INIT;\n//线程1\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{\n    OSSpinLockLock(&spinlock);\n    [obj method1];\n    sleep(10);\n    OSSpinLockUnlock(&spinlock);\n});\n\n//线程2\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{\n    sleep(1);//以保证让线程2的代码后执行\n    OSSpinLockLock(&spinlock);\n    [obj method2];\n    OSSpinLockUnlock(&spinlock);\n});\n```\n\n参考链接：https://www.jianshu.com/p/e286d2907bf7","source":"_posts/iOS高级开发面试题.md","raw":"---\ntitle: iOS高级开发面试题（上）\ndate: 2017-08-06 10:37:30\ntags:\n  - iOS\ncategories: 知识汇总\nabbrlink: 4ea43a8072083e39\n---\n\n## nil、Nil、NULL、NSNull的区别？\n<table><tr><td>Symbol</td><td>Value</td><td>Meaning</td></tr><tr><td>NULL</td><td>(void *)0</td><td>literal null value for C pointers</td></tr><tr><td>nil</td><td>(id)0</td><td>literal null value for Objective-C objects</td></tr><tr><td>Nil</td><td>(Class)0</td><td>literal null value for Objective-C classes</td></tr><tr><td>NSNull</td><td>[NSNull null]</td><td>singleton object used to represent null\n</td></tr></table>\n\n### nil：对象为空\n定义某一实例对象为空值。例如：\n``` objc\nNSObject* obj = nil;\nif (obj == nil) {\n  NSLog(@\"obj is nil\");\n} else {\n  NSLog(@\"obj is not nil\");\n}\n```\n<!-- more -->\n### Nil：类为空\n定义一个类为空。例如：\n``` objc\nClass someClass = Nil;\nClass anotherClass = [NSString class];\n```\n### NULL：基本数据对象指针为空\n用于C语言的各种数据类型的指针为空。例如：\n``` objc\n\nint *pointerToInt = NULL; \nchar *pointerToChar = NULL; \nstruct TreeNode *rootNode = NULL;\n```\n### NSNull\n集合对下那个无法包含nil作为其具体值，如NSArray、NSSet和NSDictionary。相应的，nil值使用一个特定的对象NSNull来表示。`NSNull`提供了一个单一实例用于表示对象属性中的的nil值。\n\n通常初始化NSArray对象，我们是这样的：\n``` objc\nNSArray *arr = [NSArray arrayWithObjects:@\"wang\", @\"zz\", nil];\n```\n当NSArray里遇到nil时，说明这个数组对象\b元素截止了，即NSArray只关注nil之前的对象，nil之后的对象会被抛弃，比如下面的写法，与上面的arr值是一样的。\n``` objc\nNSArray *arr = [NSArray arrayWithObjects:@\"wang\", @\"zz\", nil, @\"foogry\"];\n```\n如果要让nil后的元素不被抛弃就只能借助NSNull了。\n``` objc\nNSArray *arr = [NSArray arrayWithObjects:@\"wang\", @\"zz\", [NSNull null], @\"foogry\"];\n```\n\n一句话总结Nil、nil、NSNull之间的区别就是：不管是NULL、Nil、nil，他们本质上都是一样的，都是(void *)0，只是写法不同。这样做的意义是区分不同的数据类型，比如你看到NULL就知道他是一个C指针，看到nil就知道这是一个Objective-C对象，看到Nil就知道这是一个Class类型的数据。\n\n## load和initialize\n\n### load函数调用特点如下\n\n当类被引用进项目的时候就会执行load函数（在main函数开始执行之前），与这个类是否被用到无关，每个类的load函数只会自动调用一次。由于load函数是系统自动加载的，因此不需要调用父类的load函数，否则父类load函数会执行多次。\n* 当父类和子类都实现load函数时，父类的load方法执行顺序要优于子类。\n* 当子类未实现load方法时，不会调用父类load方法。\n* 类中的load方法执行顺序要优先于类别（Category）。\n* 当有多个类别（Category）都实现了load方法，每个类load执行顺序与其在Compile Source出现的顺序一致。\n\nload调用时机比较早，当load调用时，其他类可能还没加载完成，运行环境不安全。\n\nload方法是线程安全的，它使用了锁，我们应该避免线程阻塞在load方法。\n\n### initialize函数调用特点如下\n\ninitialize在类或者其子类的第一个方法被调用前调用。即使类文件被引用进项目，但是没有使用，initialize不会被调用。由于是系统自动调用，也不需要再调用`[super initialize]`，否组父类的initialize会被调用多次执行。假如这个类放到代码中，而这段代码并没有被执行，这个函数是不会被执行的。\n* 父类的initialize方法会比子类先执行。\n* 当父类未实现initialize方法时，会调用父类initialize方法，子类实现initialize方法时，会覆盖initialize方法。\n* 当多个Category都实现了initialize方法，会覆盖类中的方法，只执行一个（会执行Compile Source列表中最后一个Category的initialize方法）。\n\n在initialize方法收到调用时，运行环境基本健全。\n\ninitialize内部使用了锁，所以线程是安全的。但同时要避免阻塞线程，不要再使用锁。\n\n### 分别在什么情况下使用？\n\n#### +load\n由于调用load方法时的环境很不安全，我们应该尽量减少load方法的逻辑。另一个原因是load方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在load方法中，load很常见的一个使用场景，交换两个方法的实现。\n\n比如MJRefresh中的一段代码：\n``` objc\n+ (void)load\n{\n    [self exchangeInstanceMethod1:@selector(reloadData) method2:@selector(mj_reloadData)];\n    [self exchangeInstanceMethod1:@selector(reloadRowsAtIndexPaths:withRowAnimation:) method2:@selector(mj_reloadRowsAtIndexPaths:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(deleteRowsAtIndexPaths:withRowAnimation:) method2:@selector(mj_deleteRowsAtIndexPaths:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(insertRowsAtIndexPaths:withRowAnimation:) method2:@selector(mj_insertRowsAtIndexPaths:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(reloadSections:withRowAnimation:) method2:@selector(mj_reloadSections:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(deleteSections:withRowAnimation:) method2:@selector(mj_deleteSections:withRowAnimation:)];\n    [self exchangeInstanceMethod1:@selector(insertSections:withRowAnimation:) method2:@selector(mj_insertSections:withRowAnimation:)];\n}\n\n+ (void)exchangeInstanceMethod1:(SEL)method1 method2:(SEL)method2\n{\n    method_exchangeImplementations(class_getInstanceMethod(self, method1), class_getInstanceMethod(self, method2));\n}\n```\n\n#### +initialize\ninitialize方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如NSMutableArray这种类型的实例化依赖于Runtime的消息发送，所以显然无法在编译器初始化：\n``` objc\n// In Person.m\n// int类型可以在编译期赋值\nstatic int someNumber = 0; \nstatic NSMutableArray *someArray;\n+ (void)initialize {\n    if (self == [Person class]) {\n        // 不方便编译期复制的对象在这里赋值\n        someArray = [[NSMutableArray alloc] init];\n    }\n}\n```\n\n### load和initialize的共同点\n* 如果父类和子类都被调用，父类的调用一定在子类之前。\n\n\n## 线程与进程的区别和联系？\n简单概括下线程与进程之间的区别和联系：\n* 一个程序至少\b要有一个进程，一个进程至少要有一个线程。\n* 进程是\b资源分配的最小独立单元，进程是具有\b一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。\n* 线程是进程的一个分支，是进程的实体，是CPU调度和分配的基本单元，它是比进程更小的能独立运行的基本单位，线程自己基本不拥有系统资源，只拥有一点在运行中必不可少的资源（计数器、栈、寄存器），但是它可以与\b同属一个进程的其他线程共享线程所拥有的全部资源。\n* 线程和进程的主要区别在于他们是不同的操作\b系统资源的管理方式。进程有独立的\b地址空间，一个进程崩溃以后，在保护模式下不会对其他进程\b造成影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉以后就等于整个进程死掉，所以多进程的程序比多线线程的程序要健壮，但在进程切换时，耗费资源较大，效率要差些。\n* 但对于一些要求同时进行并\b且又要共享某些变量的并发操作，只能用线程，不能\b用进程。\n\n## assign、retain、copy、weak、strong的区别以及nonatomic的含义\n首先从ARC\b和非ARC层面上可以分为两部分，第一部分是assign、retain、copy，第二部分是\bweak、strong。\n\n\b首先看看第一部分assign、retain、copy的含义：\n### assign\n\nassign一般用来修饰基本的数据类型，包括基本数据类型（NSInteger、CGFloat）和C数据类型（int、float、double、char）等。\b因为assign声明的属性不会增加引用计数，也就是说声明的属性释放后，就没有了，及时其他\b对用用到\b了他也无法留住他，只会crash。但是即使是释放了，指针却还在，成为了野指针，如果新的对象被分配到了这个内存地址上，也会crash。所一般只能修饰基本数据类型，因为他会\b被分配在栈上，而栈会由系统自动处理，不会造成野指针。\n\n### retain\n\n与assign相对，我们要解决\b对象\b被其他对象引用后释放造成的问题，就要用retain来声明。retain声明后的\b对象会更改引用计数，那么每次被引用，引用计数都会+1，释放后都会-1，及时这个对象本身被释放了，只要还有对象在引用它，就会持有不会造成什么问题，只有当引用计数为0时候，就会被dealloc构析函数回收内存了。\n\n### copy\n\n最常见的使用copy修饰应该是NSString。copy与retain的区别在于retain的引用是拷贝指针地址，copy是拷贝对象本身，也就是说retain是浅复制，copy是深复制。<b>如果是浅复制，当修改对象时，都会被修改，而深复制不会。</b>之所以在NSString这类有可变类型的对象上使用，是因为他们有可能和对应的可变类型如NSMutableString之间进行赋值操作，为了防止内容被改变，使用copy去深复制一份。copy工作由copy方法执行，此属性只对那些实现了NSCopying协议的对象有效。\n\n以上三个可以在MRC中使用，但是weak和strong就只能在ARC中使用，也就是自动引用计数，这时就不能手动去进行retain、release等操作了，ARC会帮我们完成这些工作。\n\n### weak\n\nweak其实类似于assign，叫弱引用，也就是不增加引用计数。一般只有在防止循环引用时使用，比如父类引用了子类，子类又去引用父类。IBOutlet、Delegate一般用的就是weak，这是因为它们会在类外部被调用，防止循环引用。\n\n### strong\n\n相对的，strong就类似retain了，叫强引用，会增加引用计数，类内部使用的属性一般都是strong修饰的，现在ARC已经基本代替了MRC，所以我们最常见的就是strong了。\n\n### nonatomic\n\n在修饰属性时，我们往往会加上一个nonamatic，这又是什么呢？它的名字叫非原子访问。对应有atomic，是原子访问。我们知道使用多线程为了避免在写操作时同时进行写导致问题，经常会对要写的对象进行加锁，也就是同一时刻只允许一个线程去操作它。如果一个属性是由atomic修饰的，那么系统就会对线程进行保护，防止多个写操作同时进行。这有好处，也有坏处，那就是消耗系统资源，所以对于iPhone这种小型设备，如果不是进行多线程的写操作，就可以使用nonatomic，取消线程保护，提高性能。\n\n## 定义一个NSString类类型属性时，为什么使用copy不用strong？\n\nNSString类型属性是一个指针，定义成copy，操作是拷贝一份等同的对象，这个指针指向新生成的拷贝对象。当使用copy时，这个拷贝的对象无论是拷贝自NSMutableString还是NSString结构都是不可变的NSString。而如果是用strong，则指向一个字符串对象，若指向的是一个NSMutableString，则当指向的对象改变时，属性值也会发生相应改变，导致错误，因为是一个不可变的字符串。\n\n## 引用多线程时会出现什么问题，应如何避免问题的发生？\n\n多线程容易导致资源争抢，发生死锁现象。死锁通常是一个线程锁定一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在相互等待，造成了无法执行的情况。\n\n避免死锁的一个通用的经验法则是：当几个线程都要访问共享资源A、B、C时，保证使每个线程都按照同样的顺序去访问它们，比如先访问A，在访问B和C。\n\n采用GCD中的栅栏方法，用并行队列去装载事件并异步去执行。\n\n## 循环引用是如何产生的，如何解决循环引用？\n\n两个类中有属性分别为彼此的实例，这样就会引发循环引用。\n\n使用block、NSTimer时也容易导致循环引用，设置一个引用为弱引用可以解决强引用循环。\n\n## NSTimer使用中的注意事项\n\n在类中定义定时器并把目标对象设置为self时，NSTimer实例会保存此实例，但定时器是用在类中用实例变量存放的，所以此实例也保留了定时器，这就造成了循环引用。除非调用invalidate方法并把定时器设置为nil，或则系统回收实例，才能打破循环引用。如果无法确保stop一定被调用，就极易造成内存泄漏。\n\n使用block可以防止NSTimer导致的内存泄漏。\n\n在NSTimer分类中定义方法，让NSTimer的target为NSTimer实例本身，然后block从实例中copy一份，在NSTimer中定义方法去执行拷贝block。\n\n## App的生命周期以及运行状态\n\n状态：未运行、未激活、激活、后台、挂起。\n\n未运行：程序未启动\n\n未激活：程序在前台运行，不过没有接受到事件\n\n激活：程序在前台运行且收到了事件\n\n后台：程序在后台而且能执行代码，大多程序进入这个状态后会在这个状态停留一会，时间到之后会进入挂起状态\n\n挂起：程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中，系统内存低时，系统就把挂起的程序清除掉\n\n## 栈、堆、静态区域的区别\n\nOC中，非对象的变量都存在栈中，对象都存在堆中，静态区域的内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都在，主要存放静态数据、全局数据和常量。\n\n栈区：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存效率高，内存容量有限。\n\n堆区：OC对象存储于堆中，当对象的引用计数为0时自动释放该对象。\n\n## 子试图超出父视图部分能看到吗？超出的部分有什么影响？\n\n子视图超出父视图的部分能看到，但是超出部分不能响应事件。\n想让超出部分响应事件，就该写父视图的hitTest方法。判断触碰区是否在子视图内，如果在子视图内，则返回子视图。让子视图去响应事件。\n\n## respond链是如何响应的，响应顺序是什么样的？\n\n在iOS系统中，能够响应并处理事件的对象称之为responder object，UIResponder是所有responder对象的基类，在UIResponder类中定义了处理各种事件，包括触摸事件、运动事件和远程控制事件的编程接口，UIApplication、UIViewController、UIVIew和所有继承自UIVIew的UIKit类（包括UIWindow继承自UIVIew）都直接或间接的继承自UIResponder，所以它们的实例都是responder object对象，都实现了上述4个方法。UIResponder中的默认实现是什么都不做，但UIKit中UIResponder的直接子类（UIView，UIVIewController...）的默认实现是将事件延着responder chain继续向上传递到下一个responder，即nextResponder。所以在定制UIView子类的上述事件处理方法时，如果需要将事件传递给next responder，可以直接调用super的对应事件处理方法，super的对应方法将事件传递给next responder，即使用`[super touchesBegan:touches withEvent:event];`，不建议直接向nextResponder发送消息，这样可能会漏掉父类对这一事件的其他处理。\n``` objc\n[self.nextResponder touchesBegan:touches withEvent:event];\n```\n另外在定制UIVIew子类的事件处理方法时，如果其中一个方法没有调用super的对应方法，则其他方法也需要重写，不使用super的方法，否则事件处理流程会很混乱。\n<strong>responder chain是一系列连接的responder对象，通过responder对象可以将处理事件的责任传递给下一个，更高级的对象，即当前responder对象的nextResponder。</strong>\n\niOS中responder chain的结构为：\n{% asset_img responder_chain.webp responder chain %}\n第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现`- (BOOL)canBecomeFirstResponder`方法并返回YES可以使当前View成为第一响应者，或则调用View的`becomeFirstResponder`方法也可以，例如当UITextField调用该方法时，会弹出键盘进行输入，此时输入框控件就是第一响应者。\n\niOS系统在处理事件时，通过UIApplication对象和每个UIWindow对象的`sendEvent:`方法将事件分发给具体处理此事件的responder对象（对于触摸事件为hitTest view，其他事件为first responder），当具体处理此事件的responder不处理此事件时，可以通过responder chain交给上一级处理。\n\n如果hit-test view或first responder不处理此事件，则将事件传递给其nextResponder处理，若有UIViewController对象则传递给UIViewController，传递给其superView。\n\n如果view的viewController也不处理事件，则viewController将事件传递给其管理view的superView。\n\n视图层级结构的顶级为UIWindow对象，如果window仍不处理此事件，传递给UIApplication。\n\n若UIApplication对象不处理此事件，则事件被丢弃。\n\n使用响应链，能够让一条链上的多个对象对同一个事件做出响应。每一个应用有一个响应链，我们得视图结构是一个N叉树（一个视图可以有多个子视图，一个子视图同一时刻只有一个父视图），而每一个继承自UIResponder的对象都可以在这个N叉树中成为一个节点。当叶节点成为最高响应者的时候，从这个叶节点开始往其父节点开始追溯出一条链，那么对于这一个叶节点来说，这一条链就是当前的响应者链。响应者链将系统捕获到的UIEvent与UITouch从叶节点层层向上分发，期间可以选择停止分发，也可以继续向上分发。一句话就是事件传递过程。\n\n## GCD中栅栏机制\n\n栅栏函数只能用在调度并发队列中，不能使用在全局并发队列中。\n1. 实现高效率的数据库访问和文件访问\n2. 避免数据竞争\ndispatch_barrier_async函数会等待追加到并行队列上的并行执行的处理全部结束之后，再将制定的处理追加到该并行队列中。然后再由dispatch_barrier_async函数追加的处理执行完毕后，并行队列才恢复为一般的动作，追加到该并行队列的处理又开始执行。\n\n## Notification响应顺序\n\nNSNOtification使用的是同步操作。即如果你在程序中的A位置post了一个NSNotification，在B注册了一个observer，通知发出后，必须等到B位置的通知回调执行完以后才能返回到A处继续往下执行。如果想让NSNotification的post处和observer处异步执行，可以通过NSNotificationQueue实现。\n\n多线程应用中，Notification在哪个线程中post，就在哪个线程中被转发，而不一定是在注册观察者的那个线程中。Notification的发送与接收处理都是在同一个线程中。\n\n为了顺应语法的变化，apple从iOS4之后提供了带有block的NSNotification。\n\n一种重定向的实现思路是自定义一个通知队列（注意，不是NSNotificationQueue对象，而是一个数组），让这个队列去维护那些我们需要重定向的Notification。我们仍然是像平常一样去注册一个通知的观察者，当Notification来了时，先看看post这个Notification的线程是不是我们所期望的线程，如果不是，则将这个Notification存储到我们得队列中，并发送一个信号（signal）到期望的线程中，来告诉这个线程需要处理一个Notification。指定的线程在收到信号后，将Notification从队列中移除，并进行处理。\n\n当我们注册一个观察者时，通知中心会持有观察者的一个弱引用，来确保观察者是可用的。主线程调用dealloc操作会让observer对象的引用计数减为0，这时对象会释放掉。后台线程发送一个通知，如果此时observer还未被释放，则会用其转出消息，并执行回调方法。而如果在回调执行的过程中对象被释放了，就会出现上面的问题。\n\n## Core Data、SQLite是如何使用的？\n\nCore Data是一个功能强大的层，位于SQLite数据库之上，它避免了SQL的复杂性，能让我们以更自然的方式与数据库进行交互。Core Data将数据库进行转换为OC对象（托管对象）来实现，这样无需任何SQL知识就能操作他们。\n\nCore Data能将应用程序中的对象直接保存到数据库中，无需进行复杂的查询，也无需确保对象的属性名和数据库字段名对应，这一切由Core Data完成。\n\n## 归档是如何使用的？\n\n归档是指某种格式来保存一个或多个对象，以便以后还原这些对象的过程。\n\n只要在类中实现的每个属性都是标量（如int或float）或都是符合NSCoding协议的某个类的实例，就可以对你的对象进行完整归档。\n\n## 对Http的理解，socket编程的套路\nHTTP协议是基于TCP连接的，是应用层协议，主要解决如何包装数据。Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。\n\nHTTP连接：短连接，客户端向服务器发送一次请求，服务器响应后连接断开，节省资源。服务器不能主动给客户端响应（除非采用HTTP长连接技术），iPhone主要使用NSURLConnection。\n\nSocket连接：长连接，客户端跟服务器端直接使用Socket进行连接，没有规定连接后断开，因此客户端和服务器端保持连接通道，双方可以主动发送数据，一般多用于游戏。Socket默认连接超时时间是30秒，默认大小是8k（理解为一个数据包大小）。\n\n## NSUserDefault使用的时候需要注意什么？\nNSUserDefault非常好用，并不需要用户在程序中设置NSUserDefault的全局变量，需要在哪里使用NSUserDefault的数据，那么就在哪里创建一个NSUserDefault对象，然后进行读或写操作。\n\n针对同一个关键字对应的对象或者数据，可以对它进行重写，重写之后关键字就对应新的对象或者数据，旧的对象或者数据会自动清理。\n\n注意一点：只能存储基本对象，如果是自定义的对象，需要转换成NSData存储进去才可以。\n\niOS中本地存储数据简单的说有三种方式：数据库、NSUserDefault和文件。\n\nNSUserDefault用于存储数据量小的数据，例如用户配置。并不是所有的东西都能往里放，只支持：NSString、NSNumber、NSData、NSMArray、NSDictionary。但是如果把一个自定义的类存到一个NSArray里，然后再存到NSUserDefault里也是不能成功的。\n## ARC的底层实现机制\n通过retainCount的机制来决定对象是否需要释放。每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\nARC相对于MRC，不是编译时添加retain、release、autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。在编译期，ARC用的是更底层的C接口实现的retain、release、autorelease，这样做新能更好，也是为什么不能在ARC环境下手动retain、release、autorelease，同时对同一上下文的同一对象的成对retain、release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。\n\n1. ARC会自动执行retain、release、autorelease等操作，在ARC下不能主动调用这些内存管理方法。\n2. ARC在调用这些方法时，并不通过Objective-C的消息转发机制，而是直接调用其底层C语言版本API，这样做新能更好，因为保留及释放操作需要频繁的执行，直接调用其底层的函数节省很多CPU周期，如ARC会调用与retain等价的底层函数objc_retain。\n3. 在使用ARC时必须遵循方法命名规则，alloc、new、copy、mutablecopy。ARC通过命名约定将内存管理标准化。\n4. ARC管理对象生命周期的办法是：在合适的地方“插入”、“保留”及“释放”操作。在方法中创建的对象，在方法中自动release；类中的对象，在dealloc方法中释放。\n5. ARC下，变量的内存管理语义可以通过修饰符指明。\n6. ARC只负责管理Objective-C对象的内存，CoreFoundation对象不归ARC管理。\n\n## 滑动TableView视图的时候NSTimer会不会工作？\n1. 默认情况下NSTimer不能在后台正常工作。\n2. 滑动UI是NSTimer不能工作。\n\n这其实就是Runloop的mode再做怪。\nRunloop可以理解为cocoa下的一种消息循环机制，用来处理各种消息事件，我们在开发的时候并不需要手动去创建一个runloop，因为框架为我们创建了一个默认的runloop，通过`[NSRunloop currentRunloop]`我们可以得到一个当前线程下面对应的runloop对象，不过我们需要注意的是不同的runloop之间消息的通知方式。\n\n在开启一个NSTimer实质上是在当前的runloop中注册一个新的事件源，而当scrollView滚动的时候，当前MainRunloop是处于UITrackingRunLoopMode的模式下，在这个模式下，是不会处理NSDefaultRunLoopMode的消息（因为RunLoop Mode不一样），要想在scrollView滚动的同时也接受其他runloop的消息，我们需要改变两者之间的runloop mode。\n``` objc\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n```\n简单的说就是NSTimer不会开启新的进程，只是在runloop里注册了一下，runloop每次loop时都会检测这个timer，看是否可以触发。当runloop在A mode，而timer注册在B mode时就无法去检测这个timer，所以需要把NSTimer也注册到A mode，这样就可以被检测到。\n\n## 绘制图形\n\n``` bash\n- (void)drawRect:(CGRect)rect{\n    // Drawing code\n    // 1.获得图形上下文\n    CGContextRef ctx = UIGraphicsGetCurrentContext();\n    // 2.拼接图形(路径)\n    // 设置线段宽度\n    CGContextSetLineWidth(ctx, 10);\n    // 设置线段头尾部的样式\n    CGContextSetLineCap(ctx, kCGLineCapRound);\n    // 设置线段转折点的样式\n    CGContextSetLineJoin(ctx, kCGLineJoinRound);\n    /**  第1根线段  **/\n    // 设置颜色\n    CGContextSetRGBStrokeColor(ctx, 1, 0, 0, 1);\n    // 设置一个起点\n    CGContextMoveToPoint(ctx, 10, 10);\n    // 添加一条线段到(100, 100)\n    CGContextAddLineToPoint(ctx, 100, 100);\n    // 渲染一次\n    CGContextStrokePath(ctx);\n    /**  第2根线段  **/\n    // 设置颜色\n    CGContextSetRGBStrokeColor(ctx, 0, 0, 1, 1);\n    // 设置一个起点\n    CGContextMoveToPoint(ctx, 200, 190);\n    // 添加一条线段到(150, 40)\n    CGContextAddLineToPoint(ctx, 150, 40);\n    CGContextAddLineToPoint(ctx, 120, 60);\n    // 3.渲染显示到view上面\n    CGContextStrokePath(ctx);\n}\n```\n\n## 构建缓存时选用NSCache而非NSDictionary\n当系统资源将要耗尽时，NSCache可以自动删减缓存。如果采用普通的字典，那么就要自己编写挂钩，在系统发出“低内存”通知时手动删减缓存，NSCache会先删减“最久未使用”的对象。\n\nNSCache不会拷贝键，而是会保留它。此行为用NSDictionary也可以实现，但是需要编写比较复杂的代码。NSCache对象不拷贝键的原因在于：很多时候，键都是由不支持拷贝操作的对象来充当的。因此，NSCache对象不会自动拷贝键，所以说，在键不支持拷贝操作的情况下，该类用起来比字典方便。\n\nNSCache是线程安全的，NSDictionary不是。在开发者自己不编写加锁代码的前提下，多个线程可以同时访问NSCache。对缓存来说，线程安全很重要，因为开发者可能要在某个线程中读取数据，此时如果发现缓存里找不到指定的键，那么就要下载该键对应的数据了。\n\n如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种“重新计算起来很费事”的数据，才值得放入缓存，比如那些需要从网络获取从磁盘读取的数据。\n\n## Runtime机制\n\b详情见[【iOS】Runtime详解](https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E8%AF%A6%E8%A7%A3/)\n\n## Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\nRunLoop是一个让线程能随时处理事件但不退出的机制。RunLoop实际上是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行EventLoop的逻辑。线程执行了这个函数后，就会一直处于这个函数内部“接受消息->等待->处理”的循环中，知道循环结束（比如传入quit的消息），函数返回。让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。\n\nOSX/iOS系统中，提供了两个这样的对象：NSRunLoop和CFRunLoopRef。CFRunLoopRef是在CoreFoundation框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。NSRunLoop是基于CFRunLoopRef的封装，提供了面向对象的API，但是这些API不是线程安全的。\n\n线程和RunLoop之间是一一对应的，其关系是保存在一个全局的Dictionary里。线程刚创建时并没有RunLoop，如果你不主动获取，那它一直都不会有。RunLoop的创建是发生在第一次获取时，RunLoop的销毁是发生在线程结束时。你只能在一个线程的内部获取其RunLoop（主线程除外）。\n\n系统默认注册了5个RunLoop的Mode：\n1. `kCFRunLoopDefaultMode`：App的默认Mode，通常主线程是在这个Mode下运行的。\n2. `UITrackingRunLoopMode`：界面跟踪Mode，用于ScrollView追踪触摸滑动，保证界面滑动时不受其他Mode影响。\n3. `UIInitializationRunLoopMode`：在刚启动App时进入的第一个Mode，启动完成后不再使用。\n4. `GSEventReceiveRunLoopMode`：接受系统事件的内部Mode，通常用不到。\n5. `kCFRunLoopCommonModes`：这是一个占位的Mode，没有实际作用。\n\nRunLoop的四个作用：\n1. 使程序一直运行接受用户输入\n2. 决定程序在何时应该处理哪些Event\n3. 调用解耦\n4. 节省CPU时间\n\n主线程的RunLoop默认是启动的。iOS的应用程序里面，程序启动后会有一个如下的main()函数：\n``` objc\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n```\n\n参考文章：https://blog.csdn.net/potato512/article/details/51455728\n\n## \b临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\n\n产生死锁的四个必要条件：\n1. 互斥条件：一个资源每一次只能被一个进程使用。\n2. 请求与保持条件：一个进程因请求资源阻塞时，对已获得的资源保持不放。\n3. 不剥夺条件：进程已获得的资源，在未使用完之前，不能进行强制剥夺。\n4. 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。\n\n## 动画掉帧，CADisPlayLink， Core graphics\n使用[KMCGeigerCounter](https://github.com/kconner/KMCGeigerCounter)检测动画掉帧问题。\n\nCADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的CADisplayLink对象，把它添加到一个RunLoop中，并给它提供一个target和selector在屏幕刷新的时候调用。另外CADisplayLink不能被继承。frameInterval属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60hz也就是每秒60次，如果将frameInterval设为2那么就会两帧调用一次，也就是变成了每秒刷新30次。\n\n我们通过pause属性开控制CADisplayLink的运行。当我们想结束一个CADisplayLink的时候，应该调用`invalidate`从RunLoop中删除并删除之前绑定的target和selector，另外CADisplayLink不能被继承。\n\niOS设备的屏幕刷新率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。\n\nNSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，RunLoop如果在阻塞状态，触发时间就会推迟到下一个RunLoop周期。并且NSTimer新增了tolerance属性，让用户可以设置可以容忍触发的时间的延迟范围。\n\nCADisplayLink使用场合相对专一，适合做UI的不停绘制，比如自定义动画引擎或则视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用CADisplayLink比起用NSTimer的好处就是我们不需要在格外关系屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。\n\n注意：\n通常来讲：iOS设备的刷新频率是60Hz也就是每秒60次。那么每一次刷新的时间就是1/60秒（大概16.7毫秒）。当我们得frameInterval值为1的时候我们需要保证的是CADisplayLink调用`target`的函数计算时间不应该大于16.7，否则就会出现严重的丢帧现象。\n\n在mac应用中我们使用的不是CADisplayLink而是CVDisplayLink它是基于C接口的用起来配置有些麻烦但是用起来还是很简单的。\n\n## 使用ARC是否会出现野指针，为什么？\n会出现野指针，在定义block的时候，是将block内存分配在堆上的。当在函数作用范围外的时候，block的内存会被回收释放，就会生成野指针，这时候去掉用block，就会crash。\n## 如何让异步方法进行二次封装让其同步执行\n可以用dispatch_group_async，dispatch_group_notify。\n## 为什么这样定义单例？\n``` objc\nstatic HLTestObject *instance = nil;\n+ (instancetype)sharedInstance\n{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[[self class] alloc] init];\n    });\n    return instance;\n}\n```\n为什么使用GCD去创建单例，GCD中的dispatch_once函数只调用一次，多线程若有两个线程先后去执行到dispatch_once这个地方，则先执行到的回去调用，后执行的就不会调用了。\n\n为什么要让对象指针static，多线程情况下，因为dispatch_once只执行一次，除了第一个执行的，之后的线程都不执行，直接返回对象指针，若此时指针是临时变量，则会导致返回一个空指针，若为static 则返回的永远是同一个又第一个执行的生成的对象。\n## 如何给按钮画边框\n``` objc\nringButton.tintColor = [UIColor colorWithRed:0.000 green:0.537 blue:0.506 alpha:1];\n[ringButton.layer setMasksToBounds:YES];\n[ringButton.layer setCornerRadius:8.0];\n[ringButton.layer setBorderWidth:1.0];\nCGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\nCGColorRef colorref = CGColorCreate(colorSpace, (CGFloat[]){0.000,0.537,0.506,1});\n[ringButton.layer setBorderColor:colorref];\n```\n## Socket和Http的区别，和TCP的区别\n### Socket套接字\n套接字（Socket）是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议、本地主机的IP地址、本地进程的协议端口、远程主机的IP地址、远程进程的协议端口。\n\n应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序提供并发服务的问题。多个TCP连接或多个应用程序可能需要通过一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字（Socket）接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。\n\n套接字之间的连接过程分为三个步骤：服务器监听、客户端请求、连接确认。\n服务器监听：服务器端套接字并不定位具体的客户端套接字，而是出于等待连接的状态，实时监控网络状态，等待客户端的链接请求。\n\n客户端请求：指客户端的套接字提出链接请求，要链接的目标是服务端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器套接字，指出服务器端套接字的地址和端口，然后就向服务端套接字提出链接请求。\n\n连接确认：当服务器端套接字监听到或则说收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务端套接字的描述发送给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接受其他客户端套接字的链接请求。\n\n创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当时使用TCP协议进行连接时，该Socket连接就是一个TCP连接。\n\n若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。\n\nTCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输层的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、TCP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作为应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”\n## OC对象模型\n对象是OC中基本构造单元（building block），用于存储和传递数据。类和对象的最终实现都是一种数据结构。可以完整的类应该包括类方法、实例方法和成员变量（实例变量），每个对象都包括一个isa（is a class）指针指向类对象（运行时方法发送给对象消息，才确定类别并调用相应的方法实现），元类对象中的方法列表是类方法（+，class methods）。\n## HTTPS和HTTP的区别\n1. HTTPS是加密传输协议，HTTP是明文传输协议\n2. HTTPS需要用到SSL证书，而HTTP不用\n3. HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO\n4. HTTPS标准端口443，HTTP标准端口90\n5. HTTPS基于传输层，HTTP基于应用层\n6. HTTPS在浏览器显示绿色安全锁，HTTP没有显示\n\n## 使用atomic一定是线程安全的吗？\n不是的。\nnonatomic的内存管理语义是非原子性的，非原子性的操作本来就是线程不安全的，而atomic的操作是原子性的，但是并不意味着它是线程安全的，它会增加正确的几率，能够更好的避免线程的错误，但是它仍然是线程不安全的。\n\n当使用atomic时，虽然对属性和读和写是原则性的，但是仍然可能出现线程错误：当线程A进行写操作，这时其他线程的读或则写操作会因为该操作而等待。当A线程的写操作结束后，B线程进行写操作，然后有线程C在A线程读操作前release了该属性，那么还会导致程序崩溃。所以仅仅使用atomic并不会使得线程安全，我们还要为线程添加lock来确保线程的安全。\n\n也就是要注意：<b>atomic所说的线程安全只是保证了getter和setter存取方法的线程安全，并不能保证整个对象是线程安全的。</b>如下例所示：\n``` objc\n@property(atomic,strong)NSMutableArray *arr;\n```\n如果一个线程循环的读数据，一个线程循环写数据，那么肯定会产生内存问题，因为这和setter、getter没有关系。如使用`[self.arr objectAtIndex:index]`就不是线程安全的。好的解决方案就是加锁。\n\n<b>探讨一下Objective-C中几种不同方式实现的锁</b>，在这之前先构建一个测试类，假设它是我们的一个共享资源，method1和method2是互斥的，代码如下：\n``` objc\n@implementation TestObj\n\n- (void)method1 \n{\n    NSLog(@\"%@\",NSStringFromSelector(_cmd));\n}\n- (void)method2\n{\n    NSLog(@\"%@\",NSStringFromSelector(_cmd));\n}\n@end\n```\n\n### 使用NSLock实现的锁\n``` objc\n// 主线程中\nTestObj *ojc = [[TestObj alloc] init];\nNSLock *lock = [[NSLock alloc] init];\n\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    [lock lock];\n    [ojc method1];\n    sleep(10);\n    [lock unlock];\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    [lock lock];\n    [ojc method2];\n    [lock unlock];\n});\n```\n根据打印的结果已经看到，线程一锁住之后，线程二回一直等待线程一走完并将锁设置为unlock后，才会执行method2中的方法。\n\nNSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate两个方法，前一个方法会尝试加锁，如果锁不可用（已经被锁住），并不会阻塞线程，并返回NO。lockBeforeDate方法会在指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。\n\n### 使用synchronized关键字构建的锁\n当然在Objective-C中你还可以用@synchronized指令快速的实现锁：\n``` objc\nTestObj *ojc = [[TestObj alloc] init];\nNSLock *lock = [[NSLock alloc] init];\n\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    @synchronized(ojc){\n        [ojc method1];\n        sleep(10);\n    }\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    @synchronized(ojc){\n        [ojc method2];\n    }\n});\n```\n\n@synchronized指令使用的obj为该锁的唯一标识，只有当标识相同时，才会满足互斥，如果线程二中的@synchronized(obj)改为@synchronized(other)，线程二就不会被阻塞，@synchronized指令实现锁的优点就是我们不需要在代码中显式的创建锁对象，便可以实现锁的机制，但作为一种预防措施，@synchronized块会隐式的添加一个异常处理例程来保护代码，该处理例程会在异常抛出的时候自动释放互斥锁。所以如果不想让隐式的异常处理例程带来额外的开销，可以考虑使用锁对象。\n\n### 使用C语言的pthread_mutex_t实现的锁\n\n``` objc\nTestObj *ojc = [[TestObj alloc] init];\n__block pthread_mutex_t mutex;\npthread_mutex_init(&mutex,NULL);\n\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    pthread_mutex_lock(&mutex);\n    [ojc method1];\n    sleep(10);\n    pthread_mutex_unlock(&mutex);\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    pthread_mutex_lock(&mutex);\n    [ojc method2];\n    pthread_mutex_unlock(&mutex);\n});\n```\npthread_mutex_t定义在pthread.h中，需要引入`#import <pthread.h>`。\n\n### 使用GCD来实现的锁\n\n以上代码的多线程中已经使用到了GCD的dispatch_async方法，其实在GCD中也已经提供了一种信号机制，使用它我们也可以构建一把“锁”（本质意义上讲，信号量与锁是有区别的，具体差异参考信号量与互斥锁之间的区别）：\n``` objc\nTestObj *ojc = [[TestObj alloc] init];\ndispatch_semaphore_t semaphore = dispatch_semaphore_create(1);\n// 线程一\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n    [ojc method1];\n    dispatch_semaphore_signal(semaphore);\n});\n\n// 线程二\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    sleep(1);\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n    [ojc method2];\n    dispatch_semaphore_signal(semaphore);\n});\n```\n\n### 使用自旋锁OSSpinLock来实现的“锁”\n``` objc\n//主线程中\nTestObj *obj = [[TestObj alloc] init];\nOSSpinLock spinlock = OS_SPINLOCK_INIT;\n//线程1\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{\n    OSSpinLockLock(&spinlock);\n    [obj method1];\n    sleep(10);\n    OSSpinLockUnlock(&spinlock);\n});\n\n//线程2\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{\n    sleep(1);//以保证让线程2的代码后执行\n    OSSpinLockLock(&spinlock);\n    [obj method2];\n    OSSpinLockUnlock(&spinlock);\n});\n```\n\n参考链接：https://www.jianshu.com/p/e286d2907bf7","slug":"iOS高级开发面试题","published":1,"updated":"2022-05-19T03:13:11.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo30049l1l365abbhuz","content":"<h2 id=\"nil、Nil、NULL、NSNull的区别？\"><a href=\"#nil、Nil、NULL、NSNull的区别？\" class=\"headerlink\" title=\"nil、Nil、NULL、NSNull的区别？\"></a>nil、Nil、NULL、NSNull的区别？</h2><table><tr><td>Symbol</td><td>Value</td><td>Meaning</td></tr><tr><td>NULL</td><td>(void *)0</td><td>literal null value for C pointers</td></tr><tr><td>nil</td><td>(id)0</td><td>literal null value for Objective-C objects</td></tr><tr><td>Nil</td><td>(Class)0</td><td>literal null value for Objective-C classes</td></tr><tr><td>NSNull</td><td>[NSNull null]</td><td>singleton object used to represent null\n</td></tr></table>\n\n<h3 id=\"nil：对象为空\"><a href=\"#nil：对象为空\" class=\"headerlink\" title=\"nil：对象为空\"></a>nil：对象为空</h3><p>定义某一实例对象为空值。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSObject</span>* obj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;obj is nil&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;obj is not nil&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"Nil：类为空\"><a href=\"#Nil：类为空\" class=\"headerlink\" title=\"Nil：类为空\"></a>Nil：类为空</h3><p>定义一个类为空。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class someClass = Nil;</span><br><span class=\"line\">Class anotherClass = [<span class=\"built_in\">NSString</span> <span class=\"keyword\">class</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"NULL：基本数据对象指针为空\"><a href=\"#NULL：基本数据对象指针为空\" class=\"headerlink\" title=\"NULL：基本数据对象指针为空\"></a>NULL：基本数据对象指针为空</h3><p>用于C语言的各种数据类型的指针为空。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> *pointerToInt = <span class=\"literal\">NULL</span>; </span><br><span class=\"line\"><span class=\"type\">char</span> *pointerToChar = <span class=\"literal\">NULL</span>; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> TreeNode *rootNode = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NSNull\"><a href=\"#NSNull\" class=\"headerlink\" title=\"NSNull\"></a>NSNull</h3><p>集合对下那个无法包含nil作为其具体值，如NSArray、NSSet和NSDictionary。相应的，nil值使用一个特定的对象NSNull来表示。<code>NSNull</code>提供了一个单一实例用于表示对象属性中的的nil值。</p>\n<p>通常初始化NSArray对象，我们是这样的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@&quot;wang&quot;</span>, <span class=\"string\">@&quot;zz&quot;</span>, <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>当NSArray里遇到nil时，说明这个数组对象\b元素截止了，即NSArray只关注nil之前的对象，nil之后的对象会被抛弃，比如下面的写法，与上面的arr值是一样的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@&quot;wang&quot;</span>, <span class=\"string\">@&quot;zz&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"string\">@&quot;foogry&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p>如果要让nil后的元素不被抛弃就只能借助NSNull了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@&quot;wang&quot;</span>, <span class=\"string\">@&quot;zz&quot;</span>, [<span class=\"built_in\">NSNull</span> null], <span class=\"string\">@&quot;foogry&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>一句话总结Nil、nil、NSNull之间的区别就是：不管是NULL、Nil、nil，他们本质上都是一样的，都是(void *)0，只是写法不同。这样做的意义是区分不同的数据类型，比如你看到NULL就知道他是一个C指针，看到nil就知道这是一个Objective-C对象，看到Nil就知道这是一个Class类型的数据。</p>\n<h2 id=\"load和initialize\"><a href=\"#load和initialize\" class=\"headerlink\" title=\"load和initialize\"></a>load和initialize</h2><h3 id=\"load函数调用特点如下\"><a href=\"#load函数调用特点如下\" class=\"headerlink\" title=\"load函数调用特点如下\"></a>load函数调用特点如下</h3><p>当类被引用进项目的时候就会执行load函数（在main函数开始执行之前），与这个类是否被用到无关，每个类的load函数只会自动调用一次。由于load函数是系统自动加载的，因此不需要调用父类的load函数，否则父类load函数会执行多次。</p>\n<ul>\n<li>当父类和子类都实现load函数时，父类的load方法执行顺序要优于子类。</li>\n<li>当子类未实现load方法时，不会调用父类load方法。</li>\n<li>类中的load方法执行顺序要优先于类别（Category）。</li>\n<li>当有多个类别（Category）都实现了load方法，每个类load执行顺序与其在Compile Source出现的顺序一致。</li>\n</ul>\n<p>load调用时机比较早，当load调用时，其他类可能还没加载完成，运行环境不安全。</p>\n<p>load方法是线程安全的，它使用了锁，我们应该避免线程阻塞在load方法。</p>\n<h3 id=\"initialize函数调用特点如下\"><a href=\"#initialize函数调用特点如下\" class=\"headerlink\" title=\"initialize函数调用特点如下\"></a>initialize函数调用特点如下</h3><p>initialize在类或者其子类的第一个方法被调用前调用。即使类文件被引用进项目，但是没有使用，initialize不会被调用。由于是系统自动调用，也不需要再调用<code>[super initialize]</code>，否组父类的initialize会被调用多次执行。假如这个类放到代码中，而这段代码并没有被执行，这个函数是不会被执行的。</p>\n<ul>\n<li>父类的initialize方法会比子类先执行。</li>\n<li>当父类未实现initialize方法时，会调用父类initialize方法，子类实现initialize方法时，会覆盖initialize方法。</li>\n<li>当多个Category都实现了initialize方法，会覆盖类中的方法，只执行一个（会执行Compile Source列表中最后一个Category的initialize方法）。</li>\n</ul>\n<p>在initialize方法收到调用时，运行环境基本健全。</p>\n<p>initialize内部使用了锁，所以线程是安全的。但同时要避免阻塞线程，不要再使用锁。</p>\n<h3 id=\"分别在什么情况下使用？\"><a href=\"#分别在什么情况下使用？\" class=\"headerlink\" title=\"分别在什么情况下使用？\"></a>分别在什么情况下使用？</h3><h4 id=\"load\"><a href=\"#load\" class=\"headerlink\" title=\"+load\"></a>+load</h4><p>由于调用load方法时的环境很不安全，我们应该尽量减少load方法的逻辑。另一个原因是load方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在load方法中，load很常见的一个使用场景，交换两个方法的实现。</p>\n<p>比如MJRefresh中的一段代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"type\">void</span>)load</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(reloadData) method2:<span class=\"keyword\">@selector</span>(mj_reloadData)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(reloadRowsAtIndexPaths:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_reloadRowsAtIndexPaths:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(deleteRowsAtIndexPaths:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_deleteRowsAtIndexPaths:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(insertRowsAtIndexPaths:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_insertRowsAtIndexPaths:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(reloadSections:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_reloadSections:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(deleteSections:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_deleteSections:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(insertSections:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_insertSections:withRowAnimation:)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">void</span>)exchangeInstanceMethod1:(SEL)method1 method2:(SEL)method2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    method_exchangeImplementations(class_getInstanceMethod(<span class=\"keyword\">self</span>, method1), class_getInstanceMethod(<span class=\"keyword\">self</span>, method2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"initialize\"><a href=\"#initialize\" class=\"headerlink\" title=\"+initialize\"></a>+initialize</h4><p>initialize方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如NSMutableArray这种类型的实例化依赖于Runtime的消息发送，所以显然无法在编译器初始化：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In Person.m</span></span><br><span class=\"line\"><span class=\"comment\">// int类型可以在编译期赋值</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> someNumber = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSMutableArray</span> *someArray;</span><br><span class=\"line\">+ (<span class=\"type\">void</span>)initialize &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == [Person <span class=\"keyword\">class</span>]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不方便编译期复制的对象在这里赋值</span></span><br><span class=\"line\">        someArray = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"load和initialize的共同点\"><a href=\"#load和initialize的共同点\" class=\"headerlink\" title=\"load和initialize的共同点\"></a>load和initialize的共同点</h3><ul>\n<li>如果父类和子类都被调用，父类的调用一定在子类之前。</li>\n</ul>\n<h2 id=\"线程与进程的区别和联系？\"><a href=\"#线程与进程的区别和联系？\" class=\"headerlink\" title=\"线程与进程的区别和联系？\"></a>线程与进程的区别和联系？</h2><p>简单概括下线程与进程之间的区别和联系：</p>\n<ul>\n<li>一个程序至少\b要有一个进程，一个进程至少要有一个线程。</li>\n<li>进程是\b资源分配的最小独立单元，进程是具有\b一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。</li>\n<li>线程是进程的一个分支，是进程的实体，是CPU调度和分配的基本单元，它是比进程更小的能独立运行的基本单位，线程自己基本不拥有系统资源，只拥有一点在运行中必不可少的资源（计数器、栈、寄存器），但是它可以与\b同属一个进程的其他线程共享线程所拥有的全部资源。</li>\n<li>线程和进程的主要区别在于他们是不同的操作\b系统资源的管理方式。进程有独立的\b地址空间，一个进程崩溃以后，在保护模式下不会对其他进程\b造成影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉以后就等于整个进程死掉，所以多进程的程序比多线线程的程序要健壮，但在进程切换时，耗费资源较大，效率要差些。</li>\n<li>但对于一些要求同时进行并\b且又要共享某些变量的并发操作，只能用线程，不能\b用进程。</li>\n</ul>\n<h2 id=\"assign、retain、copy、weak、strong的区别以及nonatomic的含义\"><a href=\"#assign、retain、copy、weak、strong的区别以及nonatomic的含义\" class=\"headerlink\" title=\"assign、retain、copy、weak、strong的区别以及nonatomic的含义\"></a>assign、retain、copy、weak、strong的区别以及nonatomic的含义</h2><p>首先从ARC\b和非ARC层面上可以分为两部分，第一部分是assign、retain、copy，第二部分是\bweak、strong。</p>\n<p>\b首先看看第一部分assign、retain、copy的含义：</p>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h3><p>assign一般用来修饰基本的数据类型，包括基本数据类型（NSInteger、CGFloat）和C数据类型（int、float、double、char）等。\b因为assign声明的属性不会增加引用计数，也就是说声明的属性释放后，就没有了，及时其他\b对用用到\b了他也无法留住他，只会crash。但是即使是释放了，指针却还在，成为了野指针，如果新的对象被分配到了这个内存地址上，也会crash。所一般只能修饰基本数据类型，因为他会\b被分配在栈上，而栈会由系统自动处理，不会造成野指针。</p>\n<h3 id=\"retain\"><a href=\"#retain\" class=\"headerlink\" title=\"retain\"></a>retain</h3><p>与assign相对，我们要解决\b对象\b被其他对象引用后释放造成的问题，就要用retain来声明。retain声明后的\b对象会更改引用计数，那么每次被引用，引用计数都会+1，释放后都会-1，及时这个对象本身被释放了，只要还有对象在引用它，就会持有不会造成什么问题，只有当引用计数为0时候，就会被dealloc构析函数回收内存了。</p>\n<h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>最常见的使用copy修饰应该是NSString。copy与retain的区别在于retain的引用是拷贝指针地址，copy是拷贝对象本身，也就是说retain是浅复制，copy是深复制。<b>如果是浅复制，当修改对象时，都会被修改，而深复制不会。</b>之所以在NSString这类有可变类型的对象上使用，是因为他们有可能和对应的可变类型如NSMutableString之间进行赋值操作，为了防止内容被改变，使用copy去深复制一份。copy工作由copy方法执行，此属性只对那些实现了NSCopying协议的对象有效。</p>\n<p>以上三个可以在MRC中使用，但是weak和strong就只能在ARC中使用，也就是自动引用计数，这时就不能手动去进行retain、release等操作了，ARC会帮我们完成这些工作。</p>\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>weak其实类似于assign，叫弱引用，也就是不增加引用计数。一般只有在防止循环引用时使用，比如父类引用了子类，子类又去引用父类。IBOutlet、Delegate一般用的就是weak，这是因为它们会在类外部被调用，防止循环引用。</p>\n<h3 id=\"strong\"><a href=\"#strong\" class=\"headerlink\" title=\"strong\"></a>strong</h3><p>相对的，strong就类似retain了，叫强引用，会增加引用计数，类内部使用的属性一般都是strong修饰的，现在ARC已经基本代替了MRC，所以我们最常见的就是strong了。</p>\n<h3 id=\"nonatomic\"><a href=\"#nonatomic\" class=\"headerlink\" title=\"nonatomic\"></a>nonatomic</h3><p>在修饰属性时，我们往往会加上一个nonamatic，这又是什么呢？它的名字叫非原子访问。对应有atomic，是原子访问。我们知道使用多线程为了避免在写操作时同时进行写导致问题，经常会对要写的对象进行加锁，也就是同一时刻只允许一个线程去操作它。如果一个属性是由atomic修饰的，那么系统就会对线程进行保护，防止多个写操作同时进行。这有好处，也有坏处，那就是消耗系统资源，所以对于iPhone这种小型设备，如果不是进行多线程的写操作，就可以使用nonatomic，取消线程保护，提高性能。</p>\n<h2 id=\"定义一个NSString类类型属性时，为什么使用copy不用strong？\"><a href=\"#定义一个NSString类类型属性时，为什么使用copy不用strong？\" class=\"headerlink\" title=\"定义一个NSString类类型属性时，为什么使用copy不用strong？\"></a>定义一个NSString类类型属性时，为什么使用copy不用strong？</h2><p>NSString类型属性是一个指针，定义成copy，操作是拷贝一份等同的对象，这个指针指向新生成的拷贝对象。当使用copy时，这个拷贝的对象无论是拷贝自NSMutableString还是NSString结构都是不可变的NSString。而如果是用strong，则指向一个字符串对象，若指向的是一个NSMutableString，则当指向的对象改变时，属性值也会发生相应改变，导致错误，因为是一个不可变的字符串。</p>\n<h2 id=\"引用多线程时会出现什么问题，应如何避免问题的发生？\"><a href=\"#引用多线程时会出现什么问题，应如何避免问题的发生？\" class=\"headerlink\" title=\"引用多线程时会出现什么问题，应如何避免问题的发生？\"></a>引用多线程时会出现什么问题，应如何避免问题的发生？</h2><p>多线程容易导致资源争抢，发生死锁现象。死锁通常是一个线程锁定一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在相互等待，造成了无法执行的情况。</p>\n<p>避免死锁的一个通用的经验法则是：当几个线程都要访问共享资源A、B、C时，保证使每个线程都按照同样的顺序去访问它们，比如先访问A，在访问B和C。</p>\n<p>采用GCD中的栅栏方法，用并行队列去装载事件并异步去执行。</p>\n<h2 id=\"循环引用是如何产生的，如何解决循环引用？\"><a href=\"#循环引用是如何产生的，如何解决循环引用？\" class=\"headerlink\" title=\"循环引用是如何产生的，如何解决循环引用？\"></a>循环引用是如何产生的，如何解决循环引用？</h2><p>两个类中有属性分别为彼此的实例，这样就会引发循环引用。</p>\n<p>使用block、NSTimer时也容易导致循环引用，设置一个引用为弱引用可以解决强引用循环。</p>\n<h2 id=\"NSTimer使用中的注意事项\"><a href=\"#NSTimer使用中的注意事项\" class=\"headerlink\" title=\"NSTimer使用中的注意事项\"></a>NSTimer使用中的注意事项</h2><p>在类中定义定时器并把目标对象设置为self时，NSTimer实例会保存此实例，但定时器是用在类中用实例变量存放的，所以此实例也保留了定时器，这就造成了循环引用。除非调用invalidate方法并把定时器设置为nil，或则系统回收实例，才能打破循环引用。如果无法确保stop一定被调用，就极易造成内存泄漏。</p>\n<p>使用block可以防止NSTimer导致的内存泄漏。</p>\n<p>在NSTimer分类中定义方法，让NSTimer的target为NSTimer实例本身，然后block从实例中copy一份，在NSTimer中定义方法去执行拷贝block。</p>\n<h2 id=\"App的生命周期以及运行状态\"><a href=\"#App的生命周期以及运行状态\" class=\"headerlink\" title=\"App的生命周期以及运行状态\"></a>App的生命周期以及运行状态</h2><p>状态：未运行、未激活、激活、后台、挂起。</p>\n<p>未运行：程序未启动</p>\n<p>未激活：程序在前台运行，不过没有接受到事件</p>\n<p>激活：程序在前台运行且收到了事件</p>\n<p>后台：程序在后台而且能执行代码，大多程序进入这个状态后会在这个状态停留一会，时间到之后会进入挂起状态</p>\n<p>挂起：程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中，系统内存低时，系统就把挂起的程序清除掉</p>\n<h2 id=\"栈、堆、静态区域的区别\"><a href=\"#栈、堆、静态区域的区别\" class=\"headerlink\" title=\"栈、堆、静态区域的区别\"></a>栈、堆、静态区域的区别</h2><p>OC中，非对象的变量都存在栈中，对象都存在堆中，静态区域的内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都在，主要存放静态数据、全局数据和常量。</p>\n<p>栈区：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存效率高，内存容量有限。</p>\n<p>堆区：OC对象存储于堆中，当对象的引用计数为0时自动释放该对象。</p>\n<h2 id=\"子试图超出父视图部分能看到吗？超出的部分有什么影响？\"><a href=\"#子试图超出父视图部分能看到吗？超出的部分有什么影响？\" class=\"headerlink\" title=\"子试图超出父视图部分能看到吗？超出的部分有什么影响？\"></a>子试图超出父视图部分能看到吗？超出的部分有什么影响？</h2><p>子视图超出父视图的部分能看到，但是超出部分不能响应事件。<br>想让超出部分响应事件，就该写父视图的hitTest方法。判断触碰区是否在子视图内，如果在子视图内，则返回子视图。让子视图去响应事件。</p>\n<h2 id=\"respond链是如何响应的，响应顺序是什么样的？\"><a href=\"#respond链是如何响应的，响应顺序是什么样的？\" class=\"headerlink\" title=\"respond链是如何响应的，响应顺序是什么样的？\"></a>respond链是如何响应的，响应顺序是什么样的？</h2><p>在iOS系统中，能够响应并处理事件的对象称之为responder object，UIResponder是所有responder对象的基类，在UIResponder类中定义了处理各种事件，包括触摸事件、运动事件和远程控制事件的编程接口，UIApplication、UIViewController、UIVIew和所有继承自UIVIew的UIKit类（包括UIWindow继承自UIVIew）都直接或间接的继承自UIResponder，所以它们的实例都是responder object对象，都实现了上述4个方法。UIResponder中的默认实现是什么都不做，但UIKit中UIResponder的直接子类（UIView，UIVIewController…）的默认实现是将事件延着responder chain继续向上传递到下一个responder，即nextResponder。所以在定制UIView子类的上述事件处理方法时，如果需要将事件传递给next responder，可以直接调用super的对应事件处理方法，super的对应方法将事件传递给next responder，即使用<code>[super touchesBegan:touches withEvent:event];</code>，不建议直接向nextResponder发送消息，这样可能会漏掉父类对这一事件的其他处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.nextResponder touchesBegan:touches withEvent:event];</span><br></pre></td></tr></table></figure>\n<p>另外在定制UIVIew子类的事件处理方法时，如果其中一个方法没有调用super的对应方法，则其他方法也需要重写，不使用super的方法，否则事件处理流程会很混乱。<br><strong>responder chain是一系列连接的responder对象，通过responder对象可以将处理事件的责任传递给下一个，更高级的对象，即当前responder对象的nextResponder。</strong></p>\n<p>iOS中responder chain的结构为：</p>\n<img src=\"/posts/4ea43a8072083e39/responder_chain.webp\" class=\"\" title=\"responder chain\">\n<p>第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现<code>- (BOOL)canBecomeFirstResponder</code>方法并返回YES可以使当前View成为第一响应者，或则调用View的<code>becomeFirstResponder</code>方法也可以，例如当UITextField调用该方法时，会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>\n<p>iOS系统在处理事件时，通过UIApplication对象和每个UIWindow对象的<code>sendEvent:</code>方法将事件分发给具体处理此事件的responder对象（对于触摸事件为hitTest view，其他事件为first responder），当具体处理此事件的responder不处理此事件时，可以通过responder chain交给上一级处理。</p>\n<p>如果hit-test view或first responder不处理此事件，则将事件传递给其nextResponder处理，若有UIViewController对象则传递给UIViewController，传递给其superView。</p>\n<p>如果view的viewController也不处理事件，则viewController将事件传递给其管理view的superView。</p>\n<p>视图层级结构的顶级为UIWindow对象，如果window仍不处理此事件，传递给UIApplication。</p>\n<p>若UIApplication对象不处理此事件，则事件被丢弃。</p>\n<p>使用响应链，能够让一条链上的多个对象对同一个事件做出响应。每一个应用有一个响应链，我们得视图结构是一个N叉树（一个视图可以有多个子视图，一个子视图同一时刻只有一个父视图），而每一个继承自UIResponder的对象都可以在这个N叉树中成为一个节点。当叶节点成为最高响应者的时候，从这个叶节点开始往其父节点开始追溯出一条链，那么对于这一个叶节点来说，这一条链就是当前的响应者链。响应者链将系统捕获到的UIEvent与UITouch从叶节点层层向上分发，期间可以选择停止分发，也可以继续向上分发。一句话就是事件传递过程。</p>\n<h2 id=\"GCD中栅栏机制\"><a href=\"#GCD中栅栏机制\" class=\"headerlink\" title=\"GCD中栅栏机制\"></a>GCD中栅栏机制</h2><p>栅栏函数只能用在调度并发队列中，不能使用在全局并发队列中。</p>\n<ol>\n<li>实现高效率的数据库访问和文件访问</li>\n<li>避免数据竞争<br>dispatch_barrier_async函数会等待追加到并行队列上的并行执行的处理全部结束之后，再将制定的处理追加到该并行队列中。然后再由dispatch_barrier_async函数追加的处理执行完毕后，并行队列才恢复为一般的动作，追加到该并行队列的处理又开始执行。</li>\n</ol>\n<h2 id=\"Notification响应顺序\"><a href=\"#Notification响应顺序\" class=\"headerlink\" title=\"Notification响应顺序\"></a>Notification响应顺序</h2><p>NSNOtification使用的是同步操作。即如果你在程序中的A位置post了一个NSNotification，在B注册了一个observer，通知发出后，必须等到B位置的通知回调执行完以后才能返回到A处继续往下执行。如果想让NSNotification的post处和observer处异步执行，可以通过NSNotificationQueue实现。</p>\n<p>多线程应用中，Notification在哪个线程中post，就在哪个线程中被转发，而不一定是在注册观察者的那个线程中。Notification的发送与接收处理都是在同一个线程中。</p>\n<p>为了顺应语法的变化，apple从iOS4之后提供了带有block的NSNotification。</p>\n<p>一种重定向的实现思路是自定义一个通知队列（注意，不是NSNotificationQueue对象，而是一个数组），让这个队列去维护那些我们需要重定向的Notification。我们仍然是像平常一样去注册一个通知的观察者，当Notification来了时，先看看post这个Notification的线程是不是我们所期望的线程，如果不是，则将这个Notification存储到我们得队列中，并发送一个信号（signal）到期望的线程中，来告诉这个线程需要处理一个Notification。指定的线程在收到信号后，将Notification从队列中移除，并进行处理。</p>\n<p>当我们注册一个观察者时，通知中心会持有观察者的一个弱引用，来确保观察者是可用的。主线程调用dealloc操作会让observer对象的引用计数减为0，这时对象会释放掉。后台线程发送一个通知，如果此时observer还未被释放，则会用其转出消息，并执行回调方法。而如果在回调执行的过程中对象被释放了，就会出现上面的问题。</p>\n<h2 id=\"Core-Data、SQLite是如何使用的？\"><a href=\"#Core-Data、SQLite是如何使用的？\" class=\"headerlink\" title=\"Core Data、SQLite是如何使用的？\"></a>Core Data、SQLite是如何使用的？</h2><p>Core Data是一个功能强大的层，位于SQLite数据库之上，它避免了SQL的复杂性，能让我们以更自然的方式与数据库进行交互。Core Data将数据库进行转换为OC对象（托管对象）来实现，这样无需任何SQL知识就能操作他们。</p>\n<p>Core Data能将应用程序中的对象直接保存到数据库中，无需进行复杂的查询，也无需确保对象的属性名和数据库字段名对应，这一切由Core Data完成。</p>\n<h2 id=\"归档是如何使用的？\"><a href=\"#归档是如何使用的？\" class=\"headerlink\" title=\"归档是如何使用的？\"></a>归档是如何使用的？</h2><p>归档是指某种格式来保存一个或多个对象，以便以后还原这些对象的过程。</p>\n<p>只要在类中实现的每个属性都是标量（如int或float）或都是符合NSCoding协议的某个类的实例，就可以对你的对象进行完整归档。</p>\n<h2 id=\"对Http的理解，socket编程的套路\"><a href=\"#对Http的理解，socket编程的套路\" class=\"headerlink\" title=\"对Http的理解，socket编程的套路\"></a>对Http的理解，socket编程的套路</h2><p>HTTP协议是基于TCP连接的，是应用层协议，主要解决如何包装数据。Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</p>\n<p>HTTP连接：短连接，客户端向服务器发送一次请求，服务器响应后连接断开，节省资源。服务器不能主动给客户端响应（除非采用HTTP长连接技术），iPhone主要使用NSURLConnection。</p>\n<p>Socket连接：长连接，客户端跟服务器端直接使用Socket进行连接，没有规定连接后断开，因此客户端和服务器端保持连接通道，双方可以主动发送数据，一般多用于游戏。Socket默认连接超时时间是30秒，默认大小是8k（理解为一个数据包大小）。</p>\n<h2 id=\"NSUserDefault使用的时候需要注意什么？\"><a href=\"#NSUserDefault使用的时候需要注意什么？\" class=\"headerlink\" title=\"NSUserDefault使用的时候需要注意什么？\"></a>NSUserDefault使用的时候需要注意什么？</h2><p>NSUserDefault非常好用，并不需要用户在程序中设置NSUserDefault的全局变量，需要在哪里使用NSUserDefault的数据，那么就在哪里创建一个NSUserDefault对象，然后进行读或写操作。</p>\n<p>针对同一个关键字对应的对象或者数据，可以对它进行重写，重写之后关键字就对应新的对象或者数据，旧的对象或者数据会自动清理。</p>\n<p>注意一点：只能存储基本对象，如果是自定义的对象，需要转换成NSData存储进去才可以。</p>\n<p>iOS中本地存储数据简单的说有三种方式：数据库、NSUserDefault和文件。</p>\n<p>NSUserDefault用于存储数据量小的数据，例如用户配置。并不是所有的东西都能往里放，只支持：NSString、NSNumber、NSData、NSMArray、NSDictionary。但是如果把一个自定义的类存到一个NSArray里，然后再存到NSUserDefault里也是不能成功的。</p>\n<h2 id=\"ARC的底层实现机制\"><a href=\"#ARC的底层实现机制\" class=\"headerlink\" title=\"ARC的底层实现机制\"></a>ARC的底层实现机制</h2><p>通过retainCount的机制来决定对象是否需要释放。每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n<p>ARC相对于MRC，不是编译时添加retain、release、autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。在编译期，ARC用的是更底层的C接口实现的retain、release、autorelease，这样做新能更好，也是为什么不能在ARC环境下手动retain、release、autorelease，同时对同一上下文的同一对象的成对retain、release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。</p>\n<ol>\n<li>ARC会自动执行retain、release、autorelease等操作，在ARC下不能主动调用这些内存管理方法。</li>\n<li>ARC在调用这些方法时，并不通过Objective-C的消息转发机制，而是直接调用其底层C语言版本API，这样做新能更好，因为保留及释放操作需要频繁的执行，直接调用其底层的函数节省很多CPU周期，如ARC会调用与retain等价的底层函数objc_retain。</li>\n<li>在使用ARC时必须遵循方法命名规则，alloc、new、copy、mutablecopy。ARC通过命名约定将内存管理标准化。</li>\n<li>ARC管理对象生命周期的办法是：在合适的地方“插入”、“保留”及“释放”操作。在方法中创建的对象，在方法中自动release；类中的对象，在dealloc方法中释放。</li>\n<li>ARC下，变量的内存管理语义可以通过修饰符指明。</li>\n<li>ARC只负责管理Objective-C对象的内存，CoreFoundation对象不归ARC管理。</li>\n</ol>\n<h2 id=\"滑动TableView视图的时候NSTimer会不会工作？\"><a href=\"#滑动TableView视图的时候NSTimer会不会工作？\" class=\"headerlink\" title=\"滑动TableView视图的时候NSTimer会不会工作？\"></a>滑动TableView视图的时候NSTimer会不会工作？</h2><ol>\n<li>默认情况下NSTimer不能在后台正常工作。</li>\n<li>滑动UI是NSTimer不能工作。</li>\n</ol>\n<p>这其实就是Runloop的mode再做怪。<br>Runloop可以理解为cocoa下的一种消息循环机制，用来处理各种消息事件，我们在开发的时候并不需要手动去创建一个runloop，因为框架为我们创建了一个默认的runloop，通过<code>[NSRunloop currentRunloop]</code>我们可以得到一个当前线程下面对应的runloop对象，不过我们需要注意的是不同的runloop之间消息的通知方式。</p>\n<p>在开启一个NSTimer实质上是在当前的runloop中注册一个新的事件源，而当scrollView滚动的时候，当前MainRunloop是处于UITrackingRunLoopMode的模式下，在这个模式下，是不会处理NSDefaultRunLoopMode的消息（因为RunLoop Mode不一样），要想在scrollView滚动的同时也接受其他runloop的消息，我们需要改变两者之间的runloop mode。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>\n<p>简单的说就是NSTimer不会开启新的进程，只是在runloop里注册了一下，runloop每次loop时都会检测这个timer，看是否可以触发。当runloop在A mode，而timer注册在B mode时就无法去检测这个timer，所以需要把NSTimer也注册到A mode，这样就可以被检测到。</p>\n<h2 id=\"绘制图形\"><a href=\"#绘制图形\" class=\"headerlink\" title=\"绘制图形\"></a>绘制图形</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawRect:(CGRect)rect&#123;</span><br><span class=\"line\">    // Drawing code</span><br><span class=\"line\">    // 1.获得图形上下文</span><br><span class=\"line\">    CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">    // 2.拼接图形(路径)</span><br><span class=\"line\">    // 设置线段宽度</span><br><span class=\"line\">    CGContextSetLineWidth(ctx, 10);</span><br><span class=\"line\">    // 设置线段头尾部的样式</span><br><span class=\"line\">    CGContextSetLineCap(ctx, kCGLineCapRound);</span><br><span class=\"line\">    // 设置线段转折点的样式</span><br><span class=\"line\">    CGContextSetLineJoin(ctx, kCGLineJoinRound);</span><br><span class=\"line\">    /**  第1根线段  **/</span><br><span class=\"line\">    // 设置颜色</span><br><span class=\"line\">    CGContextSetRGBStrokeColor(ctx, 1, 0, 0, 1);</span><br><span class=\"line\">    // 设置一个起点</span><br><span class=\"line\">    CGContextMoveToPoint(ctx, 10, 10);</span><br><span class=\"line\">    // 添加一条线段到(100, 100)</span><br><span class=\"line\">    CGContextAddLineToPoint(ctx, 100, 100);</span><br><span class=\"line\">    // 渲染一次</span><br><span class=\"line\">    CGContextStrokePath(ctx);</span><br><span class=\"line\">    /**  第2根线段  **/</span><br><span class=\"line\">    // 设置颜色</span><br><span class=\"line\">    CGContextSetRGBStrokeColor(ctx, 0, 0, 1, 1);</span><br><span class=\"line\">    // 设置一个起点</span><br><span class=\"line\">    CGContextMoveToPoint(ctx, 200, 190);</span><br><span class=\"line\">    // 添加一条线段到(150, 40)</span><br><span class=\"line\">    CGContextAddLineToPoint(ctx, 150, 40);</span><br><span class=\"line\">    CGContextAddLineToPoint(ctx, 120, 60);</span><br><span class=\"line\">    // 3.渲染显示到view上面</span><br><span class=\"line\">    CGContextStrokePath(ctx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建缓存时选用NSCache而非NSDictionary\"><a href=\"#构建缓存时选用NSCache而非NSDictionary\" class=\"headerlink\" title=\"构建缓存时选用NSCache而非NSDictionary\"></a>构建缓存时选用NSCache而非NSDictionary</h2><p>当系统资源将要耗尽时，NSCache可以自动删减缓存。如果采用普通的字典，那么就要自己编写挂钩，在系统发出“低内存”通知时手动删减缓存，NSCache会先删减“最久未使用”的对象。</p>\n<p>NSCache不会拷贝键，而是会保留它。此行为用NSDictionary也可以实现，但是需要编写比较复杂的代码。NSCache对象不拷贝键的原因在于：很多时候，键都是由不支持拷贝操作的对象来充当的。因此，NSCache对象不会自动拷贝键，所以说，在键不支持拷贝操作的情况下，该类用起来比字典方便。</p>\n<p>NSCache是线程安全的，NSDictionary不是。在开发者自己不编写加锁代码的前提下，多个线程可以同时访问NSCache。对缓存来说，线程安全很重要，因为开发者可能要在某个线程中读取数据，此时如果发现缓存里找不到指定的键，那么就要下载该键对应的数据了。</p>\n<p>如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种“重新计算起来很费事”的数据，才值得放入缓存，比如那些需要从网络获取从磁盘读取的数据。</p>\n<h2 id=\"Runtime机制\"><a href=\"#Runtime机制\" class=\"headerlink\" title=\"Runtime机制\"></a>Runtime机制</h2><p>\b详情见<a href=\"https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E8%AF%A6%E8%A7%A3/\">【iOS】Runtime详解</a></p>\n<h2 id=\"Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\"><a href=\"#Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\" class=\"headerlink\" title=\"Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\"></a>Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？</h2><p>RunLoop是一个让线程能随时处理事件但不退出的机制。RunLoop实际上是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行EventLoop的逻辑。线程执行了这个函数后，就会一直处于这个函数内部“接受消息-&gt;等待-&gt;处理”的循环中，知道循环结束（比如传入quit的消息），函数返回。让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。</p>\n<p>OSX/iOS系统中，提供了两个这样的对象：NSRunLoop和CFRunLoopRef。CFRunLoopRef是在CoreFoundation框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。NSRunLoop是基于CFRunLoopRef的封装，提供了面向对象的API，但是这些API不是线程安全的。</p>\n<p>线程和RunLoop之间是一一对应的，其关系是保存在一个全局的Dictionary里。线程刚创建时并没有RunLoop，如果你不主动获取，那它一直都不会有。RunLoop的创建是发生在第一次获取时，RunLoop的销毁是发生在线程结束时。你只能在一个线程的内部获取其RunLoop（主线程除外）。</p>\n<p>系统默认注册了5个RunLoop的Mode：</p>\n<ol>\n<li><code>kCFRunLoopDefaultMode</code>：App的默认Mode，通常主线程是在这个Mode下运行的。</li>\n<li><code>UITrackingRunLoopMode</code>：界面跟踪Mode，用于ScrollView追踪触摸滑动，保证界面滑动时不受其他Mode影响。</li>\n<li><code>UIInitializationRunLoopMode</code>：在刚启动App时进入的第一个Mode，启动完成后不再使用。</li>\n<li><code>GSEventReceiveRunLoopMode</code>：接受系统事件的内部Mode，通常用不到。</li>\n<li><code>kCFRunLoopCommonModes</code>：这是一个占位的Mode，没有实际作用。</li>\n</ol>\n<p>RunLoop的四个作用：</p>\n<ol>\n<li>使程序一直运行接受用户输入</li>\n<li>决定程序在何时应该处理哪些Event</li>\n<li>调用解耦</li>\n<li>节省CPU时间</li>\n</ol>\n<p>主线程的RunLoop默认是启动的。iOS的应用程序里面，程序启动后会有一个如下的main()函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">UIApplicationMain</span>(argc, argv, <span class=\"literal\">nil</span>, <span class=\"built_in\">NSStringFromClass</span>([AppDelegate <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：<a href=\"https://blog.csdn.net/potato512/article/details/51455728\">https://blog.csdn.net/potato512/article/details/51455728</a></p>\n<h2 id=\"临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\"><a href=\"#临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\" class=\"headerlink\" title=\"\b临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\"></a>\b临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？</h2><p>产生死锁的四个必要条件：</p>\n<ol>\n<li>互斥条件：一个资源每一次只能被一个进程使用。</li>\n<li>请求与保持条件：一个进程因请求资源阻塞时，对已获得的资源保持不放。</li>\n<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能进行强制剥夺。</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n<h2 id=\"动画掉帧，CADisPlayLink，-Core-graphics\"><a href=\"#动画掉帧，CADisPlayLink，-Core-graphics\" class=\"headerlink\" title=\"动画掉帧，CADisPlayLink， Core graphics\"></a>动画掉帧，CADisPlayLink， Core graphics</h2><p>使用<a href=\"https://github.com/kconner/KMCGeigerCounter\">KMCGeigerCounter</a>检测动画掉帧问题。</p>\n<p>CADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的CADisplayLink对象，把它添加到一个RunLoop中，并给它提供一个target和selector在屏幕刷新的时候调用。另外CADisplayLink不能被继承。frameInterval属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60hz也就是每秒60次，如果将frameInterval设为2那么就会两帧调用一次，也就是变成了每秒刷新30次。</p>\n<p>我们通过pause属性开控制CADisplayLink的运行。当我们想结束一个CADisplayLink的时候，应该调用<code>invalidate</code>从RunLoop中删除并删除之前绑定的target和selector，另外CADisplayLink不能被继承。</p>\n<p>iOS设备的屏幕刷新率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。</p>\n<p>NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，RunLoop如果在阻塞状态，触发时间就会推迟到下一个RunLoop周期。并且NSTimer新增了tolerance属性，让用户可以设置可以容忍触发的时间的延迟范围。</p>\n<p>CADisplayLink使用场合相对专一，适合做UI的不停绘制，比如自定义动画引擎或则视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用CADisplayLink比起用NSTimer的好处就是我们不需要在格外关系屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p>\n<p>注意：<br>通常来讲：iOS设备的刷新频率是60Hz也就是每秒60次。那么每一次刷新的时间就是1/60秒（大概16.7毫秒）。当我们得frameInterval值为1的时候我们需要保证的是CADisplayLink调用<code>target</code>的函数计算时间不应该大于16.7，否则就会出现严重的丢帧现象。</p>\n<p>在mac应用中我们使用的不是CADisplayLink而是CVDisplayLink它是基于C接口的用起来配置有些麻烦但是用起来还是很简单的。</p>\n<h2 id=\"使用ARC是否会出现野指针，为什么？\"><a href=\"#使用ARC是否会出现野指针，为什么？\" class=\"headerlink\" title=\"使用ARC是否会出现野指针，为什么？\"></a>使用ARC是否会出现野指针，为什么？</h2><p>会出现野指针，在定义block的时候，是将block内存分配在堆上的。当在函数作用范围外的时候，block的内存会被回收释放，就会生成野指针，这时候去掉用block，就会crash。</p>\n<h2 id=\"如何让异步方法进行二次封装让其同步执行\"><a href=\"#如何让异步方法进行二次封装让其同步执行\" class=\"headerlink\" title=\"如何让异步方法进行二次封装让其同步执行\"></a>如何让异步方法进行二次封装让其同步执行</h2><p>可以用dispatch_group_async，dispatch_group_notify。</p>\n<h2 id=\"为什么这样定义单例？\"><a href=\"#为什么这样定义单例？\" class=\"headerlink\" title=\"为什么这样定义单例？\"></a>为什么这样定义单例？</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> HLTestObject *instance = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)sharedInstance</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        instance = [[[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] alloc] init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么使用GCD去创建单例，GCD中的dispatch_once函数只调用一次，多线程若有两个线程先后去执行到dispatch_once这个地方，则先执行到的回去调用，后执行的就不会调用了。</p>\n<p>为什么要让对象指针static，多线程情况下，因为dispatch_once只执行一次，除了第一个执行的，之后的线程都不执行，直接返回对象指针，若此时指针是临时变量，则会导致返回一个空指针，若为static 则返回的永远是同一个又第一个执行的生成的对象。</p>\n<h2 id=\"如何给按钮画边框\"><a href=\"#如何给按钮画边框\" class=\"headerlink\" title=\"如何给按钮画边框\"></a>如何给按钮画边框</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ringButton.tintColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.000</span> green:<span class=\"number\">0.537</span> blue:<span class=\"number\">0.506</span> alpha:<span class=\"number\">1</span>];</span><br><span class=\"line\">[ringButton.layer setMasksToBounds:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">[ringButton.layer setCornerRadius:<span class=\"number\">8.0</span>];</span><br><span class=\"line\">[ringButton.layer setBorderWidth:<span class=\"number\">1.0</span>];</span><br><span class=\"line\"><span class=\"built_in\">CGColorSpaceRef</span> colorSpace = <span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class=\"line\"><span class=\"built_in\">CGColorRef</span> colorref = <span class=\"built_in\">CGColorCreate</span>(colorSpace, (<span class=\"built_in\">CGFloat</span>[])&#123;<span class=\"number\">0.000</span>,<span class=\"number\">0.537</span>,<span class=\"number\">0.506</span>,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">[ringButton.layer setBorderColor:colorref];</span><br></pre></td></tr></table></figure>\n<h2 id=\"Socket和Http的区别，和TCP的区别\"><a href=\"#Socket和Http的区别，和TCP的区别\" class=\"headerlink\" title=\"Socket和Http的区别，和TCP的区别\"></a>Socket和Http的区别，和TCP的区别</h2><h3 id=\"Socket套接字\"><a href=\"#Socket套接字\" class=\"headerlink\" title=\"Socket套接字\"></a>Socket套接字</h3><p>套接字（Socket）是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议、本地主机的IP地址、本地进程的协议端口、远程主机的IP地址、远程进程的协议端口。</p>\n<p>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序提供并发服务的问题。多个TCP连接或多个应用程序可能需要通过一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字（Socket）接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p>\n<p>套接字之间的连接过程分为三个步骤：服务器监听、客户端请求、连接确认。<br>服务器监听：服务器端套接字并不定位具体的客户端套接字，而是出于等待连接的状态，实时监控网络状态，等待客户端的链接请求。</p>\n<p>客户端请求：指客户端的套接字提出链接请求，要链接的目标是服务端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器套接字，指出服务器端套接字的地址和端口，然后就向服务端套接字提出链接请求。</p>\n<p>连接确认：当服务器端套接字监听到或则说收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务端套接字的描述发送给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接受其他客户端套接字的链接请求。</p>\n<p>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当时使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</p>\n<p>若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p>\n<p>TCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输层的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、TCP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作为应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”</p>\n<h2 id=\"OC对象模型\"><a href=\"#OC对象模型\" class=\"headerlink\" title=\"OC对象模型\"></a>OC对象模型</h2><p>对象是OC中基本构造单元（building block），用于存储和传递数据。类和对象的最终实现都是一种数据结构。可以完整的类应该包括类方法、实例方法和成员变量（实例变量），每个对象都包括一个isa（is a class）指针指向类对象（运行时方法发送给对象消息，才确定类别并调用相应的方法实现），元类对象中的方法列表是类方法（+，class methods）。</p>\n<h2 id=\"HTTPS和HTTP的区别\"><a href=\"#HTTPS和HTTP的区别\" class=\"headerlink\" title=\"HTTPS和HTTP的区别\"></a>HTTPS和HTTP的区别</h2><ol>\n<li>HTTPS是加密传输协议，HTTP是明文传输协议</li>\n<li>HTTPS需要用到SSL证书，而HTTP不用</li>\n<li>HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO</li>\n<li>HTTPS标准端口443，HTTP标准端口90</li>\n<li>HTTPS基于传输层，HTTP基于应用层</li>\n<li>HTTPS在浏览器显示绿色安全锁，HTTP没有显示</li>\n</ol>\n<h2 id=\"使用atomic一定是线程安全的吗？\"><a href=\"#使用atomic一定是线程安全的吗？\" class=\"headerlink\" title=\"使用atomic一定是线程安全的吗？\"></a>使用atomic一定是线程安全的吗？</h2><p>不是的。<br>nonatomic的内存管理语义是非原子性的，非原子性的操作本来就是线程不安全的，而atomic的操作是原子性的，但是并不意味着它是线程安全的，它会增加正确的几率，能够更好的避免线程的错误，但是它仍然是线程不安全的。</p>\n<p>当使用atomic时，虽然对属性和读和写是原则性的，但是仍然可能出现线程错误：当线程A进行写操作，这时其他线程的读或则写操作会因为该操作而等待。当A线程的写操作结束后，B线程进行写操作，然后有线程C在A线程读操作前release了该属性，那么还会导致程序崩溃。所以仅仅使用atomic并不会使得线程安全，我们还要为线程添加lock来确保线程的安全。</p>\n<p>也就是要注意：<b>atomic所说的线程安全只是保证了getter和setter存取方法的线程安全，并不能保证整个对象是线程安全的。</b>如下例所示：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>(atomic,<span class=\"keyword\">strong</span>)<span class=\"built_in\">NSMutableArray</span> *arr;</span><br></pre></td></tr></table></figure>\n<p>如果一个线程循环的读数据，一个线程循环写数据，那么肯定会产生内存问题，因为这和setter、getter没有关系。如使用<code>[self.arr objectAtIndex:index]</code>就不是线程安全的。好的解决方案就是加锁。</p>\n<p><b>探讨一下Objective-C中几种不同方式实现的锁</b>，在这之前先构建一个测试类，假设它是我们的一个共享资源，method1和method2是互斥的，代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestObj</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)method1 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,<span class=\"built_in\">NSStringFromSelector</span>(_cmd));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)method2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,<span class=\"built_in\">NSStringFromSelector</span>(_cmd));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用NSLock实现的锁\"><a href=\"#使用NSLock实现的锁\" class=\"headerlink\" title=\"使用NSLock实现的锁\"></a>使用NSLock实现的锁</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主线程中</span></span><br><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\"><span class=\"built_in\">NSLock</span> *lock = [[<span class=\"built_in\">NSLock</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    [lock lock];</span><br><span class=\"line\">    [ojc method1];</span><br><span class=\"line\">    sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    [lock unlock];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    [lock lock];</span><br><span class=\"line\">    [ojc method2];</span><br><span class=\"line\">    [lock unlock];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>根据打印的结果已经看到，线程一锁住之后，线程二回一直等待线程一走完并将锁设置为unlock后，才会执行method2中的方法。</p>\n<p>NSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate两个方法，前一个方法会尝试加锁，如果锁不可用（已经被锁住），并不会阻塞线程，并返回NO。lockBeforeDate方法会在指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。</p>\n<h3 id=\"使用synchronized关键字构建的锁\"><a href=\"#使用synchronized关键字构建的锁\" class=\"headerlink\" title=\"使用synchronized关键字构建的锁\"></a>使用synchronized关键字构建的锁</h3><p>当然在Objective-C中你还可以用@synchronized指令快速的实现锁：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\"><span class=\"built_in\">NSLock</span> *lock = [[<span class=\"built_in\">NSLock</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@synchronized</span>(ojc)&#123;</span><br><span class=\"line\">        [ojc method1];</span><br><span class=\"line\">        sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@synchronized</span>(ojc)&#123;</span><br><span class=\"line\">        [ojc method2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>@synchronized指令使用的obj为该锁的唯一标识，只有当标识相同时，才会满足互斥，如果线程二中的@synchronized(obj)改为@synchronized(other)，线程二就不会被阻塞，@synchronized指令实现锁的优点就是我们不需要在代码中显式的创建锁对象，便可以实现锁的机制，但作为一种预防措施，@synchronized块会隐式的添加一个异常处理例程来保护代码，该处理例程会在异常抛出的时候自动释放互斥锁。所以如果不想让隐式的异常处理例程带来额外的开销，可以考虑使用锁对象。</p>\n<h3 id=\"使用C语言的pthread-mutex-t实现的锁\"><a href=\"#使用C语言的pthread-mutex-t实现的锁\" class=\"headerlink\" title=\"使用C语言的pthread_mutex_t实现的锁\"></a>使用C语言的pthread_mutex_t实现的锁</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\">__block pthread_mutex_t mutex;</span><br><span class=\"line\">pthread_mutex_init(&amp;mutex,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">    [ojc method1];</span><br><span class=\"line\">    sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">    [ojc method2];</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>pthread_mutex_t定义在pthread.h中，需要引入<code>#import &lt;pthread.h&gt;</code>。</p>\n<h3 id=\"使用GCD来实现的锁\"><a href=\"#使用GCD来实现的锁\" class=\"headerlink\" title=\"使用GCD来实现的锁\"></a>使用GCD来实现的锁</h3><p>以上代码的多线程中已经使用到了GCD的dispatch_async方法，其实在GCD中也已经提供了一种信号机制，使用它我们也可以构建一把“锁”（本质意义上讲，信号量与锁是有区别的，具体差异参考信号量与互斥锁之间的区别）：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class=\"line\">    [ojc method1];</span><br><span class=\"line\">    dispatch_semaphore_signal(semaphore);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class=\"line\">    [ojc method2];</span><br><span class=\"line\">    dispatch_semaphore_signal(semaphore);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用自旋锁OSSpinLock来实现的“锁”\"><a href=\"#使用自旋锁OSSpinLock来实现的“锁”\" class=\"headerlink\" title=\"使用自旋锁OSSpinLock来实现的“锁”\"></a>使用自旋锁OSSpinLock来实现的“锁”</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主线程中</span></span><br><span class=\"line\">TestObj *obj = [[TestObj alloc] init];</span><br><span class=\"line\">OSSpinLock spinlock = OS_SPINLOCK_INIT;</span><br><span class=\"line\"><span class=\"comment\">//线程1</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,<span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    OSSpinLockLock(&amp;spinlock);</span><br><span class=\"line\">    [obj method1];</span><br><span class=\"line\">    sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    OSSpinLockUnlock(&amp;spinlock);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程2</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,<span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);<span class=\"comment\">//以保证让线程2的代码后执行</span></span><br><span class=\"line\">    OSSpinLockLock(&amp;spinlock);</span><br><span class=\"line\">    [obj method2];</span><br><span class=\"line\">    OSSpinLockUnlock(&amp;spinlock);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<a href=\"https://www.jianshu.com/p/e286d2907bf7\">https://www.jianshu.com/p/e286d2907bf7</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"nil、Nil、NULL、NSNull的区别？\"><a href=\"#nil、Nil、NULL、NSNull的区别？\" class=\"headerlink\" title=\"nil、Nil、NULL、NSNull的区别？\"></a>nil、Nil、NULL、NSNull的区别？</h2><table><tr><td>Symbol</td><td>Value</td><td>Meaning</td></tr><tr><td>NULL</td><td>(void *)0</td><td>literal null value for C pointers</td></tr><tr><td>nil</td><td>(id)0</td><td>literal null value for Objective-C objects</td></tr><tr><td>Nil</td><td>(Class)0</td><td>literal null value for Objective-C classes</td></tr><tr><td>NSNull</td><td>[NSNull null]</td><td>singleton object used to represent null\n</td></tr></table>\n\n<h3 id=\"nil：对象为空\"><a href=\"#nil：对象为空\" class=\"headerlink\" title=\"nil：对象为空\"></a>nil：对象为空</h3><p>定义某一实例对象为空值。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSObject</span>* obj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;obj is nil&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;obj is not nil&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Nil：类为空\"><a href=\"#Nil：类为空\" class=\"headerlink\" title=\"Nil：类为空\"></a>Nil：类为空</h3><p>定义一个类为空。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class someClass = Nil;</span><br><span class=\"line\">Class anotherClass = [<span class=\"built_in\">NSString</span> <span class=\"keyword\">class</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"NULL：基本数据对象指针为空\"><a href=\"#NULL：基本数据对象指针为空\" class=\"headerlink\" title=\"NULL：基本数据对象指针为空\"></a>NULL：基本数据对象指针为空</h3><p>用于C语言的各种数据类型的指针为空。例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> *pointerToInt = <span class=\"literal\">NULL</span>; </span><br><span class=\"line\"><span class=\"type\">char</span> *pointerToChar = <span class=\"literal\">NULL</span>; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> TreeNode *rootNode = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NSNull\"><a href=\"#NSNull\" class=\"headerlink\" title=\"NSNull\"></a>NSNull</h3><p>集合对下那个无法包含nil作为其具体值，如NSArray、NSSet和NSDictionary。相应的，nil值使用一个特定的对象NSNull来表示。<code>NSNull</code>提供了一个单一实例用于表示对象属性中的的nil值。</p>\n<p>通常初始化NSArray对象，我们是这样的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@&quot;wang&quot;</span>, <span class=\"string\">@&quot;zz&quot;</span>, <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>当NSArray里遇到nil时，说明这个数组对象\b元素截止了，即NSArray只关注nil之前的对象，nil之后的对象会被抛弃，比如下面的写法，与上面的arr值是一样的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@&quot;wang&quot;</span>, <span class=\"string\">@&quot;zz&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"string\">@&quot;foogry&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p>如果要让nil后的元素不被抛弃就只能借助NSNull了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *arr = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@&quot;wang&quot;</span>, <span class=\"string\">@&quot;zz&quot;</span>, [<span class=\"built_in\">NSNull</span> null], <span class=\"string\">@&quot;foogry&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>一句话总结Nil、nil、NSNull之间的区别就是：不管是NULL、Nil、nil，他们本质上都是一样的，都是(void *)0，只是写法不同。这样做的意义是区分不同的数据类型，比如你看到NULL就知道他是一个C指针，看到nil就知道这是一个Objective-C对象，看到Nil就知道这是一个Class类型的数据。</p>\n<h2 id=\"load和initialize\"><a href=\"#load和initialize\" class=\"headerlink\" title=\"load和initialize\"></a>load和initialize</h2><h3 id=\"load函数调用特点如下\"><a href=\"#load函数调用特点如下\" class=\"headerlink\" title=\"load函数调用特点如下\"></a>load函数调用特点如下</h3><p>当类被引用进项目的时候就会执行load函数（在main函数开始执行之前），与这个类是否被用到无关，每个类的load函数只会自动调用一次。由于load函数是系统自动加载的，因此不需要调用父类的load函数，否则父类load函数会执行多次。</p>\n<ul>\n<li>当父类和子类都实现load函数时，父类的load方法执行顺序要优于子类。</li>\n<li>当子类未实现load方法时，不会调用父类load方法。</li>\n<li>类中的load方法执行顺序要优先于类别（Category）。</li>\n<li>当有多个类别（Category）都实现了load方法，每个类load执行顺序与其在Compile Source出现的顺序一致。</li>\n</ul>\n<p>load调用时机比较早，当load调用时，其他类可能还没加载完成，运行环境不安全。</p>\n<p>load方法是线程安全的，它使用了锁，我们应该避免线程阻塞在load方法。</p>\n<h3 id=\"initialize函数调用特点如下\"><a href=\"#initialize函数调用特点如下\" class=\"headerlink\" title=\"initialize函数调用特点如下\"></a>initialize函数调用特点如下</h3><p>initialize在类或者其子类的第一个方法被调用前调用。即使类文件被引用进项目，但是没有使用，initialize不会被调用。由于是系统自动调用，也不需要再调用<code>[super initialize]</code>，否组父类的initialize会被调用多次执行。假如这个类放到代码中，而这段代码并没有被执行，这个函数是不会被执行的。</p>\n<ul>\n<li>父类的initialize方法会比子类先执行。</li>\n<li>当父类未实现initialize方法时，会调用父类initialize方法，子类实现initialize方法时，会覆盖initialize方法。</li>\n<li>当多个Category都实现了initialize方法，会覆盖类中的方法，只执行一个（会执行Compile Source列表中最后一个Category的initialize方法）。</li>\n</ul>\n<p>在initialize方法收到调用时，运行环境基本健全。</p>\n<p>initialize内部使用了锁，所以线程是安全的。但同时要避免阻塞线程，不要再使用锁。</p>\n<h3 id=\"分别在什么情况下使用？\"><a href=\"#分别在什么情况下使用？\" class=\"headerlink\" title=\"分别在什么情况下使用？\"></a>分别在什么情况下使用？</h3><h4 id=\"load\"><a href=\"#load\" class=\"headerlink\" title=\"+load\"></a>+load</h4><p>由于调用load方法时的环境很不安全，我们应该尽量减少load方法的逻辑。另一个原因是load方法是线程安全的，它内部使用了锁，所以我们应该避免线程阻塞在load方法中，load很常见的一个使用场景，交换两个方法的实现。</p>\n<p>比如MJRefresh中的一段代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"type\">void</span>)load</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(reloadData) method2:<span class=\"keyword\">@selector</span>(mj_reloadData)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(reloadRowsAtIndexPaths:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_reloadRowsAtIndexPaths:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(deleteRowsAtIndexPaths:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_deleteRowsAtIndexPaths:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(insertRowsAtIndexPaths:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_insertRowsAtIndexPaths:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(reloadSections:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_reloadSections:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(deleteSections:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_deleteSections:withRowAnimation:)];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> exchangeInstanceMethod1:<span class=\"keyword\">@selector</span>(insertSections:withRowAnimation:) method2:<span class=\"keyword\">@selector</span>(mj_insertSections:withRowAnimation:)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">void</span>)exchangeInstanceMethod1:(SEL)method1 method2:(SEL)method2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    method_exchangeImplementations(class_getInstanceMethod(<span class=\"keyword\">self</span>, method1), class_getInstanceMethod(<span class=\"keyword\">self</span>, method2));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"initialize\"><a href=\"#initialize\" class=\"headerlink\" title=\"+initialize\"></a>+initialize</h4><p>initialize方法主要用来对一些不方便在编译期初始化的对象进行赋值。比如NSMutableArray这种类型的实例化依赖于Runtime的消息发送，所以显然无法在编译器初始化：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In Person.m</span></span><br><span class=\"line\"><span class=\"comment\">// int类型可以在编译期赋值</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> someNumber = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSMutableArray</span> *someArray;</span><br><span class=\"line\">+ (<span class=\"type\">void</span>)initialize &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == [Person <span class=\"keyword\">class</span>]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不方便编译期复制的对象在这里赋值</span></span><br><span class=\"line\">        someArray = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"load和initialize的共同点\"><a href=\"#load和initialize的共同点\" class=\"headerlink\" title=\"load和initialize的共同点\"></a>load和initialize的共同点</h3><ul>\n<li>如果父类和子类都被调用，父类的调用一定在子类之前。</li>\n</ul>\n<h2 id=\"线程与进程的区别和联系？\"><a href=\"#线程与进程的区别和联系？\" class=\"headerlink\" title=\"线程与进程的区别和联系？\"></a>线程与进程的区别和联系？</h2><p>简单概括下线程与进程之间的区别和联系：</p>\n<ul>\n<li>一个程序至少\b要有一个进程，一个进程至少要有一个线程。</li>\n<li>进程是\b资源分配的最小独立单元，进程是具有\b一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。</li>\n<li>线程是进程的一个分支，是进程的实体，是CPU调度和分配的基本单元，它是比进程更小的能独立运行的基本单位，线程自己基本不拥有系统资源，只拥有一点在运行中必不可少的资源（计数器、栈、寄存器），但是它可以与\b同属一个进程的其他线程共享线程所拥有的全部资源。</li>\n<li>线程和进程的主要区别在于他们是不同的操作\b系统资源的管理方式。进程有独立的\b地址空间，一个进程崩溃以后，在保护模式下不会对其他进程\b造成影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉以后就等于整个进程死掉，所以多进程的程序比多线线程的程序要健壮，但在进程切换时，耗费资源较大，效率要差些。</li>\n<li>但对于一些要求同时进行并\b且又要共享某些变量的并发操作，只能用线程，不能\b用进程。</li>\n</ul>\n<h2 id=\"assign、retain、copy、weak、strong的区别以及nonatomic的含义\"><a href=\"#assign、retain、copy、weak、strong的区别以及nonatomic的含义\" class=\"headerlink\" title=\"assign、retain、copy、weak、strong的区别以及nonatomic的含义\"></a>assign、retain、copy、weak、strong的区别以及nonatomic的含义</h2><p>首先从ARC\b和非ARC层面上可以分为两部分，第一部分是assign、retain、copy，第二部分是\bweak、strong。</p>\n<p>\b首先看看第一部分assign、retain、copy的含义：</p>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h3><p>assign一般用来修饰基本的数据类型，包括基本数据类型（NSInteger、CGFloat）和C数据类型（int、float、double、char）等。\b因为assign声明的属性不会增加引用计数，也就是说声明的属性释放后，就没有了，及时其他\b对用用到\b了他也无法留住他，只会crash。但是即使是释放了，指针却还在，成为了野指针，如果新的对象被分配到了这个内存地址上，也会crash。所一般只能修饰基本数据类型，因为他会\b被分配在栈上，而栈会由系统自动处理，不会造成野指针。</p>\n<h3 id=\"retain\"><a href=\"#retain\" class=\"headerlink\" title=\"retain\"></a>retain</h3><p>与assign相对，我们要解决\b对象\b被其他对象引用后释放造成的问题，就要用retain来声明。retain声明后的\b对象会更改引用计数，那么每次被引用，引用计数都会+1，释放后都会-1，及时这个对象本身被释放了，只要还有对象在引用它，就会持有不会造成什么问题，只有当引用计数为0时候，就会被dealloc构析函数回收内存了。</p>\n<h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>最常见的使用copy修饰应该是NSString。copy与retain的区别在于retain的引用是拷贝指针地址，copy是拷贝对象本身，也就是说retain是浅复制，copy是深复制。<b>如果是浅复制，当修改对象时，都会被修改，而深复制不会。</b>之所以在NSString这类有可变类型的对象上使用，是因为他们有可能和对应的可变类型如NSMutableString之间进行赋值操作，为了防止内容被改变，使用copy去深复制一份。copy工作由copy方法执行，此属性只对那些实现了NSCopying协议的对象有效。</p>\n<p>以上三个可以在MRC中使用，但是weak和strong就只能在ARC中使用，也就是自动引用计数，这时就不能手动去进行retain、release等操作了，ARC会帮我们完成这些工作。</p>\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>weak其实类似于assign，叫弱引用，也就是不增加引用计数。一般只有在防止循环引用时使用，比如父类引用了子类，子类又去引用父类。IBOutlet、Delegate一般用的就是weak，这是因为它们会在类外部被调用，防止循环引用。</p>\n<h3 id=\"strong\"><a href=\"#strong\" class=\"headerlink\" title=\"strong\"></a>strong</h3><p>相对的，strong就类似retain了，叫强引用，会增加引用计数，类内部使用的属性一般都是strong修饰的，现在ARC已经基本代替了MRC，所以我们最常见的就是strong了。</p>\n<h3 id=\"nonatomic\"><a href=\"#nonatomic\" class=\"headerlink\" title=\"nonatomic\"></a>nonatomic</h3><p>在修饰属性时，我们往往会加上一个nonamatic，这又是什么呢？它的名字叫非原子访问。对应有atomic，是原子访问。我们知道使用多线程为了避免在写操作时同时进行写导致问题，经常会对要写的对象进行加锁，也就是同一时刻只允许一个线程去操作它。如果一个属性是由atomic修饰的，那么系统就会对线程进行保护，防止多个写操作同时进行。这有好处，也有坏处，那就是消耗系统资源，所以对于iPhone这种小型设备，如果不是进行多线程的写操作，就可以使用nonatomic，取消线程保护，提高性能。</p>\n<h2 id=\"定义一个NSString类类型属性时，为什么使用copy不用strong？\"><a href=\"#定义一个NSString类类型属性时，为什么使用copy不用strong？\" class=\"headerlink\" title=\"定义一个NSString类类型属性时，为什么使用copy不用strong？\"></a>定义一个NSString类类型属性时，为什么使用copy不用strong？</h2><p>NSString类型属性是一个指针，定义成copy，操作是拷贝一份等同的对象，这个指针指向新生成的拷贝对象。当使用copy时，这个拷贝的对象无论是拷贝自NSMutableString还是NSString结构都是不可变的NSString。而如果是用strong，则指向一个字符串对象，若指向的是一个NSMutableString，则当指向的对象改变时，属性值也会发生相应改变，导致错误，因为是一个不可变的字符串。</p>\n<h2 id=\"引用多线程时会出现什么问题，应如何避免问题的发生？\"><a href=\"#引用多线程时会出现什么问题，应如何避免问题的发生？\" class=\"headerlink\" title=\"引用多线程时会出现什么问题，应如何避免问题的发生？\"></a>引用多线程时会出现什么问题，应如何避免问题的发生？</h2><p>多线程容易导致资源争抢，发生死锁现象。死锁通常是一个线程锁定一个资源A，而又想去锁定资源B；在另一个线程中，锁定了资源B，而又想去锁定资源A以完成自身的操作，两个线程都想得到对方的资源，而不愿释放自己的资源，造成两个线程都在相互等待，造成了无法执行的情况。</p>\n<p>避免死锁的一个通用的经验法则是：当几个线程都要访问共享资源A、B、C时，保证使每个线程都按照同样的顺序去访问它们，比如先访问A，在访问B和C。</p>\n<p>采用GCD中的栅栏方法，用并行队列去装载事件并异步去执行。</p>\n<h2 id=\"循环引用是如何产生的，如何解决循环引用？\"><a href=\"#循环引用是如何产生的，如何解决循环引用？\" class=\"headerlink\" title=\"循环引用是如何产生的，如何解决循环引用？\"></a>循环引用是如何产生的，如何解决循环引用？</h2><p>两个类中有属性分别为彼此的实例，这样就会引发循环引用。</p>\n<p>使用block、NSTimer时也容易导致循环引用，设置一个引用为弱引用可以解决强引用循环。</p>\n<h2 id=\"NSTimer使用中的注意事项\"><a href=\"#NSTimer使用中的注意事项\" class=\"headerlink\" title=\"NSTimer使用中的注意事项\"></a>NSTimer使用中的注意事项</h2><p>在类中定义定时器并把目标对象设置为self时，NSTimer实例会保存此实例，但定时器是用在类中用实例变量存放的，所以此实例也保留了定时器，这就造成了循环引用。除非调用invalidate方法并把定时器设置为nil，或则系统回收实例，才能打破循环引用。如果无法确保stop一定被调用，就极易造成内存泄漏。</p>\n<p>使用block可以防止NSTimer导致的内存泄漏。</p>\n<p>在NSTimer分类中定义方法，让NSTimer的target为NSTimer实例本身，然后block从实例中copy一份，在NSTimer中定义方法去执行拷贝block。</p>\n<h2 id=\"App的生命周期以及运行状态\"><a href=\"#App的生命周期以及运行状态\" class=\"headerlink\" title=\"App的生命周期以及运行状态\"></a>App的生命周期以及运行状态</h2><p>状态：未运行、未激活、激活、后台、挂起。</p>\n<p>未运行：程序未启动</p>\n<p>未激活：程序在前台运行，不过没有接受到事件</p>\n<p>激活：程序在前台运行且收到了事件</p>\n<p>后台：程序在后台而且能执行代码，大多程序进入这个状态后会在这个状态停留一会，时间到之后会进入挂起状态</p>\n<p>挂起：程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中，系统内存低时，系统就把挂起的程序清除掉</p>\n<h2 id=\"栈、堆、静态区域的区别\"><a href=\"#栈、堆、静态区域的区别\" class=\"headerlink\" title=\"栈、堆、静态区域的区别\"></a>栈、堆、静态区域的区别</h2><p>OC中，非对象的变量都存在栈中，对象都存在堆中，静态区域的内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都在，主要存放静态数据、全局数据和常量。</p>\n<p>栈区：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存效率高，内存容量有限。</p>\n<p>堆区：OC对象存储于堆中，当对象的引用计数为0时自动释放该对象。</p>\n<h2 id=\"子试图超出父视图部分能看到吗？超出的部分有什么影响？\"><a href=\"#子试图超出父视图部分能看到吗？超出的部分有什么影响？\" class=\"headerlink\" title=\"子试图超出父视图部分能看到吗？超出的部分有什么影响？\"></a>子试图超出父视图部分能看到吗？超出的部分有什么影响？</h2><p>子视图超出父视图的部分能看到，但是超出部分不能响应事件。<br>想让超出部分响应事件，就该写父视图的hitTest方法。判断触碰区是否在子视图内，如果在子视图内，则返回子视图。让子视图去响应事件。</p>\n<h2 id=\"respond链是如何响应的，响应顺序是什么样的？\"><a href=\"#respond链是如何响应的，响应顺序是什么样的？\" class=\"headerlink\" title=\"respond链是如何响应的，响应顺序是什么样的？\"></a>respond链是如何响应的，响应顺序是什么样的？</h2><p>在iOS系统中，能够响应并处理事件的对象称之为responder object，UIResponder是所有responder对象的基类，在UIResponder类中定义了处理各种事件，包括触摸事件、运动事件和远程控制事件的编程接口，UIApplication、UIViewController、UIVIew和所有继承自UIVIew的UIKit类（包括UIWindow继承自UIVIew）都直接或间接的继承自UIResponder，所以它们的实例都是responder object对象，都实现了上述4个方法。UIResponder中的默认实现是什么都不做，但UIKit中UIResponder的直接子类（UIView，UIVIewController…）的默认实现是将事件延着responder chain继续向上传递到下一个responder，即nextResponder。所以在定制UIView子类的上述事件处理方法时，如果需要将事件传递给next responder，可以直接调用super的对应事件处理方法，super的对应方法将事件传递给next responder，即使用<code>[super touchesBegan:touches withEvent:event];</code>，不建议直接向nextResponder发送消息，这样可能会漏掉父类对这一事件的其他处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.nextResponder touchesBegan:touches withEvent:event];</span><br></pre></td></tr></table></figure>\n<p>另外在定制UIVIew子类的事件处理方法时，如果其中一个方法没有调用super的对应方法，则其他方法也需要重写，不使用super的方法，否则事件处理流程会很混乱。<br><strong>responder chain是一系列连接的responder对象，通过responder对象可以将处理事件的责任传递给下一个，更高级的对象，即当前responder对象的nextResponder。</strong></p>\n<p>iOS中responder chain的结构为：</p>\n<img src=\"/posts/4ea43a8072083e39/responder_chain.webp\" class=\"\" title=\"responder chain\">\n<p>第一响应者是第一个接收事件的View对象，我们在Xcode的Interface Builder画视图时，可以看到视图结构中就有First Responder。这里的First Responder就是UIApplication了。另外，我们可以控制一个View让其成为First Responder，通过实现<code>- (BOOL)canBecomeFirstResponder</code>方法并返回YES可以使当前View成为第一响应者，或则调用View的<code>becomeFirstResponder</code>方法也可以，例如当UITextField调用该方法时，会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>\n<p>iOS系统在处理事件时，通过UIApplication对象和每个UIWindow对象的<code>sendEvent:</code>方法将事件分发给具体处理此事件的responder对象（对于触摸事件为hitTest view，其他事件为first responder），当具体处理此事件的responder不处理此事件时，可以通过responder chain交给上一级处理。</p>\n<p>如果hit-test view或first responder不处理此事件，则将事件传递给其nextResponder处理，若有UIViewController对象则传递给UIViewController，传递给其superView。</p>\n<p>如果view的viewController也不处理事件，则viewController将事件传递给其管理view的superView。</p>\n<p>视图层级结构的顶级为UIWindow对象，如果window仍不处理此事件，传递给UIApplication。</p>\n<p>若UIApplication对象不处理此事件，则事件被丢弃。</p>\n<p>使用响应链，能够让一条链上的多个对象对同一个事件做出响应。每一个应用有一个响应链，我们得视图结构是一个N叉树（一个视图可以有多个子视图，一个子视图同一时刻只有一个父视图），而每一个继承自UIResponder的对象都可以在这个N叉树中成为一个节点。当叶节点成为最高响应者的时候，从这个叶节点开始往其父节点开始追溯出一条链，那么对于这一个叶节点来说，这一条链就是当前的响应者链。响应者链将系统捕获到的UIEvent与UITouch从叶节点层层向上分发，期间可以选择停止分发，也可以继续向上分发。一句话就是事件传递过程。</p>\n<h2 id=\"GCD中栅栏机制\"><a href=\"#GCD中栅栏机制\" class=\"headerlink\" title=\"GCD中栅栏机制\"></a>GCD中栅栏机制</h2><p>栅栏函数只能用在调度并发队列中，不能使用在全局并发队列中。</p>\n<ol>\n<li>实现高效率的数据库访问和文件访问</li>\n<li>避免数据竞争<br>dispatch_barrier_async函数会等待追加到并行队列上的并行执行的处理全部结束之后，再将制定的处理追加到该并行队列中。然后再由dispatch_barrier_async函数追加的处理执行完毕后，并行队列才恢复为一般的动作，追加到该并行队列的处理又开始执行。</li>\n</ol>\n<h2 id=\"Notification响应顺序\"><a href=\"#Notification响应顺序\" class=\"headerlink\" title=\"Notification响应顺序\"></a>Notification响应顺序</h2><p>NSNOtification使用的是同步操作。即如果你在程序中的A位置post了一个NSNotification，在B注册了一个observer，通知发出后，必须等到B位置的通知回调执行完以后才能返回到A处继续往下执行。如果想让NSNotification的post处和observer处异步执行，可以通过NSNotificationQueue实现。</p>\n<p>多线程应用中，Notification在哪个线程中post，就在哪个线程中被转发，而不一定是在注册观察者的那个线程中。Notification的发送与接收处理都是在同一个线程中。</p>\n<p>为了顺应语法的变化，apple从iOS4之后提供了带有block的NSNotification。</p>\n<p>一种重定向的实现思路是自定义一个通知队列（注意，不是NSNotificationQueue对象，而是一个数组），让这个队列去维护那些我们需要重定向的Notification。我们仍然是像平常一样去注册一个通知的观察者，当Notification来了时，先看看post这个Notification的线程是不是我们所期望的线程，如果不是，则将这个Notification存储到我们得队列中，并发送一个信号（signal）到期望的线程中，来告诉这个线程需要处理一个Notification。指定的线程在收到信号后，将Notification从队列中移除，并进行处理。</p>\n<p>当我们注册一个观察者时，通知中心会持有观察者的一个弱引用，来确保观察者是可用的。主线程调用dealloc操作会让observer对象的引用计数减为0，这时对象会释放掉。后台线程发送一个通知，如果此时observer还未被释放，则会用其转出消息，并执行回调方法。而如果在回调执行的过程中对象被释放了，就会出现上面的问题。</p>\n<h2 id=\"Core-Data、SQLite是如何使用的？\"><a href=\"#Core-Data、SQLite是如何使用的？\" class=\"headerlink\" title=\"Core Data、SQLite是如何使用的？\"></a>Core Data、SQLite是如何使用的？</h2><p>Core Data是一个功能强大的层，位于SQLite数据库之上，它避免了SQL的复杂性，能让我们以更自然的方式与数据库进行交互。Core Data将数据库进行转换为OC对象（托管对象）来实现，这样无需任何SQL知识就能操作他们。</p>\n<p>Core Data能将应用程序中的对象直接保存到数据库中，无需进行复杂的查询，也无需确保对象的属性名和数据库字段名对应，这一切由Core Data完成。</p>\n<h2 id=\"归档是如何使用的？\"><a href=\"#归档是如何使用的？\" class=\"headerlink\" title=\"归档是如何使用的？\"></a>归档是如何使用的？</h2><p>归档是指某种格式来保存一个或多个对象，以便以后还原这些对象的过程。</p>\n<p>只要在类中实现的每个属性都是标量（如int或float）或都是符合NSCoding协议的某个类的实例，就可以对你的对象进行完整归档。</p>\n<h2 id=\"对Http的理解，socket编程的套路\"><a href=\"#对Http的理解，socket编程的套路\" class=\"headerlink\" title=\"对Http的理解，socket编程的套路\"></a>对Http的理解，socket编程的套路</h2><p>HTTP协议是基于TCP连接的，是应用层协议，主要解决如何包装数据。Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</p>\n<p>HTTP连接：短连接，客户端向服务器发送一次请求，服务器响应后连接断开，节省资源。服务器不能主动给客户端响应（除非采用HTTP长连接技术），iPhone主要使用NSURLConnection。</p>\n<p>Socket连接：长连接，客户端跟服务器端直接使用Socket进行连接，没有规定连接后断开，因此客户端和服务器端保持连接通道，双方可以主动发送数据，一般多用于游戏。Socket默认连接超时时间是30秒，默认大小是8k（理解为一个数据包大小）。</p>\n<h2 id=\"NSUserDefault使用的时候需要注意什么？\"><a href=\"#NSUserDefault使用的时候需要注意什么？\" class=\"headerlink\" title=\"NSUserDefault使用的时候需要注意什么？\"></a>NSUserDefault使用的时候需要注意什么？</h2><p>NSUserDefault非常好用，并不需要用户在程序中设置NSUserDefault的全局变量，需要在哪里使用NSUserDefault的数据，那么就在哪里创建一个NSUserDefault对象，然后进行读或写操作。</p>\n<p>针对同一个关键字对应的对象或者数据，可以对它进行重写，重写之后关键字就对应新的对象或者数据，旧的对象或者数据会自动清理。</p>\n<p>注意一点：只能存储基本对象，如果是自定义的对象，需要转换成NSData存储进去才可以。</p>\n<p>iOS中本地存储数据简单的说有三种方式：数据库、NSUserDefault和文件。</p>\n<p>NSUserDefault用于存储数据量小的数据，例如用户配置。并不是所有的东西都能往里放，只支持：NSString、NSNumber、NSData、NSMArray、NSDictionary。但是如果把一个自定义的类存到一个NSArray里，然后再存到NSUserDefault里也是不能成功的。</p>\n<h2 id=\"ARC的底层实现机制\"><a href=\"#ARC的底层实现机制\" class=\"headerlink\" title=\"ARC的底层实现机制\"></a>ARC的底层实现机制</h2><p>通过retainCount的机制来决定对象是否需要释放。每次runloop的时候，都会检查对象的retainCount，如果retainCount为0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n<p>ARC相对于MRC，不是编译时添加retain、release、autorelease这么简单。应该是编译期和运行期两部分共同帮助开发者管理内存。在编译期，ARC用的是更底层的C接口实现的retain、release、autorelease，这样做新能更好，也是为什么不能在ARC环境下手动retain、release、autorelease，同时对同一上下文的同一对象的成对retain、release操作进行优化（即忽略掉不必要的操作）；ARC也包含运行期组件，这个地方做的优化比较复杂，但也不能被忽略。</p>\n<ol>\n<li>ARC会自动执行retain、release、autorelease等操作，在ARC下不能主动调用这些内存管理方法。</li>\n<li>ARC在调用这些方法时，并不通过Objective-C的消息转发机制，而是直接调用其底层C语言版本API，这样做新能更好，因为保留及释放操作需要频繁的执行，直接调用其底层的函数节省很多CPU周期，如ARC会调用与retain等价的底层函数objc_retain。</li>\n<li>在使用ARC时必须遵循方法命名规则，alloc、new、copy、mutablecopy。ARC通过命名约定将内存管理标准化。</li>\n<li>ARC管理对象生命周期的办法是：在合适的地方“插入”、“保留”及“释放”操作。在方法中创建的对象，在方法中自动release；类中的对象，在dealloc方法中释放。</li>\n<li>ARC下，变量的内存管理语义可以通过修饰符指明。</li>\n<li>ARC只负责管理Objective-C对象的内存，CoreFoundation对象不归ARC管理。</li>\n</ol>\n<h2 id=\"滑动TableView视图的时候NSTimer会不会工作？\"><a href=\"#滑动TableView视图的时候NSTimer会不会工作？\" class=\"headerlink\" title=\"滑动TableView视图的时候NSTimer会不会工作？\"></a>滑动TableView视图的时候NSTimer会不会工作？</h2><ol>\n<li>默认情况下NSTimer不能在后台正常工作。</li>\n<li>滑动UI是NSTimer不能工作。</li>\n</ol>\n<p>这其实就是Runloop的mode再做怪。<br>Runloop可以理解为cocoa下的一种消息循环机制，用来处理各种消息事件，我们在开发的时候并不需要手动去创建一个runloop，因为框架为我们创建了一个默认的runloop，通过<code>[NSRunloop currentRunloop]</code>我们可以得到一个当前线程下面对应的runloop对象，不过我们需要注意的是不同的runloop之间消息的通知方式。</p>\n<p>在开启一个NSTimer实质上是在当前的runloop中注册一个新的事件源，而当scrollView滚动的时候，当前MainRunloop是处于UITrackingRunLoopMode的模式下，在这个模式下，是不会处理NSDefaultRunLoopMode的消息（因为RunLoop Mode不一样），要想在scrollView滚动的同时也接受其他runloop的消息，我们需要改变两者之间的runloop mode。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>\n<p>简单的说就是NSTimer不会开启新的进程，只是在runloop里注册了一下，runloop每次loop时都会检测这个timer，看是否可以触发。当runloop在A mode，而timer注册在B mode时就无法去检测这个timer，所以需要把NSTimer也注册到A mode，这样就可以被检测到。</p>\n<h2 id=\"绘制图形\"><a href=\"#绘制图形\" class=\"headerlink\" title=\"绘制图形\"></a>绘制图形</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawRect:(CGRect)rect&#123;</span><br><span class=\"line\">    // Drawing code</span><br><span class=\"line\">    // 1.获得图形上下文</span><br><span class=\"line\">    CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">    // 2.拼接图形(路径)</span><br><span class=\"line\">    // 设置线段宽度</span><br><span class=\"line\">    CGContextSetLineWidth(ctx, 10);</span><br><span class=\"line\">    // 设置线段头尾部的样式</span><br><span class=\"line\">    CGContextSetLineCap(ctx, kCGLineCapRound);</span><br><span class=\"line\">    // 设置线段转折点的样式</span><br><span class=\"line\">    CGContextSetLineJoin(ctx, kCGLineJoinRound);</span><br><span class=\"line\">    /**  第1根线段  **/</span><br><span class=\"line\">    // 设置颜色</span><br><span class=\"line\">    CGContextSetRGBStrokeColor(ctx, 1, 0, 0, 1);</span><br><span class=\"line\">    // 设置一个起点</span><br><span class=\"line\">    CGContextMoveToPoint(ctx, 10, 10);</span><br><span class=\"line\">    // 添加一条线段到(100, 100)</span><br><span class=\"line\">    CGContextAddLineToPoint(ctx, 100, 100);</span><br><span class=\"line\">    // 渲染一次</span><br><span class=\"line\">    CGContextStrokePath(ctx);</span><br><span class=\"line\">    /**  第2根线段  **/</span><br><span class=\"line\">    // 设置颜色</span><br><span class=\"line\">    CGContextSetRGBStrokeColor(ctx, 0, 0, 1, 1);</span><br><span class=\"line\">    // 设置一个起点</span><br><span class=\"line\">    CGContextMoveToPoint(ctx, 200, 190);</span><br><span class=\"line\">    // 添加一条线段到(150, 40)</span><br><span class=\"line\">    CGContextAddLineToPoint(ctx, 150, 40);</span><br><span class=\"line\">    CGContextAddLineToPoint(ctx, 120, 60);</span><br><span class=\"line\">    // 3.渲染显示到view上面</span><br><span class=\"line\">    CGContextStrokePath(ctx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建缓存时选用NSCache而非NSDictionary\"><a href=\"#构建缓存时选用NSCache而非NSDictionary\" class=\"headerlink\" title=\"构建缓存时选用NSCache而非NSDictionary\"></a>构建缓存时选用NSCache而非NSDictionary</h2><p>当系统资源将要耗尽时，NSCache可以自动删减缓存。如果采用普通的字典，那么就要自己编写挂钩，在系统发出“低内存”通知时手动删减缓存，NSCache会先删减“最久未使用”的对象。</p>\n<p>NSCache不会拷贝键，而是会保留它。此行为用NSDictionary也可以实现，但是需要编写比较复杂的代码。NSCache对象不拷贝键的原因在于：很多时候，键都是由不支持拷贝操作的对象来充当的。因此，NSCache对象不会自动拷贝键，所以说，在键不支持拷贝操作的情况下，该类用起来比字典方便。</p>\n<p>NSCache是线程安全的，NSDictionary不是。在开发者自己不编写加锁代码的前提下，多个线程可以同时访问NSCache。对缓存来说，线程安全很重要，因为开发者可能要在某个线程中读取数据，此时如果发现缓存里找不到指定的键，那么就要下载该键对应的数据了。</p>\n<p>如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种“重新计算起来很费事”的数据，才值得放入缓存，比如那些需要从网络获取从磁盘读取的数据。</p>\n<h2 id=\"Runtime机制\"><a href=\"#Runtime机制\" class=\"headerlink\" title=\"Runtime机制\"></a>Runtime机制</h2><p>\b详情见<a href=\"https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E8%AF%A6%E8%A7%A3/\">【iOS】Runtime详解</a></p>\n<h2 id=\"Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\"><a href=\"#Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\" class=\"headerlink\" title=\"Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？\"></a>Runloop是怎样持续监听事件从而实现线程保护？如果线程启用Runloop，它会一直占用CPU吗？</h2><p>RunLoop是一个让线程能随时处理事件但不退出的机制。RunLoop实际上是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行EventLoop的逻辑。线程执行了这个函数后，就会一直处于这个函数内部“接受消息-&gt;等待-&gt;处理”的循环中，知道循环结束（比如传入quit的消息），函数返回。让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。</p>\n<p>OSX/iOS系统中，提供了两个这样的对象：NSRunLoop和CFRunLoopRef。CFRunLoopRef是在CoreFoundation框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。NSRunLoop是基于CFRunLoopRef的封装，提供了面向对象的API，但是这些API不是线程安全的。</p>\n<p>线程和RunLoop之间是一一对应的，其关系是保存在一个全局的Dictionary里。线程刚创建时并没有RunLoop，如果你不主动获取，那它一直都不会有。RunLoop的创建是发生在第一次获取时，RunLoop的销毁是发生在线程结束时。你只能在一个线程的内部获取其RunLoop（主线程除外）。</p>\n<p>系统默认注册了5个RunLoop的Mode：</p>\n<ol>\n<li><code>kCFRunLoopDefaultMode</code>：App的默认Mode，通常主线程是在这个Mode下运行的。</li>\n<li><code>UITrackingRunLoopMode</code>：界面跟踪Mode，用于ScrollView追踪触摸滑动，保证界面滑动时不受其他Mode影响。</li>\n<li><code>UIInitializationRunLoopMode</code>：在刚启动App时进入的第一个Mode，启动完成后不再使用。</li>\n<li><code>GSEventReceiveRunLoopMode</code>：接受系统事件的内部Mode，通常用不到。</li>\n<li><code>kCFRunLoopCommonModes</code>：这是一个占位的Mode，没有实际作用。</li>\n</ol>\n<p>RunLoop的四个作用：</p>\n<ol>\n<li>使程序一直运行接受用户输入</li>\n<li>决定程序在何时应该处理哪些Event</li>\n<li>调用解耦</li>\n<li>节省CPU时间</li>\n</ol>\n<p>主线程的RunLoop默认是启动的。iOS的应用程序里面，程序启动后会有一个如下的main()函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> * argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">UIApplicationMain</span>(argc, argv, <span class=\"literal\">nil</span>, <span class=\"built_in\">NSStringFromClass</span>([AppDelegate <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：<a href=\"https://blog.csdn.net/potato512/article/details/51455728\">https://blog.csdn.net/potato512/article/details/51455728</a></p>\n<h2 id=\"临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\"><a href=\"#临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\" class=\"headerlink\" title=\"\b临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？\"></a>\b临界区的理解，临界资源有什么特点？为什么会发生死锁？死锁怎么预防？发生死锁了怎么办？</h2><p>产生死锁的四个必要条件：</p>\n<ol>\n<li>互斥条件：一个资源每一次只能被一个进程使用。</li>\n<li>请求与保持条件：一个进程因请求资源阻塞时，对已获得的资源保持不放。</li>\n<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能进行强制剥夺。</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n<h2 id=\"动画掉帧，CADisPlayLink，-Core-graphics\"><a href=\"#动画掉帧，CADisPlayLink，-Core-graphics\" class=\"headerlink\" title=\"动画掉帧，CADisPlayLink， Core graphics\"></a>动画掉帧，CADisPlayLink， Core graphics</h2><p>使用<a href=\"https://github.com/kconner/KMCGeigerCounter\">KMCGeigerCounter</a>检测动画掉帧问题。</p>\n<p>CADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的CADisplayLink对象，把它添加到一个RunLoop中，并给它提供一个target和selector在屏幕刷新的时候调用。另外CADisplayLink不能被继承。frameInterval属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60hz也就是每秒60次，如果将frameInterval设为2那么就会两帧调用一次，也就是变成了每秒刷新30次。</p>\n<p>我们通过pause属性开控制CADisplayLink的运行。当我们想结束一个CADisplayLink的时候，应该调用<code>invalidate</code>从RunLoop中删除并删除之前绑定的target和selector，另外CADisplayLink不能被继承。</p>\n<p>iOS设备的屏幕刷新率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。</p>\n<p>NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，RunLoop如果在阻塞状态，触发时间就会推迟到下一个RunLoop周期。并且NSTimer新增了tolerance属性，让用户可以设置可以容忍触发的时间的延迟范围。</p>\n<p>CADisplayLink使用场合相对专一，适合做UI的不停绘制，比如自定义动画引擎或则视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用CADisplayLink比起用NSTimer的好处就是我们不需要在格外关系屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p>\n<p>注意：<br>通常来讲：iOS设备的刷新频率是60Hz也就是每秒60次。那么每一次刷新的时间就是1/60秒（大概16.7毫秒）。当我们得frameInterval值为1的时候我们需要保证的是CADisplayLink调用<code>target</code>的函数计算时间不应该大于16.7，否则就会出现严重的丢帧现象。</p>\n<p>在mac应用中我们使用的不是CADisplayLink而是CVDisplayLink它是基于C接口的用起来配置有些麻烦但是用起来还是很简单的。</p>\n<h2 id=\"使用ARC是否会出现野指针，为什么？\"><a href=\"#使用ARC是否会出现野指针，为什么？\" class=\"headerlink\" title=\"使用ARC是否会出现野指针，为什么？\"></a>使用ARC是否会出现野指针，为什么？</h2><p>会出现野指针，在定义block的时候，是将block内存分配在堆上的。当在函数作用范围外的时候，block的内存会被回收释放，就会生成野指针，这时候去掉用block，就会crash。</p>\n<h2 id=\"如何让异步方法进行二次封装让其同步执行\"><a href=\"#如何让异步方法进行二次封装让其同步执行\" class=\"headerlink\" title=\"如何让异步方法进行二次封装让其同步执行\"></a>如何让异步方法进行二次封装让其同步执行</h2><p>可以用dispatch_group_async，dispatch_group_notify。</p>\n<h2 id=\"为什么这样定义单例？\"><a href=\"#为什么这样定义单例？\" class=\"headerlink\" title=\"为什么这样定义单例？\"></a>为什么这样定义单例？</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> HLTestObject *instance = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)sharedInstance</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        instance = [[[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] alloc] init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么使用GCD去创建单例，GCD中的dispatch_once函数只调用一次，多线程若有两个线程先后去执行到dispatch_once这个地方，则先执行到的回去调用，后执行的就不会调用了。</p>\n<p>为什么要让对象指针static，多线程情况下，因为dispatch_once只执行一次，除了第一个执行的，之后的线程都不执行，直接返回对象指针，若此时指针是临时变量，则会导致返回一个空指针，若为static 则返回的永远是同一个又第一个执行的生成的对象。</p>\n<h2 id=\"如何给按钮画边框\"><a href=\"#如何给按钮画边框\" class=\"headerlink\" title=\"如何给按钮画边框\"></a>如何给按钮画边框</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ringButton.tintColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.000</span> green:<span class=\"number\">0.537</span> blue:<span class=\"number\">0.506</span> alpha:<span class=\"number\">1</span>];</span><br><span class=\"line\">[ringButton.layer setMasksToBounds:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">[ringButton.layer setCornerRadius:<span class=\"number\">8.0</span>];</span><br><span class=\"line\">[ringButton.layer setBorderWidth:<span class=\"number\">1.0</span>];</span><br><span class=\"line\"><span class=\"built_in\">CGColorSpaceRef</span> colorSpace = <span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class=\"line\"><span class=\"built_in\">CGColorRef</span> colorref = <span class=\"built_in\">CGColorCreate</span>(colorSpace, (<span class=\"built_in\">CGFloat</span>[])&#123;<span class=\"number\">0.000</span>,<span class=\"number\">0.537</span>,<span class=\"number\">0.506</span>,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">[ringButton.layer setBorderColor:colorref];</span><br></pre></td></tr></table></figure>\n<h2 id=\"Socket和Http的区别，和TCP的区别\"><a href=\"#Socket和Http的区别，和TCP的区别\" class=\"headerlink\" title=\"Socket和Http的区别，和TCP的区别\"></a>Socket和Http的区别，和TCP的区别</h2><h3 id=\"Socket套接字\"><a href=\"#Socket套接字\" class=\"headerlink\" title=\"Socket套接字\"></a>Socket套接字</h3><p>套接字（Socket）是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议、本地主机的IP地址、本地进程的协议端口、远程主机的IP地址、远程进程的协议端口。</p>\n<p>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序提供并发服务的问题。多个TCP连接或多个应用程序可能需要通过一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字（Socket）接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p>\n<p>套接字之间的连接过程分为三个步骤：服务器监听、客户端请求、连接确认。<br>服务器监听：服务器端套接字并不定位具体的客户端套接字，而是出于等待连接的状态，实时监控网络状态，等待客户端的链接请求。</p>\n<p>客户端请求：指客户端的套接字提出链接请求，要链接的目标是服务端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器套接字，指出服务器端套接字的地址和端口，然后就向服务端套接字提出链接请求。</p>\n<p>连接确认：当服务器端套接字监听到或则说收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务端套接字的描述发送给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接受其他客户端套接字的链接请求。</p>\n<p>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当时使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</p>\n<p>若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p>\n<p>TCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输层的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、TCP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作为应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”</p>\n<h2 id=\"OC对象模型\"><a href=\"#OC对象模型\" class=\"headerlink\" title=\"OC对象模型\"></a>OC对象模型</h2><p>对象是OC中基本构造单元（building block），用于存储和传递数据。类和对象的最终实现都是一种数据结构。可以完整的类应该包括类方法、实例方法和成员变量（实例变量），每个对象都包括一个isa（is a class）指针指向类对象（运行时方法发送给对象消息，才确定类别并调用相应的方法实现），元类对象中的方法列表是类方法（+，class methods）。</p>\n<h2 id=\"HTTPS和HTTP的区别\"><a href=\"#HTTPS和HTTP的区别\" class=\"headerlink\" title=\"HTTPS和HTTP的区别\"></a>HTTPS和HTTP的区别</h2><ol>\n<li>HTTPS是加密传输协议，HTTP是明文传输协议</li>\n<li>HTTPS需要用到SSL证书，而HTTP不用</li>\n<li>HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO</li>\n<li>HTTPS标准端口443，HTTP标准端口90</li>\n<li>HTTPS基于传输层，HTTP基于应用层</li>\n<li>HTTPS在浏览器显示绿色安全锁，HTTP没有显示</li>\n</ol>\n<h2 id=\"使用atomic一定是线程安全的吗？\"><a href=\"#使用atomic一定是线程安全的吗？\" class=\"headerlink\" title=\"使用atomic一定是线程安全的吗？\"></a>使用atomic一定是线程安全的吗？</h2><p>不是的。<br>nonatomic的内存管理语义是非原子性的，非原子性的操作本来就是线程不安全的，而atomic的操作是原子性的，但是并不意味着它是线程安全的，它会增加正确的几率，能够更好的避免线程的错误，但是它仍然是线程不安全的。</p>\n<p>当使用atomic时，虽然对属性和读和写是原则性的，但是仍然可能出现线程错误：当线程A进行写操作，这时其他线程的读或则写操作会因为该操作而等待。当A线程的写操作结束后，B线程进行写操作，然后有线程C在A线程读操作前release了该属性，那么还会导致程序崩溃。所以仅仅使用atomic并不会使得线程安全，我们还要为线程添加lock来确保线程的安全。</p>\n<p>也就是要注意：<b>atomic所说的线程安全只是保证了getter和setter存取方法的线程安全，并不能保证整个对象是线程安全的。</b>如下例所示：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>(atomic,<span class=\"keyword\">strong</span>)<span class=\"built_in\">NSMutableArray</span> *arr;</span><br></pre></td></tr></table></figure>\n<p>如果一个线程循环的读数据，一个线程循环写数据，那么肯定会产生内存问题，因为这和setter、getter没有关系。如使用<code>[self.arr objectAtIndex:index]</code>就不是线程安全的。好的解决方案就是加锁。</p>\n<p><b>探讨一下Objective-C中几种不同方式实现的锁</b>，在这之前先构建一个测试类，假设它是我们的一个共享资源，method1和method2是互斥的，代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestObj</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)method1 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,<span class=\"built_in\">NSStringFromSelector</span>(_cmd));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)method2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,<span class=\"built_in\">NSStringFromSelector</span>(_cmd));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用NSLock实现的锁\"><a href=\"#使用NSLock实现的锁\" class=\"headerlink\" title=\"使用NSLock实现的锁\"></a>使用NSLock实现的锁</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主线程中</span></span><br><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\"><span class=\"built_in\">NSLock</span> *lock = [[<span class=\"built_in\">NSLock</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    [lock lock];</span><br><span class=\"line\">    [ojc method1];</span><br><span class=\"line\">    sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    [lock unlock];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    [lock lock];</span><br><span class=\"line\">    [ojc method2];</span><br><span class=\"line\">    [lock unlock];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>根据打印的结果已经看到，线程一锁住之后，线程二回一直等待线程一走完并将锁设置为unlock后，才会执行method2中的方法。</p>\n<p>NSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate两个方法，前一个方法会尝试加锁，如果锁不可用（已经被锁住），并不会阻塞线程，并返回NO。lockBeforeDate方法会在指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。</p>\n<h3 id=\"使用synchronized关键字构建的锁\"><a href=\"#使用synchronized关键字构建的锁\" class=\"headerlink\" title=\"使用synchronized关键字构建的锁\"></a>使用synchronized关键字构建的锁</h3><p>当然在Objective-C中你还可以用@synchronized指令快速的实现锁：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\"><span class=\"built_in\">NSLock</span> *lock = [[<span class=\"built_in\">NSLock</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@synchronized</span>(ojc)&#123;</span><br><span class=\"line\">        [ojc method1];</span><br><span class=\"line\">        sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">@synchronized</span>(ojc)&#123;</span><br><span class=\"line\">        [ojc method2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>@synchronized指令使用的obj为该锁的唯一标识，只有当标识相同时，才会满足互斥，如果线程二中的@synchronized(obj)改为@synchronized(other)，线程二就不会被阻塞，@synchronized指令实现锁的优点就是我们不需要在代码中显式的创建锁对象，便可以实现锁的机制，但作为一种预防措施，@synchronized块会隐式的添加一个异常处理例程来保护代码，该处理例程会在异常抛出的时候自动释放互斥锁。所以如果不想让隐式的异常处理例程带来额外的开销，可以考虑使用锁对象。</p>\n<h3 id=\"使用C语言的pthread-mutex-t实现的锁\"><a href=\"#使用C语言的pthread-mutex-t实现的锁\" class=\"headerlink\" title=\"使用C语言的pthread_mutex_t实现的锁\"></a>使用C语言的pthread_mutex_t实现的锁</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\">__block pthread_mutex_t mutex;</span><br><span class=\"line\">pthread_mutex_init(&amp;mutex,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">    [ojc method1];</span><br><span class=\"line\">    sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">    [ojc method2];</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>pthread_mutex_t定义在pthread.h中，需要引入<code>#import &lt;pthread.h&gt;</code>。</p>\n<h3 id=\"使用GCD来实现的锁\"><a href=\"#使用GCD来实现的锁\" class=\"headerlink\" title=\"使用GCD来实现的锁\"></a>使用GCD来实现的锁</h3><p>以上代码的多线程中已经使用到了GCD的dispatch_async方法，其实在GCD中也已经提供了一种信号机制，使用它我们也可以构建一把“锁”（本质意义上讲，信号量与锁是有区别的，具体差异参考信号量与互斥锁之间的区别）：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestObj *ojc = [[TestObj alloc] init];</span><br><span class=\"line\">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 线程一</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class=\"line\">    [ojc method1];</span><br><span class=\"line\">    dispatch_semaphore_signal(semaphore);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程二</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class=\"line\">    [ojc method2];</span><br><span class=\"line\">    dispatch_semaphore_signal(semaphore);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用自旋锁OSSpinLock来实现的“锁”\"><a href=\"#使用自旋锁OSSpinLock来实现的“锁”\" class=\"headerlink\" title=\"使用自旋锁OSSpinLock来实现的“锁”\"></a>使用自旋锁OSSpinLock来实现的“锁”</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主线程中</span></span><br><span class=\"line\">TestObj *obj = [[TestObj alloc] init];</span><br><span class=\"line\">OSSpinLock spinlock = OS_SPINLOCK_INIT;</span><br><span class=\"line\"><span class=\"comment\">//线程1</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,<span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    OSSpinLockLock(&amp;spinlock);</span><br><span class=\"line\">    [obj method1];</span><br><span class=\"line\">    sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    OSSpinLockUnlock(&amp;spinlock);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程2</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,<span class=\"number\">0</span>), ^&#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);<span class=\"comment\">//以保证让线程2的代码后执行</span></span><br><span class=\"line\">    OSSpinLockLock(&amp;spinlock);</span><br><span class=\"line\">    [obj method2];</span><br><span class=\"line\">    OSSpinLockUnlock(&amp;spinlock);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<a href=\"https://www.jianshu.com/p/e286d2907bf7\">https://www.jianshu.com/p/e286d2907bf7</a></p>"},{"title":"【iOS】Swift关键知识点汇总","date":"2018-07-09T05:23:38.000Z","abbrlink":"020c6c996c128861","_content":"\n## Swift扩展\n\n扩展就是向一个已知的类、结构体或枚举类型添加新功能。<b>扩展可以对一个\b类型添加新的功能，但是不能重写已有的功能。</b>\n\nSwift中的扩展可以：\n\n* 添加计算型属性和计算型静态属性\n* 定义实例方法和类型方法\n* 提供新的构造器\n* 定义下标\n* 定义和使用新的嵌套类型\n* 使一个已有类型符合某个协议\n<!-- more -->\n\n## Swift类型转换\n\nSwift语言转换可以判断实例的类型，也可以用于检测\b实例类型是否属于其父类或则子类的实例。\n\nSwift中类型转换使用`is`和`as`操作符实现，`is`用于检测值的类型，`as`用于转换类型。\n\n### 类型检查\n\n类型检查使用`is`关键字，操作符`is`是来检查一个实例是否属于特定\b子类型，若事例属于这个子类型，类型检查操作返回true，否则返回false。\n\n### 向下转型\n\n向下转型，用转型操作符(`as?`或则`as!`)。\b\n\n当你不确定向下转型可以成功时，用类型转换的条件形式（`as?`）。条件形式的类型转换\b总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是nil。\n\n只有当你可以确定向下转型一定会成功时候，才使用强制形式（`as!`）。当你试图向下转型一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。\n\n### Any和AnyObject的类型转换\n\nSwift为确定别名\b类型提供了两种特殊的类型别名：\n* AnyObject可以代表任何class类型的实例。\n* Any可以表示任何类型，包括方法类型（function types）。\n\n> 在一个switch语句的case\b中使用强制形式的类型转换操作符`as`（而不是`as?`）来检查和转换到一个明确的\b类型。\n\n## Swift自动引用计数（ARC）\n\n\bSwift使用自动引用计数（ARC）这一机制来跟踪和管理引用程序的内存。通常情况下我们不需要手动释放内存，因为ARC会在类的实例不在被使用时，自动释放其占用的内存。但在有些时候我们还是需要在代码中实现内存管理。\n\n### ARC功能\n\n* 当每次使用`init()`方法创建一个类的新的实例的时候，ARC会分配一大块内存来存储\b实例的信息。\n* 内存会\b包含实例的类型\b信息，以及这个\b实例所有相关属性的值。\n* 当实例不再被使用\b时，ARC释放实例所占用的内存，并让释放的内存\b能挪作他用。\n* 为了确保使用中的实例不被销毁，ARC会跟踪和计算每一个实例正在被多少属性、变量和常量所引用。\n* 实例赋值给属性、变量和常量时，它们都会创建此实例的强引用，只要引用还在，实例是不允许被销毁的。\n\n### 解决实例之间的循环强引用\n\nSwift提供了两种\b办法来解决\b你在使用\b类的属性\b时所遇到的\b循环强引用问题：\n\n* 弱引用（weak）\n* 无主引用（unowned）\n\n弱引用和无主引用允许循环引用中的一个实例引用另外一个\b实例而不保持强引用。这样实例能够互相引用而不产生循环强引用。\n\n解决闭包引起的循环强引用：在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。\n\n<b>对于生命周期中会变成nil的\b实例使用弱引用，相反的，\b对于初始化后再也不会被赋值为nil的\b实例，使用无主引用。</b>\n\n<b>当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。</b>","source":"_posts/【iOS】Swift关键知识点汇总.md","raw":"---\ntitle: 【iOS】Swift关键知识点汇总\ndate: 2018-07-09 13:23:38\ntags:\n  - iOS\nabbrlink: 020c6c996c128861\n---\n\n## Swift扩展\n\n扩展就是向一个已知的类、结构体或枚举类型添加新功能。<b>扩展可以对一个\b类型添加新的功能，但是不能重写已有的功能。</b>\n\nSwift中的扩展可以：\n\n* 添加计算型属性和计算型静态属性\n* 定义实例方法和类型方法\n* 提供新的构造器\n* 定义下标\n* 定义和使用新的嵌套类型\n* 使一个已有类型符合某个协议\n<!-- more -->\n\n## Swift类型转换\n\nSwift语言转换可以判断实例的类型，也可以用于检测\b实例类型是否属于其父类或则子类的实例。\n\nSwift中类型转换使用`is`和`as`操作符实现，`is`用于检测值的类型，`as`用于转换类型。\n\n### 类型检查\n\n类型检查使用`is`关键字，操作符`is`是来检查一个实例是否属于特定\b子类型，若事例属于这个子类型，类型检查操作返回true，否则返回false。\n\n### 向下转型\n\n向下转型，用转型操作符(`as?`或则`as!`)。\b\n\n当你不确定向下转型可以成功时，用类型转换的条件形式（`as?`）。条件形式的类型转换\b总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是nil。\n\n只有当你可以确定向下转型一定会成功时候，才使用强制形式（`as!`）。当你试图向下转型一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。\n\n### Any和AnyObject的类型转换\n\nSwift为确定别名\b类型提供了两种特殊的类型别名：\n* AnyObject可以代表任何class类型的实例。\n* Any可以表示任何类型，包括方法类型（function types）。\n\n> 在一个switch语句的case\b中使用强制形式的类型转换操作符`as`（而不是`as?`）来检查和转换到一个明确的\b类型。\n\n## Swift自动引用计数（ARC）\n\n\bSwift使用自动引用计数（ARC）这一机制来跟踪和管理引用程序的内存。通常情况下我们不需要手动释放内存，因为ARC会在类的实例不在被使用时，自动释放其占用的内存。但在有些时候我们还是需要在代码中实现内存管理。\n\n### ARC功能\n\n* 当每次使用`init()`方法创建一个类的新的实例的时候，ARC会分配一大块内存来存储\b实例的信息。\n* 内存会\b包含实例的类型\b信息，以及这个\b实例所有相关属性的值。\n* 当实例不再被使用\b时，ARC释放实例所占用的内存，并让释放的内存\b能挪作他用。\n* 为了确保使用中的实例不被销毁，ARC会跟踪和计算每一个实例正在被多少属性、变量和常量所引用。\n* 实例赋值给属性、变量和常量时，它们都会创建此实例的强引用，只要引用还在，实例是不允许被销毁的。\n\n### 解决实例之间的循环强引用\n\nSwift提供了两种\b办法来解决\b你在使用\b类的属性\b时所遇到的\b循环强引用问题：\n\n* 弱引用（weak）\n* 无主引用（unowned）\n\n弱引用和无主引用允许循环引用中的一个实例引用另外一个\b实例而不保持强引用。这样实例能够互相引用而不产生循环强引用。\n\n解决闭包引起的循环强引用：在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。\n\n<b>对于生命周期中会变成nil的\b实例使用弱引用，相反的，\b对于初始化后再也不会被赋值为nil的\b实例，使用无主引用。</b>\n\n<b>当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。</b>","slug":"【iOS】Swift关键知识点汇总","published":1,"updated":"2022-05-19T03:13:11.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo3004cl1l3eznx27cu","content":"<h2 id=\"Swift扩展\"><a href=\"#Swift扩展\" class=\"headerlink\" title=\"Swift扩展\"></a>Swift扩展</h2><p>扩展就是向一个已知的类、结构体或枚举类型添加新功能。<b>扩展可以对一个\b类型添加新的功能，但是不能重写已有的功能。</b></p>\n<p>Swift中的扩展可以：</p>\n<ul>\n<li>添加计算型属性和计算型静态属性</li>\n<li>定义实例方法和类型方法</li>\n<li>提供新的构造器</li>\n<li>定义下标</li>\n<li>定义和使用新的嵌套类型</li>\n<li>使一个已有类型符合某个协议<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"Swift类型转换\"><a href=\"#Swift类型转换\" class=\"headerlink\" title=\"Swift类型转换\"></a>Swift类型转换</h2><p>Swift语言转换可以判断实例的类型，也可以用于检测\b实例类型是否属于其父类或则子类的实例。</p>\n<p>Swift中类型转换使用<code>is</code>和<code>as</code>操作符实现，<code>is</code>用于检测值的类型，<code>as</code>用于转换类型。</p>\n<h3 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h3><p>类型检查使用<code>is</code>关键字，操作符<code>is</code>是来检查一个实例是否属于特定\b子类型，若事例属于这个子类型，类型检查操作返回true，否则返回false。</p>\n<h3 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h3><p>向下转型，用转型操作符(<code>as?</code>或则<code>as!</code>)。\b</p>\n<p>当你不确定向下转型可以成功时，用类型转换的条件形式（<code>as?</code>）。条件形式的类型转换\b总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是nil。</p>\n<p>只有当你可以确定向下转型一定会成功时候，才使用强制形式（<code>as!</code>）。当你试图向下转型一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。</p>\n<h3 id=\"Any和AnyObject的类型转换\"><a href=\"#Any和AnyObject的类型转换\" class=\"headerlink\" title=\"Any和AnyObject的类型转换\"></a>Any和AnyObject的类型转换</h3><p>Swift为确定别名\b类型提供了两种特殊的类型别名：</p>\n<ul>\n<li>AnyObject可以代表任何class类型的实例。</li>\n<li>Any可以表示任何类型，包括方法类型（function types）。</li>\n</ul>\n<blockquote>\n<p>在一个switch语句的case\b中使用强制形式的类型转换操作符<code>as</code>（而不是<code>as?</code>）来检查和转换到一个明确的\b类型。</p>\n</blockquote>\n<h2 id=\"Swift自动引用计数（ARC）\"><a href=\"#Swift自动引用计数（ARC）\" class=\"headerlink\" title=\"Swift自动引用计数（ARC）\"></a>Swift自动引用计数（ARC）</h2><p>\bSwift使用自动引用计数（ARC）这一机制来跟踪和管理引用程序的内存。通常情况下我们不需要手动释放内存，因为ARC会在类的实例不在被使用时，自动释放其占用的内存。但在有些时候我们还是需要在代码中实现内存管理。</p>\n<h3 id=\"ARC功能\"><a href=\"#ARC功能\" class=\"headerlink\" title=\"ARC功能\"></a>ARC功能</h3><ul>\n<li>当每次使用<code>init()</code>方法创建一个类的新的实例的时候，ARC会分配一大块内存来存储\b实例的信息。</li>\n<li>内存会\b包含实例的类型\b信息，以及这个\b实例所有相关属性的值。</li>\n<li>当实例不再被使用\b时，ARC释放实例所占用的内存，并让释放的内存\b能挪作他用。</li>\n<li>为了确保使用中的实例不被销毁，ARC会跟踪和计算每一个实例正在被多少属性、变量和常量所引用。</li>\n<li>实例赋值给属性、变量和常量时，它们都会创建此实例的强引用，只要引用还在，实例是不允许被销毁的。</li>\n</ul>\n<h3 id=\"解决实例之间的循环强引用\"><a href=\"#解决实例之间的循环强引用\" class=\"headerlink\" title=\"解决实例之间的循环强引用\"></a>解决实例之间的循环强引用</h3><p>Swift提供了两种\b办法来解决\b你在使用\b类的属性\b时所遇到的\b循环强引用问题：</p>\n<ul>\n<li>弱引用（weak）</li>\n<li>无主引用（unowned）</li>\n</ul>\n<p>弱引用和无主引用允许循环引用中的一个实例引用另外一个\b实例而不保持强引用。这样实例能够互相引用而不产生循环强引用。</p>\n<p>解决闭包引起的循环强引用：在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。</p>\n<p><b>对于生命周期中会变成nil的\b实例使用弱引用，相反的，\b对于初始化后再也不会被赋值为nil的\b实例，使用无主引用。</b></p>\n<p><b>当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。</b></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Swift扩展\"><a href=\"#Swift扩展\" class=\"headerlink\" title=\"Swift扩展\"></a>Swift扩展</h2><p>扩展就是向一个已知的类、结构体或枚举类型添加新功能。<b>扩展可以对一个\b类型添加新的功能，但是不能重写已有的功能。</b></p>\n<p>Swift中的扩展可以：</p>\n<ul>\n<li>添加计算型属性和计算型静态属性</li>\n<li>定义实例方法和类型方法</li>\n<li>提供新的构造器</li>\n<li>定义下标</li>\n<li>定义和使用新的嵌套类型</li>\n<li>使一个已有类型符合某个协议","more":"</li>\n</ul>\n<h2 id=\"Swift类型转换\"><a href=\"#Swift类型转换\" class=\"headerlink\" title=\"Swift类型转换\"></a>Swift类型转换</h2><p>Swift语言转换可以判断实例的类型，也可以用于检测\b实例类型是否属于其父类或则子类的实例。</p>\n<p>Swift中类型转换使用<code>is</code>和<code>as</code>操作符实现，<code>is</code>用于检测值的类型，<code>as</code>用于转换类型。</p>\n<h3 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h3><p>类型检查使用<code>is</code>关键字，操作符<code>is</code>是来检查一个实例是否属于特定\b子类型，若事例属于这个子类型，类型检查操作返回true，否则返回false。</p>\n<h3 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h3><p>向下转型，用转型操作符(<code>as?</code>或则<code>as!</code>)。\b</p>\n<p>当你不确定向下转型可以成功时，用类型转换的条件形式（<code>as?</code>）。条件形式的类型转换\b总是返回一个可选值（optional value），并且若下转是不可能的，可选值将是nil。</p>\n<p>只有当你可以确定向下转型一定会成功时候，才使用强制形式（<code>as!</code>）。当你试图向下转型一个不正确的类型时，强制形式的类型转换会触发一个运行时错误。</p>\n<h3 id=\"Any和AnyObject的类型转换\"><a href=\"#Any和AnyObject的类型转换\" class=\"headerlink\" title=\"Any和AnyObject的类型转换\"></a>Any和AnyObject的类型转换</h3><p>Swift为确定别名\b类型提供了两种特殊的类型别名：</p>\n<ul>\n<li>AnyObject可以代表任何class类型的实例。</li>\n<li>Any可以表示任何类型，包括方法类型（function types）。</li>\n</ul>\n<blockquote>\n<p>在一个switch语句的case\b中使用强制形式的类型转换操作符<code>as</code>（而不是<code>as?</code>）来检查和转换到一个明确的\b类型。</p>\n</blockquote>\n<h2 id=\"Swift自动引用计数（ARC）\"><a href=\"#Swift自动引用计数（ARC）\" class=\"headerlink\" title=\"Swift自动引用计数（ARC）\"></a>Swift自动引用计数（ARC）</h2><p>\bSwift使用自动引用计数（ARC）这一机制来跟踪和管理引用程序的内存。通常情况下我们不需要手动释放内存，因为ARC会在类的实例不在被使用时，自动释放其占用的内存。但在有些时候我们还是需要在代码中实现内存管理。</p>\n<h3 id=\"ARC功能\"><a href=\"#ARC功能\" class=\"headerlink\" title=\"ARC功能\"></a>ARC功能</h3><ul>\n<li>当每次使用<code>init()</code>方法创建一个类的新的实例的时候，ARC会分配一大块内存来存储\b实例的信息。</li>\n<li>内存会\b包含实例的类型\b信息，以及这个\b实例所有相关属性的值。</li>\n<li>当实例不再被使用\b时，ARC释放实例所占用的内存，并让释放的内存\b能挪作他用。</li>\n<li>为了确保使用中的实例不被销毁，ARC会跟踪和计算每一个实例正在被多少属性、变量和常量所引用。</li>\n<li>实例赋值给属性、变量和常量时，它们都会创建此实例的强引用，只要引用还在，实例是不允许被销毁的。</li>\n</ul>\n<h3 id=\"解决实例之间的循环强引用\"><a href=\"#解决实例之间的循环强引用\" class=\"headerlink\" title=\"解决实例之间的循环强引用\"></a>解决实例之间的循环强引用</h3><p>Swift提供了两种\b办法来解决\b你在使用\b类的属性\b时所遇到的\b循环强引用问题：</p>\n<ul>\n<li>弱引用（weak）</li>\n<li>无主引用（unowned）</li>\n</ul>\n<p>弱引用和无主引用允许循环引用中的一个实例引用另外一个\b实例而不保持强引用。这样实例能够互相引用而不产生循环强引用。</p>\n<p>解决闭包引起的循环强引用：在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。</p>\n<p><b>对于生命周期中会变成nil的\b实例使用弱引用，相反的，\b对于初始化后再也不会被赋值为nil的\b实例，使用无主引用。</b></p>\n<p><b>当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。</b></p>"},{"title":"iOS高级开发面试题（中）","date":"2017-08-06T03:44:34.000Z","abbrlink":"e3ebefa6dc5acc4e","_content":"\n## __block在arc和非arc下含义一样吗？\n一般在block中修改变量多需要事先加`__block`进行修饰。在非arc下，`__block`修饰的变量的引用计数是不变的，在arc下会引用到计数+1。非arc中使用`__block`解决循环引用问题，在arc中使用`__weak`解决循环引用问题。\n``` objc\n//非ARC\n__block typeof(self) weakSelf = self;\n//ARC\n__weak typeof(self) weakSelf = self;\n\nself.myBlock = ^(int paramInt){ \n//使用weakSelf访问self成员\n [weakSelf anotherFunc];\n};\n```\n<!-- more -->\n## 什么是method swizzling?\n\nmethod swizzling就是通过Runtime机制，将两个实现调换。如图\b看起来比较形象：\n\n{% asset_img method_swizzling.png Method Swizzling %}\n\n具体做法是，首先建立自己的方法，然后在`+load`方法中去实现方法交换的代码。（以下调换实现的方法要在`+load`中执行）\n\n``` objc\nMethod ori_Method =  class_getInstanceMethod([MYclass class], @selector(lastObject));  \nMethod my_Method = class_getInstanceMethod([MYclass class], @selector(myLastObject));  \nmethod_exchangeImplementations(ori_Method, my_Method);\n```\n方法的交换是在`+load`中进行交换的。\n\n## 如何高性能的给UIImageView加个圆角？\n\n### 不好的解决方法\n``` objc\nself.imageView.layer.cornerRadius = 5;\nself.imageView.layer.masksToBounds = YES;\n```\n上面的方式会强制Core Animation提前渲染屏幕的离屏绘制，而离屏绘制就会给性能带来负面影响，会有卡顿的现象出现。\n\n### 真正的解决方案：使用绘图技术\n\n通过绘图技术给`UIImageview`添加一个分类，使用下面代码，取保添加圆角时`imageView.image`不为`nil`。\n\n``` objc\n#import \"UIImageView+cornerRadius.h\"\n\n@implementation UIImageView (cornerRadius)\n\n- (void)quickSetCornerRadius:(CGFloat)cornerRadius {\n    if (self.image != nil) {\n        self.image = [self.image imageAddCornerWithRadius:cornerRadius andSize:self.bounds.size];\n    }\n}\n\n@end\n\n@implementation UIImage (cornerRadius)\n- (UIImage *)imageAddCornerWithRadius:(CGFloat)radius andSize:(CGSize)size {\n    // NO代表透明\n    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0);\n    // 获取上下文\n    CGContextRef ctx = UIGraphicsGetCurrentContext();\n    // 添加一个圆\n    CGRect rect = CGRectMake(0, 0, size.width, size.height);\n    CGContextAddEllipseInRect(ctx, rect);\n    // 裁剪\n    CGContextClip(ctx);\n    // 将图片画上去\n    [self drawInRect:rect];\n    // 得到画上的图像\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    // 关闭上下文\n    UIGraphicsEndImageContext();\n    return image;\n}\n@end\n```\n\n### 使用了贝塞尔曲线\"切割\"个这个图片\n\n与上面的方法一致都是通过绘图产生新的`UIImage`，这里只是将`CGContextAddEllipseInRect`画圆换成了`UIBezierPath bezierPathWithRoundedRect:`。给UIImageview添加一个分类方法`- (void)bezierCornerRadius:(CGFloat)cornerRadius`。\n``` objc\n- (void)bezierCornerRadius:(CGFloat)cornerRadius {\n    UIImage *newImage = self.image;\n    // NO代表透明\n    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, 1.0);\n    // 获取上下文，用Bezier曲线画圆，并裁剪\n    [[UIBezierPath bezierPathWithRoundedRect:self.bounds cornerRadius:cornerRadius] addClip];\n    // 将图片画进裁剪的图形中\n    [newImage drawInRect:self.bounds];\n    // 将画布中新得到的图形设置为UIImageview的image\n    self.image = UIGraphicsGetImageFromCurrentImageContext();\n    // 关闭上下文\n    UIGraphicsEndImageContext();\n}\n```\n\n使用`[imageView quickSetCornerRadius:50];`就可以给`imageView`添加半径为50的圆角。\n\n## UIView和CALayer是什么关系？\n\nUIView和CALayer有一下区别：\n* `UIView`可以响应事件，`CALayer`不能响应事件\n* `UIView`主要是对显示内容的管理而 `CALayer` 主要侧重显示内容的绘制\n* 每个UIView内部都有一个CALayer在背后提供内容的绘制和显示，并且UIView的尺寸和样式都由内部的CALayer\b所提供。两者都由树状层级结构，`CALayer`内部有`sublayers`，`UIView`内部有`subViews`。但是`CALayer`比`UIView`多了个`AnchorPoint`。\n* 在UIView显示的时候，UIView作为`CALayer`的`CALayerDelegate`，`UIView`的显示内容由内部的`CALayer`的`dispaly`。\n* `CALayer`是默认修改属性支撑隐形动画的，在给UIVIiew的Layer做动画的时候，UIView作为CALayer的代理，CALayer通过`actionForLayer:forKey:`向UIView请求相应的action（动画）。\n* `CALayer`内部维护着三份`layer tree`，分别是`presentLayer Tree`（动画树）、`modeLayer Tree`（模型树）、`render Tree`（渲染树），在做iOS动画的时候，我们修改动画的属性其实是`CALayer`的`presentLayer`属性值，而最终展示在界面上的实际是UIView的modalLayer。\n\n参考\b详解：https://www.jianshu.com/p/079e5cf0f014\n\n## 使用drawRect有什么影响？\n\n`drawRect`方法依赖Core Graphics框架来进行自定义绘制，这种方法的主要缺点是处理touch时间的时候，都会用`setNeddsDisplay`进行强制重绘（比如每次点击按钮的时候都会被强制重绘）；并且不不止一次，每次单点事件触发两次执行。这样的话\b从性能角度来说，对CPU和\b内存使用上都是欠佳的（特别是在界面上有多个`UIButton`）。\n\n## 设计简单的图片内存缓存器\n\n写一个FIFO的存储机制，设置一定量的内存大小。每次添加新的图片后检查是否超出容量，如果超出则释放队列最前面的图片。\n\n## 用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\n\n如果要求不是特别高，推荐在同一个线程中读写，这样比较省事，当然如果你必须要CoreData多线程，需要注意：\n1. 只用一个`NSPersistentStoreCoordinator`。\n2. 每个线程创建一个`NSManagedObjectContext`。\n3. 不要传递`NSManagedObject`，传objectID，通过fetch获得。\n4. 先存后取，利用`NSManagedObjectContext-mergeChangesFromContextDidSaveNotification:`。\n\n## 什么是二叉搜索树？search的时间复杂度是多少?\n\n二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：\n* 若其左子树存在，则其左子树中每个节点的值都不大于该节点值；\n* 若其右子树存在，则其右子树中每个节点的值都不小于该节点值。\n\n搜索的时间复杂度为O(log(n))~\bO(n)。\n\n## `loadView`是干嘛用的？\n\n* 作用: 加载控制器（`UIViewController`）的`view`。\n* 调用时间：第一次使用控制器view的时候。\n\n关于`loadView`的一些理解：\n* 只要重写`loadView`，里面就不要调用`[super loadView]`，\b因为如果我们重写了`loadView`的方法，就代表着我们需要初始化的是自己创建的`view`，而不再是系统默认的`view`，如果再调用`[super loadView]`就显得多余了。`[super loadView]`会去判断有没有指定storyboard，如果有，就会帮你加载storyborad描述的控制器的`view`。\n* 在`loadView`方法中，如果没有给控制器的`view`赋值，就不能获取控制器的`view`，否则会造成死循环。\n\n## `viewWillLayoutSubView`的调用情况？\n\n`viewWillLayoutSubView`在以下情况会被调用：\n* 在`UIView`init初始化的时候`viewWillLayoutSubView`不会被调用，但是用`initWithFrame:`进行初始化时，当rect的值不为`CGRectZero`时会触发`viewWillLayoutSubview`。\n* `addSubview`时会触发`viewWillLayoutSubview`。\n* 设置`view`的`frame`时会触发`viewWillLayoutSubview`，当然前提是设置前后的`frame`值发生了变化。\n* 滚动一个`UIScrollView`时会触发`viewWillLayoutSubview`。\n* 旋转`UIScreen`时会触发父`UIView`上的`viewWillLayoutSubview`。\n\n## 如何让自己的类用`copy`修饰符？如何重写带`copy`关键字的setter？\n遵循`NSCopying`协议并实现`copyWithZone`方法就可以让自己的类使用`copy`修饰符修饰。\n``` objc\n- (void)setName:(NSString *)name {\n    _name = [name copy];\n}\n```\n上面的方法可以重写带`copy`关键字的setter。\n如果是只读属性可以在初始化`init`函数中完成对`copy`修饰关键字的赋值。\n## @protocol 和 category 中如何使用 @property\n建立关联引用。详情请见[【iOS】Runtime引用](https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E5%BA%94%E7%94%A8/)一文中 ”关联对象（Objective-C Associated Objects）给分类添加属性“。\n\n## runtime 如何实现 weak 属性\nweak关键字表明该属性定义了一种“非拥有关系”（nonowning relationship）。为这种属性设置新值时，设置方法既不保留新值，又不释放旧值。此特质与`assign`类似，然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n\n那么runtime如何实现weak变量的自动置为nil？\n\n在runtime中对注册的类进行管理，对于`weak`对象将会放入`hash`表中。用weak指向的内存地址\b作为key,当此对象的引用计数为0的时候回dealloc，加入weak\b指向的内存地址是a，那么就会以a为键，在这个weak表中搜索，找到键为a的weak对象，从而设置为nil。\n\n## @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\nhttps://blog.csdn.net/u011774517/article/details/56013365\n### @property的本质是什么？\n`@property`的本质就是：@property = ivar + getter + setter;\n属性（property）有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）\n\n“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。\n\n例如下面的类：\n``` objc\n@interface Person : NSObject\n@property NSString *firstName;\n@property NSString *lastName;\n@end\n```\n上述代码写出来与下面这种写法等效：\n``` objc\n@interface Person : NSObject\n- (NSString *)firstName;\n- (void)setFirstName:(NSString *)firstName;\n- (NSString *)lastName;\n- (void)setLastName:(NSString *)lastName;\n@end\n```\n\n### ivar、getter、setter是如何生成并添加到这个类中的？\n自动合成（autosynthesize）\n\n完成属性定义后，编译器会自动编写访问这些属性所需的方法，\b此过程叫做自动合成（autosynthesize）。这个过程由编译器在编译执行期间执行，所以编辑器里看不到这些合成方法（synthesized method）的源码。除了生成方法代码getter、setter之外，编译器还要自动向类中适当添加类型的实例变量，并且在属性名前加下划线，以此作为实例变量的名字。\n\n## @synthesize和@dynamic分别有什么作用？\n\n1. `@propert`有两个对应的词，一个是`@synthesize`，一个是`@dynamic`。如果`@synthesize`和`@dynamic`都没有写，那么默认的就是`@syntheszie var = _var;`。\n\n2. `@synthesize`的语意是如果你没有手动实现setter和getter方法，那么编译器会自动给你加上这两个方法。\n\n3. `@dynamic`告诉编译器setter和getter方法由用户自己实现，不自动生成。（对于readonly属性的字需要提供getter即可）。\n\n## ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\n\n分两种情况，对于基本数据类型默认关键字是`(atomic,readwrite,assign)`，对于普通的OC对象默认关键字是`(atomic,readwrite,strong)`。\n\n## 扩展（Extension）和分类（Category）的区别？\n\n推荐使用Category，Category可以：\n* 给已经存在的类添加方法\n* 把类的方法分开在不同的文件中\b，这样的优点有：\n  * 减少单个文件的体积\n  * 把不同功能组织在不同的category\b文件中\n  * 多个开发者可以共同完成一个类\n  * 按照需求加载想要加载的category\n* 声明私有和公用方法\n\n### category和extension的区别1\n* category：类别，分类\n  * 专门用来给类添加新的方法\n  * 通常不能给类添加属性，添加了成员变量也获取不到（但是通过Runtime可以给类添加属性）\n  * 分类（Category）中@property定义变量，只会生成变量的getter，setter方法申明，没有方法实现和带下划线的成员变量\n  * 分类会覆盖类的方法，如果分类的方法与类本来的方法同名，则会覆盖类的方法\n\n* extension：扩展\n  * 扩展可以说是特殊的分类，也称做\b匿名分类\n  * 可以给类添加成员属性，但是是私有的\n  * 可以给类添加成员方法，但是是私有方法\n  * 伴随着类的产生而产生，与随着类的消失而消失\n  * extension一般用来隐藏类的私有方法，必须要有一个类的源码才能添加一个类的extension，所以对于一些系统类NSString就无法添加扩展\n\n\n## 如何实现A、B请求完成后，再执行C请求？\b\n基本思路是使用iOS的gcd异步请求A、B完成后汇总结果，然后再执行C请求。\n``` objc\n- (void)gcdGroup {\n    dispatch_queue_t queue = dispatch_queue_create(0, 0);\n    dispatch_group_t group = dispatch_group_create();\n    \n    dispatch_group_async(group, queue, ^{\n        // 任务A\n    });\n    dispatch_group_async(group, queue, ^{\n        // 任务B\n    });\n    \n    dispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        // 任务C\n    });\n}\n```\n\n## @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\n\n实例变量 = 成员变量 = ivar\n\n`@synthesize`合成实例变量的规则，有一下几点：\n* 如果指定了成员变量的名称，会生成一个指定名称的成员变量\n* 如果这个成员变量\b存在了就不会再生成了\n* 如果是`@synthesize foo;`会生成一个名称为foo的成员变量，也就是说：如果没有指定成员变量的名称会生成一个和属性同名的成员变量\n* 如果是`@synthesize foo = _foo;`，就不会生成成员变量了\n\b\n加入property名为foo，存在一个名为_foo的实例变量，就不会再自动合成新变量。\n\n## 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\n有了自动合成属性实例变量之后，`@synthesize`还有以下使用场景：\n* 同时重写了属性的setter\b和getter方法\n* 只读属性的getter时\n* 使用了`@dynamic`时\n* 在`@protocol`中定义的所有属性\n* 在category中定义的所有属性重载的属性\n* 当在子类中重载了父类的属性\n\n在上面的场景中，你必须使用`@synthesize`来手动合成ivar。\n\n## 什么时候会报unrecognized selector的异常？\nobjc向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象所属的类，然后在该类的方法列表以及父类方法列表中寻找方法运行，如果在最顶层的父类方法列表中依然找不到相应的方法时，程序运行就会挂掉并抛出unrecognized selector的异常。但是在这之前，runtime会有三次拯救程序崩溃的机会。\n\n## objc中向一个nil对象发送消息将会发生什么？\n\n不会报错，看上去什么都没有发生，但事实上还是发生了一些事情的。\n``` objc\nSomeClass * someObject;\nsomeObject = nil;\n[someObject doSomething];\n```\n就上上面的代码，向nil对象发送了doSomething，OC中nil是被当做0定义的。也就是说runtime要去获取这个nil的对象时，回去读取内存中0的位置，这是肯定不会被允许的，会返回nil，0，0.0等数据，根据返回值类型。\n\nnil比较容易与僵尸对象混淆，僵尸对象并不是nil，僵尸对象是你的对象被销毁了或则用于其他地方了，但是他的指针依然存在。会发生向一个object发送一个\b没有的方法。\n\n## 一个objc对象的isa指针指向什么？有什么作用？\n一个objc对象的isa指针指向它的类对象，从而可以找到类对象上的方法。\n\n每个objc对象都有一个隐藏的数据结构，这个数据结构是objcd对象的第一个成员变量，他就是isa指针。它指向一个类对象(class object，记住它是一个对象，是占用内存空间的一个变量，这个对象在编译的时候编译器就生成了，专门来描述某个类的定义)，这个类对象包含了objc对象的一些信息(为了区分两个对象，这里我们称作objc对象)，包含objc对象的方法调度表，实现了什么协议等等。\n``` objc\n@implementation Son : Father\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"%@\", NSStringFromClass([self class]));\n        NSLog(@\"%@\", NSStringFromClass([super class]));\n    }\n    return self;\n}\n```\n上面的代码输出都是Son，因为`[self class]`和`[super class]`都是以这个Son实例作为参数，去调用自己的class方法或father的class方法，结果发现它们都没有实现，都是调用NSObject的class方法，参数是同一个Son，所以输出的都是Son。\n\n## 一个objc对象如何进行内存布局？（考虑有父类的情况）\n所有父类成员变量和父类成员变量都会存放在该对象对应的存储空间中。\n每个对象内部都有一个isa指针，指向它的类对象，类\b对象中存放着本对象的：\n* 对象方法列表（对象能够接受的消息列表，保存在它\b所对应的类对象中）\n* 成员变量的列表\n* 属性列表\n\n它内部有一个isa指针指向元对象（meta class），元对象内部存放的是类方法列表，类对象内部还有一个superclass的指针，指向他的父类对象。\n* 根对象就是NSObject，它的superclass指针指向nil。\n* 类对象既然成为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类（meta class），即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。\n\n## objc中的类方法和实例方法有什么本质区别和联系？\n\n### 类方法\n* 类方法是属于类对象的\n* 类方法只能通过类对象调用\n* 类方法中的self是类对象\n* 类方法可以调用其他的类方法\n* 类方法不能访问成员变量\n* 类方法不能直接调用对象方法\n\n### 实例方法\n* 实例方法是属于实例对象的\n* 实例方法只能通过实例对象调用\n* 实例方法中的self是实例对象\n* 实例方法中可以访问成员变量\n* 实例方法中直接调用实例方法\n* 实例方法中可以调用类方法（通过类名）\n\n## _objc_msgForward函数是做什么的，直接调用它将会发生什么？\n_objc_msgForward是IMP类型，用于消息转发的：当一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会\b尝试做消息转发。\n\n直接调用_objc_msgForward是非常危险的事，如果用不好会导致程序Crash，但是如果用得好，能做非常酷的事。\n\n一旦调用_objc_msgForward，将调过查找IMP的过程，直接触发“消息转发”，如果调用了_objc_msgForward，即使这个对象确实已经实现了这个方法，也会告诉objc_msgSend：“我没有在这个对象里找到这个方法的实现”。\n\n## 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n不能向编译后得到的类中增加实例变量，能向运行时创建的类中添加实例变量。\n\n因为编译后的类已经注册在runtime中，类结构体中的objc_ivar_list实例变量的链表和instance_size实例变量的内存大小已经确定，同时runtime会调用class_setIvarLayout或class_setWeakIvarLayout来处理strong weak引用。所以不能向存在的类中添加实例变量。\n\n运行时创建的类是可以添加实例变量，调用class_addIvar函数。但是得在调用objc_allocateClassPair之后，objc_registerClassPair之前，原因和上面一样。\n\n## runloop和线程有什么关系？\n\n1. RunLoop的作用就是来管理线程的，当线程的RunLoop开启后，线程就会在执行完任务后，出于休眠状态，随时等待接收新的任务，而不是退出。\n2. 只有主线程的RunLoop是默认开启的，所以程序在开启后，会一直运行，不会退出。其他线程的RunLoop如果需要开启，就手动开启。\n\n## runloop内部是如何实现的？\n1. 有一个判断循环的条件，满足条件，就一直循环。\n2. 线程得到唤醒事件被唤醒，事件处理完毕后，回到唤醒状态，等待下次唤醒。\n\n在while里有一个一直监听唤醒时间的东西，监听到就立马处理。之后又循环回来监听，直到满足跳出条件。\n\n``` objc\nfunction loop() {\n    initialize();\n    do {\n        var message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n```\n\n## runloop的mode作用是什么？\nrunloop主要是用来指定事件在运行循环的优先级，分为：\n* `NSDefaultRunLoopMode`：默认，空闲状态\n* `UITrackingRunLoopMode`：ScrollView滑动时\n* `UIInitializationRunLoopMode`：启动时\n* `NSRunLoopCommonModes`：Mode集合\n\n苹果公开提供的Mode有两个：\n* `NSDefaultRunLoopMode`\n* `NSRunLoopCommonModes`\n\n## 以`scheduledTimerWithTimeInterval`的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\n\nRunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，scrollView滚动过程中`NSDefaultRunLoopMode`(`kCFRunLoopDefaultMode`)的mode会切换到`UITrackingRunLoopMode`来保证scrollView的流畅滑动：只能在`UITrackingRunLoopMode`模式下处理的事件会影响scrollView的滑动。\n\n如果我们把一个NSTimer对象以`UITrackingRunLoopMode`(`kCFRunLoopDefaultMode`)添加到主运行循环中的时候，scrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。\n\n同时因为mode还是可以定制的，所以：\nNSTimer计时器会被scrollView的滑动影响的问题可以通过将timer添加在`NSRunLoopCommonModes`（`kCFRunLoopCommonModes`）来解决。\n\n这个模式等效于`NSDefaultRunLoopMode`和`NSEventTrackingRunLoopMode`的结合。两个模式以数组的形式组合，当只要其中任意一个模式触发，都是这个大模式的触发，都会响应。","source":"_posts/iOS高级开发面试题（中）.md","raw":"---\ntitle: iOS高级开发面试题（中）\ndate: 2017-08-06 11:44:34\ntags:\n  - iOS\ncategories: 知识汇总\nabbrlink: e3ebefa6dc5acc4e\n---\n\n## __block在arc和非arc下含义一样吗？\n一般在block中修改变量多需要事先加`__block`进行修饰。在非arc下，`__block`修饰的变量的引用计数是不变的，在arc下会引用到计数+1。非arc中使用`__block`解决循环引用问题，在arc中使用`__weak`解决循环引用问题。\n``` objc\n//非ARC\n__block typeof(self) weakSelf = self;\n//ARC\n__weak typeof(self) weakSelf = self;\n\nself.myBlock = ^(int paramInt){ \n//使用weakSelf访问self成员\n [weakSelf anotherFunc];\n};\n```\n<!-- more -->\n## 什么是method swizzling?\n\nmethod swizzling就是通过Runtime机制，将两个实现调换。如图\b看起来比较形象：\n\n{% asset_img method_swizzling.png Method Swizzling %}\n\n具体做法是，首先建立自己的方法，然后在`+load`方法中去实现方法交换的代码。（以下调换实现的方法要在`+load`中执行）\n\n``` objc\nMethod ori_Method =  class_getInstanceMethod([MYclass class], @selector(lastObject));  \nMethod my_Method = class_getInstanceMethod([MYclass class], @selector(myLastObject));  \nmethod_exchangeImplementations(ori_Method, my_Method);\n```\n方法的交换是在`+load`中进行交换的。\n\n## 如何高性能的给UIImageView加个圆角？\n\n### 不好的解决方法\n``` objc\nself.imageView.layer.cornerRadius = 5;\nself.imageView.layer.masksToBounds = YES;\n```\n上面的方式会强制Core Animation提前渲染屏幕的离屏绘制，而离屏绘制就会给性能带来负面影响，会有卡顿的现象出现。\n\n### 真正的解决方案：使用绘图技术\n\n通过绘图技术给`UIImageview`添加一个分类，使用下面代码，取保添加圆角时`imageView.image`不为`nil`。\n\n``` objc\n#import \"UIImageView+cornerRadius.h\"\n\n@implementation UIImageView (cornerRadius)\n\n- (void)quickSetCornerRadius:(CGFloat)cornerRadius {\n    if (self.image != nil) {\n        self.image = [self.image imageAddCornerWithRadius:cornerRadius andSize:self.bounds.size];\n    }\n}\n\n@end\n\n@implementation UIImage (cornerRadius)\n- (UIImage *)imageAddCornerWithRadius:(CGFloat)radius andSize:(CGSize)size {\n    // NO代表透明\n    UIGraphicsBeginImageContextWithOptions(size, NO, 0.0);\n    // 获取上下文\n    CGContextRef ctx = UIGraphicsGetCurrentContext();\n    // 添加一个圆\n    CGRect rect = CGRectMake(0, 0, size.width, size.height);\n    CGContextAddEllipseInRect(ctx, rect);\n    // 裁剪\n    CGContextClip(ctx);\n    // 将图片画上去\n    [self drawInRect:rect];\n    // 得到画上的图像\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    // 关闭上下文\n    UIGraphicsEndImageContext();\n    return image;\n}\n@end\n```\n\n### 使用了贝塞尔曲线\"切割\"个这个图片\n\n与上面的方法一致都是通过绘图产生新的`UIImage`，这里只是将`CGContextAddEllipseInRect`画圆换成了`UIBezierPath bezierPathWithRoundedRect:`。给UIImageview添加一个分类方法`- (void)bezierCornerRadius:(CGFloat)cornerRadius`。\n``` objc\n- (void)bezierCornerRadius:(CGFloat)cornerRadius {\n    UIImage *newImage = self.image;\n    // NO代表透明\n    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, 1.0);\n    // 获取上下文，用Bezier曲线画圆，并裁剪\n    [[UIBezierPath bezierPathWithRoundedRect:self.bounds cornerRadius:cornerRadius] addClip];\n    // 将图片画进裁剪的图形中\n    [newImage drawInRect:self.bounds];\n    // 将画布中新得到的图形设置为UIImageview的image\n    self.image = UIGraphicsGetImageFromCurrentImageContext();\n    // 关闭上下文\n    UIGraphicsEndImageContext();\n}\n```\n\n使用`[imageView quickSetCornerRadius:50];`就可以给`imageView`添加半径为50的圆角。\n\n## UIView和CALayer是什么关系？\n\nUIView和CALayer有一下区别：\n* `UIView`可以响应事件，`CALayer`不能响应事件\n* `UIView`主要是对显示内容的管理而 `CALayer` 主要侧重显示内容的绘制\n* 每个UIView内部都有一个CALayer在背后提供内容的绘制和显示，并且UIView的尺寸和样式都由内部的CALayer\b所提供。两者都由树状层级结构，`CALayer`内部有`sublayers`，`UIView`内部有`subViews`。但是`CALayer`比`UIView`多了个`AnchorPoint`。\n* 在UIView显示的时候，UIView作为`CALayer`的`CALayerDelegate`，`UIView`的显示内容由内部的`CALayer`的`dispaly`。\n* `CALayer`是默认修改属性支撑隐形动画的，在给UIVIiew的Layer做动画的时候，UIView作为CALayer的代理，CALayer通过`actionForLayer:forKey:`向UIView请求相应的action（动画）。\n* `CALayer`内部维护着三份`layer tree`，分别是`presentLayer Tree`（动画树）、`modeLayer Tree`（模型树）、`render Tree`（渲染树），在做iOS动画的时候，我们修改动画的属性其实是`CALayer`的`presentLayer`属性值，而最终展示在界面上的实际是UIView的modalLayer。\n\n参考\b详解：https://www.jianshu.com/p/079e5cf0f014\n\n## 使用drawRect有什么影响？\n\n`drawRect`方法依赖Core Graphics框架来进行自定义绘制，这种方法的主要缺点是处理touch时间的时候，都会用`setNeddsDisplay`进行强制重绘（比如每次点击按钮的时候都会被强制重绘）；并且不不止一次，每次单点事件触发两次执行。这样的话\b从性能角度来说，对CPU和\b内存使用上都是欠佳的（特别是在界面上有多个`UIButton`）。\n\n## 设计简单的图片内存缓存器\n\n写一个FIFO的存储机制，设置一定量的内存大小。每次添加新的图片后检查是否超出容量，如果超出则释放队列最前面的图片。\n\n## 用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\n\n如果要求不是特别高，推荐在同一个线程中读写，这样比较省事，当然如果你必须要CoreData多线程，需要注意：\n1. 只用一个`NSPersistentStoreCoordinator`。\n2. 每个线程创建一个`NSManagedObjectContext`。\n3. 不要传递`NSManagedObject`，传objectID，通过fetch获得。\n4. 先存后取，利用`NSManagedObjectContext-mergeChangesFromContextDidSaveNotification:`。\n\n## 什么是二叉搜索树？search的时间复杂度是多少?\n\n二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：\n* 若其左子树存在，则其左子树中每个节点的值都不大于该节点值；\n* 若其右子树存在，则其右子树中每个节点的值都不小于该节点值。\n\n搜索的时间复杂度为O(log(n))~\bO(n)。\n\n## `loadView`是干嘛用的？\n\n* 作用: 加载控制器（`UIViewController`）的`view`。\n* 调用时间：第一次使用控制器view的时候。\n\n关于`loadView`的一些理解：\n* 只要重写`loadView`，里面就不要调用`[super loadView]`，\b因为如果我们重写了`loadView`的方法，就代表着我们需要初始化的是自己创建的`view`，而不再是系统默认的`view`，如果再调用`[super loadView]`就显得多余了。`[super loadView]`会去判断有没有指定storyboard，如果有，就会帮你加载storyborad描述的控制器的`view`。\n* 在`loadView`方法中，如果没有给控制器的`view`赋值，就不能获取控制器的`view`，否则会造成死循环。\n\n## `viewWillLayoutSubView`的调用情况？\n\n`viewWillLayoutSubView`在以下情况会被调用：\n* 在`UIView`init初始化的时候`viewWillLayoutSubView`不会被调用，但是用`initWithFrame:`进行初始化时，当rect的值不为`CGRectZero`时会触发`viewWillLayoutSubview`。\n* `addSubview`时会触发`viewWillLayoutSubview`。\n* 设置`view`的`frame`时会触发`viewWillLayoutSubview`，当然前提是设置前后的`frame`值发生了变化。\n* 滚动一个`UIScrollView`时会触发`viewWillLayoutSubview`。\n* 旋转`UIScreen`时会触发父`UIView`上的`viewWillLayoutSubview`。\n\n## 如何让自己的类用`copy`修饰符？如何重写带`copy`关键字的setter？\n遵循`NSCopying`协议并实现`copyWithZone`方法就可以让自己的类使用`copy`修饰符修饰。\n``` objc\n- (void)setName:(NSString *)name {\n    _name = [name copy];\n}\n```\n上面的方法可以重写带`copy`关键字的setter。\n如果是只读属性可以在初始化`init`函数中完成对`copy`修饰关键字的赋值。\n## @protocol 和 category 中如何使用 @property\n建立关联引用。详情请见[【iOS】Runtime引用](https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E5%BA%94%E7%94%A8/)一文中 ”关联对象（Objective-C Associated Objects）给分类添加属性“。\n\n## runtime 如何实现 weak 属性\nweak关键字表明该属性定义了一种“非拥有关系”（nonowning relationship）。为这种属性设置新值时，设置方法既不保留新值，又不释放旧值。此特质与`assign`类似，然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。\n\n那么runtime如何实现weak变量的自动置为nil？\n\n在runtime中对注册的类进行管理，对于`weak`对象将会放入`hash`表中。用weak指向的内存地址\b作为key,当此对象的引用计数为0的时候回dealloc，加入weak\b指向的内存地址是a，那么就会以a为键，在这个weak表中搜索，找到键为a的weak对象，从而设置为nil。\n\n## @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\nhttps://blog.csdn.net/u011774517/article/details/56013365\n### @property的本质是什么？\n`@property`的本质就是：@property = ivar + getter + setter;\n属性（property）有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）\n\n“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。\n\n例如下面的类：\n``` objc\n@interface Person : NSObject\n@property NSString *firstName;\n@property NSString *lastName;\n@end\n```\n上述代码写出来与下面这种写法等效：\n``` objc\n@interface Person : NSObject\n- (NSString *)firstName;\n- (void)setFirstName:(NSString *)firstName;\n- (NSString *)lastName;\n- (void)setLastName:(NSString *)lastName;\n@end\n```\n\n### ivar、getter、setter是如何生成并添加到这个类中的？\n自动合成（autosynthesize）\n\n完成属性定义后，编译器会自动编写访问这些属性所需的方法，\b此过程叫做自动合成（autosynthesize）。这个过程由编译器在编译执行期间执行，所以编辑器里看不到这些合成方法（synthesized method）的源码。除了生成方法代码getter、setter之外，编译器还要自动向类中适当添加类型的实例变量，并且在属性名前加下划线，以此作为实例变量的名字。\n\n## @synthesize和@dynamic分别有什么作用？\n\n1. `@propert`有两个对应的词，一个是`@synthesize`，一个是`@dynamic`。如果`@synthesize`和`@dynamic`都没有写，那么默认的就是`@syntheszie var = _var;`。\n\n2. `@synthesize`的语意是如果你没有手动实现setter和getter方法，那么编译器会自动给你加上这两个方法。\n\n3. `@dynamic`告诉编译器setter和getter方法由用户自己实现，不自动生成。（对于readonly属性的字需要提供getter即可）。\n\n## ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\n\n分两种情况，对于基本数据类型默认关键字是`(atomic,readwrite,assign)`，对于普通的OC对象默认关键字是`(atomic,readwrite,strong)`。\n\n## 扩展（Extension）和分类（Category）的区别？\n\n推荐使用Category，Category可以：\n* 给已经存在的类添加方法\n* 把类的方法分开在不同的文件中\b，这样的优点有：\n  * 减少单个文件的体积\n  * 把不同功能组织在不同的category\b文件中\n  * 多个开发者可以共同完成一个类\n  * 按照需求加载想要加载的category\n* 声明私有和公用方法\n\n### category和extension的区别1\n* category：类别，分类\n  * 专门用来给类添加新的方法\n  * 通常不能给类添加属性，添加了成员变量也获取不到（但是通过Runtime可以给类添加属性）\n  * 分类（Category）中@property定义变量，只会生成变量的getter，setter方法申明，没有方法实现和带下划线的成员变量\n  * 分类会覆盖类的方法，如果分类的方法与类本来的方法同名，则会覆盖类的方法\n\n* extension：扩展\n  * 扩展可以说是特殊的分类，也称做\b匿名分类\n  * 可以给类添加成员属性，但是是私有的\n  * 可以给类添加成员方法，但是是私有方法\n  * 伴随着类的产生而产生，与随着类的消失而消失\n  * extension一般用来隐藏类的私有方法，必须要有一个类的源码才能添加一个类的extension，所以对于一些系统类NSString就无法添加扩展\n\n\n## 如何实现A、B请求完成后，再执行C请求？\b\n基本思路是使用iOS的gcd异步请求A、B完成后汇总结果，然后再执行C请求。\n``` objc\n- (void)gcdGroup {\n    dispatch_queue_t queue = dispatch_queue_create(0, 0);\n    dispatch_group_t group = dispatch_group_create();\n    \n    dispatch_group_async(group, queue, ^{\n        // 任务A\n    });\n    dispatch_group_async(group, queue, ^{\n        // 任务B\n    });\n    \n    dispatch_group_notify(group, dispatch_get_main_queue(), ^{\n        // 任务C\n    });\n}\n```\n\n## @synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\n\n实例变量 = 成员变量 = ivar\n\n`@synthesize`合成实例变量的规则，有一下几点：\n* 如果指定了成员变量的名称，会生成一个指定名称的成员变量\n* 如果这个成员变量\b存在了就不会再生成了\n* 如果是`@synthesize foo;`会生成一个名称为foo的成员变量，也就是说：如果没有指定成员变量的名称会生成一个和属性同名的成员变量\n* 如果是`@synthesize foo = _foo;`，就不会生成成员变量了\n\b\n加入property名为foo，存在一个名为_foo的实例变量，就不会再自动合成新变量。\n\n## 在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\n有了自动合成属性实例变量之后，`@synthesize`还有以下使用场景：\n* 同时重写了属性的setter\b和getter方法\n* 只读属性的getter时\n* 使用了`@dynamic`时\n* 在`@protocol`中定义的所有属性\n* 在category中定义的所有属性重载的属性\n* 当在子类中重载了父类的属性\n\n在上面的场景中，你必须使用`@synthesize`来手动合成ivar。\n\n## 什么时候会报unrecognized selector的异常？\nobjc向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象所属的类，然后在该类的方法列表以及父类方法列表中寻找方法运行，如果在最顶层的父类方法列表中依然找不到相应的方法时，程序运行就会挂掉并抛出unrecognized selector的异常。但是在这之前，runtime会有三次拯救程序崩溃的机会。\n\n## objc中向一个nil对象发送消息将会发生什么？\n\n不会报错，看上去什么都没有发生，但事实上还是发生了一些事情的。\n``` objc\nSomeClass * someObject;\nsomeObject = nil;\n[someObject doSomething];\n```\n就上上面的代码，向nil对象发送了doSomething，OC中nil是被当做0定义的。也就是说runtime要去获取这个nil的对象时，回去读取内存中0的位置，这是肯定不会被允许的，会返回nil，0，0.0等数据，根据返回值类型。\n\nnil比较容易与僵尸对象混淆，僵尸对象并不是nil，僵尸对象是你的对象被销毁了或则用于其他地方了，但是他的指针依然存在。会发生向一个object发送一个\b没有的方法。\n\n## 一个objc对象的isa指针指向什么？有什么作用？\n一个objc对象的isa指针指向它的类对象，从而可以找到类对象上的方法。\n\n每个objc对象都有一个隐藏的数据结构，这个数据结构是objcd对象的第一个成员变量，他就是isa指针。它指向一个类对象(class object，记住它是一个对象，是占用内存空间的一个变量，这个对象在编译的时候编译器就生成了，专门来描述某个类的定义)，这个类对象包含了objc对象的一些信息(为了区分两个对象，这里我们称作objc对象)，包含objc对象的方法调度表，实现了什么协议等等。\n``` objc\n@implementation Son : Father\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"%@\", NSStringFromClass([self class]));\n        NSLog(@\"%@\", NSStringFromClass([super class]));\n    }\n    return self;\n}\n```\n上面的代码输出都是Son，因为`[self class]`和`[super class]`都是以这个Son实例作为参数，去调用自己的class方法或father的class方法，结果发现它们都没有实现，都是调用NSObject的class方法，参数是同一个Son，所以输出的都是Son。\n\n## 一个objc对象如何进行内存布局？（考虑有父类的情况）\n所有父类成员变量和父类成员变量都会存放在该对象对应的存储空间中。\n每个对象内部都有一个isa指针，指向它的类对象，类\b对象中存放着本对象的：\n* 对象方法列表（对象能够接受的消息列表，保存在它\b所对应的类对象中）\n* 成员变量的列表\n* 属性列表\n\n它内部有一个isa指针指向元对象（meta class），元对象内部存放的是类方法列表，类对象内部还有一个superclass的指针，指向他的父类对象。\n* 根对象就是NSObject，它的superclass指针指向nil。\n* 类对象既然成为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类（meta class），即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。\n\n## objc中的类方法和实例方法有什么本质区别和联系？\n\n### 类方法\n* 类方法是属于类对象的\n* 类方法只能通过类对象调用\n* 类方法中的self是类对象\n* 类方法可以调用其他的类方法\n* 类方法不能访问成员变量\n* 类方法不能直接调用对象方法\n\n### 实例方法\n* 实例方法是属于实例对象的\n* 实例方法只能通过实例对象调用\n* 实例方法中的self是实例对象\n* 实例方法中可以访问成员变量\n* 实例方法中直接调用实例方法\n* 实例方法中可以调用类方法（通过类名）\n\n## _objc_msgForward函数是做什么的，直接调用它将会发生什么？\n_objc_msgForward是IMP类型，用于消息转发的：当一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会\b尝试做消息转发。\n\n直接调用_objc_msgForward是非常危险的事，如果用不好会导致程序Crash，但是如果用得好，能做非常酷的事。\n\n一旦调用_objc_msgForward，将调过查找IMP的过程，直接触发“消息转发”，如果调用了_objc_msgForward，即使这个对象确实已经实现了这个方法，也会告诉objc_msgSend：“我没有在这个对象里找到这个方法的实现”。\n\n## 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n不能向编译后得到的类中增加实例变量，能向运行时创建的类中添加实例变量。\n\n因为编译后的类已经注册在runtime中，类结构体中的objc_ivar_list实例变量的链表和instance_size实例变量的内存大小已经确定，同时runtime会调用class_setIvarLayout或class_setWeakIvarLayout来处理strong weak引用。所以不能向存在的类中添加实例变量。\n\n运行时创建的类是可以添加实例变量，调用class_addIvar函数。但是得在调用objc_allocateClassPair之后，objc_registerClassPair之前，原因和上面一样。\n\n## runloop和线程有什么关系？\n\n1. RunLoop的作用就是来管理线程的，当线程的RunLoop开启后，线程就会在执行完任务后，出于休眠状态，随时等待接收新的任务，而不是退出。\n2. 只有主线程的RunLoop是默认开启的，所以程序在开启后，会一直运行，不会退出。其他线程的RunLoop如果需要开启，就手动开启。\n\n## runloop内部是如何实现的？\n1. 有一个判断循环的条件，满足条件，就一直循环。\n2. 线程得到唤醒事件被唤醒，事件处理完毕后，回到唤醒状态，等待下次唤醒。\n\n在while里有一个一直监听唤醒时间的东西，监听到就立马处理。之后又循环回来监听，直到满足跳出条件。\n\n``` objc\nfunction loop() {\n    initialize();\n    do {\n        var message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n```\n\n## runloop的mode作用是什么？\nrunloop主要是用来指定事件在运行循环的优先级，分为：\n* `NSDefaultRunLoopMode`：默认，空闲状态\n* `UITrackingRunLoopMode`：ScrollView滑动时\n* `UIInitializationRunLoopMode`：启动时\n* `NSRunLoopCommonModes`：Mode集合\n\n苹果公开提供的Mode有两个：\n* `NSDefaultRunLoopMode`\n* `NSRunLoopCommonModes`\n\n## 以`scheduledTimerWithTimeInterval`的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\n\nRunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，scrollView滚动过程中`NSDefaultRunLoopMode`(`kCFRunLoopDefaultMode`)的mode会切换到`UITrackingRunLoopMode`来保证scrollView的流畅滑动：只能在`UITrackingRunLoopMode`模式下处理的事件会影响scrollView的滑动。\n\n如果我们把一个NSTimer对象以`UITrackingRunLoopMode`(`kCFRunLoopDefaultMode`)添加到主运行循环中的时候，scrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。\n\n同时因为mode还是可以定制的，所以：\nNSTimer计时器会被scrollView的滑动影响的问题可以通过将timer添加在`NSRunLoopCommonModes`（`kCFRunLoopCommonModes`）来解决。\n\n这个模式等效于`NSDefaultRunLoopMode`和`NSEventTrackingRunLoopMode`的结合。两个模式以数组的形式组合，当只要其中任意一个模式触发，都是这个大模式的触发，都会响应。","slug":"iOS高级开发面试题（中）","published":1,"updated":"2022-05-19T03:13:11.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo4004gl1l3fppy0pgs","content":"<h2 id=\"block在arc和非arc下含义一样吗？\"><a href=\"#block在arc和非arc下含义一样吗？\" class=\"headerlink\" title=\"__block在arc和非arc下含义一样吗？\"></a>__block在arc和非arc下含义一样吗？</h2><p>一般在block中修改变量多需要事先加<code>__block</code>进行修饰。在非arc下，<code>__block</code>修饰的变量的引用计数是不变的，在arc下会引用到计数+1。非arc中使用<code>__block</code>解决循环引用问题，在arc中使用<code>__weak</code>解决循环引用问题。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非ARC</span></span><br><span class=\"line\">__block <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>) weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"comment\">//ARC</span></span><br><span class=\"line\">__<span class=\"keyword\">weak</span> <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>) weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^(<span class=\"type\">int</span> paramInt)&#123; </span><br><span class=\"line\"><span class=\"comment\">//使用weakSelf访问self成员</span></span><br><span class=\"line\"> [weakSelf anotherFunc];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"什么是method-swizzling\"><a href=\"#什么是method-swizzling\" class=\"headerlink\" title=\"什么是method swizzling?\"></a>什么是method swizzling?</h2><p>method swizzling就是通过Runtime机制，将两个实现调换。如图\b看起来比较形象：</p>\n<img src=\"/posts/e3ebefa6dc5acc4e/method_swizzling.png\" class=\"\" title=\"Method Swizzling\">\n\n<p>具体做法是，首先建立自己的方法，然后在<code>+load</code>方法中去实现方法交换的代码。（以下调换实现的方法要在<code>+load</code>中执行）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method ori_Method =  class_getInstanceMethod([MYclass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(lastObject));  </span><br><span class=\"line\">Method my_Method = class_getInstanceMethod([MYclass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(myLastObject));  </span><br><span class=\"line\">method_exchangeImplementations(ori_Method, my_Method);</span><br></pre></td></tr></table></figure>\n<p>方法的交换是在<code>+load</code>中进行交换的。</p>\n<h2 id=\"如何高性能的给UIImageView加个圆角？\"><a href=\"#如何高性能的给UIImageView加个圆角？\" class=\"headerlink\" title=\"如何高性能的给UIImageView加个圆角？\"></a>如何高性能的给UIImageView加个圆角？</h2><h3 id=\"不好的解决方法\"><a href=\"#不好的解决方法\" class=\"headerlink\" title=\"不好的解决方法\"></a>不好的解决方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.imageView.layer.cornerRadius = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.imageView.layer.masksToBounds = <span class=\"literal\">YES</span>;</span><br></pre></td></tr></table></figure>\n<p>上面的方式会强制Core Animation提前渲染屏幕的离屏绘制，而离屏绘制就会给性能带来负面影响，会有卡顿的现象出现。</p>\n<h3 id=\"真正的解决方案：使用绘图技术\"><a href=\"#真正的解决方案：使用绘图技术\" class=\"headerlink\" title=\"真正的解决方案：使用绘图技术\"></a>真正的解决方案：使用绘图技术</h3><p>通过绘图技术给<code>UIImageview</code>添加一个分类，使用下面代码，取保添加圆角时<code>imageView.image</code>不为<code>nil</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;UIImageView+cornerRadius.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIImageView</span> (<span class=\"title\">cornerRadius</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)quickSetCornerRadius:(<span class=\"built_in\">CGFloat</span>)cornerRadius &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.image != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.image = [<span class=\"keyword\">self</span>.image imageAddCornerWithRadius:cornerRadius andSize:<span class=\"keyword\">self</span>.bounds.size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIImage</span> (<span class=\"title\">cornerRadius</span>)</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIImage</span> *)imageAddCornerWithRadius:(<span class=\"built_in\">CGFloat</span>)radius andSize:(<span class=\"built_in\">CGSize</span>)size &#123;</span><br><span class=\"line\">    <span class=\"comment\">// NO代表透明</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(size, <span class=\"literal\">NO</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取上下文</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> ctx = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 添加一个圆</span></span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, size.width, size.height);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, rect);</span><br><span class=\"line\">    <span class=\"comment\">// 裁剪</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextClip</span>(ctx);</span><br><span class=\"line\">    <span class=\"comment\">// 将图片画上去</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawInRect:rect];</span><br><span class=\"line\">    <span class=\"comment\">// 得到画上的图像</span></span><br><span class=\"line\">    <span class=\"built_in\">UIImage</span> *image = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 关闭上下文</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用了贝塞尔曲线”切割”个这个图片\"><a href=\"#使用了贝塞尔曲线”切割”个这个图片\" class=\"headerlink\" title=\"使用了贝塞尔曲线”切割”个这个图片\"></a>使用了贝塞尔曲线”切割”个这个图片</h3><p>与上面的方法一致都是通过绘图产生新的<code>UIImage</code>，这里只是将<code>CGContextAddEllipseInRect</code>画圆换成了<code>UIBezierPath bezierPathWithRoundedRect:</code>。给UIImageview添加一个分类方法<code>- (void)bezierCornerRadius:(CGFloat)cornerRadius</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)bezierCornerRadius:(<span class=\"built_in\">CGFloat</span>)cornerRadius &#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIImage</span> *newImage = <span class=\"keyword\">self</span>.image;</span><br><span class=\"line\">    <span class=\"comment\">// NO代表透明</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(<span class=\"keyword\">self</span>.bounds.size, <span class=\"literal\">NO</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取上下文，用Bezier曲线画圆，并裁剪</span></span><br><span class=\"line\">    [[<span class=\"built_in\">UIBezierPath</span> bezierPathWithRoundedRect:<span class=\"keyword\">self</span>.bounds cornerRadius:cornerRadius] addClip];</span><br><span class=\"line\">    <span class=\"comment\">// 将图片画进裁剪的图形中</span></span><br><span class=\"line\">    [newImage drawInRect:<span class=\"keyword\">self</span>.bounds];</span><br><span class=\"line\">    <span class=\"comment\">// 将画布中新得到的图形设置为UIImageview的image</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.image = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 关闭上下文</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>[imageView quickSetCornerRadius:50];</code>就可以给<code>imageView</code>添加半径为50的圆角。</p>\n<h2 id=\"UIView和CALayer是什么关系？\"><a href=\"#UIView和CALayer是什么关系？\" class=\"headerlink\" title=\"UIView和CALayer是什么关系？\"></a>UIView和CALayer是什么关系？</h2><p>UIView和CALayer有一下区别：</p>\n<ul>\n<li><code>UIView</code>可以响应事件，<code>CALayer</code>不能响应事件</li>\n<li><code>UIView</code>主要是对显示内容的管理而 <code>CALayer</code> 主要侧重显示内容的绘制</li>\n<li>每个UIView内部都有一个CALayer在背后提供内容的绘制和显示，并且UIView的尺寸和样式都由内部的CALayer\b所提供。两者都由树状层级结构，<code>CALayer</code>内部有<code>sublayers</code>，<code>UIView</code>内部有<code>subViews</code>。但是<code>CALayer</code>比<code>UIView</code>多了个<code>AnchorPoint</code>。</li>\n<li>在UIView显示的时候，UIView作为<code>CALayer</code>的<code>CALayerDelegate</code>，<code>UIView</code>的显示内容由内部的<code>CALayer</code>的<code>dispaly</code>。</li>\n<li><code>CALayer</code>是默认修改属性支撑隐形动画的，在给UIVIiew的Layer做动画的时候，UIView作为CALayer的代理，CALayer通过<code>actionForLayer:forKey:</code>向UIView请求相应的action（动画）。</li>\n<li><code>CALayer</code>内部维护着三份<code>layer tree</code>，分别是<code>presentLayer Tree</code>（动画树）、<code>modeLayer Tree</code>（模型树）、<code>render Tree</code>（渲染树），在做iOS动画的时候，我们修改动画的属性其实是<code>CALayer</code>的<code>presentLayer</code>属性值，而最终展示在界面上的实际是UIView的modalLayer。</li>\n</ul>\n<p>参考\b详解：<a href=\"https://www.jianshu.com/p/079e5cf0f014\">https://www.jianshu.com/p/079e5cf0f014</a></p>\n<h2 id=\"使用drawRect有什么影响？\"><a href=\"#使用drawRect有什么影响？\" class=\"headerlink\" title=\"使用drawRect有什么影响？\"></a>使用drawRect有什么影响？</h2><p><code>drawRect</code>方法依赖Core Graphics框架来进行自定义绘制，这种方法的主要缺点是处理touch时间的时候，都会用<code>setNeddsDisplay</code>进行强制重绘（比如每次点击按钮的时候都会被强制重绘）；并且不不止一次，每次单点事件触发两次执行。这样的话\b从性能角度来说，对CPU和\b内存使用上都是欠佳的（特别是在界面上有多个<code>UIButton</code>）。</p>\n<h2 id=\"设计简单的图片内存缓存器\"><a href=\"#设计简单的图片内存缓存器\" class=\"headerlink\" title=\"设计简单的图片内存缓存器\"></a>设计简单的图片内存缓存器</h2><p>写一个FIFO的存储机制，设置一定量的内存大小。每次添加新的图片后检查是否超出容量，如果超出则释放队列最前面的图片。</p>\n<h2 id=\"用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\"><a href=\"#用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\" class=\"headerlink\" title=\"用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\"></a>用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？</h2><p>如果要求不是特别高，推荐在同一个线程中读写，这样比较省事，当然如果你必须要CoreData多线程，需要注意：</p>\n<ol>\n<li>只用一个<code>NSPersistentStoreCoordinator</code>。</li>\n<li>每个线程创建一个<code>NSManagedObjectContext</code>。</li>\n<li>不要传递<code>NSManagedObject</code>，传objectID，通过fetch获得。</li>\n<li>先存后取，利用<code>NSManagedObjectContext-mergeChangesFromContextDidSaveNotification:</code>。</li>\n</ol>\n<h2 id=\"什么是二叉搜索树？search的时间复杂度是多少\"><a href=\"#什么是二叉搜索树？search的时间复杂度是多少\" class=\"headerlink\" title=\"什么是二叉搜索树？search的时间复杂度是多少?\"></a>什么是二叉搜索树？search的时间复杂度是多少?</h2><p>二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：</p>\n<ul>\n<li>若其左子树存在，则其左子树中每个节点的值都不大于该节点值；</li>\n<li>若其右子树存在，则其右子树中每个节点的值都不小于该节点值。</li>\n</ul>\n<p>搜索的时间复杂度为O(log(n))~\bO(n)。</p>\n<h2 id=\"loadView是干嘛用的？\"><a href=\"#loadView是干嘛用的？\" class=\"headerlink\" title=\"loadView是干嘛用的？\"></a><code>loadView</code>是干嘛用的？</h2><ul>\n<li>作用: 加载控制器（<code>UIViewController</code>）的<code>view</code>。</li>\n<li>调用时间：第一次使用控制器view的时候。</li>\n</ul>\n<p>关于<code>loadView</code>的一些理解：</p>\n<ul>\n<li>只要重写<code>loadView</code>，里面就不要调用<code>[super loadView]</code>，\b因为如果我们重写了<code>loadView</code>的方法，就代表着我们需要初始化的是自己创建的<code>view</code>，而不再是系统默认的<code>view</code>，如果再调用<code>[super loadView]</code>就显得多余了。<code>[super loadView]</code>会去判断有没有指定storyboard，如果有，就会帮你加载storyborad描述的控制器的<code>view</code>。</li>\n<li>在<code>loadView</code>方法中，如果没有给控制器的<code>view</code>赋值，就不能获取控制器的<code>view</code>，否则会造成死循环。</li>\n</ul>\n<h2 id=\"viewWillLayoutSubView的调用情况？\"><a href=\"#viewWillLayoutSubView的调用情况？\" class=\"headerlink\" title=\"viewWillLayoutSubView的调用情况？\"></a><code>viewWillLayoutSubView</code>的调用情况？</h2><p><code>viewWillLayoutSubView</code>在以下情况会被调用：</p>\n<ul>\n<li>在<code>UIView</code>init初始化的时候<code>viewWillLayoutSubView</code>不会被调用，但是用<code>initWithFrame:</code>进行初始化时，当rect的值不为<code>CGRectZero</code>时会触发<code>viewWillLayoutSubview</code>。</li>\n<li><code>addSubview</code>时会触发<code>viewWillLayoutSubview</code>。</li>\n<li>设置<code>view</code>的<code>frame</code>时会触发<code>viewWillLayoutSubview</code>，当然前提是设置前后的<code>frame</code>值发生了变化。</li>\n<li>滚动一个<code>UIScrollView</code>时会触发<code>viewWillLayoutSubview</code>。</li>\n<li>旋转<code>UIScreen</code>时会触发父<code>UIView</code>上的<code>viewWillLayoutSubview</code>。</li>\n</ul>\n<h2 id=\"如何让自己的类用copy修饰符？如何重写带copy关键字的setter？\"><a href=\"#如何让自己的类用copy修饰符？如何重写带copy关键字的setter？\" class=\"headerlink\" title=\"如何让自己的类用copy修饰符？如何重写带copy关键字的setter？\"></a>如何让自己的类用<code>copy</code>修饰符？如何重写带<code>copy</code>关键字的setter？</h2><p>遵循<code>NSCopying</code>协议并实现<code>copyWithZone</code>方法就可以让自己的类使用<code>copy</code>修饰符修饰。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)name &#123;</span><br><span class=\"line\">    _name = [name <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方法可以重写带<code>copy</code>关键字的setter。<br>如果是只读属性可以在初始化<code>init</code>函数中完成对<code>copy</code>修饰关键字的赋值。</p>\n<h2 id=\"protocol-和-category-中如何使用-property\"><a href=\"#protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"@protocol 和 category 中如何使用 @property\"></a>@protocol 和 category 中如何使用 @property</h2><p>建立关联引用。详情请见<a href=\"https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E5%BA%94%E7%94%A8/\">【iOS】Runtime引用</a>一文中 ”关联对象（Objective-C Associated Objects）给分类添加属性“。</p>\n<h2 id=\"runtime-如何实现-weak-属性\"><a href=\"#runtime-如何实现-weak-属性\" class=\"headerlink\" title=\"runtime 如何实现 weak 属性\"></a>runtime 如何实现 weak 属性</h2><p>weak关键字表明该属性定义了一种“非拥有关系”（nonowning relationship）。为这种属性设置新值时，设置方法既不保留新值，又不释放旧值。此特质与<code>assign</code>类似，然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。</p>\n<p>那么runtime如何实现weak变量的自动置为nil？</p>\n<p>在runtime中对注册的类进行管理，对于<code>weak</code>对象将会放入<code>hash</code>表中。用weak指向的内存地址\b作为key,当此对象的引用计数为0的时候回dealloc，加入weak\b指向的内存地址是a，那么就会以a为键，在这个weak表中搜索，找到键为a的weak对象，从而设置为nil。</p>\n<h2 id=\"property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\"><a href=\"#property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\" class=\"headerlink\" title=\"@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\"></a>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</h2><p><a href=\"https://blog.csdn.net/u011774517/article/details/56013365\">https://blog.csdn.net/u011774517/article/details/56013365</a></p>\n<h3 id=\"property的本质是什么？\"><a href=\"#property的本质是什么？\" class=\"headerlink\" title=\"@property的本质是什么？\"></a>@property的本质是什么？</h3><p><code>@property</code>的本质就是：@property = ivar + getter + setter;<br>属性（property）有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）</p>\n<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。</p>\n<p>例如下面的类：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *firstName;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *lastName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>上述代码写出来与下面这种写法等效：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)firstName;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)setFirstName:(<span class=\"built_in\">NSString</span> *)firstName;</span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)lastName;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)setLastName:(<span class=\"built_in\">NSString</span> *)lastName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ivar、getter、setter是如何生成并添加到这个类中的？\"><a href=\"#ivar、getter、setter是如何生成并添加到这个类中的？\" class=\"headerlink\" title=\"ivar、getter、setter是如何生成并添加到这个类中的？\"></a>ivar、getter、setter是如何生成并添加到这个类中的？</h3><p>自动合成（autosynthesize）</p>\n<p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，\b此过程叫做自动合成（autosynthesize）。这个过程由编译器在编译执行期间执行，所以编辑器里看不到这些合成方法（synthesized method）的源码。除了生成方法代码getter、setter之外，编译器还要自动向类中适当添加类型的实例变量，并且在属性名前加下划线，以此作为实例变量的名字。</p>\n<h2 id=\"synthesize和-dynamic分别有什么作用？\"><a href=\"#synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"@synthesize和@dynamic分别有什么作用？\"></a>@synthesize和@dynamic分别有什么作用？</h2><ol>\n<li><p><code>@propert</code>有两个对应的词，一个是<code>@synthesize</code>，一个是<code>@dynamic</code>。如果<code>@synthesize</code>和<code>@dynamic</code>都没有写，那么默认的就是<code>@syntheszie var = _var;</code>。</p>\n</li>\n<li><p><code>@synthesize</code>的语意是如果你没有手动实现setter和getter方法，那么编译器会自动给你加上这两个方法。</p>\n</li>\n<li><p><code>@dynamic</code>告诉编译器setter和getter方法由用户自己实现，不自动生成。（对于readonly属性的字需要提供getter即可）。</p>\n</li>\n</ol>\n<h2 id=\"ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"><a href=\"#ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\" class=\"headerlink\" title=\"ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"></a>ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</h2><p>分两种情况，对于基本数据类型默认关键字是<code>(atomic,readwrite,assign)</code>，对于普通的OC对象默认关键字是<code>(atomic,readwrite,strong)</code>。</p>\n<h2 id=\"扩展（Extension）和分类（Category）的区别？\"><a href=\"#扩展（Extension）和分类（Category）的区别？\" class=\"headerlink\" title=\"扩展（Extension）和分类（Category）的区别？\"></a>扩展（Extension）和分类（Category）的区别？</h2><p>推荐使用Category，Category可以：</p>\n<ul>\n<li>给已经存在的类添加方法</li>\n<li>把类的方法分开在不同的文件中\b，这样的优点有：<ul>\n<li>减少单个文件的体积</li>\n<li>把不同功能组织在不同的category\b文件中</li>\n<li>多个开发者可以共同完成一个类</li>\n<li>按照需求加载想要加载的category</li>\n</ul>\n</li>\n<li>声明私有和公用方法</li>\n</ul>\n<h3 id=\"category和extension的区别1\"><a href=\"#category和extension的区别1\" class=\"headerlink\" title=\"category和extension的区别1\"></a>category和extension的区别1</h3><ul>\n<li><p>category：类别，分类</p>\n<ul>\n<li>专门用来给类添加新的方法</li>\n<li>通常不能给类添加属性，添加了成员变量也获取不到（但是通过Runtime可以给类添加属性）</li>\n<li>分类（Category）中@property定义变量，只会生成变量的getter，setter方法申明，没有方法实现和带下划线的成员变量</li>\n<li>分类会覆盖类的方法，如果分类的方法与类本来的方法同名，则会覆盖类的方法</li>\n</ul>\n</li>\n<li><p>extension：扩展</p>\n<ul>\n<li>扩展可以说是特殊的分类，也称做\b匿名分类</li>\n<li>可以给类添加成员属性，但是是私有的</li>\n<li>可以给类添加成员方法，但是是私有方法</li>\n<li>伴随着类的产生而产生，与随着类的消失而消失</li>\n<li>extension一般用来隐藏类的私有方法，必须要有一个类的源码才能添加一个类的extension，所以对于一些系统类NSString就无法添加扩展</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现A、B请求完成后，再执行C请求？\"><a href=\"#如何实现A、B请求完成后，再执行C请求？\" class=\"headerlink\" title=\"如何实现A、B请求完成后，再执行C请求？\b\"></a>如何实现A、B请求完成后，再执行C请求？\b</h2><p>基本思路是使用iOS的gcd异步请求A、B完成后汇总结果，然后再执行C请求。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)gcdGroup &#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_queue_create(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务A</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务B</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务C</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\"><a href=\"#synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\" class=\"headerlink\" title=\"@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\"></a>@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？</h2><p>实例变量 = 成员变量 = ivar</p>\n<p><code>@synthesize</code>合成实例变量的规则，有一下几点：</p>\n<ul>\n<li>如果指定了成员变量的名称，会生成一个指定名称的成员变量</li>\n<li>如果这个成员变量\b存在了就不会再生成了</li>\n<li>如果是<code>@synthesize foo;</code>会生成一个名称为foo的成员变量，也就是说：如果没有指定成员变量的名称会生成一个和属性同名的成员变量</li>\n<li>如果是<code>@synthesize foo = _foo;</code>，就不会生成成员变量了<br>\b<br>加入property名为foo，存在一个名为_foo的实例变量，就不会再自动合成新变量。</li>\n</ul>\n<h2 id=\"在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\"><a href=\"#在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\" class=\"headerlink\" title=\"在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\"></a>在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</h2><p>有了自动合成属性实例变量之后，<code>@synthesize</code>还有以下使用场景：</p>\n<ul>\n<li>同时重写了属性的setter\b和getter方法</li>\n<li>只读属性的getter时</li>\n<li>使用了<code>@dynamic</code>时</li>\n<li>在<code>@protocol</code>中定义的所有属性</li>\n<li>在category中定义的所有属性重载的属性</li>\n<li>当在子类中重载了父类的属性</li>\n</ul>\n<p>在上面的场景中，你必须使用<code>@synthesize</code>来手动合成ivar。</p>\n<h2 id=\"什么时候会报unrecognized-selector的异常？\"><a href=\"#什么时候会报unrecognized-selector的异常？\" class=\"headerlink\" title=\"什么时候会报unrecognized selector的异常？\"></a>什么时候会报unrecognized selector的异常？</h2><p>objc向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象所属的类，然后在该类的方法列表以及父类方法列表中寻找方法运行，如果在最顶层的父类方法列表中依然找不到相应的方法时，程序运行就会挂掉并抛出unrecognized selector的异常。但是在这之前，runtime会有三次拯救程序崩溃的机会。</p>\n<h2 id=\"objc中向一个nil对象发送消息将会发生什么？\"><a href=\"#objc中向一个nil对象发送消息将会发生什么？\" class=\"headerlink\" title=\"objc中向一个nil对象发送消息将会发生什么？\"></a>objc中向一个nil对象发送消息将会发生什么？</h2><p>不会报错，看上去什么都没有发生，但事实上还是发生了一些事情的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomeClass * someObject;</span><br><span class=\"line\">someObject = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">[someObject doSomething];</span><br></pre></td></tr></table></figure>\n<p>就上上面的代码，向nil对象发送了doSomething，OC中nil是被当做0定义的。也就是说runtime要去获取这个nil的对象时，回去读取内存中0的位置，这是肯定不会被允许的，会返回nil，0，0.0等数据，根据返回值类型。</p>\n<p>nil比较容易与僵尸对象混淆，僵尸对象并不是nil，僵尸对象是你的对象被销毁了或则用于其他地方了，但是他的指针依然存在。会发生向一个object发送一个\b没有的方法。</p>\n<h2 id=\"一个objc对象的isa指针指向什么？有什么作用？\"><a href=\"#一个objc对象的isa指针指向什么？有什么作用？\" class=\"headerlink\" title=\"一个objc对象的isa指针指向什么？有什么作用？\"></a>一个objc对象的isa指针指向什么？有什么作用？</h2><p>一个objc对象的isa指针指向它的类对象，从而可以找到类对象上的方法。</p>\n<p>每个objc对象都有一个隐藏的数据结构，这个数据结构是objcd对象的第一个成员变量，他就是isa指针。它指向一个类对象(class object，记住它是一个对象，是占用内存空间的一个变量，这个对象在编译的时候编译器就生成了，专门来描述某个类的定义)，这个类对象包含了objc对象的一些信息(为了区分两个对象，这里我们称作objc对象)，包含objc对象的方法调度表，实现了什么协议等等。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Son</span> : <span class=\"title\">Father</span></span></span><br><span class=\"line\">- (<span class=\"type\">id</span>)init</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, <span class=\"built_in\">NSStringFromClass</span>([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, <span class=\"built_in\">NSStringFromClass</span>([<span class=\"variable language_\">super</span> <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码输出都是Son，因为<code>[self class]</code>和<code>[super class]</code>都是以这个Son实例作为参数，去调用自己的class方法或father的class方法，结果发现它们都没有实现，都是调用NSObject的class方法，参数是同一个Son，所以输出的都是Son。</p>\n<h2 id=\"一个objc对象如何进行内存布局？（考虑有父类的情况）\"><a href=\"#一个objc对象如何进行内存布局？（考虑有父类的情况）\" class=\"headerlink\" title=\"一个objc对象如何进行内存布局？（考虑有父类的情况）\"></a>一个objc对象如何进行内存布局？（考虑有父类的情况）</h2><p>所有父类成员变量和父类成员变量都会存放在该对象对应的存储空间中。<br>每个对象内部都有一个isa指针，指向它的类对象，类\b对象中存放着本对象的：</p>\n<ul>\n<li>对象方法列表（对象能够接受的消息列表，保存在它\b所对应的类对象中）</li>\n<li>成员变量的列表</li>\n<li>属性列表</li>\n</ul>\n<p>它内部有一个isa指针指向元对象（meta class），元对象内部存放的是类方法列表，类对象内部还有一个superclass的指针，指向他的父类对象。</p>\n<ul>\n<li>根对象就是NSObject，它的superclass指针指向nil。</li>\n<li>类对象既然成为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类（meta class），即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。</li>\n</ul>\n<h2 id=\"objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"objc中的类方法和实例方法有什么本质区别和联系？\"></a>objc中的类方法和实例方法有什么本质区别和联系？</h2><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><ul>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法不能访问成员变量</li>\n<li>类方法不能直接调用对象方法</li>\n</ul>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><ul>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中可以调用类方法（通过类名）</li>\n</ul>\n<h2 id=\"objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"_objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>_objc_msgForward函数是做什么的，直接调用它将会发生什么？</h2><p>_objc_msgForward是IMP类型，用于消息转发的：当一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会\b尝试做消息转发。</p>\n<p>直接调用_objc_msgForward是非常危险的事，如果用不好会导致程序Crash，但是如果用得好，能做非常酷的事。</p>\n<p>一旦调用_objc_msgForward，将调过查找IMP的过程，直接触发“消息转发”，如果调用了_objc_msgForward，即使这个对象确实已经实现了这个方法，也会告诉objc_msgSend：“我没有在这个对象里找到这个方法的实现”。</p>\n<h2 id=\"能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h2><p>不能向编译后得到的类中增加实例变量，能向运行时创建的类中添加实例变量。</p>\n<p>因为编译后的类已经注册在runtime中，类结构体中的objc_ivar_list实例变量的链表和instance_size实例变量的内存大小已经确定，同时runtime会调用class_setIvarLayout或class_setWeakIvarLayout来处理strong weak引用。所以不能向存在的类中添加实例变量。</p>\n<p>运行时创建的类是可以添加实例变量，调用class_addIvar函数。但是得在调用objc_allocateClassPair之后，objc_registerClassPair之前，原因和上面一样。</p>\n<h2 id=\"runloop和线程有什么关系？\"><a href=\"#runloop和线程有什么关系？\" class=\"headerlink\" title=\"runloop和线程有什么关系？\"></a>runloop和线程有什么关系？</h2><ol>\n<li>RunLoop的作用就是来管理线程的，当线程的RunLoop开启后，线程就会在执行完任务后，出于休眠状态，随时等待接收新的任务，而不是退出。</li>\n<li>只有主线程的RunLoop是默认开启的，所以程序在开启后，会一直运行，不会退出。其他线程的RunLoop如果需要开启，就手动开启。</li>\n</ol>\n<h2 id=\"runloop内部是如何实现的？\"><a href=\"#runloop内部是如何实现的？\" class=\"headerlink\" title=\"runloop内部是如何实现的？\"></a>runloop内部是如何实现的？</h2><ol>\n<li>有一个判断循环的条件，满足条件，就一直循环。</li>\n<li>线程得到唤醒事件被唤醒，事件处理完毕后，回到唤醒状态，等待下次唤醒。</li>\n</ol>\n<p>在while里有一个一直监听唤醒时间的东西，监听到就立马处理。之后又循环回来监听，直到满足跳出条件。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loop() &#123;</span><br><span class=\"line\">    initialize();</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var message = get_next_message();</span><br><span class=\"line\">        process_message(message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (message != quit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"runloop的mode作用是什么？\"><a href=\"#runloop的mode作用是什么？\" class=\"headerlink\" title=\"runloop的mode作用是什么？\"></a>runloop的mode作用是什么？</h2><p>runloop主要是用来指定事件在运行循环的优先级，分为：</p>\n<ul>\n<li><code>NSDefaultRunLoopMode</code>：默认，空闲状态</li>\n<li><code>UITrackingRunLoopMode</code>：ScrollView滑动时</li>\n<li><code>UIInitializationRunLoopMode</code>：启动时</li>\n<li><code>NSRunLoopCommonModes</code>：Mode集合</li>\n</ul>\n<p>苹果公开提供的Mode有两个：</p>\n<ul>\n<li><code>NSDefaultRunLoopMode</code></li>\n<li><code>NSRunLoopCommonModes</code></li>\n</ul>\n<h2 id=\"以scheduledTimerWithTimeInterval的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\"><a href=\"#以scheduledTimerWithTimeInterval的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\" class=\"headerlink\" title=\"以scheduledTimerWithTimeInterval的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\"></a>以<code>scheduledTimerWithTimeInterval</code>的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？</h2><p>RunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，scrollView滚动过程中<code>NSDefaultRunLoopMode</code>(<code>kCFRunLoopDefaultMode</code>)的mode会切换到<code>UITrackingRunLoopMode</code>来保证scrollView的流畅滑动：只能在<code>UITrackingRunLoopMode</code>模式下处理的事件会影响scrollView的滑动。</p>\n<p>如果我们把一个NSTimer对象以<code>UITrackingRunLoopMode</code>(<code>kCFRunLoopDefaultMode</code>)添加到主运行循环中的时候，scrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。</p>\n<p>同时因为mode还是可以定制的，所以：<br>NSTimer计时器会被scrollView的滑动影响的问题可以通过将timer添加在<code>NSRunLoopCommonModes</code>（<code>kCFRunLoopCommonModes</code>）来解决。</p>\n<p>这个模式等效于<code>NSDefaultRunLoopMode</code>和<code>NSEventTrackingRunLoopMode</code>的结合。两个模式以数组的形式组合，当只要其中任意一个模式触发，都是这个大模式的触发，都会响应。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"block在arc和非arc下含义一样吗？\"><a href=\"#block在arc和非arc下含义一样吗？\" class=\"headerlink\" title=\"__block在arc和非arc下含义一样吗？\"></a>__block在arc和非arc下含义一样吗？</h2><p>一般在block中修改变量多需要事先加<code>__block</code>进行修饰。在非arc下，<code>__block</code>修饰的变量的引用计数是不变的，在arc下会引用到计数+1。非arc中使用<code>__block</code>解决循环引用问题，在arc中使用<code>__weak</code>解决循环引用问题。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非ARC</span></span><br><span class=\"line\">__block <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>) weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"comment\">//ARC</span></span><br><span class=\"line\">__<span class=\"keyword\">weak</span> <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>) weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.myBlock = ^(<span class=\"type\">int</span> paramInt)&#123; </span><br><span class=\"line\"><span class=\"comment\">//使用weakSelf访问self成员</span></span><br><span class=\"line\"> [weakSelf anotherFunc];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"什么是method-swizzling\"><a href=\"#什么是method-swizzling\" class=\"headerlink\" title=\"什么是method swizzling?\"></a>什么是method swizzling?</h2><p>method swizzling就是通过Runtime机制，将两个实现调换。如图\b看起来比较形象：</p>\n<img src=\"/posts/e3ebefa6dc5acc4e/method_swizzling.png\" class=\"\" title=\"Method Swizzling\">\n\n<p>具体做法是，首先建立自己的方法，然后在<code>+load</code>方法中去实现方法交换的代码。（以下调换实现的方法要在<code>+load</code>中执行）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method ori_Method =  class_getInstanceMethod([MYclass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(lastObject));  </span><br><span class=\"line\">Method my_Method = class_getInstanceMethod([MYclass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(myLastObject));  </span><br><span class=\"line\">method_exchangeImplementations(ori_Method, my_Method);</span><br></pre></td></tr></table></figure>\n<p>方法的交换是在<code>+load</code>中进行交换的。</p>\n<h2 id=\"如何高性能的给UIImageView加个圆角？\"><a href=\"#如何高性能的给UIImageView加个圆角？\" class=\"headerlink\" title=\"如何高性能的给UIImageView加个圆角？\"></a>如何高性能的给UIImageView加个圆角？</h2><h3 id=\"不好的解决方法\"><a href=\"#不好的解决方法\" class=\"headerlink\" title=\"不好的解决方法\"></a>不好的解决方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.imageView.layer.cornerRadius = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.imageView.layer.masksToBounds = <span class=\"literal\">YES</span>;</span><br></pre></td></tr></table></figure>\n<p>上面的方式会强制Core Animation提前渲染屏幕的离屏绘制，而离屏绘制就会给性能带来负面影响，会有卡顿的现象出现。</p>\n<h3 id=\"真正的解决方案：使用绘图技术\"><a href=\"#真正的解决方案：使用绘图技术\" class=\"headerlink\" title=\"真正的解决方案：使用绘图技术\"></a>真正的解决方案：使用绘图技术</h3><p>通过绘图技术给<code>UIImageview</code>添加一个分类，使用下面代码，取保添加圆角时<code>imageView.image</code>不为<code>nil</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;UIImageView+cornerRadius.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIImageView</span> (<span class=\"title\">cornerRadius</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)quickSetCornerRadius:(<span class=\"built_in\">CGFloat</span>)cornerRadius &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.image != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.image = [<span class=\"keyword\">self</span>.image imageAddCornerWithRadius:cornerRadius andSize:<span class=\"keyword\">self</span>.bounds.size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIImage</span> (<span class=\"title\">cornerRadius</span>)</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIImage</span> *)imageAddCornerWithRadius:(<span class=\"built_in\">CGFloat</span>)radius andSize:(<span class=\"built_in\">CGSize</span>)size &#123;</span><br><span class=\"line\">    <span class=\"comment\">// NO代表透明</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(size, <span class=\"literal\">NO</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取上下文</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> ctx = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 添加一个圆</span></span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, size.width, size.height);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, rect);</span><br><span class=\"line\">    <span class=\"comment\">// 裁剪</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextClip</span>(ctx);</span><br><span class=\"line\">    <span class=\"comment\">// 将图片画上去</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawInRect:rect];</span><br><span class=\"line\">    <span class=\"comment\">// 得到画上的图像</span></span><br><span class=\"line\">    <span class=\"built_in\">UIImage</span> *image = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 关闭上下文</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用了贝塞尔曲线”切割”个这个图片\"><a href=\"#使用了贝塞尔曲线”切割”个这个图片\" class=\"headerlink\" title=\"使用了贝塞尔曲线”切割”个这个图片\"></a>使用了贝塞尔曲线”切割”个这个图片</h3><p>与上面的方法一致都是通过绘图产生新的<code>UIImage</code>，这里只是将<code>CGContextAddEllipseInRect</code>画圆换成了<code>UIBezierPath bezierPathWithRoundedRect:</code>。给UIImageview添加一个分类方法<code>- (void)bezierCornerRadius:(CGFloat)cornerRadius</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)bezierCornerRadius:(<span class=\"built_in\">CGFloat</span>)cornerRadius &#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIImage</span> *newImage = <span class=\"keyword\">self</span>.image;</span><br><span class=\"line\">    <span class=\"comment\">// NO代表透明</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(<span class=\"keyword\">self</span>.bounds.size, <span class=\"literal\">NO</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取上下文，用Bezier曲线画圆，并裁剪</span></span><br><span class=\"line\">    [[<span class=\"built_in\">UIBezierPath</span> bezierPathWithRoundedRect:<span class=\"keyword\">self</span>.bounds cornerRadius:cornerRadius] addClip];</span><br><span class=\"line\">    <span class=\"comment\">// 将图片画进裁剪的图形中</span></span><br><span class=\"line\">    [newImage drawInRect:<span class=\"keyword\">self</span>.bounds];</span><br><span class=\"line\">    <span class=\"comment\">// 将画布中新得到的图形设置为UIImageview的image</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.image = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 关闭上下文</span></span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>[imageView quickSetCornerRadius:50];</code>就可以给<code>imageView</code>添加半径为50的圆角。</p>\n<h2 id=\"UIView和CALayer是什么关系？\"><a href=\"#UIView和CALayer是什么关系？\" class=\"headerlink\" title=\"UIView和CALayer是什么关系？\"></a>UIView和CALayer是什么关系？</h2><p>UIView和CALayer有一下区别：</p>\n<ul>\n<li><code>UIView</code>可以响应事件，<code>CALayer</code>不能响应事件</li>\n<li><code>UIView</code>主要是对显示内容的管理而 <code>CALayer</code> 主要侧重显示内容的绘制</li>\n<li>每个UIView内部都有一个CALayer在背后提供内容的绘制和显示，并且UIView的尺寸和样式都由内部的CALayer\b所提供。两者都由树状层级结构，<code>CALayer</code>内部有<code>sublayers</code>，<code>UIView</code>内部有<code>subViews</code>。但是<code>CALayer</code>比<code>UIView</code>多了个<code>AnchorPoint</code>。</li>\n<li>在UIView显示的时候，UIView作为<code>CALayer</code>的<code>CALayerDelegate</code>，<code>UIView</code>的显示内容由内部的<code>CALayer</code>的<code>dispaly</code>。</li>\n<li><code>CALayer</code>是默认修改属性支撑隐形动画的，在给UIVIiew的Layer做动画的时候，UIView作为CALayer的代理，CALayer通过<code>actionForLayer:forKey:</code>向UIView请求相应的action（动画）。</li>\n<li><code>CALayer</code>内部维护着三份<code>layer tree</code>，分别是<code>presentLayer Tree</code>（动画树）、<code>modeLayer Tree</code>（模型树）、<code>render Tree</code>（渲染树），在做iOS动画的时候，我们修改动画的属性其实是<code>CALayer</code>的<code>presentLayer</code>属性值，而最终展示在界面上的实际是UIView的modalLayer。</li>\n</ul>\n<p>参考\b详解：<a href=\"https://www.jianshu.com/p/079e5cf0f014\">https://www.jianshu.com/p/079e5cf0f014</a></p>\n<h2 id=\"使用drawRect有什么影响？\"><a href=\"#使用drawRect有什么影响？\" class=\"headerlink\" title=\"使用drawRect有什么影响？\"></a>使用drawRect有什么影响？</h2><p><code>drawRect</code>方法依赖Core Graphics框架来进行自定义绘制，这种方法的主要缺点是处理touch时间的时候，都会用<code>setNeddsDisplay</code>进行强制重绘（比如每次点击按钮的时候都会被强制重绘）；并且不不止一次，每次单点事件触发两次执行。这样的话\b从性能角度来说，对CPU和\b内存使用上都是欠佳的（特别是在界面上有多个<code>UIButton</code>）。</p>\n<h2 id=\"设计简单的图片内存缓存器\"><a href=\"#设计简单的图片内存缓存器\" class=\"headerlink\" title=\"设计简单的图片内存缓存器\"></a>设计简单的图片内存缓存器</h2><p>写一个FIFO的存储机制，设置一定量的内存大小。每次添加新的图片后检查是否超出容量，如果超出则释放队列最前面的图片。</p>\n<h2 id=\"用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\"><a href=\"#用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\" class=\"headerlink\" title=\"用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？\"></a>用过coreData或者sqlite吗？读写是分线程的吗？遇到过死锁没？如何解决？</h2><p>如果要求不是特别高，推荐在同一个线程中读写，这样比较省事，当然如果你必须要CoreData多线程，需要注意：</p>\n<ol>\n<li>只用一个<code>NSPersistentStoreCoordinator</code>。</li>\n<li>每个线程创建一个<code>NSManagedObjectContext</code>。</li>\n<li>不要传递<code>NSManagedObject</code>，传objectID，通过fetch获得。</li>\n<li>先存后取，利用<code>NSManagedObjectContext-mergeChangesFromContextDidSaveNotification:</code>。</li>\n</ol>\n<h2 id=\"什么是二叉搜索树？search的时间复杂度是多少\"><a href=\"#什么是二叉搜索树？search的时间复杂度是多少\" class=\"headerlink\" title=\"什么是二叉搜索树？search的时间复杂度是多少?\"></a>什么是二叉搜索树？search的时间复杂度是多少?</h2><p>二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：</p>\n<ul>\n<li>若其左子树存在，则其左子树中每个节点的值都不大于该节点值；</li>\n<li>若其右子树存在，则其右子树中每个节点的值都不小于该节点值。</li>\n</ul>\n<p>搜索的时间复杂度为O(log(n))~\bO(n)。</p>\n<h2 id=\"loadView是干嘛用的？\"><a href=\"#loadView是干嘛用的？\" class=\"headerlink\" title=\"loadView是干嘛用的？\"></a><code>loadView</code>是干嘛用的？</h2><ul>\n<li>作用: 加载控制器（<code>UIViewController</code>）的<code>view</code>。</li>\n<li>调用时间：第一次使用控制器view的时候。</li>\n</ul>\n<p>关于<code>loadView</code>的一些理解：</p>\n<ul>\n<li>只要重写<code>loadView</code>，里面就不要调用<code>[super loadView]</code>，\b因为如果我们重写了<code>loadView</code>的方法，就代表着我们需要初始化的是自己创建的<code>view</code>，而不再是系统默认的<code>view</code>，如果再调用<code>[super loadView]</code>就显得多余了。<code>[super loadView]</code>会去判断有没有指定storyboard，如果有，就会帮你加载storyborad描述的控制器的<code>view</code>。</li>\n<li>在<code>loadView</code>方法中，如果没有给控制器的<code>view</code>赋值，就不能获取控制器的<code>view</code>，否则会造成死循环。</li>\n</ul>\n<h2 id=\"viewWillLayoutSubView的调用情况？\"><a href=\"#viewWillLayoutSubView的调用情况？\" class=\"headerlink\" title=\"viewWillLayoutSubView的调用情况？\"></a><code>viewWillLayoutSubView</code>的调用情况？</h2><p><code>viewWillLayoutSubView</code>在以下情况会被调用：</p>\n<ul>\n<li>在<code>UIView</code>init初始化的时候<code>viewWillLayoutSubView</code>不会被调用，但是用<code>initWithFrame:</code>进行初始化时，当rect的值不为<code>CGRectZero</code>时会触发<code>viewWillLayoutSubview</code>。</li>\n<li><code>addSubview</code>时会触发<code>viewWillLayoutSubview</code>。</li>\n<li>设置<code>view</code>的<code>frame</code>时会触发<code>viewWillLayoutSubview</code>，当然前提是设置前后的<code>frame</code>值发生了变化。</li>\n<li>滚动一个<code>UIScrollView</code>时会触发<code>viewWillLayoutSubview</code>。</li>\n<li>旋转<code>UIScreen</code>时会触发父<code>UIView</code>上的<code>viewWillLayoutSubview</code>。</li>\n</ul>\n<h2 id=\"如何让自己的类用copy修饰符？如何重写带copy关键字的setter？\"><a href=\"#如何让自己的类用copy修饰符？如何重写带copy关键字的setter？\" class=\"headerlink\" title=\"如何让自己的类用copy修饰符？如何重写带copy关键字的setter？\"></a>如何让自己的类用<code>copy</code>修饰符？如何重写带<code>copy</code>关键字的setter？</h2><p>遵循<code>NSCopying</code>协议并实现<code>copyWithZone</code>方法就可以让自己的类使用<code>copy</code>修饰符修饰。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)name &#123;</span><br><span class=\"line\">    _name = [name <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方法可以重写带<code>copy</code>关键字的setter。<br>如果是只读属性可以在初始化<code>init</code>函数中完成对<code>copy</code>修饰关键字的赋值。</p>\n<h2 id=\"protocol-和-category-中如何使用-property\"><a href=\"#protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"@protocol 和 category 中如何使用 @property\"></a>@protocol 和 category 中如何使用 @property</h2><p>建立关联引用。详情请见<a href=\"https://jvaeyhcd.github.io/2018/08/08/%E3%80%90iOS%E3%80%91Runtime%E5%BA%94%E7%94%A8/\">【iOS】Runtime引用</a>一文中 ”关联对象（Objective-C Associated Objects）给分类添加属性“。</p>\n<h2 id=\"runtime-如何实现-weak-属性\"><a href=\"#runtime-如何实现-weak-属性\" class=\"headerlink\" title=\"runtime 如何实现 weak 属性\"></a>runtime 如何实现 weak 属性</h2><p>weak关键字表明该属性定义了一种“非拥有关系”（nonowning relationship）。为这种属性设置新值时，设置方法既不保留新值，又不释放旧值。此特质与<code>assign</code>类似，然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。</p>\n<p>那么runtime如何实现weak变量的自动置为nil？</p>\n<p>在runtime中对注册的类进行管理，对于<code>weak</code>对象将会放入<code>hash</code>表中。用weak指向的内存地址\b作为key,当此对象的引用计数为0的时候回dealloc，加入weak\b指向的内存地址是a，那么就会以a为键，在这个weak表中搜索，找到键为a的weak对象，从而设置为nil。</p>\n<h2 id=\"property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\"><a href=\"#property-的本质是什么？ivar、getter、setter-是如何生成并添加到这个类中的\" class=\"headerlink\" title=\"@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\"></a>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</h2><p><a href=\"https://blog.csdn.net/u011774517/article/details/56013365\">https://blog.csdn.net/u011774517/article/details/56013365</a></p>\n<h3 id=\"property的本质是什么？\"><a href=\"#property的本质是什么？\" class=\"headerlink\" title=\"@property的本质是什么？\"></a>@property的本质是什么？</h3><p><code>@property</code>的本质就是：@property = ivar + getter + setter;<br>属性（property）有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）</p>\n<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。</p>\n<p>例如下面的类：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *firstName;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *lastName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>上述代码写出来与下面这种写法等效：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)firstName;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)setFirstName:(<span class=\"built_in\">NSString</span> *)firstName;</span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)lastName;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)setLastName:(<span class=\"built_in\">NSString</span> *)lastName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ivar、getter、setter是如何生成并添加到这个类中的？\"><a href=\"#ivar、getter、setter是如何生成并添加到这个类中的？\" class=\"headerlink\" title=\"ivar、getter、setter是如何生成并添加到这个类中的？\"></a>ivar、getter、setter是如何生成并添加到这个类中的？</h3><p>自动合成（autosynthesize）</p>\n<p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，\b此过程叫做自动合成（autosynthesize）。这个过程由编译器在编译执行期间执行，所以编辑器里看不到这些合成方法（synthesized method）的源码。除了生成方法代码getter、setter之外，编译器还要自动向类中适当添加类型的实例变量，并且在属性名前加下划线，以此作为实例变量的名字。</p>\n<h2 id=\"synthesize和-dynamic分别有什么作用？\"><a href=\"#synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"@synthesize和@dynamic分别有什么作用？\"></a>@synthesize和@dynamic分别有什么作用？</h2><ol>\n<li><p><code>@propert</code>有两个对应的词，一个是<code>@synthesize</code>，一个是<code>@dynamic</code>。如果<code>@synthesize</code>和<code>@dynamic</code>都没有写，那么默认的就是<code>@syntheszie var = _var;</code>。</p>\n</li>\n<li><p><code>@synthesize</code>的语意是如果你没有手动实现setter和getter方法，那么编译器会自动给你加上这两个方法。</p>\n</li>\n<li><p><code>@dynamic</code>告诉编译器setter和getter方法由用户自己实现，不自动生成。（对于readonly属性的字需要提供getter即可）。</p>\n</li>\n</ol>\n<h2 id=\"ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"><a href=\"#ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\" class=\"headerlink\" title=\"ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\"></a>ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</h2><p>分两种情况，对于基本数据类型默认关键字是<code>(atomic,readwrite,assign)</code>，对于普通的OC对象默认关键字是<code>(atomic,readwrite,strong)</code>。</p>\n<h2 id=\"扩展（Extension）和分类（Category）的区别？\"><a href=\"#扩展（Extension）和分类（Category）的区别？\" class=\"headerlink\" title=\"扩展（Extension）和分类（Category）的区别？\"></a>扩展（Extension）和分类（Category）的区别？</h2><p>推荐使用Category，Category可以：</p>\n<ul>\n<li>给已经存在的类添加方法</li>\n<li>把类的方法分开在不同的文件中\b，这样的优点有：<ul>\n<li>减少单个文件的体积</li>\n<li>把不同功能组织在不同的category\b文件中</li>\n<li>多个开发者可以共同完成一个类</li>\n<li>按照需求加载想要加载的category</li>\n</ul>\n</li>\n<li>声明私有和公用方法</li>\n</ul>\n<h3 id=\"category和extension的区别1\"><a href=\"#category和extension的区别1\" class=\"headerlink\" title=\"category和extension的区别1\"></a>category和extension的区别1</h3><ul>\n<li><p>category：类别，分类</p>\n<ul>\n<li>专门用来给类添加新的方法</li>\n<li>通常不能给类添加属性，添加了成员变量也获取不到（但是通过Runtime可以给类添加属性）</li>\n<li>分类（Category）中@property定义变量，只会生成变量的getter，setter方法申明，没有方法实现和带下划线的成员变量</li>\n<li>分类会覆盖类的方法，如果分类的方法与类本来的方法同名，则会覆盖类的方法</li>\n</ul>\n</li>\n<li><p>extension：扩展</p>\n<ul>\n<li>扩展可以说是特殊的分类，也称做\b匿名分类</li>\n<li>可以给类添加成员属性，但是是私有的</li>\n<li>可以给类添加成员方法，但是是私有方法</li>\n<li>伴随着类的产生而产生，与随着类的消失而消失</li>\n<li>extension一般用来隐藏类的私有方法，必须要有一个类的源码才能添加一个类的extension，所以对于一些系统类NSString就无法添加扩展</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现A、B请求完成后，再执行C请求？\"><a href=\"#如何实现A、B请求完成后，再执行C请求？\" class=\"headerlink\" title=\"如何实现A、B请求完成后，再执行C请求？\b\"></a>如何实现A、B请求完成后，再执行C请求？\b</h2><p>基本思路是使用iOS的gcd异步请求A、B完成后汇总结果，然后再执行C请求。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)gcdGroup &#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_queue_create(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务A</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务B</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务C</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\"><a href=\"#synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为-foo的实例变量，那么还会自动合成新变量么？\" class=\"headerlink\" title=\"@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\"></a>@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？</h2><p>实例变量 = 成员变量 = ivar</p>\n<p><code>@synthesize</code>合成实例变量的规则，有一下几点：</p>\n<ul>\n<li>如果指定了成员变量的名称，会生成一个指定名称的成员变量</li>\n<li>如果这个成员变量\b存在了就不会再生成了</li>\n<li>如果是<code>@synthesize foo;</code>会生成一个名称为foo的成员变量，也就是说：如果没有指定成员变量的名称会生成一个和属性同名的成员变量</li>\n<li>如果是<code>@synthesize foo = _foo;</code>，就不会生成成员变量了<br>\b<br>加入property名为foo，存在一个名为_foo的实例变量，就不会再自动合成新变量。</li>\n</ul>\n<h2 id=\"在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\"><a href=\"#在有了自动合成属性实例变量之后，-synthesize还有哪些使用场景？\" class=\"headerlink\" title=\"在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\"></a>在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</h2><p>有了自动合成属性实例变量之后，<code>@synthesize</code>还有以下使用场景：</p>\n<ul>\n<li>同时重写了属性的setter\b和getter方法</li>\n<li>只读属性的getter时</li>\n<li>使用了<code>@dynamic</code>时</li>\n<li>在<code>@protocol</code>中定义的所有属性</li>\n<li>在category中定义的所有属性重载的属性</li>\n<li>当在子类中重载了父类的属性</li>\n</ul>\n<p>在上面的场景中，你必须使用<code>@synthesize</code>来手动合成ivar。</p>\n<h2 id=\"什么时候会报unrecognized-selector的异常？\"><a href=\"#什么时候会报unrecognized-selector的异常？\" class=\"headerlink\" title=\"什么时候会报unrecognized selector的异常？\"></a>什么时候会报unrecognized selector的异常？</h2><p>objc向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象所属的类，然后在该类的方法列表以及父类方法列表中寻找方法运行，如果在最顶层的父类方法列表中依然找不到相应的方法时，程序运行就会挂掉并抛出unrecognized selector的异常。但是在这之前，runtime会有三次拯救程序崩溃的机会。</p>\n<h2 id=\"objc中向一个nil对象发送消息将会发生什么？\"><a href=\"#objc中向一个nil对象发送消息将会发生什么？\" class=\"headerlink\" title=\"objc中向一个nil对象发送消息将会发生什么？\"></a>objc中向一个nil对象发送消息将会发生什么？</h2><p>不会报错，看上去什么都没有发生，但事实上还是发生了一些事情的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomeClass * someObject;</span><br><span class=\"line\">someObject = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">[someObject doSomething];</span><br></pre></td></tr></table></figure>\n<p>就上上面的代码，向nil对象发送了doSomething，OC中nil是被当做0定义的。也就是说runtime要去获取这个nil的对象时，回去读取内存中0的位置，这是肯定不会被允许的，会返回nil，0，0.0等数据，根据返回值类型。</p>\n<p>nil比较容易与僵尸对象混淆，僵尸对象并不是nil，僵尸对象是你的对象被销毁了或则用于其他地方了，但是他的指针依然存在。会发生向一个object发送一个\b没有的方法。</p>\n<h2 id=\"一个objc对象的isa指针指向什么？有什么作用？\"><a href=\"#一个objc对象的isa指针指向什么？有什么作用？\" class=\"headerlink\" title=\"一个objc对象的isa指针指向什么？有什么作用？\"></a>一个objc对象的isa指针指向什么？有什么作用？</h2><p>一个objc对象的isa指针指向它的类对象，从而可以找到类对象上的方法。</p>\n<p>每个objc对象都有一个隐藏的数据结构，这个数据结构是objcd对象的第一个成员变量，他就是isa指针。它指向一个类对象(class object，记住它是一个对象，是占用内存空间的一个变量，这个对象在编译的时候编译器就生成了，专门来描述某个类的定义)，这个类对象包含了objc对象的一些信息(为了区分两个对象，这里我们称作objc对象)，包含objc对象的方法调度表，实现了什么协议等等。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Son</span> : <span class=\"title\">Father</span></span></span><br><span class=\"line\">- (<span class=\"type\">id</span>)init</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, <span class=\"built_in\">NSStringFromClass</span>([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, <span class=\"built_in\">NSStringFromClass</span>([<span class=\"variable language_\">super</span> <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码输出都是Son，因为<code>[self class]</code>和<code>[super class]</code>都是以这个Son实例作为参数，去调用自己的class方法或father的class方法，结果发现它们都没有实现，都是调用NSObject的class方法，参数是同一个Son，所以输出的都是Son。</p>\n<h2 id=\"一个objc对象如何进行内存布局？（考虑有父类的情况）\"><a href=\"#一个objc对象如何进行内存布局？（考虑有父类的情况）\" class=\"headerlink\" title=\"一个objc对象如何进行内存布局？（考虑有父类的情况）\"></a>一个objc对象如何进行内存布局？（考虑有父类的情况）</h2><p>所有父类成员变量和父类成员变量都会存放在该对象对应的存储空间中。<br>每个对象内部都有一个isa指针，指向它的类对象，类\b对象中存放着本对象的：</p>\n<ul>\n<li>对象方法列表（对象能够接受的消息列表，保存在它\b所对应的类对象中）</li>\n<li>成员变量的列表</li>\n<li>属性列表</li>\n</ul>\n<p>它内部有一个isa指针指向元对象（meta class），元对象内部存放的是类方法列表，类对象内部还有一个superclass的指针，指向他的父类对象。</p>\n<ul>\n<li>根对象就是NSObject，它的superclass指针指向nil。</li>\n<li>类对象既然成为对象，那它也是一个实例。类对象中也有一个isa指针指向它的元类（meta class），即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。</li>\n</ul>\n<h2 id=\"objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"objc中的类方法和实例方法有什么本质区别和联系？\"></a>objc中的类方法和实例方法有什么本质区别和联系？</h2><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><ul>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法不能访问成员变量</li>\n<li>类方法不能直接调用对象方法</li>\n</ul>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><ul>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中可以调用类方法（通过类名）</li>\n</ul>\n<h2 id=\"objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"_objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>_objc_msgForward函数是做什么的，直接调用它将会发生什么？</h2><p>_objc_msgForward是IMP类型，用于消息转发的：当一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会\b尝试做消息转发。</p>\n<p>直接调用_objc_msgForward是非常危险的事，如果用不好会导致程序Crash，但是如果用得好，能做非常酷的事。</p>\n<p>一旦调用_objc_msgForward，将调过查找IMP的过程，直接触发“消息转发”，如果调用了_objc_msgForward，即使这个对象确实已经实现了这个方法，也会告诉objc_msgSend：“我没有在这个对象里找到这个方法的实现”。</p>\n<h2 id=\"能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h2><p>不能向编译后得到的类中增加实例变量，能向运行时创建的类中添加实例变量。</p>\n<p>因为编译后的类已经注册在runtime中，类结构体中的objc_ivar_list实例变量的链表和instance_size实例变量的内存大小已经确定，同时runtime会调用class_setIvarLayout或class_setWeakIvarLayout来处理strong weak引用。所以不能向存在的类中添加实例变量。</p>\n<p>运行时创建的类是可以添加实例变量，调用class_addIvar函数。但是得在调用objc_allocateClassPair之后，objc_registerClassPair之前，原因和上面一样。</p>\n<h2 id=\"runloop和线程有什么关系？\"><a href=\"#runloop和线程有什么关系？\" class=\"headerlink\" title=\"runloop和线程有什么关系？\"></a>runloop和线程有什么关系？</h2><ol>\n<li>RunLoop的作用就是来管理线程的，当线程的RunLoop开启后，线程就会在执行完任务后，出于休眠状态，随时等待接收新的任务，而不是退出。</li>\n<li>只有主线程的RunLoop是默认开启的，所以程序在开启后，会一直运行，不会退出。其他线程的RunLoop如果需要开启，就手动开启。</li>\n</ol>\n<h2 id=\"runloop内部是如何实现的？\"><a href=\"#runloop内部是如何实现的？\" class=\"headerlink\" title=\"runloop内部是如何实现的？\"></a>runloop内部是如何实现的？</h2><ol>\n<li>有一个判断循环的条件，满足条件，就一直循环。</li>\n<li>线程得到唤醒事件被唤醒，事件处理完毕后，回到唤醒状态，等待下次唤醒。</li>\n</ol>\n<p>在while里有一个一直监听唤醒时间的东西，监听到就立马处理。之后又循环回来监听，直到满足跳出条件。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loop() &#123;</span><br><span class=\"line\">    initialize();</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var message = get_next_message();</span><br><span class=\"line\">        process_message(message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (message != quit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"runloop的mode作用是什么？\"><a href=\"#runloop的mode作用是什么？\" class=\"headerlink\" title=\"runloop的mode作用是什么？\"></a>runloop的mode作用是什么？</h2><p>runloop主要是用来指定事件在运行循环的优先级，分为：</p>\n<ul>\n<li><code>NSDefaultRunLoopMode</code>：默认，空闲状态</li>\n<li><code>UITrackingRunLoopMode</code>：ScrollView滑动时</li>\n<li><code>UIInitializationRunLoopMode</code>：启动时</li>\n<li><code>NSRunLoopCommonModes</code>：Mode集合</li>\n</ul>\n<p>苹果公开提供的Mode有两个：</p>\n<ul>\n<li><code>NSDefaultRunLoopMode</code></li>\n<li><code>NSRunLoopCommonModes</code></li>\n</ul>\n<h2 id=\"以scheduledTimerWithTimeInterval的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\"><a href=\"#以scheduledTimerWithTimeInterval的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\" class=\"headerlink\" title=\"以scheduledTimerWithTimeInterval的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？\"></a>以<code>scheduledTimerWithTimeInterval</code>的方式触发的timer，在滑动页面上的列表时，timer会暂停回调，为什么？如何解决？</h2><p>RunLoop只能运行在一种mode下，如果要换mode，当前的loop也需要停下重启成新的。利用这个机制，scrollView滚动过程中<code>NSDefaultRunLoopMode</code>(<code>kCFRunLoopDefaultMode</code>)的mode会切换到<code>UITrackingRunLoopMode</code>来保证scrollView的流畅滑动：只能在<code>UITrackingRunLoopMode</code>模式下处理的事件会影响scrollView的滑动。</p>\n<p>如果我们把一个NSTimer对象以<code>UITrackingRunLoopMode</code>(<code>kCFRunLoopDefaultMode</code>)添加到主运行循环中的时候，scrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。</p>\n<p>同时因为mode还是可以定制的，所以：<br>NSTimer计时器会被scrollView的滑动影响的问题可以通过将timer添加在<code>NSRunLoopCommonModes</code>（<code>kCFRunLoopCommonModes</code>）来解决。</p>\n<p>这个模式等效于<code>NSDefaultRunLoopMode</code>和<code>NSEventTrackingRunLoopMode</code>的结合。两个模式以数组的形式组合，当只要其中任意一个模式触发，都是这个大模式的触发，都会响应。</p>"},{"title":"使用 Xcode 8 构建版本 iTunes Connect 获取不到应用程序的状态的解决办法","date":"2016-09-20T05:19:33.000Z","abbrlink":"f705d18d988770f0","_content":"\niOS10正式版本已发布，Xcode8也跟着就发布了，于是我就在第一时间将Xcode8和iOS10都更新了。但是一波需要适配的问题就来，有Xib的问题，还有很多界面上的问题，在iOS10上根本不能看。\n通过半天的修改终于把界面适配好了，这时我以为iOS10的适配应该就到此为止了，于是我就Archive生成Release版本的ipa并将其提交到iTunesConnect，一切都是那么的顺利。然而事实并不是这样的，上传成功后我打开iTunesConnect网站登录我的开发账号，准备提交版本更新，然而我却找不到我之前提交的ipa。在app下的“活动”栏中的“所有构建版本”也没有我之前提交的版本。（这时我心想，我明明在Xcode中显示提交成功，为什么iTunesConnect中却不显示了，苹果也没有给出任何提示）\n\n我发现构建版本左边的“+”号可点，点开“+”号后发现：\n\n{% asset_img 905614-c52750828b24f91e.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-c52750828b24f91e.png) -->\n<!-- more -->\n上面显示我之前提交的几个版本都是无效的，但是在Xcode提交时成功的啊，如果失败也应该给个提示啊。这次却没有任何提示，这肯定不应该啊，每次iTunesConnect中app的状态发生变化，苹果都会发送邮件的，于是我去查阅了一下苹果的邮件，还真有。邮件中有明确的写明：\n{% asset_img 905614-7e346e4ec6a37fa2.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-7e346e4ec6a37fa2.png) -->\n\n于是我重新打开项目在Info.plist中添加了如下配置：\n\n{% asset_img 905614-9df0785347c9212e.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-9df0785347c9212e.png) -->\n\n> 在iOS10上如果没有上述配置就使用相机、相册、麦克风程序会闪退的。\n\n不知道还有没有其他原因，反正我就是这样解决的，再次做个笔记，同样也希望可以帮助到遇到相同问题的各位同行们。\n","source":"_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法.md","raw":"---\ntitle: 使用 xcode 8 构建版本 iTunes Connect 获取不到应用程序的状态的解决办法\ndate: 2016-09-20 13:19:33\ntags:\nabbrlink: f705d18d988770f0\n---\n\niOS10正式版本已发布，Xcode8也跟着就发布了，于是我就在第一时间将Xcode8和iOS10都更新了。但是一波需要适配的问题就来，有Xib的问题，还有很多界面上的问题，在iOS10上根本不能看。\n通过半天的修改终于把界面适配好了，这时我以为iOS10的适配应该就到此为止了，于是我就Archive生成Release版本的ipa并将其提交到iTunesConnect，一切都是那么的顺利。然而事实并不是这样的，上传成功后我打开iTunesConnect网站登录我的开发账号，准备提交版本更新，然而我却找不到我之前提交的ipa。在app下的“活动”栏中的“所有构建版本”也没有我之前提交的版本。（这时我心想，我明明在Xcode中显示提交成功，为什么iTunesConnect中却不显示了，苹果也没有给出任何提示）\n\n我发现构建版本左边的“+”号可点，点开“+”号后发现：\n\n{% asset_img 905614-c52750828b24f91e.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-c52750828b24f91e.png) -->\n<!-- more -->\n上面显示我之前提交的几个版本都是无效的，但是在Xcode提交时成功的啊，如果失败也应该给个提示啊。这次却没有任何提示，这肯定不应该啊，每次iTunesConnect中app的状态发生变化，苹果都会发送邮件的，于是我去查阅了一下苹果的邮件，还真有。邮件中有明确的写明：\n{% asset_img 905614-7e346e4ec6a37fa2.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-7e346e4ec6a37fa2.png) -->\n\n于是我重新打开项目在Info.plist中添加了如下配置：\n\n{% asset_img 905614-9df0785347c9212e.png %}\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-9df0785347c9212e.png) -->\n\n> 在iOS10上如果没有上述配置就使用相机、相册、麦克风程序会闪退的。\n\n不知道还有没有其他原因，反正我就是这样解决的，再次做个笔记，同样也希望可以帮助到遇到相同问题的各位同行们。\n","slug":"使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法","published":1,"updated":"2022-05-19T03:13:11.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo4004jl1l3cp5lghh4","content":"<p>iOS10正式版本已发布，Xcode8也跟着就发布了，于是我就在第一时间将Xcode8和iOS10都更新了。但是一波需要适配的问题就来，有Xib的问题，还有很多界面上的问题，在iOS10上根本不能看。<br>通过半天的修改终于把界面适配好了，这时我以为iOS10的适配应该就到此为止了，于是我就Archive生成Release版本的ipa并将其提交到iTunesConnect，一切都是那么的顺利。然而事实并不是这样的，上传成功后我打开iTunesConnect网站登录我的开发账号，准备提交版本更新，然而我却找不到我之前提交的ipa。在app下的“活动”栏中的“所有构建版本”也没有我之前提交的版本。（这时我心想，我明明在Xcode中显示提交成功，为什么iTunesConnect中却不显示了，苹果也没有给出任何提示）</p>\n<p>我发现构建版本左边的“+”号可点，点开“+”号后发现：</p>\n<img src=\"/posts/f705d18d988770f0/905614-c52750828b24f91e.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-c52750828b24f91e.png) -->\n<span id=\"more\"></span>\n<p>上面显示我之前提交的几个版本都是无效的，但是在Xcode提交时成功的啊，如果失败也应该给个提示啊。这次却没有任何提示，这肯定不应该啊，每次iTunesConnect中app的状态发生变化，苹果都会发送邮件的，于是我去查阅了一下苹果的邮件，还真有。邮件中有明确的写明：</p>\n<img src=\"/posts/f705d18d988770f0/905614-7e346e4ec6a37fa2.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-7e346e4ec6a37fa2.png) -->\n\n<p>于是我重新打开项目在Info.plist中添加了如下配置：</p>\n<img src=\"/posts/f705d18d988770f0/905614-9df0785347c9212e.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-9df0785347c9212e.png) -->\n\n<blockquote>\n<p>在iOS10上如果没有上述配置就使用相机、相册、麦克风程序会闪退的。</p>\n</blockquote>\n<p>不知道还有没有其他原因，反正我就是这样解决的，再次做个笔记，同样也希望可以帮助到遇到相同问题的各位同行们。</p>\n","site":{"data":{}},"excerpt":"<p>iOS10正式版本已发布，Xcode8也跟着就发布了，于是我就在第一时间将Xcode8和iOS10都更新了。但是一波需要适配的问题就来，有Xib的问题，还有很多界面上的问题，在iOS10上根本不能看。<br>通过半天的修改终于把界面适配好了，这时我以为iOS10的适配应该就到此为止了，于是我就Archive生成Release版本的ipa并将其提交到iTunesConnect，一切都是那么的顺利。然而事实并不是这样的，上传成功后我打开iTunesConnect网站登录我的开发账号，准备提交版本更新，然而我却找不到我之前提交的ipa。在app下的“活动”栏中的“所有构建版本”也没有我之前提交的版本。（这时我心想，我明明在Xcode中显示提交成功，为什么iTunesConnect中却不显示了，苹果也没有给出任何提示）</p>\n<p>我发现构建版本左边的“+”号可点，点开“+”号后发现：</p>\n<img src=\"/posts/f705d18d988770f0/905614-c52750828b24f91e.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-c52750828b24f91e.png) -->","more":"<p>上面显示我之前提交的几个版本都是无效的，但是在Xcode提交时成功的啊，如果失败也应该给个提示啊。这次却没有任何提示，这肯定不应该啊，每次iTunesConnect中app的状态发生变化，苹果都会发送邮件的，于是我去查阅了一下苹果的邮件，还真有。邮件中有明确的写明：</p>\n<img src=\"/posts/f705d18d988770f0/905614-7e346e4ec6a37fa2.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-7e346e4ec6a37fa2.png) -->\n\n<p>于是我重新打开项目在Info.plist中添加了如下配置：</p>\n<img src=\"/posts/f705d18d988770f0/905614-9df0785347c9212e.png\" class=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-9df0785347c9212e.png) -->\n\n<blockquote>\n<p>在iOS10上如果没有上述配置就使用相机、相册、麦克风程序会闪退的。</p>\n</blockquote>\n<p>不知道还有没有其他原因，反正我就是这样解决的，再次做个笔记，同样也希望可以帮助到遇到相同问题的各位同行们。</p>"},{"title":"Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成","date":"2016-05-21T07:48:50.000Z","abbrlink":"f3698aa6c24ae046","_content":"\n> 持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n### 为什么使用持续集成\n1、减少重复繁琐的打包过程\n2、任何时间、任何地点测试都可以获取到新包\n3、增强项目的可见性\n\n做持续集成对我们开发者来说是一件一劳永益的事情，对于发包这个问题，相信是每个程序员GG心中挥之不去的痛，而测试MM们也在每次马上就发出来的承诺中得出一个结论就是“你是个大骗子”。\n\n所以每次被测试MM追着要包，产品经理说给我装一个新包瞧瞧呗，后台GG说给我装一个老版本调试一下啊。。。这个时候我们的内心是奔溃的，然后我们不得不暂停手下的工作，切换到某个版本，Archive。。。其实对于打包发包这种事情根本就不是开发需要做的，因为这是一个简单没有技术含量且浪费时间的工作。时间就是金钱，所以为了不再浪费我们开发宝贵的时间，自动化构建这件事情必须得提上日程了。\n\n<!-- more -->\n\n### 常见的持续集成工具\n* [Jenkins CI](https://jenkins-ci.org)\n* [Travis CI](https://travis-ci.com/)\n* [Hudson CI](http://hudson-ci.org/)\n* [Circle CI](https://circleci.com/)\n\n持续集成的工具有很多，不过最好用的还是Jenkins，Travis能够对Github上的开源项目做很好的集成，考虑到Jenkins的稳定性，我们还是选择Jenkins来开始我的iOS持续集成。\n\n### 工程结构\n\n本事例项目工程代码存放在coding，使用Cocoapods管理第三方库，存在在coding上的项目目录结构如下：\n{% asset_img coding.png 目录结构图 %}\n由于cocoapods文件过多，所以没有必要上传到git仓库中，只用将Podfile文件传上去即可。\n\n### Jenkins的安装\n\n由于Jenkins是Java开发的，所以首先我们需要先安装好Java环境，然后去Jenkins的[官网](http://jenkins-ci.org/)下载最新的war包。下载完成后，打开终端，进入到war包所在目录，执行以下命令：\n``` bash\njava -jar jenkins.war --httpPort=8888\n```\nhttpPort指的就是Jenkins所使用的http端口，这里指定8888，可根据具体情况来修改。待Jenkins启动后，在浏览器页面输入以下地址:\n``` bash\nhttp://localhost:8888\n```\n这样就可以打开Jenkins页面了。\n> `--httpPort=8888`可以不输入，不输入默认端口号为8080\n\n打开链接后，先要设置一些安装信息，这里就不再啰嗦，因为十分简单，接下来我们来看安装成功后的相关配置。\n\n### Jenkins的配置\n到Jenkins页面，Jenkins－系统管理－插件管理－可选插件中，安装一下插件：\n* GIT plugin\n* Git client plugin\n* Xcode integration\n* CocoaPods Jenkins Integration\n\n#### Git私有仓库配置\n按照如下方式添加SSH，因为项目代码是存放在coding上的所以，这个关于生成SSH可以以Coding为例：https://coding.net/help/doc/git/ssh-key.html\n\n{% asset_img ssh_username_private_key.png SSH 秘钥配置 %}\n\n#### 创建Job\n\n这里的步骤我准备全部一图片的形式展示出来。\n\n点击“Jenkins”－“新建”：\n\n{% asset_img new_job.png 创建Job %}\n\n#### 源码管理\n\n选择刚刚创建的项目，点击“配置”：\n\n{% asset_img set_code_source.png 设置源码地址 %}\n\n这里最好使用SSH，这个工程是私有项目，如果出现错误肯定是由你自己配置错误造成的。\n\n#### 构建步骤设置\n\n选择构建步骤，记得添加Xcode插件，选择添加Execute Shell和Xcode，有先后顺序。\n\n{% asset_img execte_config.png 添加构建步骤 %}\n\n设置Execute Shell\n\n{% asset_img execute_shell.png Execute Shell %}\n\n#### Xcode General build settings\n\n{% asset_img xcode_general_build_settings.png General build settings %}\n\n{% asset_img code_signing_OS_X_keychain_options.png Code signing & OS X keychain options %}\n\nKeychain path填写`${HOME}/Library/Keychains/login.keychain`\nKeychain password对应的密码可以在钥匙串中查看：\n\n{% asset_img keychain.png Code signing & OS X keychain password查看方法 %}\n\n#### Advanced Xcode build options\n\n{% asset_img xcode_build_options.png Advanced Xcode build options %}\n\n### fir.im Jenkins 插件安装\n\n上面的构建配置好了后，如果顺利的话就已经能够编译出ipa文件了，但是编译出来的ipa只能放在本地，不能给大家安装，所以编译完成后我们还需要将ipa文件上传到fir.im。\nfir插件的安装方法详情请移步：[《fir.im Jenkins 插件使用方法》](http://blog.fir.im/jenkins/)\n\n### 构建后上传到fir.im\n\n安装好fir插件后在“构建后操作”中点击“添加构建后操作步骤”，可以看到：\n\n{% asset_img upload_fir.png 添加构建后上传fir步骤 %}\n\n点击“upload to fir.im”，然后会出现如下界面：\n\n{% asset_img set_upload_fir.png 设置fir.im的Token %}\n\nFir.im的Token获取地址：http://fir.im/apps/apitoken\n\n### 手动构建\n\n选中你要构建的项目，然后点击“立即构建”\n\n{% asset_img shoudong_goujian.png 手动构建 %}\n\n选择正在构建的Build，然后点击“Console Output”可以查看build过程中打印的一些信息，如果遇到什么报错信息都可以在这里面查看。\n\n{% asset_img build_message.png 控制台输出 %}\n\n### 自动构建设置\n\n构建触发器有一下几种触发方式：\n* 触发远程构建 (例如,使用脚本)\n* Build after other projects are built\n* Build periodically\n* Poll SCM\n\n这里我只用到了Build periodically\n\n{% asset_img zidong_goujian.png Build periodically触发自动构建 %}\n\n### 总结\n\n为了搭建这个Jenkins我看了很多博客，不过大多比较难懂，一直都没有成功，经过各种尝试后最终搭建成功，我在此将整个过程记录下来，以来是对自己知识的一个积累，二来如果能够给将要搭建Jenkins的iOS持续集成的朋友们一点帮助也是极好的。\n\n参考文档：\n[一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP](http://www.jianshu.com/p/c69deb29720d#)\n[使用 Xcodebuild + Jenkins + Apache 做 iOS 持续集成](http://rannie.github.io/ios/2014/12/29/xcodebuild-jenkins-ci.html)\n","source":"_posts/使用Jenkins构建iOS持续集成自动打包.md","raw":"---\ntitle: Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成\ndate: 2016-05-21 15:48:50\ntags:\n   - Jenkins\nabbrlink: f3698aa6c24ae046\n---\n\n> 持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n### 为什么使用持续集成\n1、减少重复繁琐的打包过程\n2、任何时间、任何地点测试都可以获取到新包\n3、增强项目的可见性\n\n做持续集成对我们开发者来说是一件一劳永益的事情，对于发包这个问题，相信是每个程序员GG心中挥之不去的痛，而测试MM们也在每次马上就发出来的承诺中得出一个结论就是“你是个大骗子”。\n\n所以每次被测试MM追着要包，产品经理说给我装一个新包瞧瞧呗，后台GG说给我装一个老版本调试一下啊。。。这个时候我们的内心是奔溃的，然后我们不得不暂停手下的工作，切换到某个版本，Archive。。。其实对于打包发包这种事情根本就不是开发需要做的，因为这是一个简单没有技术含量且浪费时间的工作。时间就是金钱，所以为了不再浪费我们开发宝贵的时间，自动化构建这件事情必须得提上日程了。\n\n<!-- more -->\n\n### 常见的持续集成工具\n* [Jenkins CI](https://jenkins-ci.org)\n* [Travis CI](https://travis-ci.com/)\n* [Hudson CI](http://hudson-ci.org/)\n* [Circle CI](https://circleci.com/)\n\n持续集成的工具有很多，不过最好用的还是Jenkins，Travis能够对Github上的开源项目做很好的集成，考虑到Jenkins的稳定性，我们还是选择Jenkins来开始我的iOS持续集成。\n\n### 工程结构\n\n本事例项目工程代码存放在coding，使用Cocoapods管理第三方库，存在在coding上的项目目录结构如下：\n{% asset_img coding.png 目录结构图 %}\n由于cocoapods文件过多，所以没有必要上传到git仓库中，只用将Podfile文件传上去即可。\n\n### Jenkins的安装\n\n由于Jenkins是Java开发的，所以首先我们需要先安装好Java环境，然后去Jenkins的[官网](http://jenkins-ci.org/)下载最新的war包。下载完成后，打开终端，进入到war包所在目录，执行以下命令：\n``` bash\njava -jar jenkins.war --httpPort=8888\n```\nhttpPort指的就是Jenkins所使用的http端口，这里指定8888，可根据具体情况来修改。待Jenkins启动后，在浏览器页面输入以下地址:\n``` bash\nhttp://localhost:8888\n```\n这样就可以打开Jenkins页面了。\n> `--httpPort=8888`可以不输入，不输入默认端口号为8080\n\n打开链接后，先要设置一些安装信息，这里就不再啰嗦，因为十分简单，接下来我们来看安装成功后的相关配置。\n\n### Jenkins的配置\n到Jenkins页面，Jenkins－系统管理－插件管理－可选插件中，安装一下插件：\n* GIT plugin\n* Git client plugin\n* Xcode integration\n* CocoaPods Jenkins Integration\n\n#### Git私有仓库配置\n按照如下方式添加SSH，因为项目代码是存放在coding上的所以，这个关于生成SSH可以以Coding为例：https://coding.net/help/doc/git/ssh-key.html\n\n{% asset_img ssh_username_private_key.png SSH 秘钥配置 %}\n\n#### 创建Job\n\n这里的步骤我准备全部一图片的形式展示出来。\n\n点击“Jenkins”－“新建”：\n\n{% asset_img new_job.png 创建Job %}\n\n#### 源码管理\n\n选择刚刚创建的项目，点击“配置”：\n\n{% asset_img set_code_source.png 设置源码地址 %}\n\n这里最好使用SSH，这个工程是私有项目，如果出现错误肯定是由你自己配置错误造成的。\n\n#### 构建步骤设置\n\n选择构建步骤，记得添加Xcode插件，选择添加Execute Shell和Xcode，有先后顺序。\n\n{% asset_img execte_config.png 添加构建步骤 %}\n\n设置Execute Shell\n\n{% asset_img execute_shell.png Execute Shell %}\n\n#### Xcode General build settings\n\n{% asset_img xcode_general_build_settings.png General build settings %}\n\n{% asset_img code_signing_OS_X_keychain_options.png Code signing & OS X keychain options %}\n\nKeychain path填写`${HOME}/Library/Keychains/login.keychain`\nKeychain password对应的密码可以在钥匙串中查看：\n\n{% asset_img keychain.png Code signing & OS X keychain password查看方法 %}\n\n#### Advanced Xcode build options\n\n{% asset_img xcode_build_options.png Advanced Xcode build options %}\n\n### fir.im Jenkins 插件安装\n\n上面的构建配置好了后，如果顺利的话就已经能够编译出ipa文件了，但是编译出来的ipa只能放在本地，不能给大家安装，所以编译完成后我们还需要将ipa文件上传到fir.im。\nfir插件的安装方法详情请移步：[《fir.im Jenkins 插件使用方法》](http://blog.fir.im/jenkins/)\n\n### 构建后上传到fir.im\n\n安装好fir插件后在“构建后操作”中点击“添加构建后操作步骤”，可以看到：\n\n{% asset_img upload_fir.png 添加构建后上传fir步骤 %}\n\n点击“upload to fir.im”，然后会出现如下界面：\n\n{% asset_img set_upload_fir.png 设置fir.im的Token %}\n\nFir.im的Token获取地址：http://fir.im/apps/apitoken\n\n### 手动构建\n\n选中你要构建的项目，然后点击“立即构建”\n\n{% asset_img shoudong_goujian.png 手动构建 %}\n\n选择正在构建的Build，然后点击“Console Output”可以查看build过程中打印的一些信息，如果遇到什么报错信息都可以在这里面查看。\n\n{% asset_img build_message.png 控制台输出 %}\n\n### 自动构建设置\n\n构建触发器有一下几种触发方式：\n* 触发远程构建 (例如,使用脚本)\n* Build after other projects are built\n* Build periodically\n* Poll SCM\n\n这里我只用到了Build periodically\n\n{% asset_img zidong_goujian.png Build periodically触发自动构建 %}\n\n### 总结\n\n为了搭建这个Jenkins我看了很多博客，不过大多比较难懂，一直都没有成功，经过各种尝试后最终搭建成功，我在此将整个过程记录下来，以来是对自己知识的一个积累，二来如果能够给将要搭建Jenkins的iOS持续集成的朋友们一点帮助也是极好的。\n\n参考文档：\n[一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP](http://www.jianshu.com/p/c69deb29720d#)\n[使用 Xcodebuild + Jenkins + Apache 做 iOS 持续集成](http://rannie.github.io/ios/2014/12/29/xcodebuild-jenkins-ci.html)\n","slug":"使用Jenkins构建iOS持续集成自动打包","published":1,"updated":"2022-05-19T03:13:11.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo5004ml1l334n8cw6j","content":"<blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<h3 id=\"为什么使用持续集成\"><a href=\"#为什么使用持续集成\" class=\"headerlink\" title=\"为什么使用持续集成\"></a>为什么使用持续集成</h3><p>1、减少重复繁琐的打包过程<br>2、任何时间、任何地点测试都可以获取到新包<br>3、增强项目的可见性</p>\n<p>做持续集成对我们开发者来说是一件一劳永益的事情，对于发包这个问题，相信是每个程序员GG心中挥之不去的痛，而测试MM们也在每次马上就发出来的承诺中得出一个结论就是“你是个大骗子”。</p>\n<p>所以每次被测试MM追着要包，产品经理说给我装一个新包瞧瞧呗，后台GG说给我装一个老版本调试一下啊。。。这个时候我们的内心是奔溃的，然后我们不得不暂停手下的工作，切换到某个版本，Archive。。。其实对于打包发包这种事情根本就不是开发需要做的，因为这是一个简单没有技术含量且浪费时间的工作。时间就是金钱，所以为了不再浪费我们开发宝贵的时间，自动化构建这件事情必须得提上日程了。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"常见的持续集成工具\"><a href=\"#常见的持续集成工具\" class=\"headerlink\" title=\"常见的持续集成工具\"></a>常见的持续集成工具</h3><ul>\n<li><a href=\"https://jenkins-ci.org/\">Jenkins CI</a></li>\n<li><a href=\"https://travis-ci.com/\">Travis CI</a></li>\n<li><a href=\"http://hudson-ci.org/\">Hudson CI</a></li>\n<li><a href=\"https://circleci.com/\">Circle CI</a></li>\n</ul>\n<p>持续集成的工具有很多，不过最好用的还是Jenkins，Travis能够对Github上的开源项目做很好的集成，考虑到Jenkins的稳定性，我们还是选择Jenkins来开始我的iOS持续集成。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><p>本事例项目工程代码存放在coding，使用Cocoapods管理第三方库，存在在coding上的项目目录结构如下：</p>\n<img src=\"/posts/f3698aa6c24ae046/coding.png\" class=\"\" title=\"目录结构图\">\n<p>由于cocoapods文件过多，所以没有必要上传到git仓库中，只用将Podfile文件传上去即可。</p>\n<h3 id=\"Jenkins的安装\"><a href=\"#Jenkins的安装\" class=\"headerlink\" title=\"Jenkins的安装\"></a>Jenkins的安装</h3><p>由于Jenkins是Java开发的，所以首先我们需要先安装好Java环境，然后去Jenkins的<a href=\"http://jenkins-ci.org/\">官网</a>下载最新的war包。下载完成后，打开终端，进入到war包所在目录，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war --httpPort=8888</span><br></pre></td></tr></table></figure>\n<p>httpPort指的就是Jenkins所使用的http端口，这里指定8888，可根据具体情况来修改。待Jenkins启动后，在浏览器页面输入以下地址:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8888</span><br></pre></td></tr></table></figure>\n<p>这样就可以打开Jenkins页面了。</p>\n<blockquote>\n<p><code>--httpPort=8888</code>可以不输入，不输入默认端口号为8080</p>\n</blockquote>\n<p>打开链接后，先要设置一些安装信息，这里就不再啰嗦，因为十分简单，接下来我们来看安装成功后的相关配置。</p>\n<h3 id=\"Jenkins的配置\"><a href=\"#Jenkins的配置\" class=\"headerlink\" title=\"Jenkins的配置\"></a>Jenkins的配置</h3><p>到Jenkins页面，Jenkins－系统管理－插件管理－可选插件中，安装一下插件：</p>\n<ul>\n<li>GIT plugin</li>\n<li>Git client plugin</li>\n<li>Xcode integration</li>\n<li>CocoaPods Jenkins Integration</li>\n</ul>\n<h4 id=\"Git私有仓库配置\"><a href=\"#Git私有仓库配置\" class=\"headerlink\" title=\"Git私有仓库配置\"></a>Git私有仓库配置</h4><p>按照如下方式添加SSH，因为项目代码是存放在coding上的所以，这个关于生成SSH可以以Coding为例：<a href=\"https://coding.net/help/doc/git/ssh-key.html\">https://coding.net/help/doc/git/ssh-key.html</a></p>\n<img src=\"/posts/f3698aa6c24ae046/ssh_username_private_key.png\" class=\"\" title=\"SSH 秘钥配置\">\n\n<h4 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h4><p>这里的步骤我准备全部一图片的形式展示出来。</p>\n<p>点击“Jenkins”－“新建”：</p>\n<img src=\"/posts/f3698aa6c24ae046/new_job.png\" class=\"\" title=\"创建Job\">\n\n<h4 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a>源码管理</h4><p>选择刚刚创建的项目，点击“配置”：</p>\n<img src=\"/posts/f3698aa6c24ae046/set_code_source.png\" class=\"\" title=\"设置源码地址\">\n\n<p>这里最好使用SSH，这个工程是私有项目，如果出现错误肯定是由你自己配置错误造成的。</p>\n<h4 id=\"构建步骤设置\"><a href=\"#构建步骤设置\" class=\"headerlink\" title=\"构建步骤设置\"></a>构建步骤设置</h4><p>选择构建步骤，记得添加Xcode插件，选择添加Execute Shell和Xcode，有先后顺序。</p>\n<img src=\"/posts/f3698aa6c24ae046/execte_config.png\" class=\"\" title=\"添加构建步骤\">\n\n<p>设置Execute Shell</p>\n<img src=\"/posts/f3698aa6c24ae046/execute_shell.png\" class=\"\" title=\"Execute Shell\">\n\n<h4 id=\"Xcode-General-build-settings\"><a href=\"#Xcode-General-build-settings\" class=\"headerlink\" title=\"Xcode General build settings\"></a>Xcode General build settings</h4><img src=\"/posts/f3698aa6c24ae046/xcode_general_build_settings.png\" class=\"\" title=\"General build settings\">\n\n<img src=\"/posts/f3698aa6c24ae046/code_signing_OS_X_keychain_options.png\" class=\"\" title=\"Code signing &amp; OS X keychain options\">\n\n<p>Keychain path填写<code>$&#123;HOME&#125;/Library/Keychains/login.keychain</code><br>Keychain password对应的密码可以在钥匙串中查看：</p>\n<img src=\"/posts/f3698aa6c24ae046/keychain.png\" class=\"\" title=\"Code signing &amp; OS X keychain password查看方法\">\n\n<h4 id=\"Advanced-Xcode-build-options\"><a href=\"#Advanced-Xcode-build-options\" class=\"headerlink\" title=\"Advanced Xcode build options\"></a>Advanced Xcode build options</h4><img src=\"/posts/f3698aa6c24ae046/xcode_build_options.png\" class=\"\" title=\"Advanced Xcode build options\">\n\n<h3 id=\"fir-im-Jenkins-插件安装\"><a href=\"#fir-im-Jenkins-插件安装\" class=\"headerlink\" title=\"fir.im Jenkins 插件安装\"></a>fir.im Jenkins 插件安装</h3><p>上面的构建配置好了后，如果顺利的话就已经能够编译出ipa文件了，但是编译出来的ipa只能放在本地，不能给大家安装，所以编译完成后我们还需要将ipa文件上传到fir.im。<br>fir插件的安装方法详情请移步：<a href=\"http://blog.fir.im/jenkins/\">《fir.im Jenkins 插件使用方法》</a></p>\n<h3 id=\"构建后上传到fir-im\"><a href=\"#构建后上传到fir-im\" class=\"headerlink\" title=\"构建后上传到fir.im\"></a>构建后上传到fir.im</h3><p>安装好fir插件后在“构建后操作”中点击“添加构建后操作步骤”，可以看到：</p>\n<img src=\"/posts/f3698aa6c24ae046/upload_fir.png\" class=\"\" title=\"添加构建后上传fir步骤\">\n\n<p>点击“upload to fir.im”，然后会出现如下界面：</p>\n<img src=\"/posts/f3698aa6c24ae046/set_upload_fir.png\" class=\"\" title=\"设置fir.im的Token\">\n\n<p>Fir.im的Token获取地址：<a href=\"http://fir.im/apps/apitoken\">http://fir.im/apps/apitoken</a></p>\n<h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p>选中你要构建的项目，然后点击“立即构建”</p>\n<img src=\"/posts/f3698aa6c24ae046/shoudong_goujian.png\" class=\"\" title=\"手动构建\">\n\n<p>选择正在构建的Build，然后点击“Console Output”可以查看build过程中打印的一些信息，如果遇到什么报错信息都可以在这里面查看。</p>\n<img src=\"/posts/f3698aa6c24ae046/build_message.png\" class=\"\" title=\"控制台输出\">\n\n<h3 id=\"自动构建设置\"><a href=\"#自动构建设置\" class=\"headerlink\" title=\"自动构建设置\"></a>自动构建设置</h3><p>构建触发器有一下几种触发方式：</p>\n<ul>\n<li>触发远程构建 (例如,使用脚本)</li>\n<li>Build after other projects are built</li>\n<li>Build periodically</li>\n<li>Poll SCM</li>\n</ul>\n<p>这里我只用到了Build periodically</p>\n<img src=\"/posts/f3698aa6c24ae046/zidong_goujian.png\" class=\"\" title=\"Build periodically触发自动构建\">\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为了搭建这个Jenkins我看了很多博客，不过大多比较难懂，一直都没有成功，经过各种尝试后最终搭建成功，我在此将整个过程记录下来，以来是对自己知识的一个积累，二来如果能够给将要搭建Jenkins的iOS持续集成的朋友们一点帮助也是极好的。</p>\n<p>参考文档：<br><a href=\"http://www.jianshu.com/p/c69deb29720d#\">一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP</a><br><a href=\"http://rannie.github.io/ios/2014/12/29/xcodebuild-jenkins-ci.html\">使用 Xcodebuild + Jenkins + Apache 做 iOS 持续集成</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<h3 id=\"为什么使用持续集成\"><a href=\"#为什么使用持续集成\" class=\"headerlink\" title=\"为什么使用持续集成\"></a>为什么使用持续集成</h3><p>1、减少重复繁琐的打包过程<br>2、任何时间、任何地点测试都可以获取到新包<br>3、增强项目的可见性</p>\n<p>做持续集成对我们开发者来说是一件一劳永益的事情，对于发包这个问题，相信是每个程序员GG心中挥之不去的痛，而测试MM们也在每次马上就发出来的承诺中得出一个结论就是“你是个大骗子”。</p>\n<p>所以每次被测试MM追着要包，产品经理说给我装一个新包瞧瞧呗，后台GG说给我装一个老版本调试一下啊。。。这个时候我们的内心是奔溃的，然后我们不得不暂停手下的工作，切换到某个版本，Archive。。。其实对于打包发包这种事情根本就不是开发需要做的，因为这是一个简单没有技术含量且浪费时间的工作。时间就是金钱，所以为了不再浪费我们开发宝贵的时间，自动化构建这件事情必须得提上日程了。</p>","more":"<h3 id=\"常见的持续集成工具\"><a href=\"#常见的持续集成工具\" class=\"headerlink\" title=\"常见的持续集成工具\"></a>常见的持续集成工具</h3><ul>\n<li><a href=\"https://jenkins-ci.org/\">Jenkins CI</a></li>\n<li><a href=\"https://travis-ci.com/\">Travis CI</a></li>\n<li><a href=\"http://hudson-ci.org/\">Hudson CI</a></li>\n<li><a href=\"https://circleci.com/\">Circle CI</a></li>\n</ul>\n<p>持续集成的工具有很多，不过最好用的还是Jenkins，Travis能够对Github上的开源项目做很好的集成，考虑到Jenkins的稳定性，我们还是选择Jenkins来开始我的iOS持续集成。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><p>本事例项目工程代码存放在coding，使用Cocoapods管理第三方库，存在在coding上的项目目录结构如下：</p>\n<img src=\"/posts/f3698aa6c24ae046/coding.png\" class=\"\" title=\"目录结构图\">\n<p>由于cocoapods文件过多，所以没有必要上传到git仓库中，只用将Podfile文件传上去即可。</p>\n<h3 id=\"Jenkins的安装\"><a href=\"#Jenkins的安装\" class=\"headerlink\" title=\"Jenkins的安装\"></a>Jenkins的安装</h3><p>由于Jenkins是Java开发的，所以首先我们需要先安装好Java环境，然后去Jenkins的<a href=\"http://jenkins-ci.org/\">官网</a>下载最新的war包。下载完成后，打开终端，进入到war包所在目录，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war --httpPort=8888</span><br></pre></td></tr></table></figure>\n<p>httpPort指的就是Jenkins所使用的http端口，这里指定8888，可根据具体情况来修改。待Jenkins启动后，在浏览器页面输入以下地址:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8888</span><br></pre></td></tr></table></figure>\n<p>这样就可以打开Jenkins页面了。</p>\n<blockquote>\n<p><code>--httpPort=8888</code>可以不输入，不输入默认端口号为8080</p>\n</blockquote>\n<p>打开链接后，先要设置一些安装信息，这里就不再啰嗦，因为十分简单，接下来我们来看安装成功后的相关配置。</p>\n<h3 id=\"Jenkins的配置\"><a href=\"#Jenkins的配置\" class=\"headerlink\" title=\"Jenkins的配置\"></a>Jenkins的配置</h3><p>到Jenkins页面，Jenkins－系统管理－插件管理－可选插件中，安装一下插件：</p>\n<ul>\n<li>GIT plugin</li>\n<li>Git client plugin</li>\n<li>Xcode integration</li>\n<li>CocoaPods Jenkins Integration</li>\n</ul>\n<h4 id=\"Git私有仓库配置\"><a href=\"#Git私有仓库配置\" class=\"headerlink\" title=\"Git私有仓库配置\"></a>Git私有仓库配置</h4><p>按照如下方式添加SSH，因为项目代码是存放在coding上的所以，这个关于生成SSH可以以Coding为例：<a href=\"https://coding.net/help/doc/git/ssh-key.html\">https://coding.net/help/doc/git/ssh-key.html</a></p>\n<img src=\"/posts/f3698aa6c24ae046/ssh_username_private_key.png\" class=\"\" title=\"SSH 秘钥配置\">\n\n<h4 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h4><p>这里的步骤我准备全部一图片的形式展示出来。</p>\n<p>点击“Jenkins”－“新建”：</p>\n<img src=\"/posts/f3698aa6c24ae046/new_job.png\" class=\"\" title=\"创建Job\">\n\n<h4 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a>源码管理</h4><p>选择刚刚创建的项目，点击“配置”：</p>\n<img src=\"/posts/f3698aa6c24ae046/set_code_source.png\" class=\"\" title=\"设置源码地址\">\n\n<p>这里最好使用SSH，这个工程是私有项目，如果出现错误肯定是由你自己配置错误造成的。</p>\n<h4 id=\"构建步骤设置\"><a href=\"#构建步骤设置\" class=\"headerlink\" title=\"构建步骤设置\"></a>构建步骤设置</h4><p>选择构建步骤，记得添加Xcode插件，选择添加Execute Shell和Xcode，有先后顺序。</p>\n<img src=\"/posts/f3698aa6c24ae046/execte_config.png\" class=\"\" title=\"添加构建步骤\">\n\n<p>设置Execute Shell</p>\n<img src=\"/posts/f3698aa6c24ae046/execute_shell.png\" class=\"\" title=\"Execute Shell\">\n\n<h4 id=\"Xcode-General-build-settings\"><a href=\"#Xcode-General-build-settings\" class=\"headerlink\" title=\"Xcode General build settings\"></a>Xcode General build settings</h4><img src=\"/posts/f3698aa6c24ae046/xcode_general_build_settings.png\" class=\"\" title=\"General build settings\">\n\n<img src=\"/posts/f3698aa6c24ae046/code_signing_OS_X_keychain_options.png\" class=\"\" title=\"Code signing &amp; OS X keychain options\">\n\n<p>Keychain path填写<code>$&#123;HOME&#125;/Library/Keychains/login.keychain</code><br>Keychain password对应的密码可以在钥匙串中查看：</p>\n<img src=\"/posts/f3698aa6c24ae046/keychain.png\" class=\"\" title=\"Code signing &amp; OS X keychain password查看方法\">\n\n<h4 id=\"Advanced-Xcode-build-options\"><a href=\"#Advanced-Xcode-build-options\" class=\"headerlink\" title=\"Advanced Xcode build options\"></a>Advanced Xcode build options</h4><img src=\"/posts/f3698aa6c24ae046/xcode_build_options.png\" class=\"\" title=\"Advanced Xcode build options\">\n\n<h3 id=\"fir-im-Jenkins-插件安装\"><a href=\"#fir-im-Jenkins-插件安装\" class=\"headerlink\" title=\"fir.im Jenkins 插件安装\"></a>fir.im Jenkins 插件安装</h3><p>上面的构建配置好了后，如果顺利的话就已经能够编译出ipa文件了，但是编译出来的ipa只能放在本地，不能给大家安装，所以编译完成后我们还需要将ipa文件上传到fir.im。<br>fir插件的安装方法详情请移步：<a href=\"http://blog.fir.im/jenkins/\">《fir.im Jenkins 插件使用方法》</a></p>\n<h3 id=\"构建后上传到fir-im\"><a href=\"#构建后上传到fir-im\" class=\"headerlink\" title=\"构建后上传到fir.im\"></a>构建后上传到fir.im</h3><p>安装好fir插件后在“构建后操作”中点击“添加构建后操作步骤”，可以看到：</p>\n<img src=\"/posts/f3698aa6c24ae046/upload_fir.png\" class=\"\" title=\"添加构建后上传fir步骤\">\n\n<p>点击“upload to fir.im”，然后会出现如下界面：</p>\n<img src=\"/posts/f3698aa6c24ae046/set_upload_fir.png\" class=\"\" title=\"设置fir.im的Token\">\n\n<p>Fir.im的Token获取地址：<a href=\"http://fir.im/apps/apitoken\">http://fir.im/apps/apitoken</a></p>\n<h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p>选中你要构建的项目，然后点击“立即构建”</p>\n<img src=\"/posts/f3698aa6c24ae046/shoudong_goujian.png\" class=\"\" title=\"手动构建\">\n\n<p>选择正在构建的Build，然后点击“Console Output”可以查看build过程中打印的一些信息，如果遇到什么报错信息都可以在这里面查看。</p>\n<img src=\"/posts/f3698aa6c24ae046/build_message.png\" class=\"\" title=\"控制台输出\">\n\n<h3 id=\"自动构建设置\"><a href=\"#自动构建设置\" class=\"headerlink\" title=\"自动构建设置\"></a>自动构建设置</h3><p>构建触发器有一下几种触发方式：</p>\n<ul>\n<li>触发远程构建 (例如,使用脚本)</li>\n<li>Build after other projects are built</li>\n<li>Build periodically</li>\n<li>Poll SCM</li>\n</ul>\n<p>这里我只用到了Build periodically</p>\n<img src=\"/posts/f3698aa6c24ae046/zidong_goujian.png\" class=\"\" title=\"Build periodically触发自动构建\">\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为了搭建这个Jenkins我看了很多博客，不过大多比较难懂，一直都没有成功，经过各种尝试后最终搭建成功，我在此将整个过程记录下来，以来是对自己知识的一个积累，二来如果能够给将要搭建Jenkins的iOS持续集成的朋友们一点帮助也是极好的。</p>\n<p>参考文档：<br><a href=\"http://www.jianshu.com/p/c69deb29720d#\">一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP</a><br><a href=\"http://rannie.github.io/ios/2014/12/29/xcodebuild-jenkins-ci.html\">使用 Xcodebuild + Jenkins + Apache 做 iOS 持续集成</a></p>"},{"title":"修改Mysql数据库支持emoji","date":"2018-03-01T09:51:16.000Z","abbrlink":"e2434ea71cfbfc1f","_content":"\n使用sql语句修改数据库字符集的方法：\n语法如下：\n``` bash\nALTER DATABASE 库名 CHARACTER SET 字符集名称 COLLATE 排序规则名称;\n修改表:\nALTER TABLE 表名 CONVERT TO CHARACTER SET 字符集名称  COLLATE 排序规则名称; 修改一列: ALTER TABLE 表名 MODIFY 列名 字段类型 CHARACTER SET 字符集名称  COLLATE 排序规则名称;\n```\n<!--more-->\n示例：下面三条sql 分别将库 govlan_system , 表 bbs_comment , 表 bbs_comment 中的 content 列修改为utf8mb4 字符集, 代码如下: \n``` bash\nALTER DATABASE govlan_system character set utf8mb4 collate utf8mb4_general_ci;\nuse govlan_system;\nalter table bbs_comment character set utf8mb4 collate utf8mb4_general_ci;\nALTER TABLE bbs_comment modify content LONGTEXT character set utf8mb4;\n```","source":"_posts/修改Mysql数据库支持emoji.md","raw":"---\ntitle: 修改Mysql数据库支持emoji\ndate: 2018-03-01 17:51:16\ntags:\n  - Mysql\ncategories: 技术杂谈\nabbrlink: e2434ea71cfbfc1f\n---\n\n使用sql语句修改数据库字符集的方法：\n语法如下：\n``` bash\nALTER DATABASE 库名 CHARACTER SET 字符集名称 COLLATE 排序规则名称;\n修改表:\nALTER TABLE 表名 CONVERT TO CHARACTER SET 字符集名称  COLLATE 排序规则名称; 修改一列: ALTER TABLE 表名 MODIFY 列名 字段类型 CHARACTER SET 字符集名称  COLLATE 排序规则名称;\n```\n<!--more-->\n示例：下面三条sql 分别将库 govlan_system , 表 bbs_comment , 表 bbs_comment 中的 content 列修改为utf8mb4 字符集, 代码如下: \n``` bash\nALTER DATABASE govlan_system character set utf8mb4 collate utf8mb4_general_ci;\nuse govlan_system;\nalter table bbs_comment character set utf8mb4 collate utf8mb4_general_ci;\nALTER TABLE bbs_comment modify content LONGTEXT character set utf8mb4;\n```","slug":"修改Mysql数据库支持emoji","published":1,"updated":"2022-05-19T03:13:11.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo5004ql1l3ewdw1cjz","content":"<p>使用sql语句修改数据库字符集的方法：<br>语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE 库名 CHARACTER SET 字符集名称 COLLATE 排序规则名称;</span><br><span class=\"line\">修改表:</span><br><span class=\"line\">ALTER TABLE 表名 CONVERT TO CHARACTER SET 字符集名称  COLLATE 排序规则名称; 修改一列: ALTER TABLE 表名 MODIFY 列名 字段类型 CHARACTER SET 字符集名称  COLLATE 排序规则名称;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>示例：下面三条sql 分别将库 govlan_system , 表 bbs_comment , 表 bbs_comment 中的 content 列修改为utf8mb4 字符集, 代码如下: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE govlan_system character <span class=\"built_in\">set</span> utf8mb4 collate utf8mb4_general_ci;</span><br><span class=\"line\">use govlan_system;</span><br><span class=\"line\">alter table bbs_comment character <span class=\"built_in\">set</span> utf8mb4 collate utf8mb4_general_ci;</span><br><span class=\"line\">ALTER TABLE bbs_comment modify content LONGTEXT character <span class=\"built_in\">set</span> utf8mb4;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>使用sql语句修改数据库字符集的方法：<br>语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE 库名 CHARACTER SET 字符集名称 COLLATE 排序规则名称;</span><br><span class=\"line\">修改表:</span><br><span class=\"line\">ALTER TABLE 表名 CONVERT TO CHARACTER SET 字符集名称  COLLATE 排序规则名称; 修改一列: ALTER TABLE 表名 MODIFY 列名 字段类型 CHARACTER SET 字符集名称  COLLATE 排序规则名称;</span><br></pre></td></tr></table></figure>","more":"<p>示例：下面三条sql 分别将库 govlan_system , 表 bbs_comment , 表 bbs_comment 中的 content 列修改为utf8mb4 字符集, 代码如下: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE govlan_system character <span class=\"built_in\">set</span> utf8mb4 collate utf8mb4_general_ci;</span><br><span class=\"line\">use govlan_system;</span><br><span class=\"line\">alter table bbs_comment character <span class=\"built_in\">set</span> utf8mb4 collate utf8mb4_general_ci;</span><br><span class=\"line\">ALTER TABLE bbs_comment modify content LONGTEXT character <span class=\"built_in\">set</span> utf8mb4;</span><br></pre></td></tr></table></figure>"},{"title":"关于UItableView的复用","date":"2016-04-05T01:26:44.000Z","abbrlink":"b0943f086f49644d","_content":"\nUITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。\n\n## 概述\n\n为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。\n\n<!-- more -->\n\n关于UItableView的复用机制大概是这样的：假设一个UItableView要加载10000条数据，但是一个屏幕最大只能展示3条数据（这里屏幕最多能展示的数据条数是根据UItableViewCell的高度来定的）。然后当你向上滑动，想要查看更多的内容，那么肯定需要一个cell放在已经存在的内容下边。这个时候并不会重新去创建一个UItableViewCell放在下面，而是根据cellIdetifier去内存池中拿到与之对应的UItableViewCell。\n\n## 复用方式\n\nUItableView的复用方式有如下四种方式实现\n\n方式一:\n``` objc\nUITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:cellIdentifier];  \nif (!cell) {\n\tcell=[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier]; \n}\n```\n方式二:UItableViewCell是xib写的\n``` objc\nXXXTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  \nif (nil == cell) {  \n    cell = [[[NSBundle mainBundle]loadNibNamed:@\"XXXTableViewCell\" owner:self options:nil]lastObject];  \n    cell.selectionStyle=UITableViewCellSelectionStyleNone;  \n    [tableView registerNib:[UINib nibWithNibName:@\"XXXTableViewCell\" bundle:[NSBundle mainBundle]] forCellReuseIdentifier:cellIdentifier];\n}\n```\n方式三:在xib中identifier属性必须写上cellIdentifier ,对应代码中的cellIdentifier\n``` objc\nXXTableViewCell *cell;  \ncell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  \nif (nil == cell) {  \n    cell= [[[NSBundle mainBundle] loadNibNamed:@\"XXTableViewCell\" owner:nil options:nil] lastObject];  \n}  \nreturn cell;\n```\n方式四：先register cell，然后复用\n``` objc\n#pragma mark - 初始化控件\n\n- (UITableView *)tableView\n{\n    if (!_tableView) {\n        _tableView = [[UITableView alloc]initWithFrame:self.frame style:UITableViewStylePlain];\n        _tableView.backgroundColor = kMainBgColor;\n        _tableView.dataSource = self;\n        _tableView.delegate = self;\n        _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;\n        [_tableView registerClass:[XXXCell_iPhone class] forCellReuseIdentifier:kCellIdentifier_XXXCell];\n        _tableView.tableFooterView = self.loadingFooterView;\n    }\n    return _tableView;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n\t//复用\n    XXXCell_iPhone *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier_XXXCell forIndexPath:indexPath];\n    cell.type = self.type;\n    [cell setExpressOrder:[_list safeObjectAtIndex:indexPath.row] needTopView:indexPath.row == 0];\n    return cell;\n}\n\n```\n\n##  常见问题","source":"_posts/关于UItableView的复用.md","raw":"---\ntitle: 关于UItableView的复用\ndate: 2016-04-05 09:26:44\ntags:\n  - iOS\n  - 笔记\ncategories: iOS学习笔记\nabbrlink: b0943f086f49644d\n---\n\nUITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。\n\n## 概述\n\n为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。\n\n<!-- more -->\n\n关于UItableView的复用机制大概是这样的：假设一个UItableView要加载10000条数据，但是一个屏幕最大只能展示3条数据（这里屏幕最多能展示的数据条数是根据UItableViewCell的高度来定的）。然后当你向上滑动，想要查看更多的内容，那么肯定需要一个cell放在已经存在的内容下边。这个时候并不会重新去创建一个UItableViewCell放在下面，而是根据cellIdetifier去内存池中拿到与之对应的UItableViewCell。\n\n## 复用方式\n\nUItableView的复用方式有如下四种方式实现\n\n方式一:\n``` objc\nUITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:cellIdentifier];  \nif (!cell) {\n\tcell=[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier]; \n}\n```\n方式二:UItableViewCell是xib写的\n``` objc\nXXXTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  \nif (nil == cell) {  \n    cell = [[[NSBundle mainBundle]loadNibNamed:@\"XXXTableViewCell\" owner:self options:nil]lastObject];  \n    cell.selectionStyle=UITableViewCellSelectionStyleNone;  \n    [tableView registerNib:[UINib nibWithNibName:@\"XXXTableViewCell\" bundle:[NSBundle mainBundle]] forCellReuseIdentifier:cellIdentifier];\n}\n```\n方式三:在xib中identifier属性必须写上cellIdentifier ,对应代码中的cellIdentifier\n``` objc\nXXTableViewCell *cell;  \ncell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  \nif (nil == cell) {  \n    cell= [[[NSBundle mainBundle] loadNibNamed:@\"XXTableViewCell\" owner:nil options:nil] lastObject];  \n}  \nreturn cell;\n```\n方式四：先register cell，然后复用\n``` objc\n#pragma mark - 初始化控件\n\n- (UITableView *)tableView\n{\n    if (!_tableView) {\n        _tableView = [[UITableView alloc]initWithFrame:self.frame style:UITableViewStylePlain];\n        _tableView.backgroundColor = kMainBgColor;\n        _tableView.dataSource = self;\n        _tableView.delegate = self;\n        _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;\n        [_tableView registerClass:[XXXCell_iPhone class] forCellReuseIdentifier:kCellIdentifier_XXXCell];\n        _tableView.tableFooterView = self.loadingFooterView;\n    }\n    return _tableView;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n\t//复用\n    XXXCell_iPhone *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier_XXXCell forIndexPath:indexPath];\n    cell.type = self.type;\n    [cell setExpressOrder:[_list safeObjectAtIndex:indexPath.row] needTopView:indexPath.row == 0];\n    return cell;\n}\n\n```\n\n##  常见问题","slug":"关于UItableView的复用","published":1,"updated":"2022-05-19T03:13:11.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo6004tl1l31cfs5wyz","content":"<p>UITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。</p>\n<span id=\"more\"></span>\n\n<p>关于UItableView的复用机制大概是这样的：假设一个UItableView要加载10000条数据，但是一个屏幕最大只能展示3条数据（这里屏幕最多能展示的数据条数是根据UItableViewCell的高度来定的）。然后当你向上滑动，想要查看更多的内容，那么肯定需要一个cell放在已经存在的内容下边。这个时候并不会重新去创建一个UItableViewCell放在下面，而是根据cellIdetifier去内存池中拿到与之对应的UItableViewCell。</p>\n<h2 id=\"复用方式\"><a href=\"#复用方式\" class=\"headerlink\" title=\"复用方式\"></a>复用方式</h2><p>UItableView的复用方式有如下四种方式实现</p>\n<p>方式一:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UITableViewCell</span> *cell=[tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!cell) &#123;</span><br><span class=\"line\">\tcell=[[<span class=\"built_in\">UITableViewCell</span> alloc]initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier]; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式二:UItableViewCell是xib写的</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXXTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">nil</span> == cell) &#123;  </span><br><span class=\"line\">    cell = [[[<span class=\"built_in\">NSBundle</span> mainBundle]loadNibNamed:<span class=\"string\">@&quot;XXXTableViewCell&quot;</span> owner:<span class=\"keyword\">self</span> options:<span class=\"literal\">nil</span>]lastObject];  </span><br><span class=\"line\">    cell.selectionStyle=<span class=\"built_in\">UITableViewCellSelectionStyleNone</span>;  </span><br><span class=\"line\">    [tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@&quot;XXXTableViewCell&quot;</span> bundle:[<span class=\"built_in\">NSBundle</span> mainBundle]] forCellReuseIdentifier:cellIdentifier];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式三:在xib中identifier属性必须写上cellIdentifier ,对应代码中的cellIdentifier</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXTableViewCell *cell;  </span><br><span class=\"line\">cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">nil</span> == cell) &#123;  </span><br><span class=\"line\">    cell= [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@&quot;XXTableViewCell&quot;</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>] lastObject];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> cell;</span><br></pre></td></tr></table></figure>\n<p>方式四：先register cell，然后复用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - 初始化控件</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITableView</span> *)tableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_tableView) &#123;</span><br><span class=\"line\">        _tableView = [[<span class=\"built_in\">UITableView</span> alloc]initWithFrame:<span class=\"keyword\">self</span>.frame style:<span class=\"built_in\">UITableViewStylePlain</span>];</span><br><span class=\"line\">        _tableView.backgroundColor = kMainBgColor;</span><br><span class=\"line\">        _tableView.dataSource = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">        _tableView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">        _tableView.separatorStyle = <span class=\"built_in\">UITableViewCellSeparatorStyleNone</span>;</span><br><span class=\"line\">        [_tableView registerClass:[XXXCell_iPhone <span class=\"keyword\">class</span>] forCellReuseIdentifier:kCellIdentifier_XXXCell];</span><br><span class=\"line\">        _tableView.tableFooterView = <span class=\"keyword\">self</span>.loadingFooterView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _tableView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//复用</span></span><br><span class=\"line\">    XXXCell_iPhone *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier_XXXCell forIndexPath:indexPath];</span><br><span class=\"line\">    cell.type = <span class=\"keyword\">self</span>.type;</span><br><span class=\"line\">    [cell setExpressOrder:[_list safeObjectAtIndex:indexPath.row] needTopView:indexPath.row == <span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>","site":{"data":{}},"excerpt":"<p>UITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。</p>","more":"<p>关于UItableView的复用机制大概是这样的：假设一个UItableView要加载10000条数据，但是一个屏幕最大只能展示3条数据（这里屏幕最多能展示的数据条数是根据UItableViewCell的高度来定的）。然后当你向上滑动，想要查看更多的内容，那么肯定需要一个cell放在已经存在的内容下边。这个时候并不会重新去创建一个UItableViewCell放在下面，而是根据cellIdetifier去内存池中拿到与之对应的UItableViewCell。</p>\n<h2 id=\"复用方式\"><a href=\"#复用方式\" class=\"headerlink\" title=\"复用方式\"></a>复用方式</h2><p>UItableView的复用方式有如下四种方式实现</p>\n<p>方式一:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UITableViewCell</span> *cell=[tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!cell) &#123;</span><br><span class=\"line\">\tcell=[[<span class=\"built_in\">UITableViewCell</span> alloc]initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier]; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式二:UItableViewCell是xib写的</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXXTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">nil</span> == cell) &#123;  </span><br><span class=\"line\">    cell = [[[<span class=\"built_in\">NSBundle</span> mainBundle]loadNibNamed:<span class=\"string\">@&quot;XXXTableViewCell&quot;</span> owner:<span class=\"keyword\">self</span> options:<span class=\"literal\">nil</span>]lastObject];  </span><br><span class=\"line\">    cell.selectionStyle=<span class=\"built_in\">UITableViewCellSelectionStyleNone</span>;  </span><br><span class=\"line\">    [tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@&quot;XXXTableViewCell&quot;</span> bundle:[<span class=\"built_in\">NSBundle</span> mainBundle]] forCellReuseIdentifier:cellIdentifier];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式三:在xib中identifier属性必须写上cellIdentifier ,对应代码中的cellIdentifier</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXTableViewCell *cell;  </span><br><span class=\"line\">cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">nil</span> == cell) &#123;  </span><br><span class=\"line\">    cell= [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@&quot;XXTableViewCell&quot;</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>] lastObject];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> cell;</span><br></pre></td></tr></table></figure>\n<p>方式四：先register cell，然后复用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - 初始化控件</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITableView</span> *)tableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_tableView) &#123;</span><br><span class=\"line\">        _tableView = [[<span class=\"built_in\">UITableView</span> alloc]initWithFrame:<span class=\"keyword\">self</span>.frame style:<span class=\"built_in\">UITableViewStylePlain</span>];</span><br><span class=\"line\">        _tableView.backgroundColor = kMainBgColor;</span><br><span class=\"line\">        _tableView.dataSource = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">        _tableView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">        _tableView.separatorStyle = <span class=\"built_in\">UITableViewCellSeparatorStyleNone</span>;</span><br><span class=\"line\">        [_tableView registerClass:[XXXCell_iPhone <span class=\"keyword\">class</span>] forCellReuseIdentifier:kCellIdentifier_XXXCell];</span><br><span class=\"line\">        _tableView.tableFooterView = <span class=\"keyword\">self</span>.loadingFooterView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _tableView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//复用</span></span><br><span class=\"line\">    XXXCell_iPhone *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier_XXXCell forIndexPath:indexPath];</span><br><span class=\"line\">    cell.type = <span class=\"keyword\">self</span>.type;</span><br><span class=\"line\">    [cell setExpressOrder:[_list safeObjectAtIndex:indexPath.row] needTopView:indexPath.row == <span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>"},{"title":"关闭iOS系统自动更新提示的方法","date":"2016-05-16T02:16:25.000Z","abbrlink":"e5a0477099f91071","_content":"\n一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。\n\n<!-- more -->\n\n## 解决办法\n\n经过一段时间的试验，有如下几个对应方案：\n1. 设置 - 通用 - 用量 - 管理存储空间 - 找到更新包，然后删除它\n2. 设置 - iTunes&App Stores, 找到Updates，关闭\n\n如果以上两个方案还不管用，直接放大招：\n在手机上打开safari，地址栏输入:\n\n```\nhttps://oldcat.me/web/NOOTA9.mobileconfig\n```\n然后回车\n按照要求安装此provision文件即可，然后重启。\n\n{% asset_img thumb_IMG_0889_1024.jpg 安装provision文件%}\n\n重启后打开设置 - 通用 - 软件更新 有惊喜\n\n{% asset_img thumb_IMG_0890_1024.jpg 结果图%}\n","source":"_posts/关闭iOS系统自动更新提示的方法.md","raw":"---\ntitle: 关闭iOS系统自动更新提示的方法\ndate: 2016-05-16 10:16:25\ntags:\n   - iOS系统\ncategories: 其他\nabbrlink: e5a0477099f91071\n---\n\n一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。\n\n<!-- more -->\n\n## 解决办法\n\n经过一段时间的试验，有如下几个对应方案：\n1. 设置 - 通用 - 用量 - 管理存储空间 - 找到更新包，然后删除它\n2. 设置 - iTunes&App Stores, 找到Updates，关闭\n\n如果以上两个方案还不管用，直接放大招：\n在手机上打开safari，地址栏输入:\n\n```\nhttps://oldcat.me/web/NOOTA9.mobileconfig\n```\n然后回车\n按照要求安装此provision文件即可，然后重启。\n\n{% asset_img thumb_IMG_0889_1024.jpg 安装provision文件%}\n\n重启后打开设置 - 通用 - 软件更新 有惊喜\n\n{% asset_img thumb_IMG_0890_1024.jpg 结果图%}\n","slug":"关闭iOS系统自动更新提示的方法","published":1,"updated":"2022-05-19T03:13:11.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo6004xl1l333n3d0rs","content":"<p>一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>经过一段时间的试验，有如下几个对应方案：</p>\n<ol>\n<li>设置 - 通用 - 用量 - 管理存储空间 - 找到更新包，然后删除它</li>\n<li>设置 - iTunes&amp;App Stores, 找到Updates，关闭</li>\n</ol>\n<p>如果以上两个方案还不管用，直接放大招：<br>在手机上打开safari，地址栏输入:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://oldcat.me/web/NOOTA9.mobileconfig</span><br></pre></td></tr></table></figure>\n<p>然后回车<br>按照要求安装此provision文件即可，然后重启。</p>\n<img src=\"/posts/e5a0477099f91071/thumb_IMG_0889_1024.jpg\" class=\"\" title=\"安装provision文件\">\n\n<p>重启后打开设置 - 通用 - 软件更新 有惊喜</p>\n<img src=\"/posts/e5a0477099f91071/thumb_IMG_0890_1024.jpg\" class=\"\" title=\"结果图\">\n","site":{"data":{}},"excerpt":"<p>一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。</p>","more":"<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>经过一段时间的试验，有如下几个对应方案：</p>\n<ol>\n<li>设置 - 通用 - 用量 - 管理存储空间 - 找到更新包，然后删除它</li>\n<li>设置 - iTunes&amp;App Stores, 找到Updates，关闭</li>\n</ol>\n<p>如果以上两个方案还不管用，直接放大招：<br>在手机上打开safari，地址栏输入:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://oldcat.me/web/NOOTA9.mobileconfig</span><br></pre></td></tr></table></figure>\n<p>然后回车<br>按照要求安装此provision文件即可，然后重启。</p>\n<img src=\"/posts/e5a0477099f91071/thumb_IMG_0889_1024.jpg\" class=\"\" title=\"安装provision文件\">\n\n<p>重启后打开设置 - 通用 - 软件更新 有惊喜</p>\n<img src=\"/posts/e5a0477099f91071/thumb_IMG_0890_1024.jpg\" class=\"\" title=\"结果图\">"},{"title":"全屏设置setStatusBarOrientation 未生效的解决办法","date":"2016-07-06T07:21:10.000Z","abbrlink":"8ab809de7f3aefd3","_content":"\n最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。\n手动调用了如下代码，但是并没有什么卵用：\n``` objc\n[[UIApplication sharedApplication]setStatusBarOrientation:UIInterfaceOrientationLandscapeRight];\n```\n经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：\n\n<!-- more -->\n1. 首先在Info.plist中设置View controller-based status bar appearance为NO\n2. 需要旋转的视频ViewController的方法`- (BOOL)shouldAutorotate`要返回NO，不然手动旋转不会生效。\n\n> Tips:本以为到了这里问题就应该已经解决了，but问题并没有得到解决,覆写`- (BOOL)shouldAutorotate`方法并为生效，或许此时你一定会说:\"WTF?\"\n\n最后的原因是:<span style=\"textColor:'#00ff00'\">由于UIViewController放置在Navigation中，而由于Navigation不人性化的设计，navigation的- (BOOL)shouldAutorotate是不会根据显示ViewController的- (BOOL)shouldAutorotate设置的值来改变的。</span>\n\n最后最终的解决办法是将下面这段代码放在AppDelegate.m的最后面，这个时候NavigationController就会根据你显示的ViewController改变返回值了，然后再去ViewController覆写方法，返回NO，方法生效了！\n``` objc\n@implementation UINavigationController (Rotation)  \n\n- (BOOL)shouldAutorotate  \n{  \n    return [[self.viewControllers lastObject] shouldAutorotate];  \n}  \n\n- (NSUInteger)supportedInterfaceOrientations  \n{  \n    return [[self.viewControllers lastObject] supportedInterfaceOrientations];  \n}  \n\n- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation {  \n    return [[self.viewControllers lastObject] preferredInterfaceOrientationForPresentation];  \n}  \n@end  \n```\n","source":"_posts/全屏设置setStatusBarOrientation-未生效的解决办法.md","raw":"---\ntitle: 全屏设置setStatusBarOrientation 未生效的解决办法\ndate: 2016-07-06 15:21:10\ntags:\n  - StatusBar\ncategories: 常见问题\nabbrlink: 8ab809de7f3aefd3\n---\n\n最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。\n手动调用了如下代码，但是并没有什么卵用：\n``` objc\n[[UIApplication sharedApplication]setStatusBarOrientation:UIInterfaceOrientationLandscapeRight];\n```\n经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：\n\n<!-- more -->\n1. 首先在Info.plist中设置View controller-based status bar appearance为NO\n2. 需要旋转的视频ViewController的方法`- (BOOL)shouldAutorotate`要返回NO，不然手动旋转不会生效。\n\n> Tips:本以为到了这里问题就应该已经解决了，but问题并没有得到解决,覆写`- (BOOL)shouldAutorotate`方法并为生效，或许此时你一定会说:\"WTF?\"\n\n最后的原因是:<span style=\"textColor:'#00ff00'\">由于UIViewController放置在Navigation中，而由于Navigation不人性化的设计，navigation的- (BOOL)shouldAutorotate是不会根据显示ViewController的- (BOOL)shouldAutorotate设置的值来改变的。</span>\n\n最后最终的解决办法是将下面这段代码放在AppDelegate.m的最后面，这个时候NavigationController就会根据你显示的ViewController改变返回值了，然后再去ViewController覆写方法，返回NO，方法生效了！\n``` objc\n@implementation UINavigationController (Rotation)  \n\n- (BOOL)shouldAutorotate  \n{  \n    return [[self.viewControllers lastObject] shouldAutorotate];  \n}  \n\n- (NSUInteger)supportedInterfaceOrientations  \n{  \n    return [[self.viewControllers lastObject] supportedInterfaceOrientations];  \n}  \n\n- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation {  \n    return [[self.viewControllers lastObject] preferredInterfaceOrientationForPresentation];  \n}  \n@end  \n```\n","slug":"全屏设置setStatusBarOrientation-未生效的解决办法","published":1,"updated":"2022-05-19T03:13:11.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo60050l1l38tkp70zx","content":"<p>最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。<br>手动调用了如下代码，但是并没有什么卵用：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication]setStatusBarOrientation:<span class=\"built_in\">UIInterfaceOrientationLandscapeRight</span>];</span><br></pre></td></tr></table></figure>\n<p>经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：</p>\n<span id=\"more\"></span>\n<ol>\n<li>首先在Info.plist中设置View controller-based status bar appearance为NO</li>\n<li>需要旋转的视频ViewController的方法<code>- (BOOL)shouldAutorotate</code>要返回NO，不然手动旋转不会生效。</li>\n</ol>\n<blockquote>\n<p>Tips:本以为到了这里问题就应该已经解决了，but问题并没有得到解决,覆写<code>- (BOOL)shouldAutorotate</code>方法并为生效，或许此时你一定会说:”WTF?”</p>\n</blockquote>\n<p>最后的原因是:<span style=\"textColor:'#00ff00'\">由于UIViewController放置在Navigation中，而由于Navigation不人性化的设计，navigation的- (BOOL)shouldAutorotate是不会根据显示ViewController的- (BOOL)shouldAutorotate设置的值来改变的。</span></p>\n<p>最后最终的解决办法是将下面这段代码放在AppDelegate.m的最后面，这个时候NavigationController就会根据你显示的ViewController改变返回值了，然后再去ViewController覆写方法，返回NO，方法生效了！</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UINavigationController</span> (<span class=\"title\">Rotation</span>)  </span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)shouldAutorotate  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span>.viewControllers lastObject] shouldAutorotate];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)supportedInterfaceOrientations  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span>.viewControllers lastObject] supportedInterfaceOrientations];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span>.viewControllers lastObject] preferredInterfaceOrientationForPresentation];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">@end</span>  </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。<br>手动调用了如下代码，但是并没有什么卵用：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication]setStatusBarOrientation:<span class=\"built_in\">UIInterfaceOrientationLandscapeRight</span>];</span><br></pre></td></tr></table></figure>\n<p>经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：</p>","more":"<ol>\n<li>首先在Info.plist中设置View controller-based status bar appearance为NO</li>\n<li>需要旋转的视频ViewController的方法<code>- (BOOL)shouldAutorotate</code>要返回NO，不然手动旋转不会生效。</li>\n</ol>\n<blockquote>\n<p>Tips:本以为到了这里问题就应该已经解决了，but问题并没有得到解决,覆写<code>- (BOOL)shouldAutorotate</code>方法并为生效，或许此时你一定会说:”WTF?”</p>\n</blockquote>\n<p>最后的原因是:<span style=\"textColor:'#00ff00'\">由于UIViewController放置在Navigation中，而由于Navigation不人性化的设计，navigation的- (BOOL)shouldAutorotate是不会根据显示ViewController的- (BOOL)shouldAutorotate设置的值来改变的。</span></p>\n<p>最后最终的解决办法是将下面这段代码放在AppDelegate.m的最后面，这个时候NavigationController就会根据你显示的ViewController改变返回值了，然后再去ViewController覆写方法，返回NO，方法生效了！</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UINavigationController</span> (<span class=\"title\">Rotation</span>)  </span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)shouldAutorotate  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span>.viewControllers lastObject] shouldAutorotate];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)supportedInterfaceOrientations  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span>.viewControllers lastObject] supportedInterfaceOrientations];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span>.viewControllers lastObject] preferredInterfaceOrientationForPresentation];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">@end</span>  </span><br></pre></td></tr></table></figure>"},{"title":"初识ReactiveCocoa响应式编程","date":"2016-05-24T05:02:01.000Z","abbrlink":"08dad03c8474c031","_content":"\n\n参考文章\n[使用ReactiveCocoa实现iOS平台响应式编程](http://www.itiger.me/?p=38)\n[ReactiveCocoa与Functional Reactive Programming](http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html)\n[最快让你上手ReactiveCocoa之基础篇](http://www.jianshu.com/p/87ef6720a096)\n[花瓣网李忠：ReactiveCocoa是Cocoa的未来](http://www.infoq.com/cn/news/2014/07/reactiveCocoa-cocoa)\n[ReactiveCocoa 讨论会](http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/)","source":"_posts/初识ReactiveCocoa响应式编程.md","raw":"---\ntitle: 初识ReactiveCocoa响应式编程\ndate: 2016-05-24 13:02:01\ntags:\n   - ReactiveCocoa\nabbrlink: 08dad03c8474c031\n---\n\n\n参考文章\n[使用ReactiveCocoa实现iOS平台响应式编程](http://www.itiger.me/?p=38)\n[ReactiveCocoa与Functional Reactive Programming](http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html)\n[最快让你上手ReactiveCocoa之基础篇](http://www.jianshu.com/p/87ef6720a096)\n[花瓣网李忠：ReactiveCocoa是Cocoa的未来](http://www.infoq.com/cn/news/2014/07/reactiveCocoa-cocoa)\n[ReactiveCocoa 讨论会](http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/)","slug":"初识ReactiveCocoa响应式编程","published":1,"updated":"2022-05-19T03:13:11.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceo70055l1l3615e3ap1","content":"<p>参考文章<br><a href=\"http://www.itiger.me/?p=38\">使用ReactiveCocoa实现iOS平台响应式编程</a><br><a href=\"http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html\">ReactiveCocoa与Functional Reactive Programming</a><br><a href=\"http://www.jianshu.com/p/87ef6720a096\">最快让你上手ReactiveCocoa之基础篇</a><br><a href=\"http://www.infoq.com/cn/news/2014/07/reactiveCocoa-cocoa\">花瓣网李忠：ReactiveCocoa是Cocoa的未来</a><br><a href=\"http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/\">ReactiveCocoa 讨论会</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考文章<br><a href=\"http://www.itiger.me/?p=38\">使用ReactiveCocoa实现iOS平台响应式编程</a><br><a href=\"http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html\">ReactiveCocoa与Functional Reactive Programming</a><br><a href=\"http://www.jianshu.com/p/87ef6720a096\">最快让你上手ReactiveCocoa之基础篇</a><br><a href=\"http://www.infoq.com/cn/news/2014/07/reactiveCocoa-cocoa\">花瓣网李忠：ReactiveCocoa是Cocoa的未来</a><br><a href=\"http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/\">ReactiveCocoa 讨论会</a></p>\n"},{"title":"关于iOS多线程小记","date":"2016-03-30T03:42:06.000Z","abbrlink":"c1dd23096e510f74","_content":"\n这篇文章我将整理一下iOS中的几种多线程方案，以及使用方法和注意事项。当然也会给出几种简单的代码案例，再试实际使用中去感受它们的区别。\n\n## 概述\n\n在了解线程前，我们需要先了解进程。一句话概括线程和进程就是：操作系统可以同时执行多个任务，每个任务就是进程，进程可以同时执行多个任务，每个任务就是线程。对于多线程的优点大致可以总结为以下几点：\n* 进程间不能共享内存，但线程间共享内存非常容易。\n* 系统创建进程需要为该进程重新分配系统资源，但创建线程的代价要小得多，因此使用多线程来实现任务并发比多进程效率高得多。\n\n<!-- more -->\n\n在实际开发过程中多线程是非常有用的，假如用户点击界面上某个按钮的时候，该按钮需要执行的任务需要耗时很长，如果我们直接在UI线程中完成这个任务，在该任务执行完成返回之前，UI线程被该任务阻塞，将无法再相应用户的其它操作。在这段时间内用户对界面上的任何操作将不会被相应（除非按Home键返回），这并不是我们希望看到的结果。一般这个时候我们能够想到的办法就是将耗时的操作放到非UI线程（开启一个线程）中完成，这样UI线程就不会被阻塞，应用也就不会失去相应。\n\niOS系统大致提供了如下3种实现多线程：\n* NSThread\n* NSOperation和NSOperationQueue\n* GCD(Grand Central Dispatch)\n","source":"_posts/关于iOS多线程小记.md","raw":"---\ntitle: 关于iOS多线程小记\ndate: 2016-03-30 11:42:06\ntags:\n  - iOS\n  - 笔记\ncategories: iOS学习笔记\nabbrlink: c1dd23096e510f74\n---\n\n这篇文章我将整理一下iOS中的几种多线程方案，以及使用方法和注意事项。当然也会给出几种简单的代码案例，再试实际使用中去感受它们的区别。\n\n## 概述\n\n在了解线程前，我们需要先了解进程。一句话概括线程和进程就是：操作系统可以同时执行多个任务，每个任务就是进程，进程可以同时执行多个任务，每个任务就是线程。对于多线程的优点大致可以总结为以下几点：\n* 进程间不能共享内存，但线程间共享内存非常容易。\n* 系统创建进程需要为该进程重新分配系统资源，但创建线程的代价要小得多，因此使用多线程来实现任务并发比多进程效率高得多。\n\n<!-- more -->\n\n在实际开发过程中多线程是非常有用的，假如用户点击界面上某个按钮的时候，该按钮需要执行的任务需要耗时很长，如果我们直接在UI线程中完成这个任务，在该任务执行完成返回之前，UI线程被该任务阻塞，将无法再相应用户的其它操作。在这段时间内用户对界面上的任何操作将不会被相应（除非按Home键返回），这并不是我们希望看到的结果。一般这个时候我们能够想到的办法就是将耗时的操作放到非UI线程（开启一个线程）中完成，这样UI线程就不会被阻塞，应用也就不会失去相应。\n\niOS系统大致提供了如下3种实现多线程：\n* NSThread\n* NSOperation和NSOperationQueue\n* GCD(Grand Central Dispatch)\n","slug":"关于iOS多线程小记","published":1,"updated":"2022-05-19T03:13:11.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceob0068l1l3dcrgh7p9","content":"<p>这篇文章我将整理一下iOS中的几种多线程方案，以及使用方法和注意事项。当然也会给出几种简单的代码案例，再试实际使用中去感受它们的区别。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在了解线程前，我们需要先了解进程。一句话概括线程和进程就是：操作系统可以同时执行多个任务，每个任务就是进程，进程可以同时执行多个任务，每个任务就是线程。对于多线程的优点大致可以总结为以下几点：</p>\n<ul>\n<li>进程间不能共享内存，但线程间共享内存非常容易。</li>\n<li>系统创建进程需要为该进程重新分配系统资源，但创建线程的代价要小得多，因此使用多线程来实现任务并发比多进程效率高得多。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>在实际开发过程中多线程是非常有用的，假如用户点击界面上某个按钮的时候，该按钮需要执行的任务需要耗时很长，如果我们直接在UI线程中完成这个任务，在该任务执行完成返回之前，UI线程被该任务阻塞，将无法再相应用户的其它操作。在这段时间内用户对界面上的任何操作将不会被相应（除非按Home键返回），这并不是我们希望看到的结果。一般这个时候我们能够想到的办法就是将耗时的操作放到非UI线程（开启一个线程）中完成，这样UI线程就不会被阻塞，应用也就不会失去相应。</p>\n<p>iOS系统大致提供了如下3种实现多线程：</p>\n<ul>\n<li>NSThread</li>\n<li>NSOperation和NSOperationQueue</li>\n<li>GCD(Grand Central Dispatch)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇文章我将整理一下iOS中的几种多线程方案，以及使用方法和注意事项。当然也会给出几种简单的代码案例，再试实际使用中去感受它们的区别。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在了解线程前，我们需要先了解进程。一句话概括线程和进程就是：操作系统可以同时执行多个任务，每个任务就是进程，进程可以同时执行多个任务，每个任务就是线程。对于多线程的优点大致可以总结为以下几点：</p>\n<ul>\n<li>进程间不能共享内存，但线程间共享内存非常容易。</li>\n<li>系统创建进程需要为该进程重新分配系统资源，但创建线程的代价要小得多，因此使用多线程来实现任务并发比多进程效率高得多。</li>\n</ul>","more":"<p>在实际开发过程中多线程是非常有用的，假如用户点击界面上某个按钮的时候，该按钮需要执行的任务需要耗时很长，如果我们直接在UI线程中完成这个任务，在该任务执行完成返回之前，UI线程被该任务阻塞，将无法再相应用户的其它操作。在这段时间内用户对界面上的任何操作将不会被相应（除非按Home键返回），这并不是我们希望看到的结果。一般这个时候我们能够想到的办法就是将耗时的操作放到非UI线程（开启一个线程）中完成，这样UI线程就不会被阻塞，应用也就不会失去相应。</p>\n<p>iOS系统大致提供了如下3种实现多线程：</p>\n<ul>\n<li>NSThread</li>\n<li>NSOperation和NSOperationQueue</li>\n<li>GCD(Grand Central Dispatch)</li>\n</ul>"},{"title":"生成永久链接(Permalink) | Hexo ","date":"2019-12-30T08:48:53.000Z","abbrlink":"05c9df7e0c47bd64","_content":"### 概述\n熟悉Hexo博客系统的朋友都知道，hexo默认的文字链接形式为`domain/year/month/day/postname`，这样的文章链接形式存在一下几点不足：\n<!-- more -->\n1. 当我们把源文件名改掉之后，链接也会改变。\n2. 如果文章标题很长，那么文章链接也会很长。\n3. 如果文章名包含，那么文章链接中将会有汉字，这样很不友好。\n\n这里记录一种方法来生成永久链接。使用的是node.js常用的自动构建工具[grunt](https://gruntjs.com/)。\n\n### 解决步骤\n\n#### 步骤1\n在文章的`Front-matter`中加入一个`abbrlink`字段；\n\n{% asset_img 4249636-95dccafbae3fbf64.png abbrlink%}\n\n#### 步骤2\n使用grunt的插件`grunt-rewrite`自动填充替换`abbrlink`的值，在根目录下创建`Gruntfile.js`文件，并按照如下内容编辑。\n``` js\nmodule.exports = function(grunt) {\n \n  grunt.initConfig({\n\n    rewrite: {\n      abbrlink: {\n        src: 'source/_posts/**/*.md',\n        editor: function(contents, filepath){\n          const crypto = require('crypto');\n          const hash = crypto.createHash('sha256');\n\n          hash.update(contents);\n          var hashValue = hash.digest('hex');\n\n          return contents.replace(/@@abbrlink/g, hashValue.substring(0, 16));\n        }\n      },\n    },\n  });\n \n  grunt.loadNpmTasks('grunt-rewrite');\n};\n```\n这表示，插件到`source/_posts/`下读取所有的.md文件，把文件中的@@abbrlink替换成文件内容的hash值。\n\n#### 步骤3\n编辑站点配置文件`_config.yml`的`permalink`。\n``` ymal\npermalink: posts/:abbrlink.html\n```\n\n最后，当我们运行`grunt rewrite`后，`@@abbrlink`会被替换成一个16位的hash值。\n链接地址变成`www.jvaeyhcd.wang/posts/916d83182e15eeb1.html`这种样式，只要不去改动这个hash值，链接地址不会变。\n","source":"_posts/生成永久链接-permalink-hexo.md","raw":"---\ntitle: '生成永久链接(permalink) | hexo '\ndate: 2019-12-30 16:48:53\ntags:\n  - hexo\ncategories: hexo\nabbrlink: 05c9df7e0c47bd64\n---\n### 概述\n熟悉Hexo博客系统的朋友都知道，hexo默认的文字链接形式为`domain/year/month/day/postname`，这样的文章链接形式存在一下几点不足：\n<!-- more -->\n1. 当我们把源文件名改掉之后，链接也会改变。\n2. 如果文章标题很长，那么文章链接也会很长。\n3. 如果文章名包含，那么文章链接中将会有汉字，这样很不友好。\n\n这里记录一种方法来生成永久链接。使用的是node.js常用的自动构建工具[grunt](https://gruntjs.com/)。\n\n### 解决步骤\n\n#### 步骤1\n在文章的`Front-matter`中加入一个`abbrlink`字段；\n\n{% asset_img 4249636-95dccafbae3fbf64.png abbrlink%}\n\n#### 步骤2\n使用grunt的插件`grunt-rewrite`自动填充替换`abbrlink`的值，在根目录下创建`Gruntfile.js`文件，并按照如下内容编辑。\n``` js\nmodule.exports = function(grunt) {\n \n  grunt.initConfig({\n\n    rewrite: {\n      abbrlink: {\n        src: 'source/_posts/**/*.md',\n        editor: function(contents, filepath){\n          const crypto = require('crypto');\n          const hash = crypto.createHash('sha256');\n\n          hash.update(contents);\n          var hashValue = hash.digest('hex');\n\n          return contents.replace(/@@abbrlink/g, hashValue.substring(0, 16));\n        }\n      },\n    },\n  });\n \n  grunt.loadNpmTasks('grunt-rewrite');\n};\n```\n这表示，插件到`source/_posts/`下读取所有的.md文件，把文件中的@@abbrlink替换成文件内容的hash值。\n\n#### 步骤3\n编辑站点配置文件`_config.yml`的`permalink`。\n``` ymal\npermalink: posts/:abbrlink.html\n```\n\n最后，当我们运行`grunt rewrite`后，`@@abbrlink`会被替换成一个16位的hash值。\n链接地址变成`www.jvaeyhcd.wang/posts/916d83182e15eeb1.html`这种样式，只要不去改动这个hash值，链接地址不会变。\n","slug":"生成永久链接-permalink-hexo","published":1,"updated":"2022-05-19T03:13:11.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceoc0069l1l38lnkfjhh","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>熟悉Hexo博客系统的朋友都知道，hexo默认的文字链接形式为<code>domain/year/month/day/postname</code>，这样的文章链接形式存在一下几点不足：</p>\n<span id=\"more\"></span>\n<ol>\n<li>当我们把源文件名改掉之后，链接也会改变。</li>\n<li>如果文章标题很长，那么文章链接也会很长。</li>\n<li>如果文章名包含，那么文章链接中将会有汉字，这样很不友好。</li>\n</ol>\n<p>这里记录一种方法来生成永久链接。使用的是node.js常用的自动构建工具<a href=\"https://gruntjs.com/\">grunt</a>。</p>\n<h3 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h3><h4 id=\"步骤1\"><a href=\"#步骤1\" class=\"headerlink\" title=\"步骤1\"></a>步骤1</h4><p>在文章的<code>Front-matter</code>中加入一个<code>abbrlink</code>字段；</p>\n<img src=\"/posts/05c9df7e0c47bd64/4249636-95dccafbae3fbf64.png\" class=\"\" title=\"abbrlink\">\n\n<h4 id=\"步骤2\"><a href=\"#步骤2\" class=\"headerlink\" title=\"步骤2\"></a>步骤2</h4><p>使用grunt的插件<code>grunt-rewrite</code>自动填充替换<code>abbrlink</code>的值，在根目录下创建<code>Gruntfile.js</code>文件，并按照如下内容编辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  grunt.<span class=\"title function_\">initConfig</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">rewrite</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">abbrlink</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">src</span>: <span class=\"string\">&#x27;source/_posts/**/*.md&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">editor</span>: <span class=\"keyword\">function</span>(<span class=\"params\">contents, filepath</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> hash = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;sha256&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          hash.<span class=\"title function_\">update</span>(contents);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> hashValue = hash.<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> contents.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/@@abbrlink/g</span>, hashValue.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, <span class=\"number\">16</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">  grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-rewrite&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这表示，插件到<code>source/_posts/</code>下读取所有的.md文件，把文件中的@@abbrlink替换成文件内容的hash值。</p>\n<h4 id=\"步骤3\"><a href=\"#步骤3\" class=\"headerlink\" title=\"步骤3\"></a>步骤3</h4><p>编辑站点配置文件<code>_config.yml</code>的<code>permalink</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink: posts/:abbrlink.html</span><br></pre></td></tr></table></figure>\n\n<p>最后，当我们运行<code>grunt rewrite</code>后，<code>@@abbrlink</code>会被替换成一个16位的hash值。<br>链接地址变成<code>www.jvaeyhcd.wang/posts/916d83182e15eeb1.html</code>这种样式，只要不去改动这个hash值，链接地址不会变。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>熟悉Hexo博客系统的朋友都知道，hexo默认的文字链接形式为<code>domain/year/month/day/postname</code>，这样的文章链接形式存在一下几点不足：</p>","more":"<ol>\n<li>当我们把源文件名改掉之后，链接也会改变。</li>\n<li>如果文章标题很长，那么文章链接也会很长。</li>\n<li>如果文章名包含，那么文章链接中将会有汉字，这样很不友好。</li>\n</ol>\n<p>这里记录一种方法来生成永久链接。使用的是node.js常用的自动构建工具<a href=\"https://gruntjs.com/\">grunt</a>。</p>\n<h3 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h3><h4 id=\"步骤1\"><a href=\"#步骤1\" class=\"headerlink\" title=\"步骤1\"></a>步骤1</h4><p>在文章的<code>Front-matter</code>中加入一个<code>abbrlink</code>字段；</p>\n<img src=\"/posts/05c9df7e0c47bd64/4249636-95dccafbae3fbf64.png\" class=\"\" title=\"abbrlink\">\n\n<h4 id=\"步骤2\"><a href=\"#步骤2\" class=\"headerlink\" title=\"步骤2\"></a>步骤2</h4><p>使用grunt的插件<code>grunt-rewrite</code>自动填充替换<code>abbrlink</code>的值，在根目录下创建<code>Gruntfile.js</code>文件，并按照如下内容编辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  grunt.<span class=\"title function_\">initConfig</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">rewrite</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">abbrlink</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">src</span>: <span class=\"string\">&#x27;source/_posts/**/*.md&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">editor</span>: <span class=\"keyword\">function</span>(<span class=\"params\">contents, filepath</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> hash = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;sha256&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          hash.<span class=\"title function_\">update</span>(contents);</span><br><span class=\"line\">          <span class=\"keyword\">var</span> hashValue = hash.<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> contents.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/@@abbrlink/g</span>, hashValue.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, <span class=\"number\">16</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">  grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-rewrite&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这表示，插件到<code>source/_posts/</code>下读取所有的.md文件，把文件中的@@abbrlink替换成文件内容的hash值。</p>\n<h4 id=\"步骤3\"><a href=\"#步骤3\" class=\"headerlink\" title=\"步骤3\"></a>步骤3</h4><p>编辑站点配置文件<code>_config.yml</code>的<code>permalink</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink: posts/:abbrlink.html</span><br></pre></td></tr></table></figure>\n\n<p>最后，当我们运行<code>grunt rewrite</code>后，<code>@@abbrlink</code>会被替换成一个16位的hash值。<br>链接地址变成<code>www.jvaeyhcd.wang/posts/916d83182e15eeb1.html</code>这种样式，只要不去改动这个hash值，链接地址不会变。</p>"},{"title":"在 React Native 中使用 ART 绘制波浪动画","date":"2018-12-29T01:50:30.000Z","abbrlink":"6ddb868bf0c9539b","_content":"\n最近项目重构，使用了React Native来进行重写，在还原之前原生实现的波浪动画。之前不知道React Native中有ART这个库，本打算使用h5中的canvas来实现波浪动画，捣鼓了半天没有搞出来。后来又重新Google如何React Native来实现动画效果，找到几篇不错的文章介绍到了React Native ART库的使用。\n<!--more-->\n今天刚好使用React Native还原了之前项目中的波浪动画，于是趁热打铁整理下我的实现思路和大家分享下我的心路历程。\n\n## React Native ART 究竟是什么?\n\n> 所谓ART，是一个在React中绘制矢量图形的JS类库。这个类库抽象了一系统的通用接口，统一了SVG，canvas，VML这类矢量图形在React中的书写格式。你可以通过ART将SVG，canvas，VML的矢量图形拿到React中使用，也可以把ART反转回去。React Native ART是[react-art](https://github.com/reactjs/react-art)在React Native中的移植版，接口基本完全一致，React Native中的ART很早之前就已经开源iOS版了，后来又在0.18.0中开源了Android版本。\n\n## 如何在React Native中使用 ART？\n\n在安卓中使用无需配置任何东西就可使用，在iOS中ART是可选的，你需要手动导入ART.xcodeproj文件，并手动导入libART.a静态库。\niOS项目中配置ART的具体方式如下：\n\n1. 在Xcode选中项目点击右键->Add Files to `Your Project Name`->选择添加`Project path/node_modules/react-native/Libraries/ART/ART.xcodeproj`。\n2. 在`Build Phases`中的`Link Binary With Libraries`中点击+号，选择添加`libART.a`。\n\n## 波浪实现\n\n接下来就可以尽情使用ART了，我用ART实现了我的充电波浪动画，效果图如下：\n#### iOS\n<img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/ios.gif?raw=true\" width=\"375\"/>\n\n#### Android\n<img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/android.gif?raw=true\" width=\"375\"/>\n\n以上效果代码，已经提交至GitHub，如有需要直接拿去。https://github.com/Jvaeyhcd/react-native-art-wave\n\n## 如何使用\n\n使用如下代码安装`react-native-art-hcdwave`到项目中。\n\n``` bash\nnpm i react-native-art-hcdwave\n```\n\n然后再需要使用的地方，按照如下方法使用即可。\n\n``` js\nimport React, {Component} from 'react';\nimport {\n  StyleSheet, \n  View\n} from 'react-native';\n \nimport { HcdWaveView } from './src/components/HcdWaveView'\n \nexport default class App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <HcdWaveView\n          surfaceWidth = {230} \n          surfaceHeigth ={230}\n          powerPercent = {76}\n          type=\"dc\"\n          style = {{backgroundColor:'#FF7800'}}></HcdWaveView>\n        <HcdWaveView\n          surfaceWidth = {230} \n          surfaceHeigth ={230}\n          powerPercent = {76}\n          type=\"ac\"\n          style = {{backgroundColor:'#FF7800'}}></HcdWaveView>\n      </View>\n    )\n  }\n}\n \nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#18A4FD',\n  }\n});\n```\n\n## 参考文档\n\n1. https://juejin.im/entry/56ce9bd31ea49300548a3d1d\n2. https://blog.csdn.net/xiangzhihong8/article/details/76572405","source":"_posts/在-React-Native-中使用-ART-绘制波浪动画.md","raw":"---\ntitle: 在 React Native 中使用 ART 绘制波浪动画\ndate: 2018-12-29 09:50:30\ntags:\n  - React Native\ncategories: 技术杂谈\nabbrlink: 6ddb868bf0c9539b\n---\n\n最近项目重构，使用了React Native来进行重写，在还原之前原生实现的波浪动画。之前不知道React Native中有ART这个库，本打算使用h5中的canvas来实现波浪动画，捣鼓了半天没有搞出来。后来又重新Google如何React Native来实现动画效果，找到几篇不错的文章介绍到了React Native ART库的使用。\n<!--more-->\n今天刚好使用React Native还原了之前项目中的波浪动画，于是趁热打铁整理下我的实现思路和大家分享下我的心路历程。\n\n## React Native ART 究竟是什么?\n\n> 所谓ART，是一个在React中绘制矢量图形的JS类库。这个类库抽象了一系统的通用接口，统一了SVG，canvas，VML这类矢量图形在React中的书写格式。你可以通过ART将SVG，canvas，VML的矢量图形拿到React中使用，也可以把ART反转回去。React Native ART是[react-art](https://github.com/reactjs/react-art)在React Native中的移植版，接口基本完全一致，React Native中的ART很早之前就已经开源iOS版了，后来又在0.18.0中开源了Android版本。\n\n## 如何在React Native中使用 ART？\n\n在安卓中使用无需配置任何东西就可使用，在iOS中ART是可选的，你需要手动导入ART.xcodeproj文件，并手动导入libART.a静态库。\niOS项目中配置ART的具体方式如下：\n\n1. 在Xcode选中项目点击右键->Add Files to `Your Project Name`->选择添加`Project path/node_modules/react-native/Libraries/ART/ART.xcodeproj`。\n2. 在`Build Phases`中的`Link Binary With Libraries`中点击+号，选择添加`libART.a`。\n\n## 波浪实现\n\n接下来就可以尽情使用ART了，我用ART实现了我的充电波浪动画，效果图如下：\n#### iOS\n<img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/ios.gif?raw=true\" width=\"375\"/>\n\n#### Android\n<img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/android.gif?raw=true\" width=\"375\"/>\n\n以上效果代码，已经提交至GitHub，如有需要直接拿去。https://github.com/Jvaeyhcd/react-native-art-wave\n\n## 如何使用\n\n使用如下代码安装`react-native-art-hcdwave`到项目中。\n\n``` bash\nnpm i react-native-art-hcdwave\n```\n\n然后再需要使用的地方，按照如下方法使用即可。\n\n``` js\nimport React, {Component} from 'react';\nimport {\n  StyleSheet, \n  View\n} from 'react-native';\n \nimport { HcdWaveView } from './src/components/HcdWaveView'\n \nexport default class App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <HcdWaveView\n          surfaceWidth = {230} \n          surfaceHeigth ={230}\n          powerPercent = {76}\n          type=\"dc\"\n          style = {{backgroundColor:'#FF7800'}}></HcdWaveView>\n        <HcdWaveView\n          surfaceWidth = {230} \n          surfaceHeigth ={230}\n          powerPercent = {76}\n          type=\"ac\"\n          style = {{backgroundColor:'#FF7800'}}></HcdWaveView>\n      </View>\n    )\n  }\n}\n \nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#18A4FD',\n  }\n});\n```\n\n## 参考文档\n\n1. https://juejin.im/entry/56ce9bd31ea49300548a3d1d\n2. https://blog.csdn.net/xiangzhihong8/article/details/76572405","slug":"在-React-Native-中使用-ART-绘制波浪动画","published":1,"updated":"2022-05-19T03:13:11.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3cmceoc006bl1l36xjp8jiq","content":"<p>最近项目重构，使用了React Native来进行重写，在还原之前原生实现的波浪动画。之前不知道React Native中有ART这个库，本打算使用h5中的canvas来实现波浪动画，捣鼓了半天没有搞出来。后来又重新Google如何React Native来实现动画效果，找到几篇不错的文章介绍到了React Native ART库的使用。</p>\n<span id=\"more\"></span>\n<p>今天刚好使用React Native还原了之前项目中的波浪动画，于是趁热打铁整理下我的实现思路和大家分享下我的心路历程。</p>\n<h2 id=\"React-Native-ART-究竟是什么\"><a href=\"#React-Native-ART-究竟是什么\" class=\"headerlink\" title=\"React Native ART 究竟是什么?\"></a>React Native ART 究竟是什么?</h2><blockquote>\n<p>所谓ART，是一个在React中绘制矢量图形的JS类库。这个类库抽象了一系统的通用接口，统一了SVG，canvas，VML这类矢量图形在React中的书写格式。你可以通过ART将SVG，canvas，VML的矢量图形拿到React中使用，也可以把ART反转回去。React Native ART是<a href=\"https://github.com/reactjs/react-art\">react-art</a>在React Native中的移植版，接口基本完全一致，React Native中的ART很早之前就已经开源iOS版了，后来又在0.18.0中开源了Android版本。</p>\n</blockquote>\n<h2 id=\"如何在React-Native中使用-ART？\"><a href=\"#如何在React-Native中使用-ART？\" class=\"headerlink\" title=\"如何在React Native中使用 ART？\"></a>如何在React Native中使用 ART？</h2><p>在安卓中使用无需配置任何东西就可使用，在iOS中ART是可选的，你需要手动导入ART.xcodeproj文件，并手动导入libART.a静态库。<br>iOS项目中配置ART的具体方式如下：</p>\n<ol>\n<li>在Xcode选中项目点击右键-&gt;Add Files to <code>Your Project Name</code>-&gt;选择添加<code>Project path/node_modules/react-native/Libraries/ART/ART.xcodeproj</code>。</li>\n<li>在<code>Build Phases</code>中的<code>Link Binary With Libraries</code>中点击+号，选择添加<code>libART.a</code>。</li>\n</ol>\n<h2 id=\"波浪实现\"><a href=\"#波浪实现\" class=\"headerlink\" title=\"波浪实现\"></a>波浪实现</h2><p>接下来就可以尽情使用ART了，我用ART实现了我的充电波浪动画，效果图如下：</p>\n<h4 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h4><img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/ios.gif?raw=true\" width=\"375\"/>\n\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/android.gif?raw=true\" width=\"375\"/>\n\n<p>以上效果代码，已经提交至GitHub，如有需要直接拿去。<a href=\"https://github.com/Jvaeyhcd/react-native-art-wave\">https://github.com/Jvaeyhcd/react-native-art-wave</a></p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>使用如下代码安装<code>react-native-art-hcdwave</code>到项目中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-native-art-hcdwave</span><br></pre></td></tr></table></figure>\n\n<p>然后再需要使用的地方，按照如下方法使用即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;<span class=\"title class_\">Component</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">StyleSheet</span>, </span><br><span class=\"line\">  <span class=\"title class_\">View</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HcdWaveView</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/components/HcdWaveView&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">HcdWaveView</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceWidth</span> = <span class=\"string\">&#123;230&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceHeigth</span> =<span class=\"string\">&#123;230&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">powerPercent</span> = <span class=\"string\">&#123;76&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;dc&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">style</span> = <span class=\"string\">&#123;&#123;backgroundColor:</span>&#x27;#<span class=\"attr\">FF7800</span>&#x27;&#125;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HcdWaveView</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">HcdWaveView</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceWidth</span> = <span class=\"string\">&#123;230&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceHeigth</span> =<span class=\"string\">&#123;230&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">powerPercent</span> = <span class=\"string\">&#123;76&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;ac&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">style</span> = <span class=\"string\">&#123;&#123;backgroundColor:</span>&#x27;#<span class=\"attr\">FF7800</span>&#x27;&#125;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HcdWaveView</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> styles = <span class=\"title class_\">StyleSheet</span>.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">container</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">justifyContent</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">alignItems</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#18A4FD&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li><a href=\"https://juejin.im/entry/56ce9bd31ea49300548a3d1d\">https://juejin.im/entry/56ce9bd31ea49300548a3d1d</a></li>\n<li><a href=\"https://blog.csdn.net/xiangzhihong8/article/details/76572405\">https://blog.csdn.net/xiangzhihong8/article/details/76572405</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>最近项目重构，使用了React Native来进行重写，在还原之前原生实现的波浪动画。之前不知道React Native中有ART这个库，本打算使用h5中的canvas来实现波浪动画，捣鼓了半天没有搞出来。后来又重新Google如何React Native来实现动画效果，找到几篇不错的文章介绍到了React Native ART库的使用。</p>","more":"<p>今天刚好使用React Native还原了之前项目中的波浪动画，于是趁热打铁整理下我的实现思路和大家分享下我的心路历程。</p>\n<h2 id=\"React-Native-ART-究竟是什么\"><a href=\"#React-Native-ART-究竟是什么\" class=\"headerlink\" title=\"React Native ART 究竟是什么?\"></a>React Native ART 究竟是什么?</h2><blockquote>\n<p>所谓ART，是一个在React中绘制矢量图形的JS类库。这个类库抽象了一系统的通用接口，统一了SVG，canvas，VML这类矢量图形在React中的书写格式。你可以通过ART将SVG，canvas，VML的矢量图形拿到React中使用，也可以把ART反转回去。React Native ART是<a href=\"https://github.com/reactjs/react-art\">react-art</a>在React Native中的移植版，接口基本完全一致，React Native中的ART很早之前就已经开源iOS版了，后来又在0.18.0中开源了Android版本。</p>\n</blockquote>\n<h2 id=\"如何在React-Native中使用-ART？\"><a href=\"#如何在React-Native中使用-ART？\" class=\"headerlink\" title=\"如何在React Native中使用 ART？\"></a>如何在React Native中使用 ART？</h2><p>在安卓中使用无需配置任何东西就可使用，在iOS中ART是可选的，你需要手动导入ART.xcodeproj文件，并手动导入libART.a静态库。<br>iOS项目中配置ART的具体方式如下：</p>\n<ol>\n<li>在Xcode选中项目点击右键-&gt;Add Files to <code>Your Project Name</code>-&gt;选择添加<code>Project path/node_modules/react-native/Libraries/ART/ART.xcodeproj</code>。</li>\n<li>在<code>Build Phases</code>中的<code>Link Binary With Libraries</code>中点击+号，选择添加<code>libART.a</code>。</li>\n</ol>\n<h2 id=\"波浪实现\"><a href=\"#波浪实现\" class=\"headerlink\" title=\"波浪实现\"></a>波浪实现</h2><p>接下来就可以尽情使用ART了，我用ART实现了我的充电波浪动画，效果图如下：</p>\n<h4 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h4><img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/ios.gif?raw=true\" width=\"375\"/>\n\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><img src=\"https://github.com/Jvaeyhcd/react-native-art-wave/blob/master/gif/android.gif?raw=true\" width=\"375\"/>\n\n<p>以上效果代码，已经提交至GitHub，如有需要直接拿去。<a href=\"https://github.com/Jvaeyhcd/react-native-art-wave\">https://github.com/Jvaeyhcd/react-native-art-wave</a></p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>使用如下代码安装<code>react-native-art-hcdwave</code>到项目中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-native-art-hcdwave</span><br></pre></td></tr></table></figure>\n\n<p>然后再需要使用的地方，按照如下方法使用即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;<span class=\"title class_\">Component</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">StyleSheet</span>, </span><br><span class=\"line\">  <span class=\"title class_\">View</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HcdWaveView</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/components/HcdWaveView&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">HcdWaveView</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceWidth</span> = <span class=\"string\">&#123;230&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceHeigth</span> =<span class=\"string\">&#123;230&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">powerPercent</span> = <span class=\"string\">&#123;76&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;dc&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">style</span> = <span class=\"string\">&#123;&#123;backgroundColor:</span>&#x27;#<span class=\"attr\">FF7800</span>&#x27;&#125;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HcdWaveView</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">HcdWaveView</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceWidth</span> = <span class=\"string\">&#123;230&#125;</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">surfaceHeigth</span> =<span class=\"string\">&#123;230&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">powerPercent</span> = <span class=\"string\">&#123;76&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;ac&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">style</span> = <span class=\"string\">&#123;&#123;backgroundColor:</span>&#x27;#<span class=\"attr\">FF7800</span>&#x27;&#125;&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HcdWaveView</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> styles = <span class=\"title class_\">StyleSheet</span>.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">container</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">justifyContent</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">alignItems</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#18A4FD&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li><a href=\"https://juejin.im/entry/56ce9bd31ea49300548a3d1d\">https://juejin.im/entry/56ce9bd31ea49300548a3d1d</a></li>\n<li><a href=\"https://blog.csdn.net/xiangzhihong8/article/details/76572405\">https://blog.csdn.net/xiangzhihong8/article/details/76572405</a></li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/AppShot-带壳截图屏幕截图制作工具/905614-8ac7cd86e21116b5.png","post":"cl3cmcene0001l1l31qbmdvi7","slug":"905614-8ac7cd86e21116b5.png","modified":1,"renderable":1},{"_id":"source/_posts/AppShot-带壳截图屏幕截图制作工具/905614-8ac7cd86e21116b5.webp","post":"cl3cmcene0001l1l31qbmdvi7","slug":"905614-8ac7cd86e21116b5.webp","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/Identifiers.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"Identifiers.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/application_loader_1.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"application_loader_1.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/application_loader_login.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"application_loader_login.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/application_loader_step2.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"application_loader_step2.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/archive.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"archive.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/archive_step_1.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"archive_step_1.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/build_setting.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"build_setting.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_app_id.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_app_id.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_certSigningRequest_step1.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_certSigningRequest_step1.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_certSigningRequest_step2.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_certSigningRequest_step2.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_certificates_step1.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_certificates_step1.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_certificates_step2.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_certificates_step2.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_certificates_step3.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_certificates_step3.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step1.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_pp_step1.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step2.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_pp_step2.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step3.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_pp_step3.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step4.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_pp_step4.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/create_pp_step5.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"create_pp_step5.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/developer_center.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"developer_center.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step1.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"itunes_connect_step1.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step2.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"itunes_connect_step2.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step3.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"itunes_connect_step3.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step4.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"itunes_connect_step4.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/itunes_connect_step5.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"itunes_connect_step5.png","modified":1,"renderable":1},{"_id":"source/_posts/App-Store上线完整流程/upload_itunes_connect.png","post":"cl3cmceng0003l1l3bf4p9hel","slug":"upload_itunes_connect.png","modified":1,"renderable":1},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-11de31e505d895a1.png","post":"cl3cmcenk000gl1l391xd5okn","slug":"905614-11de31e505d895a1.png","modified":1,"renderable":1},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-282356612ba9f28c.png","post":"cl3cmcenk000gl1l391xd5okn","slug":"905614-282356612ba9f28c.png","modified":1,"renderable":1},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-6d980e01c0a78df8.png","post":"cl3cmcenk000gl1l391xd5okn","slug":"905614-6d980e01c0a78df8.png","modified":1,"renderable":1},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-aad2c9e81a2873c7.gif","post":"cl3cmcenk000gl1l391xd5okn","slug":"905614-aad2c9e81a2873c7.gif","modified":1,"renderable":1},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-cb9896a7ba570a22.png","post":"cl3cmcenk000gl1l391xd5okn","slug":"905614-cb9896a7ba570a22.png","modified":1,"renderable":1},{"_id":"source/_posts/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-e85a60e792a0c99d.png","post":"cl3cmcenk000gl1l391xd5okn","slug":"905614-e85a60e792a0c99d.png","modified":1,"renderable":1},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/dSYMs.png","post":"cl3cmcenn000vl1l3hhwl2knk","slug":"dSYMs.png","modified":1,"renderable":1},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/export.png","post":"cl3cmcenn000vl1l3hhwl2knk","slug":"export.png","modified":1,"renderable":1},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/problem.png","post":"cl3cmcenn000vl1l3hhwl2knk","slug":"problem.png","modified":1,"renderable":1},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/product.png","post":"cl3cmcenn000vl1l3hhwl2knk","slug":"product.png","modified":1,"renderable":1},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/show_in_finder.png","post":"cl3cmcenn000vl1l3hhwl2knk","slug":"show_in_finder.png","modified":1,"renderable":1},{"_id":"source/_posts/Failed-to-locate-or-generate-matchin-signing-assets/zip.png","post":"cl3cmcenn000vl1l3hhwl2knk","slug":"zip.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo安装新主题apollo/apollo.png","post":"cl3cmcenp0016l1l32rgle48x","slug":"apollo.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo在github上构建免费的博客/github.png","post":"cl3cmceno0014l1l3ekkb1w31","slug":"github.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo在github上构建免费的博客/hexo-dict.png","post":"cl3cmceno0014l1l3ekkb1w31","slug":"hexo-dict.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo在github上构建免费的博客/hexo-new.png","post":"cl3cmceno0014l1l3ekkb1w31","slug":"hexo-new.png","modified":1,"renderable":1},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/bash.png","post":"cl3cmcenp001bl1l3btfq4dsp","slug":"bash.png","modified":1,"renderable":1},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/finder.png","post":"cl3cmcenp001bl1l3btfq4dsp","slug":"finder.png","modified":1,"renderable":1},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/hidefinder.png","post":"cl3cmcenp001bl1l3btfq4dsp","slug":"hidefinder.png","modified":1,"renderable":1},{"_id":"source/_posts/Mac基础：如何让Finder显示隐藏文件和文件夹/show.png","post":"cl3cmcenp001bl1l3btfq4dsp","slug":"show.png","modified":1,"renderable":1},{"_id":"source/_posts/Jenkins-iOS集成常见错误及解决办法/error_example_1.png","post":"cl3cmcenq001hl1l38mvs2sm5","slug":"error_example_1.png","modified":1,"renderable":1},{"_id":"source/_posts/React-Native报错-config-h-file-not-found/20171205145336037.jpeg","post":"cl3cmcens0021l1l3dzcnbzrq","slug":"20171205145336037.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/catch.png","post":"cl3cmcens001xl1l35yra44i9","slug":"catch.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/create.png","post":"cl3cmcens001xl1l35yra44i9","slug":"create.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/deferred.png","post":"cl3cmcens001xl1l35yra44i9","slug":"deferred.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/doOn.png","post":"cl3cmcens001xl1l35yra44i9","slug":"doOn.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/empty.png","post":"cl3cmcens001xl1l35yra44i9","slug":"empty.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/flatMap.png","post":"cl3cmcens001xl1l35yra44i9","slug":"flatMap.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/just.png","post":"cl3cmcens001xl1l35yra44i9","slug":"just.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/never.png","post":"cl3cmcens001xl1l35yra44i9","slug":"never.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/publish.png","post":"cl3cmcens001xl1l35yra44i9","slug":"publish.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/replay.png","post":"cl3cmcens001xl1l35yra44i9","slug":"replay.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/retry.png","post":"cl3cmcens001xl1l35yra44i9","slug":"retry.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/skipWhile.png","post":"cl3cmcens001xl1l35yra44i9","slug":"skipWhile.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/switch.png","post":"cl3cmcens001xl1l35yra44i9","slug":"switch.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/takeWhile.png","post":"cl3cmcens001xl1l35yra44i9","slug":"takeWhile.png","modified":1,"renderable":1},{"_id":"source/_posts/RXSwift基础/toArray.png","post":"cl3cmcens001xl1l35yra44i9","slug":"toArray.png","modified":1,"renderable":1},{"_id":"source/_posts/hPlayer-功能强大的本地视频播放器/app_store.png","post":"cl3cmcenw002ql1l3el9t6uv0","slug":"app_store.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS上完美编译FFmpeg/1.png","post":"cl3cmcenz003dl1l3c990e8cz","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS打包上传常见错误以及解决办法/QQ201610180.png","post":"cl3cmceo0003ll1l37tkl2ino","slug":"QQ201610180.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS打包上传常见错误以及解决办法/QQ201610181.png","post":"cl3cmceo0003ll1l37tkl2ino","slug":"QQ201610181.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS高级开发面试题/responder_chain.webp","post":"cl3cmceo30049l1l365abbhuz","slug":"responder_chain.webp","modified":1,"renderable":1},{"_id":"source/_posts/iOS高级开发面试题（中）/method_swizzling.png","post":"cl3cmceo4004gl1l3fppy0pgs","slug":"method_swizzling.png","modified":1,"renderable":1},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-7e346e4ec6a37fa2.png","post":"cl3cmceo4004jl1l3cp5lghh4","slug":"905614-7e346e4ec6a37fa2.png","modified":1,"renderable":1},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-9df0785347c9212e.png","post":"cl3cmceo4004jl1l3cp5lghh4","slug":"905614-9df0785347c9212e.png","modified":1,"renderable":1},{"_id":"source/_posts/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-c52750828b24f91e.png","post":"cl3cmceo4004jl1l3cp5lghh4","slug":"905614-c52750828b24f91e.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/build_message.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"build_message.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/code_signing_OS_X_keychain_options.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"code_signing_OS_X_keychain_options.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/coding.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"coding.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/execte_config.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"execte_config.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/execute_shell.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"execute_shell.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/keychain.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"keychain.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/new_job.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"new_job.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/set_code_source.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"set_code_source.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/set_upload_fir.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"set_upload_fir.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/shoudong_goujian.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"shoudong_goujian.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/ssh_username_private_key.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"ssh_username_private_key.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/upload_fir.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"upload_fir.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/xcode_build_options.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"xcode_build_options.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/xcode_general_build_settings.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"xcode_general_build_settings.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Jenkins构建iOS持续集成自动打包/zidong_goujian.png","post":"cl3cmceo5004ml1l334n8cw6j","slug":"zidong_goujian.png","modified":1,"renderable":1},{"_id":"source/_posts/关闭iOS系统自动更新提示的方法/thumb_IMG_0889_1024.jpg","post":"cl3cmceo6004xl1l333n3d0rs","slug":"thumb_IMG_0889_1024.jpg","modified":1,"renderable":1},{"_id":"source/_posts/关闭iOS系统自动更新提示的方法/thumb_IMG_0890_1024.jpg","post":"cl3cmceo6004xl1l333n3d0rs","slug":"thumb_IMG_0890_1024.jpg","modified":1,"renderable":1},{"_id":"source/_posts/【iOS】Runtime详解/1628088a3e4f0167.png","post":"cl3cmceo30044l1l3gw9l6ube","slug":"1628088a3e4f0167.png","modified":1,"renderable":1},{"_id":"source/_posts/【iOS】Runtime详解/runtime_msg_send.svg","post":"cl3cmceo30044l1l3gw9l6ube","slug":"runtime_msg_send.svg","modified":1,"renderable":1},{"_id":"source/_posts/pd-recurrence/donggui_1.png","post":"cl3cmceo1003tl1l3fx8ehyrb","slug":"donggui_1.png","modified":1,"renderable":1},{"_id":"source/_posts/pd-recurrence/donggui_2.png","post":"cl3cmceo1003tl1l3fx8ehyrb","slug":"donggui_2.png","modified":1,"renderable":1},{"_id":"source/_posts/pd-recurrence/donggui_3.png","post":"cl3cmceo1003tl1l3fx8ehyrb","slug":"donggui_3.png","modified":1,"renderable":1},{"_id":"source/_posts/pd-recurrence/donggui_4.png","post":"cl3cmceo1003tl1l3fx8ehyrb","slug":"donggui_4.png","modified":1,"renderable":1},{"_id":"source/_posts/pd-recurrence/donggui_5.png","post":"cl3cmceo1003tl1l3fx8ehyrb","slug":"donggui_5.png","modified":1,"renderable":1},{"_id":"source/_posts/pd-recurrence/donggui_6.png","post":"cl3cmceo1003tl1l3fx8ehyrb","slug":"donggui_6.png","modified":1,"renderable":1},{"_id":"source/_posts/生成永久链接-permalink-hexo/4249636-95dccafbae3fbf64.png","post":"cl3cmceoc0069l1l38lnkfjhh","slug":"4249636-95dccafbae3fbf64.png","modified":1,"renderable":1},{"_id":"source/_posts/生成永久链接-permalink-hexo/4249636-95dccafbae3fbf64.webp","post":"cl3cmceoc0069l1l38lnkfjhh","slug":"4249636-95dccafbae3fbf64.webp","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl3cmcene0001l1l31qbmdvi7","category_id":"cl3cmceng0004l1l310ui9azk","_id":"cl3cmcenl000jl1l3g9e99o9s"},{"post_id":"cl3cmceng0003l1l3bf4p9hel","category_id":"cl3cmcenj000cl1l37mh3gg92","_id":"cl3cmcenm000rl1l36vpj8a2u"},{"post_id":"cl3cmcenh0007l1l37mtc0ks1","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmceno000zl1l38ehc6qql"},{"post_id":"cl3cmcenn000vl1l3hhwl2knk","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenp0017l1l3a2ss5jb9"},{"post_id":"cl3cmceni0009l1l3a1d05dvq","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenp001cl1l35r5o723b"},{"post_id":"cl3cmceno0014l1l3ekkb1w31","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenq001fl1l3c6zkdw3u"},{"post_id":"cl3cmceni000bl1l307gudghe","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmcenq001il1l39s1uhvcq"},{"post_id":"cl3cmcenp0016l1l32rgle48x","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenr001ml1l3946q4gui"},{"post_id":"cl3cmcenk000gl1l391xd5okn","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmcenr001ql1l3ftei23ya"},{"post_id":"cl3cmcenp001el1l3fexu29h7","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcens001ul1l313k76s6u"},{"post_id":"cl3cmcenq001hl1l38mvs2sm5","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcens001yl1l3a3k49pg1"},{"post_id":"cl3cmcenl000il1l3fyz3cizi","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenu0022l1l3hs8shcql"},{"post_id":"cl3cmcenq001ll1l3h7yyg20h","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenu0025l1l3a3nz7p4a"},{"post_id":"cl3cmcenm000ol1l3ajd3h0oi","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenv0029l1l3cd7r9yfh"},{"post_id":"cl3cmcenr001tl1l30br3aar3","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenv002cl1l3dd7jhi4w"},{"post_id":"cl3cmcenm000ql1l318jb34nb","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenv002hl1l3f6tg5tnf"},{"post_id":"cl3cmcens0021l1l3dzcnbzrq","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenw002kl1l35ao55w0c"},{"post_id":"cl3cmcenu0024l1l318y1hjre","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenw002ol1l391b453eb"},{"post_id":"cl3cmcenu0028l1l38fiva7gy","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmcenx002rl1l365e2e7ar"},{"post_id":"cl3cmcenn000yl1l3a1imcpgq","category_id":"cl3cmcenu0023l1l34smf8c05","_id":"cl3cmcenx002vl1l37z2b6rot"},{"post_id":"cl3cmcenv002gl1l3frs6b37t","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmceny002yl1l3ggxc1avd"},{"post_id":"cl3cmcenp001bl1l3btfq4dsp","category_id":"cl3cmcenv002dl1l3bisla4bb","_id":"cl3cmceny0033l1l378g0d69o"},{"post_id":"cl3cmcenw002nl1l305w8enjc","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmcenz0036l1l36w1hadd0"},{"post_id":"cl3cmcenr001pl1l341qy0lts","category_id":"cl3cmcenw002ll1l3ermhdku9","_id":"cl3cmcenz003al1l39iu328v9"},{"post_id":"cl3cmcenw002ql1l3el9t6uv0","category_id":"cl3cmceng0004l1l310ui9azk","_id":"cl3cmceo0003el1l330p9d3uc"},{"post_id":"cl3cmcens001xl1l35yra44i9","category_id":"cl3cmcenu0023l1l34smf8c05","_id":"cl3cmceo0003il1l3dz64h1iv"},{"post_id":"cl3cmceny0032l1l34kdsdeg7","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmceo0003ml1l3e8pdf0r7"},{"post_id":"cl3cmcenv002bl1l3b11u4eom","category_id":"cl3cmceny0030l1l35q1yexhm","_id":"cl3cmceo1003pl1l3doerbfo4"},{"post_id":"cl3cmceny0035l1l31zliaw23","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmceo1003ul1l3etllg396"},{"post_id":"cl3cmcenw002jl1l305ud5hit","category_id":"cl3cmceny0030l1l35q1yexhm","_id":"cl3cmceo2003xl1l3f2u2ccxk"},{"post_id":"cl3cmcenz003dl1l3c990e8cz","category_id":"cl3cmcenn000tl1l30lbldccu","_id":"cl3cmceo20042l1l30yjqbjym"},{"post_id":"cl3cmceo0003hl1l3hrmh3pkt","category_id":"cl3cmceny0030l1l35q1yexhm","_id":"cl3cmceo30045l1l34jj6e2l2"},{"post_id":"cl3cmceo0003ll1l37tkl2ino","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmceo3004al1l36dgd4oo0"},{"post_id":"cl3cmcenx002ul1l38ju8huev","category_id":"cl3cmceo0003gl1l3bt2s7811","_id":"cl3cmceo4004dl1l34o6zfuhj"},{"post_id":"cl3cmceo1003ol1l3a0gqf5sy","category_id":"cl3cmceo0003gl1l3bt2s7811","_id":"cl3cmceo4004hl1l309qs6kfk"},{"post_id":"cl3cmcenx002xl1l32sfah3p6","category_id":"cl3cmceny0030l1l35q1yexhm","_id":"cl3cmceo5004kl1l32y1n16kt"},{"post_id":"cl3cmceo20041l1l34ijh8d7y","category_id":"cl3cmcenj000cl1l37mh3gg92","_id":"cl3cmceo5004nl1l3bfrk6ria"},{"post_id":"cl3cmcenz0039l1l3fbe1b1oi","category_id":"cl3cmceo0003gl1l3bt2s7811","_id":"cl3cmceo5004rl1l3d16f3s63"},{"post_id":"cl3cmceo30044l1l3gw9l6ube","category_id":"cl3cmcenj000cl1l37mh3gg92","_id":"cl3cmceo6004ul1l3848oekkp"},{"post_id":"cl3cmceo30049l1l365abbhuz","category_id":"cl3cmceo0003gl1l3bt2s7811","_id":"cl3cmceo6004yl1l32ihm8bgc"},{"post_id":"cl3cmceo1003tl1l3fx8ehyrb","category_id":"cl3cmceo30046l1l3cbj28k60","_id":"cl3cmceo60051l1l3cjl8eq1n"},{"post_id":"cl3cmceo4004gl1l3fppy0pgs","category_id":"cl3cmceo0003gl1l3bt2s7811","_id":"cl3cmceo70056l1l36oq6e124"},{"post_id":"cl3cmceo5004ql1l3ewdw1cjz","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmceo70058l1l3ckr9gx5b"},{"post_id":"cl3cmceo6004tl1l31cfs5wyz","category_id":"cl3cmcenj000cl1l37mh3gg92","_id":"cl3cmceo7005cl1l3a0ze9gyz"},{"post_id":"cl3cmceo6004xl1l333n3d0rs","category_id":"cl3cmceo70054l1l33uh5esv8","_id":"cl3cmceo8005gl1l3foxmhzg1"},{"post_id":"cl3cmceo60050l1l38tkp70zx","category_id":"cl3cmceo7005bl1l36s4ha0xw","_id":"cl3cmceo8005kl1l3fbzzhh2u"},{"post_id":"cl3cmceob0068l1l3dcrgh7p9","category_id":"cl3cmcenj000cl1l37mh3gg92","_id":"cl3cmceod006fl1l327iv4z4q"},{"post_id":"cl3cmceoc006bl1l36xjp8jiq","category_id":"cl3cmcenl000ll1l34ias5yfr","_id":"cl3cmceoe006hl1l39a1y8zq8"},{"post_id":"cl3cmceoc0069l1l38lnkfjhh","category_id":"cl3cmceod006cl1l3e0qletwt","_id":"cl3cmceoe006jl1l3ae637dzh"}],"PostTag":[{"post_id":"cl3cmcene0001l1l31qbmdvi7","tag_id":"cl3cmcenh0005l1l33s61emxc","_id":"cl3cmcenj000el1l33kdpejtu"},{"post_id":"cl3cmceng0003l1l3bf4p9hel","tag_id":"cl3cmcenh0005l1l33s61emxc","_id":"cl3cmcenl000ml1l379p645ys"},{"post_id":"cl3cmcenh0007l1l37mtc0ks1","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenn000wl1l37nkqbcxi"},{"post_id":"cl3cmcenn000vl1l3hhwl2knk","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceno0011l1l3hq747uxh"},{"post_id":"cl3cmceni0009l1l3a1d05dvq","tag_id":"cl3cmcenm000sl1l3b5xqcu52","_id":"cl3cmceno0015l1l3404b5ees"},{"post_id":"cl3cmcenn000yl1l3a1imcpgq","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenp0018l1l30m4058fr"},{"post_id":"cl3cmceno0014l1l3ekkb1w31","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenp001dl1l36gexgp7k"},{"post_id":"cl3cmceni000bl1l307gudghe","tag_id":"cl3cmceno0010l1l3ebc91e4e","_id":"cl3cmcenq001kl1l37pua3umr"},{"post_id":"cl3cmceni000bl1l307gudghe","tag_id":"cl3cmcenp001al1l3dpsugtvq","_id":"cl3cmcenr001ol1l3262kag46"},{"post_id":"cl3cmcenk000gl1l391xd5okn","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenr001sl1l31f986gbg"},{"post_id":"cl3cmcenr001pl1l341qy0lts","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcens001wl1l31vpkd33o"},{"post_id":"cl3cmcenl000il1l3fyz3cizi","tag_id":"cl3cmcenm000sl1l3b5xqcu52","_id":"cl3cmcens0020l1l3croi2jtt"},{"post_id":"cl3cmcenm000ol1l3ajd3h0oi","tag_id":"cl3cmcenm000sl1l3b5xqcu52","_id":"cl3cmcenu0027l1l3f3xmgnxr"},{"post_id":"cl3cmcenu0024l1l318y1hjre","tag_id":"cl3cmcenp001al1l3dpsugtvq","_id":"cl3cmcenv002al1l3dr1e1kyg"},{"post_id":"cl3cmcenu0024l1l318y1hjre","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenv002fl1l39lnd6sve"},{"post_id":"cl3cmcenm000ql1l318jb34nb","tag_id":"cl3cmcenm000sl1l3b5xqcu52","_id":"cl3cmcenw002il1l357biepu7"},{"post_id":"cl3cmcenp0016l1l32rgle48x","tag_id":"cl3cmcenv002el1l3bqj8bhgm","_id":"cl3cmcenw002pl1l3g0wt15i0"},{"post_id":"cl3cmcenp001bl1l3btfq4dsp","tag_id":"cl3cmcenw002ml1l3av3rhziy","_id":"cl3cmcenx002wl1l38tfa8316"},{"post_id":"cl3cmcenw002ql1l3el9t6uv0","tag_id":"cl3cmcenh0005l1l33s61emxc","_id":"cl3cmceny002zl1l3636fcdwa"},{"post_id":"cl3cmcenx002ul1l38ju8huev","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceny0034l1l3b6jgdkuh"},{"post_id":"cl3cmcenx002xl1l32sfah3p6","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenz0037l1l37x87b9m8"},{"post_id":"cl3cmceny0032l1l34kdsdeg7","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmcenz003cl1l30m980hjl"},{"post_id":"cl3cmceny0035l1l31zliaw23","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo0003fl1l3cowvepww"},{"post_id":"cl3cmcenp001el1l3fexu29h7","tag_id":"cl3cmcenx002tl1l39jr039oh","_id":"cl3cmceo0003kl1l39o8796do"},{"post_id":"cl3cmcenp001el1l3fexu29h7","tag_id":"cl3cmceny0031l1l30mnx9yw5","_id":"cl3cmceo1003nl1l3c3d99sxs"},{"post_id":"cl3cmcenz0039l1l3fbe1b1oi","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo1003sl1l3f7s45shl"},{"post_id":"cl3cmcenz003dl1l3c990e8cz","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo2003vl1l38lwxbfuh"},{"post_id":"cl3cmceo0003ll1l37tkl2ino","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo20040l1l33s3x5x2a"},{"post_id":"cl3cmcenq001hl1l38mvs2sm5","tag_id":"cl3cmcenz003bl1l3ep1qdc2q","_id":"cl3cmceo20043l1l3d8u2fdtm"},{"post_id":"cl3cmcenq001hl1l38mvs2sm5","tag_id":"cl3cmcenx002tl1l39jr039oh","_id":"cl3cmceo30047l1l3dwuc01vk"},{"post_id":"cl3cmcenq001hl1l38mvs2sm5","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo3004bl1l33gwr3047"},{"post_id":"cl3cmceo1003ol1l3a0gqf5sy","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo4004el1l34a0i7ns4"},{"post_id":"cl3cmcenq001ll1l3h7yyg20h","tag_id":"cl3cmcenx002tl1l39jr039oh","_id":"cl3cmceo4004il1l3ex25gskf"},{"post_id":"cl3cmcenr001tl1l30br3aar3","tag_id":"cl3cmceo2003zl1l3e3vtfzqe","_id":"cl3cmceo5004ll1l37cnj5huu"},{"post_id":"cl3cmceo30049l1l365abbhuz","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo5004pl1l31663a6ca"},{"post_id":"cl3cmcens001xl1l35yra44i9","tag_id":"cl3cmceo30048l1l3hhaz8gjs","_id":"cl3cmceo5004sl1l30zgg6zna"},{"post_id":"cl3cmceo3004cl1l3eznx27cu","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo6004wl1l3gzdk780n"},{"post_id":"cl3cmceo4004gl1l3fppy0pgs","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo6004zl1l35wuifki0"},{"post_id":"cl3cmcens0021l1l3dzcnbzrq","tag_id":"cl3cmceo4004fl1l3e0a26fsw","_id":"cl3cmceo70053l1l34jqw36sd"},{"post_id":"cl3cmcens0021l1l3dzcnbzrq","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo70057l1l3egcbdm4q"},{"post_id":"cl3cmceo5004ml1l334n8cw6j","tag_id":"cl3cmcenx002tl1l39jr039oh","_id":"cl3cmceo7005al1l32j3bbo7c"},{"post_id":"cl3cmcenu0028l1l38fiva7gy","tag_id":"cl3cmceo2003zl1l3e3vtfzqe","_id":"cl3cmceo8005dl1l37swz3mmc"},{"post_id":"cl3cmcenv002bl1l3b11u4eom","tag_id":"cl3cmceo6004vl1l3bg4fbbyv","_id":"cl3cmceo8005fl1l34lzk7fcp"},{"post_id":"cl3cmcenv002gl1l3frs6b37t","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceo8005hl1l3h7ib439z"},{"post_id":"cl3cmcenv002gl1l3frs6b37t","tag_id":"cl3cmceo6004vl1l3bg4fbbyv","_id":"cl3cmceo8005il1l37i2n8qe6"},{"post_id":"cl3cmcenw002jl1l305ud5hit","tag_id":"cl3cmceo6004vl1l3bg4fbbyv","_id":"cl3cmceo8005ll1l39xupa695"},{"post_id":"cl3cmcenw002nl1l305w8enjc","tag_id":"cl3cmceo8005el1l38g8ofm9l","_id":"cl3cmceo8005ml1l3ff7uhi99"},{"post_id":"cl3cmceo0003hl1l3hrmh3pkt","tag_id":"cl3cmceo6004vl1l3bg4fbbyv","_id":"cl3cmceo8005pl1l33ckh310r"},{"post_id":"cl3cmceo0003hl1l3hrmh3pkt","tag_id":"cl3cmceo8005nl1l3bpsy18zy","_id":"cl3cmceo8005ql1l3hvuqdd0q"},{"post_id":"cl3cmceo1003tl1l3fx8ehyrb","tag_id":"cl3cmceo8005ol1l30vql0red","_id":"cl3cmceo9005sl1l305cr0bzi"},{"post_id":"cl3cmceo1003tl1l3fx8ehyrb","tag_id":"cl3cmcenp001al1l3dpsugtvq","_id":"cl3cmceo9005tl1l357x84ocd"},{"post_id":"cl3cmceo20041l1l34ijh8d7y","tag_id":"cl3cmceo8005rl1l38l3heu2h","_id":"cl3cmceo9005vl1l34tr03z49"},{"post_id":"cl3cmceo30044l1l3gw9l6ube","tag_id":"cl3cmceo8005rl1l38l3heu2h","_id":"cl3cmceo9005xl1l3gzf8gi0q"},{"post_id":"cl3cmceo5004ql1l3ewdw1cjz","tag_id":"cl3cmceo9005wl1l38squdmof","_id":"cl3cmceo9005zl1l3euf76qbd"},{"post_id":"cl3cmceo6004tl1l31cfs5wyz","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceoa0061l1l37uhdgcoh"},{"post_id":"cl3cmceo6004tl1l31cfs5wyz","tag_id":"cl3cmceo9005yl1l36q99dj7x","_id":"cl3cmceoa0062l1l37fkp3lwr"},{"post_id":"cl3cmceo6004xl1l333n3d0rs","tag_id":"cl3cmceo90060l1l3hr18643s","_id":"cl3cmceoa0064l1l34eenfn9u"},{"post_id":"cl3cmceo60050l1l38tkp70zx","tag_id":"cl3cmceoa0063l1l3bnn8158h","_id":"cl3cmceoa0066l1l381370uuk"},{"post_id":"cl3cmceo70055l1l3615e3ap1","tag_id":"cl3cmceoa0065l1l3h3zhbx8s","_id":"cl3cmceoa0067l1l30qrz8yef"},{"post_id":"cl3cmceob0068l1l3dcrgh7p9","tag_id":"cl3cmcenl000kl1l37evud29s","_id":"cl3cmceoc006al1l337qndgin"},{"post_id":"cl3cmceob0068l1l3dcrgh7p9","tag_id":"cl3cmceo9005yl1l36q99dj7x","_id":"cl3cmceod006el1l377cz8jcn"},{"post_id":"cl3cmceoc006bl1l36xjp8jiq","tag_id":"cl3cmceo4004fl1l3e0a26fsw","_id":"cl3cmceoe006gl1l325xcb8ee"},{"post_id":"cl3cmceoc0069l1l38lnkfjhh","tag_id":"cl3cmceod006dl1l33678cseu","_id":"cl3cmceoe006il1l3ebf2hrvz"}],"Tag":[{"name":"App Store","_id":"cl3cmcenh0005l1l33s61emxc"},{"name":"iOS","_id":"cl3cmcenl000kl1l37evud29s"},{"name":"Cocoapods","_id":"cl3cmcenm000sl1l3b5xqcu52"},{"name":"AES","_id":"cl3cmceno0010l1l3ebc91e4e"},{"name":"算法","_id":"cl3cmcenp001al1l3dpsugtvq"},{"name":"Hexo","_id":"cl3cmcenv002el1l3bqj8bhgm"},{"name":"Mac","_id":"cl3cmcenw002ml1l3av3rhziy"},{"name":"Jenkins","_id":"cl3cmcenx002tl1l39jr039oh"},{"name":"Android","_id":"cl3cmceny0031l1l30mnx9yw5"},{"name":"常见错误","_id":"cl3cmcenz003bl1l3ep1qdc2q"},{"name":"objc","_id":"cl3cmceo2003zl1l3e3vtfzqe"},{"name":"RXSwift","_id":"cl3cmceo30048l1l3hhaz8gjs"},{"name":"React Native","_id":"cl3cmceo4004fl1l3e0a26fsw"},{"name":"Swift","_id":"cl3cmceo6004vl1l3bg4fbbyv"},{"name":"Vue","_id":"cl3cmceo8005el1l38g8ofm9l"},{"name":"闭包","_id":"cl3cmceo8005nl1l3bpsy18zy"},{"name":"动态规划","_id":"cl3cmceo8005ol1l30vql0red"},{"name":"Runtime","_id":"cl3cmceo8005rl1l38l3heu2h"},{"name":"Mysql","_id":"cl3cmceo9005wl1l38squdmof"},{"name":"笔记","_id":"cl3cmceo9005yl1l36q99dj7x"},{"name":"iOS系统","_id":"cl3cmceo90060l1l3hr18643s"},{"name":"StatusBar","_id":"cl3cmceoa0063l1l3bnn8158h"},{"name":"ReactiveCocoa","_id":"cl3cmceoa0065l1l3h3zhbx8s"},{"name":"hexo","_id":"cl3cmceod006dl1l33678cseu"}]}}