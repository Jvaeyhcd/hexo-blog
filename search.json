[{"title":"iOS打包上传常见错误以及解决办法","url":"http://www.jvaeyhcd.cc/2016/10/18/iOS打包上传常见错误以及解决办法/","content":"<p>关于打包上传至AppStore，大家都认为是最后一步了，其实到了这里往往会遇到很多的坑。对于踩过的坑我不想再踩第二篇，所以在此将我遇到的所有奇葩问题在此做一个记录，当作对自己的一个提醒，同时也分享给给位。</p>\n<h2 id=\"ERROR-ITMS-90535\"><a href=\"#ERROR-ITMS-90535\" class=\"headerlink\" title=\"ERROR ITMS-90535\"></a>ERROR ITMS-90535</h2><ul>\n<li>首先这个原因导入了其他第三方导致的问题，首先找到友盟库里面的腾讯API,找到其中的info.plist文件：</li>\n</ul>\n<img src=\"/2016/10/18/iOS打包上传常见错误以及解决办法/QQ201610180.png\" alt=\"QQ201610180.png\" title=\"\">\n<ul>\n<li>找到箭头所指向的一行,随后删掉 这一行 就可以了：</li>\n</ul>\n<img src=\"/2016/10/18/iOS打包上传常见错误以及解决办法/QQ201610181.png\" alt=\"QQ201610181.png\" title=\"\">\n<a id=\"more\"></a>\n<h2 id=\"ERROR-ITMS-90635\"><a href=\"#ERROR-ITMS-90635\" class=\"headerlink\" title=\"ERROR ITMS-90635\"></a>ERROR ITMS-90635</h2><p>这个是由于项目中有使用到Cocoapods导入第三方的库使用bitcode造成的，此种错误我在网上找到了三种解决办法：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>项目-&gt;targets-&gt;enable bitcode-&gt;no</p>\n<p>pods-&gt;project-&gt;enable bitcode-&gt;no</p>\n<p>如果以前设置过，现在不行了，pods的enable bitcode改成yes，然后再改成no，专治抽风</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>podfile文件加入以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install <span class=\"keyword\">do</span> |installer|</span><br><span class=\"line\">    installer.pods_project.targets.each <span class=\"keyword\">do</span> |target|</span><br><span class=\"line\">        target.build_configurations.each <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\">            config.build_settings[<span class=\"string\">'ENABLE_BITCODE'</span>] = <span class=\"string\">'NO'</span></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>打包上传的时候，注意界面是否有复选框“include bitcode”，改成不勾选</p>\n<h2 id=\"ERROR-ITMS-90168\"><a href=\"#ERROR-ITMS-90168\" class=\"headerlink\" title=\"ERROR ITMS-90168\"></a>ERROR ITMS-90168</h2><p>关于这个错误网上给的所有解决办法都是如下的办法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.itmstransporter  </span><br><span class=\"line\">$ rm update_check*  </span><br><span class=\"line\">$ mv softwaresupport softwaresupport.bak  </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> UploadTokens  </span><br><span class=\"line\">$ rm *.token</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ERROR-ITMS-4238\"><a href=\"#ERROR-ITMS-4238\" class=\"headerlink\" title=\"ERROR ITMS-4238\"></a>ERROR ITMS-4238</h2><p>出现这个错误的原因是iTunes Connect已经上传了一个相应版本号的包，然后现在上传的版本号没有修改，所以就出现了这个错误，解决办法十分简单，修改版本号，重新打包再上传就可以了。</p>\n"},{"title":"Cocoapods无法search到库的解决办法","url":"http://www.jvaeyhcd.cc/2016/10/09/Cocoapods无法search到库的解决办法/","content":"<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>按照往常的方法一样安装Cocoapods，在安装的过程中遇到了一切问题，按照传统的命令<code>sudo gem install cocoapods</code>出现了如下的错误：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class=\"line\">    Operation not permitted - /usr/bin/pod</span><br></pre></td></tr></table></figure></p>\n<p>然后再<a href=\"http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030\" target=\"_blank\" rel=\"external\">stackoverflow</a>上找到了如下的解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install -n /usr/<span class=\"built_in\">local</span>/bin cocoapods -v <span class=\"number\">1.0</span>.<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>-v可以跟版本号，来按照您想安装的版本。<br>这就这样Cocopods安装成功了，当然如果您没有翻墙的话安装Cocoapods需要切换ruby源到<a href=\"https://gems.ruby-china.org\" target=\"_blank\" rel=\"external\">https://gems.ruby-china.org</a>，具体按照可以参考我的这篇文章<a href=\"http://www.jvaeyhcd.cc/2016/02/20/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/\">《CocoaPods安装和使用教程》</a>。<br><a id=\"more\"></a><br>当我以为一切就绪的时候，我<code>pod search RxSwift</code>却提示我如下的错误：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[!] Unable to find a pod with name, author, summary, or descriptionmatching <span class=\"string\">'······'</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>对于有些类库确实是在Cocoapods中所不存在的，为了确定我们搜索的库是不是真的在Cocoapods的Repos中存在，我们可以到<a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">https://cocoapods.org/</a>中进行搜索。</p>\n</blockquote>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>在记录一下自己的解决办法，同时分享一下自己的经验，希望能够帮助到大家。</p>\n<h3 id=\"执行pod-setup\"><a href=\"#执行pod-setup\" class=\"headerlink\" title=\"执行pod setup\"></a>执行pod setup</h3><ul>\n<li>在终端输入<code>pod setup</code>,会出现<code>Setting up CocoaPods master repo</code>，等几分钟，会输入<code>Setup completed</code>，说明<code>pod setup</code>执行成功。</li>\n<li>结果pod search还是失败</li>\n<li>在终端输入<code>pod search RxSwift</code></li>\n<li>依然还是提示<code>Unable to find a pod with name, author, summary, or descriptionmatching &#39;RxSwift&#39;</code>。</li>\n<li>但是我输入<code>pod search pop</code>，却有相应的结果。</li>\n</ul>\n<h3 id=\"删除-Library-Caches-CocoaPods目录下的search-index-json文件\"><a href=\"#删除-Library-Caches-CocoaPods目录下的search-index-json文件\" class=\"headerlink\" title=\"删除~/Library/Caches/CocoaPods目录下的search_index.json文件\"></a>删除~/Library/Caches/CocoaPods目录下的search_index.json文件</h3><ul>\n<li><code>pod setup</code>成功后会生成<code>~/Library/Caches/CocoaPods/search_index.json</code>文件。</li>\n<li>终端输入<code>rm ~/Library/Caches/CocoaPods/search_index.json</code></li>\n<li>删除成功后再执行<code>pod search</code></li>\n</ul>\n<h3 id=\"执行pod-search\"><a href=\"#执行pod-search\" class=\"headerlink\" title=\"执行pod search\"></a>执行pod search</h3><ul>\n<li>终端输入：<code>pod search RxSwift</code>(不区分大小写)</li>\n<li>输出：<code>Creating search index for spec repo &#39;master&#39;.. Done!</code>，稍等片刻就会出现所有带RxSwift字段的类库出现。</li>\n</ul>\n"},{"title":"使用 Xcode 8 构建版本 iTunes Connect 获取不到应用程序的状态的解决办法","url":"http://www.jvaeyhcd.cc/2016/09/20/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/","content":"<p>iOS10正式版本已发布，Xcode8也跟着就发布了，于是我就在第一时间将Xcode8和iOS10都更新了。但是一波需要适配的问题就来，有Xib的问题，还有很多界面上的问题，在iOS10上根本不能看。<br>通过半天的修改终于把界面适配好了，这时我以为iOS10的适配应该就到此为止了，于是我就Archive生成Release版本的ipa并将其提交到iTunesConnect，一切都是那么的顺利。然而事实并不是这样的，上传成功后我打开iTunesConnect网站登录我的开发账号，准备提交版本更新，然而我却找不到我之前提交的ipa。在app下的“活动”栏中的“所有构建版本”也没有我之前提交的版本。（这时我心想，我明明在Xcode中显示提交成功，为什么iTunesConnect中却不显示了，苹果也没有给出任何提示）</p>\n<p>我发现构建版本左边的“+”号可点，点开“+”号后发现：</p>\n<img src=\"/2016/09/20/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-c52750828b24f91e.png\" alt=\"905614-c52750828b24f91e.png\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-c52750828b24f91e.png) -->\n<a id=\"more\"></a>\n<p>上面显示我之前提交的几个版本都是无效的，但是在Xcode提交时成功的啊，如果失败也应该给个提示啊。这次却没有任何提示，这肯定不应该啊，每次iTunesConnect中app的状态发生变化，苹果都会发送邮件的，于是我去查阅了一下苹果的邮件，还真有。邮件中有明确的写明：<br><img src=\"/2016/09/20/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-7e346e4ec6a37fa2.png\" alt=\"905614-7e346e4ec6a37fa2.png\" title=\"\"><br><!-- ![](http://upload-images.jianshu.io/upload_images/905614-7e346e4ec6a37fa2.png) --></p>\n<p>于是我重新打开项目在Info.plist中添加了如下配置：</p>\n<img src=\"/2016/09/20/使用-xcode-8-构建版本-iTunes-Connect-获取不到应用程序的状态的解决办法/905614-9df0785347c9212e.png\" alt=\"905614-9df0785347c9212e.png\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-9df0785347c9212e.png) -->\n<blockquote>\n<p>在iOS10上如果没有上述配置就使用相机、相册、麦克风程序会闪退的。</p>\n</blockquote>\n<p>不知道还有没有其他原因，反正我就是这样解决的，再次做个笔记，同样也希望可以帮助到遇到相同问题的各位同行们。</p>\n"},{"title":"CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解","url":"http://www.jvaeyhcd.cc/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/","content":"<p><a href=\"http://www.jianshu.com/p/239a650bf73a\" target=\"_blank\" rel=\"external\">《iOS球形波浪加载进度控件－HcdProcessView》</a>这篇文章已经展示了我在项目中编写的一个球形进度加载控件HcdProcessView，这篇文章我要简单介绍一下我的制作过程。</p>\n<img src=\"/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-aad2c9e81a2873c7.gif\" alt=\"905614-aad2c9e81a2873c7.gif\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-aad2c9e81a2873c7.gif) -->\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>首先我放弃了使用通过改变图片的位置来实现上面的动画效果，虽然这样也可以实现如上的效果，但是从性能和资源消耗上来说都不是最好的选择。这里我采用了通过上下文（也就是CGContextRef）来绘制这样的效果，大家对它应该并不陌生，它既可以绘制直线、曲线、多边形圆形以及各种各样的几何图形。</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p>我们可以将上面的复杂图形拆分成如下几步：</p>\n<ol>\n<li>绘制最外面的一圈刻度尺</li>\n<li>绘制表示进度的刻度尺</li>\n<li>绘制中间的球形加载界面<a id=\"more\"></a>\n</li>\n</ol>\n<h3 id=\"绘制刻度尺\"><a href=\"#绘制刻度尺\" class=\"headerlink\" title=\"绘制刻度尺\"></a>绘制刻度尺</h3><p>如果你先要在控件中绘制自己想要的图形，你需要重写UIView的<code>drawRect</code>方法：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>drawRect</code>方法中，我们先画出了刻度尺的图形，刻度尺是由一圈短线在一个圆内围成的一个圆。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  画比例尺</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param context 全局context</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)drawScale:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, _scaleDivisionsWidth);<span class=\"comment\">//线的宽度</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//先将参照点移到控件中心</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//设置线的颜色</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.655</span> green:<span class=\"number\">0.710</span> blue:<span class=\"number\">0.859</span> alpha:<span class=\"number\">1.00</span>]<span class=\"variable\">.CGColor</span>);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    <span class=\"comment\">//绘制一些图形</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; _scaleCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span> - _scaleDivisionsLength, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">//渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, <span class=\"number\">2</span> * M_PI / _scaleCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制刻度尺外的一个圈</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.694</span> green:<span class=\"number\">0.745</span> blue:<span class=\"number\">0.867</span> alpha:<span class=\"number\">1.00</span>]<span class=\"variable\">.CGColor</span>);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddArc</span> (context, <span class=\"number\">0</span>, <span class=\"number\">0</span>, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span> - _scaleDivisionsLength - <span class=\"number\">3</span>, <span class=\"number\">0</span>, M_PI* <span class=\"number\">2</span> , <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//复原参照点</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, -fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, -fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里需要用到两个东西一个是<code>CGContextAddArc</code>，一个是<code>CGContextAddLineToPoint</code>。创建圆弧的方法有两种一种是<code>CGContextAddArc</code>，一种是<code>CGContextAddArcToPoint</code>，这里画的圆比较简单所以用的是<code>CGContextAddArc</code>,<code>CGContextAddArcToPoint</code>在后面也会用到（我会在用到的地方详解）。</p>\n<h4 id=\"CGContextAddArc\"><a href=\"#CGContextAddArc\" class=\"headerlink\" title=\"CGContextAddArc\"></a>CGContextAddArc</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"built_in\">CGContextAddArc</span> (</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> c,    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> x,             <span class=\"comment\">//圆心的x坐标</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> y,   <span class=\"comment\">//圆心的x坐标</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> radius,   <span class=\"comment\">//圆的半径</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> startAngle,    <span class=\"comment\">//开始弧度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> endAngle,   <span class=\"comment\">//结束弧度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> clockwise          <span class=\"comment\">//0表示顺时针，1表示逆时针</span></span><br><span class=\"line\"> );</span><br><span class=\"line\">``` objc</span><br><span class=\"line\">这里需要创建一个完整的圆，那么 开始弧度就是<span class=\"number\">0</span> 结束弧度是 <span class=\"number\">2</span>PI， 因为圆周长是 <span class=\"number\">2</span>*PI*radius。函数执行完后，current point就被重置为(x,y)。`<span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>);`已经将current point移动到了`(fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>)`。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#### CGContextAddLineToPoint</span></span><br><span class=\"line\">``` objc</span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"built_in\">CGContextAddLineToPoint</span> (</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> c,</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> x,</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> y</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n<p> 创建一条直线，从current point到 (x,y)<br> 然后current point会变成(x,y)。<br>由于短线不连续，所以通过for循环来不断画短线，<code>_scaleCount</code>代表的是刻度尺的个数，每次循环先将current point移动到<code>(scaleRect.size.width/2 - _scaleDivisionsLength, 0)</code>点，<code>_scaleDivisionsLength</code>代表短线的长度。绘制完短线后将前面绘制完成的图形旋转一个刻度尺的角度<code>CGContextRotateCTM(context, 2 * M_PI / _scaleCount);</code>，将最终的绘制渲染后就得到了如下的刻度尺：</p>\n<img src=\"/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-282356612ba9f28c.png\" alt=\"905614-282356612ba9f28c.png\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-282356612ba9f28c.png) -->\n<h3 id=\"刻度尺上的进度绘制\"><a href=\"#刻度尺上的进度绘制\" class=\"headerlink\" title=\"刻度尺上的进度绘制\"></a>刻度尺上的进度绘制</h3><p>首先在<code>drawRect</code>中添加<code>drawProcessScale</code>方法。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawProcessScale:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>drawProcessScale</code>方法中实现左右两部分的刻度尺进度绘制。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  比例尺进度</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param context 全局context</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)drawProcessScale:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, _scaleDivisionsWidth);<span class=\"comment\">//线的宽度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetStrokeColorWithColor</span>(context, [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.969</span> green:<span class=\"number\">0.937</span> blue:<span class=\"number\">0.227</span> alpha:<span class=\"number\">1.00</span>]<span class=\"variable\">.CGColor</span>);<span class=\"comment\">//线框颜色</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = (_scaleCount / <span class=\"number\">2</span> + <span class=\"number\">1</span>) * currentPercent;</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> scaleAngle = <span class=\"number\">2</span> * M_PI / _scaleCount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制左边刻度进度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, <span class=\"number\">0</span>, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span> - _scaleDivisionsLength);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, <span class=\"number\">0</span>, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, scaleAngle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//绘制右边刻度进度</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextRotateCTM</span>(context, -count * scaleAngle);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CGContextMoveToPoint</span>(context, <span class=\"number\">0</span>, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span> - _scaleDivisionsLength);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextAddLineToPoint</span>(context, <span class=\"number\">0</span>, scaleRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    CGContextScaleCTM(ctx, 0.5, 0.5);</span></span><br><span class=\"line\">        <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">        <span class=\"built_in\">CGContextStrokePath</span>(context);</span><br><span class=\"line\">        <span class=\"built_in\">CGContextRotateCTM</span>(context, -scaleAngle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextTranslateCTM</span>(context, -fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, -fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>绘制完后效果如下：</p>\n<img src=\"/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-e85a60e792a0c99d.png\" alt=\"905614-e85a60e792a0c99d.png\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-e85a60e792a0c99d.png) -->\n<h3 id=\"水的波浪效果绘制\"><a href=\"#水的波浪效果绘制\" class=\"headerlink\" title=\"水的波浪效果绘制\"></a>水的波浪效果绘制</h3><p>终于到了最主要也是最难的效果绘制了，对于带有波浪不断滚动的效果是采用NSTimer来不断绘制每一帧图形实现的，现在简单介绍下每一帧的绘制方法。<br>首先在<code>drawRect</code>中添加<code>drawWave</code>方法，<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawProcessScale:context];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> drawWave:context];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>drawWave</code>中实现如下方法：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  画波浪</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param context 全局context</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)drawWave:(<span class=\"built_in\">CGContextRef</span>)context &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> frontPath = <span class=\"built_in\">CGPathCreateMutable</span>();</span><br><span class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> backPath = <span class=\"built_in\">CGPathCreateMutable</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//画水</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetLineWidth</span>(context, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetFillColorWithColor</span>(context, [_frontWaterColor <span class=\"built_in\">CGColor</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> offset = _scaleMargin + _waveMargin + _scaleDivisionsWidth;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">float</span> frontY = currentLinePointY;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> backY = currentLinePointY;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = waveRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> frontStartPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> frontEndPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> backStartPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> backEndPoint = <span class=\"built_in\">CGPointMake</span>(offset, currentLinePointY + offset);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">float</span> x = <span class=\"number\">0</span>; x &lt;= waveRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>; x++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//前浪绘制</span></span><br><span class=\"line\">        frontY = a * sin( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">4</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> frontCircleY = frontY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">            frontCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frontY &lt; frontCircleY) &#123;</span><br><span class=\"line\">                frontY = frontCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">            frontCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (frontY &gt; frontCircleY) &#123;</span><br><span class=\"line\">                frontY = frontCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fabs(<span class=\"number\">0</span> - x) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">            frontStartPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, frontY + offset);</span><br><span class=\"line\">            <span class=\"built_in\">CGPathMoveToPoint</span>(frontPath, <span class=\"literal\">NULL</span>, frontStartPoint<span class=\"variable\">.x</span>, frontStartPoint<span class=\"variable\">.y</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        frontEndPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, frontY + offset);</span><br><span class=\"line\">        <span class=\"built_in\">CGPathAddLineToPoint</span>(frontPath, <span class=\"literal\">nil</span>, frontEndPoint<span class=\"variable\">.x</span>, frontEndPoint<span class=\"variable\">.y</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//后波浪绘制</span></span><br><span class=\"line\">        backY = a * cos( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">3</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> backCircleY = backY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">            backCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backY &lt; backCircleY) &#123;</span><br><span class=\"line\">                backY = backCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">            backCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backY &gt; backCircleY) &#123;</span><br><span class=\"line\">                backY = backCircleY;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fabs(<span class=\"number\">0</span> - x) &lt; <span class=\"number\">0.001</span>) &#123;</span><br><span class=\"line\">            backStartPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, backY + offset);</span><br><span class=\"line\">            <span class=\"built_in\">CGPathMoveToPoint</span>(backPath, <span class=\"literal\">NULL</span>, backStartPoint<span class=\"variable\">.x</span>, backStartPoint<span class=\"variable\">.y</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        backEndPoint = <span class=\"built_in\">CGPointMake</span>(x + offset, backY + offset);</span><br><span class=\"line\">        <span class=\"built_in\">CGPathAddLineToPoint</span>(backPath, <span class=\"literal\">nil</span>, backEndPoint<span class=\"variable\">.x</span>, backEndPoint<span class=\"variable\">.y</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPoint</span> centerPoint = <span class=\"built_in\">CGPointMake</span>(fullRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, fullRect<span class=\"variable\">.size</span><span class=\"variable\">.height</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制前浪圆弧</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> frontStart = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:frontStartPoint];</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> frontEnd = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:frontEndPoint];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPathAddArc</span>(frontPath, <span class=\"literal\">nil</span>, centerPoint<span class=\"variable\">.x</span>, centerPoint<span class=\"variable\">.y</span>, waveRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, frontEnd, frontStart, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddPath</span>(context, frontPath);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(context);</span><br><span class=\"line\">    <span class=\"comment\">//推入</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSaveGState</span>(context);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextDrawPath</span>(context, k<span class=\"built_in\">CGPathStroke</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(frontPath);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绘制后浪圆弧</span></span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> backStart = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:backStartPoint];</span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> backEnd = [<span class=\"keyword\">self</span> calculateRotateDegree:centerPoint point:backEndPoint];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGPathAddArc</span>(backPath, <span class=\"literal\">nil</span>, centerPoint<span class=\"variable\">.x</span>, centerPoint<span class=\"variable\">.y</span>, waveRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span> / <span class=\"number\">2</span>, backEnd, backStart, <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGContextSetFillColorWithColor</span>(context, [_backWaterColor <span class=\"built_in\">CGColor</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextAddPath</span>(context, backPath);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(context);</span><br><span class=\"line\">    <span class=\"comment\">//推入</span></span><br><span class=\"line\">    <span class=\"built_in\">CGContextSaveGState</span>(context);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextDrawPath</span>(context, k<span class=\"built_in\">CGPathStroke</span>);</span><br><span class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(backPath);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码较长，可能也比较难以理解。下面我将会对上述代码简单解读一下，已前浪为例（前浪和后浪的实现方式基本一样，只是两个浪正余弦函数不一样而已）。两个浪都是由一条曲线和和一个圆弧构成的封闭区间，曲线的x区间为<code>[0, waveRect.size.width]</code>，y值坐标为<code>frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>(currentLinePointY为偏移量)，通过for循环自增x，计算出y的位置来不断<code>CGPathAddLineToPoint</code>绘制出一条曲线，这就构成了波浪的曲线。然后我们需要根据波浪曲线的起始点和结束点以及圆心点(fullRect.size.width / 2, fullRect.size.height / 2)，来绘制一段封闭的圆弧。<br>这里就需要用到<code>CGPathAddArc</code>方法；<code>CGPathAddArc</code>方法和<code>CGContextAddArc</code>类似。需要先计算出点波浪的起始点和结束点分别与圆心之间的夹角。知道两点计算夹角的方式如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  根据圆心点和圆上一个点计算角度</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param centerPoint 圆心点</span><br><span class=\"line\"> *  @param point       圆上的一个点</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 角度</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">- (<span class=\"built_in\">CGFloat</span>)calculateRotateDegree:(<span class=\"built_in\">CGPoint</span>)centerPoint point:(<span class=\"built_in\">CGPoint</span>)point &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGFloat</span> rotateDegree = asin(fabs(point<span class=\"variable\">.y</span> - centerPoint<span class=\"variable\">.y</span>) / (sqrt(pow(point<span class=\"variable\">.x</span> - centerPoint<span class=\"variable\">.x</span>, <span class=\"number\">2</span>) + pow(point<span class=\"variable\">.y</span> - centerPoint<span class=\"variable\">.y</span>, <span class=\"number\">2</span>))));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果point纵坐标大于原点centerPoint纵坐标(在第一和第二象限)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (point<span class=\"variable\">.y</span> &gt; centerPoint<span class=\"variable\">.y</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一象限</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point<span class=\"variable\">.x</span> &gt;= centerPoint<span class=\"variable\">.x</span>) &#123;</span><br><span class=\"line\">            rotateDegree = rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//第二象限</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rotateDegree = M_PI - rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"comment\">//第三和第四象限</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (point<span class=\"variable\">.x</span> &lt;= centerPoint<span class=\"variable\">.x</span>) <span class=\"comment\">//第三象限，不做任何处理</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rotateDegree = M_PI + rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//第四象限</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rotateDegree = <span class=\"number\">2</span> * M_PI - rotateDegree;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rotateDegree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"波浪绘制的相关判断\"><a href=\"#波浪绘制的相关判断\" class=\"headerlink\" title=\"波浪绘制的相关判断\"></a>波浪绘制的相关判断</h4><p>由于曲线x区间是<code>[0, waveRect.size.width]</code>，y值是根据公式<code>frontY = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>计算出来的，但是最终构成的波浪是一个球形的，所以对于计算出来的y值坐标，我们需要判断它是否在圆上，如果不在圆上，我们应该将它移到圆上。</p>\n<p>判断分为两种情况：</p>\n<h5 id=\"currentLinePointY-lt-fullRect-size-height-2\"><a href=\"#currentLinePointY-lt-fullRect-size-height-2\" class=\"headerlink\" title=\"currentLinePointY&lt;fullRect.size.height / 2\"></a>currentLinePointY&lt;fullRect.size.height / 2</h5><p>当currentLinePointY&lt;fullRect.size.height / 2时，已知点的坐标x，根据公式<code>y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1&lt;y2 则最终应该放到波浪上的点为 <code>(x,y2)</code>。</p>\n<img src=\"/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-6d980e01c0a78df8.png\" alt=\"905614-6d980e01c0a78df8.png\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-6d980e01c0a78df8.png) -->\n<h5 id=\"currentLinePointY-gt-fullRect-size-height-2\"><a href=\"#currentLinePointY-gt-fullRect-size-height-2\" class=\"headerlink\" title=\"currentLinePointY&gt;fullRect.size.height / 2\"></a>currentLinePointY&gt;fullRect.size.height / 2</h5><p>同理当currentLinePointY&gt;fullRect.size.height / 2时，已知点的坐标x，根据公式<code>y1 = a * sin( x / 180 * M_PI + 4 * b / M_PI ) * amplitude + currentLinePointY;</code>算出来的点位置为(x, y1)，而在圆上点坐标为x的点的位置在(x,y2)，如果y1&gt;y2 则最终应该放到波浪上的点为 <code>(x,y2)</code>。</p>\n<img src=\"/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-11de31e505d895a1.png\" alt=\"905614-11de31e505d895a1.png\" title=\"\">\n<!-- ![](http://upload-images.jianshu.io/upload_images/905614-11de31e505d895a1.png) -->\n<p>其中判断的代码如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontY = a * sin( x / <span class=\"number\">180</span> * M_PI + <span class=\"number\">4</span> * b / M_PI ) * amplitude + currentLinePointY;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"built_in\">CGFloat</span> frontCircleY = frontY;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentLinePointY &lt; radius) &#123;</span><br><span class=\"line\">    frontCircleY = radius - sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (frontY &lt; frontCircleY) &#123;</span><br><span class=\"line\">        frontY = frontCircleY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentLinePointY &gt; radius) &#123;</span><br><span class=\"line\">    frontCircleY = radius + sqrt(pow(radius, <span class=\"number\">2</span>) - pow((radius - x), <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (frontY &gt; frontCircleY) &#123;</span><br><span class=\"line\">        frontY = frontCircleY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中当<code>currentLinePointY &lt; radius</code>时，<code>y2=radius - sqrt(pow(radius, 2) - pow((radius - x), 2))</code>;<br>当<code>currentLinePointY &gt; radius</code>时，<code>y2=radius + sqrt(pow(radius, 2) - pow((radius - x), 2))</code>；</p>\n<p>这样就构成了一个如下的效果：<br><img src=\"/2016/09/20/CGContextRef绘图－iOS球形波浪加载进度控件－HcdProcessView详解/905614-cb9896a7ba570a22.png\" alt=\"905614-cb9896a7ba570a22.png\" title=\"\"><br><!-- ![](http://upload-images.jianshu.io/upload_images/905614-cb9896a7ba570a22.png) --></p>\n<p>然后通过Timer不断的改变<code>a</code>、<code>b</code>的值就得到了我想要的动画效果。</p>\n<p>Github地址：<a href=\"https://github.com/Jvaeyhcd/HcdProcessView\" target=\"_blank\" rel=\"external\">https://github.com/Jvaeyhcd/HcdProcessView</a></p>\n"},{"title":"Jenkins+gradle+coding Android持续集成","url":"http://www.jvaeyhcd.cc/2016/08/08/Jenkins-gradle-coding-Android持续集成/","content":"<p>等待更新,基本步骤与iOS配置相似。</p>\n<a id=\"more\"></a>"},{"title":"Jenkins+iOS集成常见错误及解决办法","url":"http://www.jvaeyhcd.cc/2016/08/04/Jenkins-iOS集成常见错误及解决办法/","content":"<h3 id=\"问题一-failed-to-import-bridging-header\"><a href=\"#问题一-failed-to-import-bridging-header\" class=\"headerlink\" title=\"问题一: failed to import bridging header\"></a>问题一: failed to import bridging header</h3><h4 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.h:<span class=\"number\">7</span>:<span class=\"number\">9</span>: error: <span class=\"string\">'HcdGuideView/HcdGuideView.h'</span> file not found</span><br><span class=\"line\"><span class=\"comment\">#import &lt;HcdGuideView/HcdGuideView.h&gt;</span></span><br><span class=\"line\">^</span><br><span class=\"line\">&lt;unknown&gt;:<span class=\"number\">0</span>: error: failed to import bridging header <span class=\"string\">'/Users/polesapp/.jenkins/workspace/qiangtoubao/qiangtoubao/OCFile/qiangtoubao-Bridging-Header.h'</span></span><br><span class=\"line\"></span><br><span class=\"line\">** BUILD FAILED **</span><br></pre></td></tr></table></figure>\n<p>集成项目是Swift项目，使用了Cocoapods导入一个自己写的一个Objective-C第三方库，所以需要用到桥接文件。在Xcode中运行没有任何问题，但是用Jenkins集成的时候却报错了。<br><a id=\"more\"></a></p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>上述所报的错误已经写得十分明显了，错误的原因出在<code>#import &lt;HcdGuideView/HcdGuideView.h&gt;</code>这一句，桥接文件中找不到<code>HcdGuideView.h</code>这个文件。</p>\n<p>所以最后的解决办法如下：</p>\n<ol>\n<li>选择target-BuildSettings-Search Paths下的User Header Search Paths，点击空白处，并且点击“＋”号添加一项，然后输入<code>$(PODS_ROOT)</code>,选择：recursive（会在相应的目录递归搜索文件）,如下图所示：</li>\n</ol>\n<img src=\"/2016/08/04/Jenkins-iOS集成常见错误及解决办法/error_example_1.png\" alt=\"failed to import bridging header\" title=\"failed to import bridging header\">\n<p>这样就需要将<code>#import &lt;HcdGuideView/HcdGuideView.h&gt;</code>替换成<code>#import &quot;HcdGuideView.h&quot;</code>就可以了。</p>\n"},{"title":"Swift学习笔记之高级运算符","url":"http://www.jvaeyhcd.cc/2016/08/02/Swift学习笔记之高级运算符/","content":"<p>除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。</p>\n<p>与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（<code>&amp;+</code>）,所有的溢出运算符都是以<code>&amp;</code>开头的。</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。</p>\n<a id=\"more\"></a>\n<h3 id=\"按位取反运算符\"><a href=\"#按位取反运算符\" class=\"headerlink\" title=\"按位取反运算符\"></a>按位取反运算符</h3><p>按位取反运算符（<code>~</code>）可以对一个数值的全部比特位进行取反：</p>\n\n<p>按位取反运算符是一个前缀运算符，需要直接放在运算的数之前，并且它们之间不能加空格。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialBits: <span class=\"type\">UInt8</span> = <span class=\"number\">0b00001111</span>   <span class=\"comment\">//十进制等于15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> invertedBits = ~initialBits       <span class=\"comment\">//等于 0b11110000，十进制为240</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"按位与运算符\"><a href=\"#按位与运算符\" class=\"headerlink\" title=\"按位与运算符\"></a>按位与运算符</h3><p>按位与运算符（<code>&amp;</code>）可以对两个数的比特位进行合并。它返回一个新的数，只有当两个数对应位都为<code>1</code>的时候，新数的对应位才为<code>1</code>。</p>\n\n<p>在下面的示例当中，<code>firstBits</code> 和 <code>lastBits</code> 中间 4 个位的值都为 1。按位与运算符对它们进行了运算，得到二进制数值 <code>00111100</code>，等价于无符号十进制数的 60：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstBits: <span class=\"type\">UInt8</span> = <span class=\"number\">0b11111100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastBits: <span class=\"type\">UInt8</span>  = <span class=\"number\">0b00111111</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> middleBits = firstBits &amp; lastBits <span class=\"comment\">// 等于 00111100</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按位或运算符\"><a href=\"#按位或运算符\" class=\"headerlink\" title=\"按位或运算符\"></a>按位或运算符</h3><p>按位或运算符(<code>|</code>)可以对两个数的比特位进行比较，它返回一个新的数，如果两个对应的比特位中有任意一个为<code>1</code>时，新数对应位就为<code>1</code>。</p>\n\n<p>在下面的示例中，<code>someBits</code> 和 <code>moreBits</code> 不同的位会被设置为 <code>1</code>。接位或运算符对它们进行了运算，得到二进制数值 <code>11111110</code>，等价于无符号十进制数的 <code>254</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> someBits: <span class=\"type\">UInt8</span> = <span class=\"number\">0b10110010</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moreBits: <span class=\"type\">UInt8</span> = <span class=\"number\">0b01011110</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedbits = someBits | moreBits <span class=\"comment\">// 等于 11111110</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按位异或运算符\"><a href=\"#按位异或运算符\" class=\"headerlink\" title=\"按位异或运算符\"></a>按位异或运算符</h3><p>按位异或运算符(<code>^</code>)可以对两个数的比特位进行比较，它返回一个新的数，当两个数对应比特位不相同时，新数的对应位就为<code>1</code>：</p>\n\n<p>在下面的示例当中，<code>firstBits</code> 和 <code>otherBits</code> 都有一个自己的位为 <code>1</code> 而对方的对应位为 <code>0</code> 的位。 按位异或运算符将新数的这两个位都设置为 <code>1</code>，同时将其它位都设置为 <code>0</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstBits: <span class=\"type\">UInt8</span> = <span class=\"number\">0b00010100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> otherBits: <span class=\"type\">UInt8</span> = <span class=\"number\">0b00000101</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> outputBits = firstBits ^ otherBits <span class=\"comment\">// 等于 00010001</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按位左移、右移运算符\"><a href=\"#按位左移、右移运算符\" class=\"headerlink\" title=\"按位左移、右移运算符\"></a>按位左移、右移运算符</h3><p>按位左移运算符（<code>&lt;&lt;</code>）和按位右移运算符（<code>&gt;&gt;</code>）可以对一个数的所有位进行指定位数的左移和右移。对一个数的左移和右移一位相当于对一个数乘以2或者除以2。</p>\n<h4 id=\"无符号整数的位移运算\"><a href=\"#无符号整数的位移运算\" class=\"headerlink\" title=\"无符号整数的位移运算\"></a>无符号整数的位移运算</h4><p>对无符号的整数进行位移的规则如下：</p>\n<ul>\n<li>已经存在的位按指定的位数进行左移和右移</li>\n<li>任何因移动超出整型存储范围的位都会被丢弃</li>\n<li>用<code>0</code>来填充位移后产生的空白<br>这种方法称为逻辑位移。</li>\n</ul>\n<p>以下这张图展示了 <code>11111111 &lt;&lt; 1</code>（即把 <code>11111111</code> 向左移动 <code>1</code> 位），和 <code>11111111 &gt;&gt; 1</code>（即把 <code>11111111</code> 向右移动 <code>1</code> 位）的结果。蓝色的部分是被移位的，灰色的部分是被抛弃的，橙色的部分则是被填充进来的：</p>\n\n<p>下面的代码演示了 Swift 中的移位运算：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> shiftBits: <span class=\"type\">UInt8</span> = <span class=\"number\">4</span> <span class=\"comment\">// 即二进制的 00000100</span></span><br><span class=\"line\">shiftBits &lt;&lt; <span class=\"number\">1</span>           <span class=\"comment\">// 00001000</span></span><br><span class=\"line\">shiftBits &lt;&lt; <span class=\"number\">2</span>           <span class=\"comment\">// 00010000</span></span><br><span class=\"line\">shiftBits &lt;&lt; <span class=\"number\">5</span>           <span class=\"comment\">// 10000000</span></span><br><span class=\"line\">shiftBits &lt;&lt; <span class=\"number\">6</span>           <span class=\"comment\">// 00000000</span></span><br><span class=\"line\">shiftBits &gt;&gt; <span class=\"number\">2</span>           <span class=\"comment\">// 00000001</span></span><br></pre></td></tr></table></figure></p>\n<p>还可以使用位移运算对其它数据类型进行编码和解码。</p>\n<h4 id=\"有符号整数的位移运算\"><a href=\"#有符号整数的位移运算\" class=\"headerlink\" title=\"有符号整数的位移运算\"></a>有符号整数的位移运算</h4><p>对比无符号整数，有符号整数的位移运算相对就要复杂得多，这种复杂性源于有符号整数的二进制表现新式。<br>有符号整数使用第一个比特位（通常称为符号位）来表示这个数的正负。符号为<code>0</code>代表正数，为<code>1</code>代表负数。其余的比特位（通常称为数值位）存储了实际的值。</p>\n\n<p>符号位为 <code>0</code>，说明这是一个正数，另外 7 位则代表了十进制数值 4 的二进制表示。</p>\n<p>负数的存储方式略有不同。它存储的值的绝对值等于 <code>2</code> 的 <code>n</code> 次方减去它的实际值（也就是数值位表示的值），这里的 <code>n</code> 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 <code>2</code> 的 <code>7</code> 次方，即 <code>128</code>。<br>这是值为 <code>-4</code> 的 <code>Int8</code> 型整数的二进制位表现形式：</p>\n\n<p>这次的符号位为 <code>1</code>，说明这是一个负数，另外 7 个位则代表了数值 <code>124</code>（即 <code>128 - 4</code>）的二进制表示。负数的表示通常被称为二进制补码表示，用这种方法表示负数乍看起来有点奇怪，但它有一下几个优点。</p>\n<ul>\n<li><p>如果想对<code>-1</code>和<code>-4</code>进行加法运算，我们只需要将这两个数的全部8个比特位相加，并且将计算结果中超出8位的值丢弃,其次，使用二进制补码可以使负数的按位左移和右移运算得到跟正数同样的效果，即每向左移一位就将自身的数值乘以 2，每向右一位就将自身的数值除以 2。要达到此目的，对有符号整数的右移有一个额外的规则：</p>\n\n</li>\n<li><p>当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 <code>0</code>。</p>\n\n<p>这个行为可以确保有符号整数的符号位不会因为右移运算而改变，这通常被称为<b>算术移位</b>。<br>由于正数和负数的特殊存储方式，在对它们进行右移的时候，会使它们越来越接近 <code>0</code>。在移位的过程中保持符号位不变，意味着负整数在接近 <code>0</code> 的过程中会一直保持为负。</p>\n</li>\n</ul>\n<h2 id=\"溢出运算符\"><a href=\"#溢出运算符\" class=\"headerlink\" title=\"溢出运算符\"></a>溢出运算符</h2><p>在默认情况下，当向一个整数赋予超过它容量的值时，Swift默认会报错，而不是产生一个无效的数。这个行为为我们在运算过大或者过小的数的时候提供了额外的安全性。<br>例如<code>Int16</code>型整数能容纳的有符号整数范围是<code>-32768</code>到<code>32767</code>,当一个为Int16型变量的值超出了这个范围时，系统会报错：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> potentialOverflow = <span class=\"type\">Int16</span>.<span class=\"built_in\">max</span> <span class=\"comment\">// potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数</span></span><br><span class=\"line\">potentialOverflow += <span class=\"number\">1</span>            <span class=\"comment\">// 这里会报错</span></span><br></pre></td></tr></table></figure></p>\n<p>溢出运算符可以让数值溢出的时候采取截断处理，而非报错。可以使用Swift提供的三个溢出运算符来让系统支持整数溢出运算。这些运算符都是以<code>&amp;</code>开头的：</p>\n<ul>\n<li>溢出加法 <code>&amp;+</code></li>\n<li>溢出减法 <code>&amp;-</code></li>\n<li>溢出乘法 <code>&amp;*</code></li>\n</ul>\n<h3 id=\"无符号数值上溢\"><a href=\"#无符号数值上溢\" class=\"headerlink\" title=\"无符号数值上溢\"></a>无符号数值上溢</h3><p>数值有可能出现上溢或者下溢。<br>这个示例演示了但我们对一个无符号整数使用溢出加法(<code>&amp;+</code>)进行上溢运算时会发生什么：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unsignedOverflow = <span class=\"type\">UInt8</span>.<span class=\"built_in\">max</span></span><br><span class=\"line\"><span class=\"comment\">// unsignedOverflow 等于 UInt8 所能容纳的最大整数 255</span></span><br><span class=\"line\">unsignedOverflow = unsignedOverflow &amp;+ <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 unsignedOverflow 等于 0</span></span><br></pre></td></tr></table></figure></p>\n<p><code>unsignedOverflow</code> 被初始化为 <code>UInt8</code> 所能容纳的最大整数（<code>255</code>，以二进制表示即 <code>11111111</code>）。然后使用了溢出加法运算符（<code>&amp;+</code>）对其进行加 1 运算。这使得它的二进制表示正好超出 UInt8 所能容纳的位数，也就导致了数值的溢出，如下图所示。数值溢出后，留在 <code>UInt8</code> 边界内的值是 <code>00000000</code>，也就是十进制数值的 0。<br></p>\n<h3 id=\"无符号数值下溢\"><a href=\"#无符号数值下溢\" class=\"headerlink\" title=\"无符号数值下溢\"></a>无符号数值下溢</h3><p>同样的，当我们对一个无符号整数使用溢出减法(<code>&amp;-</code>)进行下溢运算时也会产生类似的现象：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unsignedOverflow = <span class=\"type\">UInt8</span>.<span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"comment\">// unsignedOverflow 等于 UInt8 所能容纳的最小整数 0</span></span><br><span class=\"line\">unsignedOverflow = unsignedOverflow &amp;- <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 unsignedOverflow 等于 255</span></span><br></pre></td></tr></table></figure></p>\n<p><code>UInt8</code> 型整数能容纳的最小值是 <code>0</code>，以二进制表示即 <code>00000000</code>。当使用溢出减法运算符对其进行减 1 运算时，数值会产生下溢并被截断为 <code>11111111</code>， 也就是十进制数值的 <code>255</code>。<br></p>\n<h3 id=\"有符号数值溢出\"><a href=\"#有符号数值溢出\" class=\"headerlink\" title=\"有符号数值溢出\"></a>有符号数值溢出</h3><p>溢出也会发生在有符号整型数值上。在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算。比如下面的例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> signedOverflow = <span class=\"type\">Int8</span>.<span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"comment\">// signedOverflow 等于 Int8 所能容纳的最小整数 -128</span></span><br><span class=\"line\">signedOverflow = signedOverflow &amp;- <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 signedOverflow 等于 127</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Int8</code>型整数能容纳的最小值是<code>－128</code>，以二进制表示即<code>10000000</code>。当使用溢出减法运算符对其进行减<code>1</code>运算时，符号位被翻转，得到二进制数值<code>01111111</code>，也就是十进制的<code>127</code>，这个值也是<code>Int8</code>型整数所能容纳的最大值。</p>\n\n<p>对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。</p>\n<h2 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h2><p>类和结构体可以为现有的运算符提供自定义的实现，这通常被称为运算符重载。</p>\n<p>下面一个例子展示了如何为自定义的结构体实现加法运算符(<code>+</code>)。算数运算符是一个双目运算符，因为它可以对两个值进行运算，同时它还是中缀运算符，因为它出现在两个值中间。</p>\n<p>例子中定义了一个名为 <code>Vector2D</code> 的结构体用来表示二维坐标向量 <code>(x, y)</code>，紧接着定义了一个可以对两个 <code>Vector2D</code> 结构体进行相加的运算符函数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vector2D</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> + <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"keyword\">left</span>.x + <span class=\"keyword\">right</span>.x, y: <span class=\"keyword\">left</span>.y + <span class=\"keyword\">right</span>.y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该运算符函数被定义为一个全局函数，并且函数的名字与它要进行重载的 <code>+</code> 名字一致。因为算术加法运算符是双目运算符，所以这个运算符函数接收两个类型为 <code>Vector2D</code> 的参数，同时有一个 <code>Vector2D</code> 类型的返回值。</p>\n<p>在这个实现中，输入参数分别被命名为 <code>left</code> 和 <code>right</code>，代表在 + 运算符左边和右边的两个 <code>Vector2D</code> 实例。函数返回了一个新的 <code>Vector2D</code> 实例，这个实例的 <code>x</code> 和 <code>y</code> 分别等于作为参数的两个实例的 <code>x</code> 和 <code>y</code> 的值之和。</p>\n<p>这个函数被定义成全局的，而不是 <code>Vector2D</code> 结构体的成员方法，所以任意两个 <code>Vector2D</code> 实例都可以使用这个中缀运算符：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> anotherVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedVector = vector + anotherVector</span><br><span class=\"line\"><span class=\"comment\">// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"前缀和后缀运算符\"><a href=\"#前缀和后缀运算符\" class=\"headerlink\" title=\"前缀和后缀运算符\"></a>前缀和后缀运算符</h3><p>上个例子演示了一个双目中缀运算符的自定义实现。类与结构体也能提供标准单目运算符的实现。单目运算符只运算一个值。当运算符出现在值之前时，它就是前缀的（例如 <code>-a</code>），而当它出现在值之后时，它就是后缀的（例如 <code>b!</code>）。</p>\n<p>要实现前缀或者后缀运算符，需要在声明运算符函数的时候在<code>func</code>关键字之前指定<code>prefix</code>或者<code>postfix</code>修饰符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"func\"><span class=\"keyword\">func</span> - <span class=\"params\">(vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: -vector.x, y: -vector.y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码为 <code>Vector2D</code> 类型实现了单目负号运算符。由于该运算符是前缀运算符，所以这个函数需要加上 <code>prefix</code> 修饰符。</p>\n<p>对于简单数值，单目负号运算符可以对它们的正负性进行改变。对于 <code>Vector2D</code> 来说，该运算将其 <code>x</code> 和 <code>y</code> 属性的正负性都进行了改变：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> positive = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> negative = -positive</span><br><span class=\"line\"><span class=\"comment\">// negative 是一个值为 (-3.0, -4.0) 的 Vector2D 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> alsoPositive = -negative</span><br><span class=\"line\"><span class=\"comment\">// alsoPositive 是一个值为 (3.0, 4.0) 的 Vector2D 实例</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"复合赋值运算符\"><a href=\"#复合赋值运算符\" class=\"headerlink\" title=\"复合赋值运算符\"></a>复合赋值运算符</h3><p>复合赋值运算符将赋值运算符（<code>=</code>）与其它运算符进行结合。例如，将加法与赋值结合成加法赋值运算符（<code>+=</code>）。在实现的时候，需要把运算符的左参数设置成 <code>inout</code> 类型，因为这个参数的值会在运算符函数内直接被修改。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> += <span class=\"params\">(<span class=\"keyword\">inout</span> <span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">left</span> = <span class=\"keyword\">left</span> + <span class=\"keyword\">right</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为加法运算在之前已经定义过了，所以在这里无需重新定义。在这里可以直接利用现有的加法运算符函数，用它来对左值和右值进行相加，并再次赋值给左值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vectorToAdd = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</span><br><span class=\"line\">original += vectorToAdd</span><br><span class=\"line\"><span class=\"comment\">// original 的值现在为 (4.0, 6.0)</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：不能对默认的赋值运算符（<code>=</code>）进行重载。只有组合赋值运算符可以被重载。同样地，也无法对三目条件运算符 （<code>a ? b : c</code>） 进行重载。</p>\n</blockquote>\n<h3 id=\"等价运算符\"><a href=\"#等价运算符\" class=\"headerlink\" title=\"等价运算符\"></a>等价运算符</h3><p>自定义的类和结构体没有对等价运算符进行默认实现，等价运算符通常被称为“相等”运算符（<code>==</code>）与“不等”运算符（<code>!=</code>）。对于自定义类型，Swift 无法判断其是否“相等”，因为“相等”的含义取决于这些自定义类型在你的代码中所扮演的角色。</p>\n<p>为了使用等价运算符能对自定义的类型进行判等运算，需要为其提供自定义实现，实现的方法与其它中缀运算符一样：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> == <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">left</span>.x == <span class=\"keyword\">right</span>.x) &amp;&amp; (<span class=\"keyword\">left</span>.y == <span class=\"keyword\">right</span>.y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> != <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(<span class=\"keyword\">left</span> == <span class=\"keyword\">right</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"自定义运算符\"><a href=\"#自定义运算符\" class=\"headerlink\" title=\"自定义运算符\"></a>自定义运算符</h2><p>除了实现标准运算符，在 Swift 中还可以声明和实现自定义运算符。<br>新的运算符要使用 <code>operator</code> 关键字在全局作用域内进行定义，同时还要指定 <code>prefix</code>、<code>infix</code> 或者 <code>postfix</code> 修饰符：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> +++ &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码定义了一个新的名为 <code>+++</code> 的前缀运算符。对于这个运算符，在 Swift 中并没有意义，因此我们针对 <code>Vector2D</code> 的实例来定义它的意义。对这个示例来讲，<code>+++</code> 被实现为“前缀双自增”运算符。它使用了前面定义的复合加法运算符来让矩阵对自身进行相加，从而让 <code>Vector2D</code> 实例的 <code>x</code> 属性和 <code>y</code> 属性的值翻倍：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"func\"><span class=\"keyword\">func</span> +++ <span class=\"params\">(<span class=\"keyword\">inout</span> vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</span><br><span class=\"line\">    vector += vector</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Mac环境中Jenkins停止和启动命令","url":"http://www.jvaeyhcd.cc/2016/08/02/Mac环境中Jenkins停止和启动命令/","content":"<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n"},{"title":"CocoaPods的制作过程","url":"http://www.jvaeyhcd.cc/2016/07/08/CocoaPods的制作过程/","content":"<p>最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><h4 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h4><p>使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。</p>\n<h4 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h4><p>在github上同样创建一个<code>HcdCachePlayer</code>,最好保持同名,需要注意的是,在创建仓库的时候需要添加<code>license</code>类型,这里我使用<code>license</code>类型为<code>MIT</code>。这个很简单就不再啰嗦了。<br><a id=\"more\"></a></p>\n<h4 id=\"关联本地仓库到远程仓库\"><a href=\"#关联本地仓库到远程仓库\" class=\"headerlink\" title=\"关联本地仓库到远程仓库\"></a>关联本地仓库到远程仓库</h4><p>进入本地仓库目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/github/H<span class=\"built_in\">cd</span>CachePlayer/</span><br></pre></td></tr></table></figure></p>\n<p>关联远程仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https://github.com/Jvaeyhcd/H<span class=\"built_in\">cd</span>CachePlayer.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加Pods依赖库所需文件\"><a href=\"#添加Pods依赖库所需文件\" class=\"headerlink\" title=\"添加Pods依赖库所需文件\"></a>添加Pods依赖库所需文件</h3><p>依赖库所需的文件格式为<code>{project}.podspec</code>格式，每个Pods依赖库必须有这个描述文件。</p>\n<h4 id=\"添加-project-podspec文件\"><a href=\"#添加-project-podspec文件\" class=\"headerlink\" title=\"添加{project}.podspec文件\"></a>添加{project}.podspec文件</h4><p>使用pod命令创建<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create H<span class=\"built_in\">cd</span>CachePlayer</span><br></pre></td></tr></table></figure></p>\n<p>这样就生成了HcdCachePlayer.podspec文件，打开该文件添加内容，并删除不需要的后就像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> |s|</span><br><span class=\"line\">  s.name         = <span class=\"string\">\"HcdCachePlayer\"</span></span><br><span class=\"line\">  s.version      = <span class=\"string\">\"0.0.1\"</span></span><br><span class=\"line\">  s.summary      = <span class=\"string\">\"一个带缓存的视频播放器HcdCachePlayer\"</span></span><br><span class=\"line\">  s.description  = &lt;&lt;-DESC</span><br><span class=\"line\">  一个使用AVPlayer封装的带缓存的视频播放器,支持全屏，可以左右滑动手势快进快退，上下滑动手势调节屏幕亮度</span><br><span class=\"line\">                   DESC</span><br><span class=\"line\">  s.homepage     = <span class=\"string\">\"https://github.com/Jvaeyhcd/HcdCachePlayer\"</span></span><br><span class=\"line\">  s.license      = &#123; :<span class=\"built_in\">type</span> =&gt; <span class=\"string\">\"MIT\"</span>, :file =&gt; <span class=\"string\">\"LICENSE\"</span> &#125;</span><br><span class=\"line\">  s.author             = &#123; <span class=\"string\">\"Jvaeyhcd\"</span> =&gt; <span class=\"string\">\"chedahuang@icloud.com\"</span> &#125;</span><br><span class=\"line\">  s.platform     = :ios, <span class=\"string\">'7.0'</span></span><br><span class=\"line\">  s.source       = &#123; :git =&gt; <span class=\"string\">\"https://github.com/Jvaeyhcd/HcdCachePlayer.git\"</span>, :tag =&gt; s.version.to_s &#125;</span><br><span class=\"line\">  s.source_files  = <span class=\"string\">\"hcdCachePlayer/**/*.&#123;h,m&#125;\"</span></span><br><span class=\"line\">  s.resource  = <span class=\"string\">\"hcdCachePlayer/hcdCachePlayer.bundle\"</span></span><br><span class=\"line\">  s.frameworks = <span class=\"string\">\"UIKit\"</span>, <span class=\"string\">\"AVFoundation\"</span>, <span class=\"string\">\"MobileCoreServices\"</span>, <span class=\"string\">\"Foundation\"</span></span><br><span class=\"line\">  s.requires_arc = <span class=\"literal\">true</span></span><br><span class=\"line\">  s.dependency <span class=\"string\">\"Masonry\"</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>s.source_files指向循环滚动的核心代码放在项目的s.hcdCachePlayer/<em>*/</em>.{h,m},所以这里最好将库代码都放在同一个目录下。</p>\n<h3 id=\"提交到github\"><a href=\"#提交到github\" class=\"headerlink\" title=\"提交到github\"></a>提交到github</h3><p>此时编码已经完成了，并且配置好了相关文件我们可以先将代码提交到github上了。</p>\n<h4 id=\"Pods验证\"><a href=\"#Pods验证\" class=\"headerlink\" title=\"Pods验证\"></a>Pods验证</h4><p>提交之前我们需要先验证一下HcdCachePlayer.podspec文件。在HcdCachePlayer.podspec所在目录运行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint</span><br></pre></td></tr></table></figure></p>\n<p>如果出现ERROR和WARING都会失败，如果失败会明确指明哪个地方出错了，按提示修改就可以了。</p>\n<h4 id=\"提交代码到Github\"><a href=\"#提交代码到Github\" class=\"headerlink\" title=\"提交代码到Github\"></a>提交代码到Github</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"version 0.0.1\"</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>打上标签<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag <span class=\"number\">0.0</span>.<span class=\"number\">1</span></span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure></p>\n<p>不出问题的话,就可以在github上看到最新提交的内容了。</p>\n<h3 id=\"上传-project-podspec到CocoaPods官方仓库中\"><a href=\"#上传-project-podspec到CocoaPods官方仓库中\" class=\"headerlink\" title=\"上传{project}.podspec到CocoaPods官方仓库中\"></a>上传{project}.podspec到CocoaPods官方仓库中</h3><p>要想一个HcdCachePlayer真正可以用,就得把生成的HcdCachePlayer.podspec文件提交到Cocoapods官方的<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"external\">Specs</a>仓库中,才能被search到并使用。</p>\n<blockquote>\n<p>之前的提交方式是先将<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"external\">Specs</a>仓库fork一份，添加修改，然后push，等待审核，这种显示是不安全的，所以现在不能使用了。也就是这篇文章：<a href=\"http://blog.csdn.net/wzzvictory/article/details/20067595\" target=\"_blank\" rel=\"external\">《CocoaPods详解之—-制作篇》</a>中说提到的方法，注意这个方法已经不能使用了。</p>\n</blockquote>\n<p>CocoaPods为我们提供了另外一个更加安全的方法<a href=\"http://blog.cocoapods.org/CocoaPods-Trunk/#transition\" target=\"_blank\" rel=\"external\">Trunk</a>。</p>\n<h4 id=\"Trunk的Register\"><a href=\"#Trunk的Register\" class=\"headerlink\" title=\"Trunk的Register\"></a>Trunk的Register</h4><p>如果第一次使用的话那么就需要注册了，需要CocoaPods0.33版本以上才支持<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk register *youremail* *yourname* --description=<span class=\"string\">'iMac'</span> --verbose</span><br></pre></td></tr></table></figure></p>\n<p>以上命令是注册所需的,替换你的邮箱,用户名,以及描述内容, –verbose可以输入详细的debug。</p>\n<p>注册完成后可以使用一下命令查看注册信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk me</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"提交-project-podspec\"><a href=\"#提交-project-podspec\" class=\"headerlink\" title=\"提交{project}.podspec\"></a>提交{project}.podspec</h4><p>在{project}.podspec文件的路径下执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push H<span class=\"built_in\">cd</span>CachePlayer.podspec</span><br></pre></td></tr></table></figure></p>\n<p>这条命令做了如下三件事:</p>\n<ul>\n<li>验证本地的podspec文件,也可以使用 pod lib lint验证</li>\n<li>上传podspec文件到trunk服务</li>\n<li>将{project}.podspec文件转为{poject}.podspec.json文件</li>\n</ul>\n<p>如果没有报错那么就成功了。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>终端执行 pod search HcdCachePlayer就可以找到了,如果没有找到 pod setup再试一下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; H<span class=\"built_in\">cd</span>CachePlayer (<span class=\"number\">0.0</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\">   一个带缓存的视频播放器H<span class=\"built_in\">cd</span>CachePlayer</span><br><span class=\"line\">   pod <span class=\"string\">'HcdCachePlayer'</span>, <span class=\"string\">'~&gt; 0.0.1'</span></span><br><span class=\"line\">   - Homepage: https://github.com/Jvaeyhcd/H<span class=\"built_in\">cd</span>CachePlayer</span><br><span class=\"line\">   - Source:   https://github.com/Jvaeyhcd/H<span class=\"built_in\">cd</span>CachePlayer.git</span><br><span class=\"line\">   - Versions: <span class=\"number\">0.0</span>.<span class=\"number\">1</span> [master repo]</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里遇到一个问题创建成功了，但是另外一台电脑却收不到。</p>\n</blockquote>\n<h4 id=\"协同工作\"><a href=\"#协同工作\" class=\"headerlink\" title=\"协同工作\"></a>协同工作</h4><p>当需要其他人来共同维护你的代码,需要提供权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk add-owner H<span class=\"built_in\">cd</span>CachePlayer *email*</span><br></pre></td></tr></table></figure></p>\n<p>参考文章：</p>\n<p><a href=\"http://foggry.com/blog/2016/03/23/cocoapods-xiang-jie-zhi-geng-xin-pian/\" target=\"_blank\" rel=\"external\">CocoaPods 详解之—-更新篇</a></p>\n"},{"title":"全屏设置setStatusBarOrientation 未生效的解决办法","url":"http://www.jvaeyhcd.cc/2016/07/06/全屏设置setStatusBarOrientation-未生效的解决办法/","content":"<p>最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。<br>手动调用了如下代码，但是并没有什么卵用：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication]setStatusBarOrientation:<span class=\"built_in\">UIInterfaceOrientationLandscapeRight</span>];</span><br></pre></td></tr></table></figure></p>\n<p>经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：</p>\n<a id=\"more\"></a>\n<ol>\n<li>首先在Info.plist中设置View controller-based status bar appearance为NO</li>\n<li>需要旋转的视频ViewController的方法<code>- (BOOL)shouldAutorotate</code>要返回NO，不然手动旋转不会生效。</li>\n</ol>\n<blockquote>\n<p>Tips:本以为到了这里问题就应该已经解决了，but问题并没有得到解决,覆写<code>- (BOOL)shouldAutorotate</code>方法并为生效，或许此时你一定会说:”WTF?”</p>\n</blockquote>\n<p>最后的原因是:<span style=\"textColor:'#00ff00'\">由于UIViewController放置在Navigation中，而由于Navigation不人性化的设计，navigation的- (BOOL)shouldAutorotate是不会根据显示ViewController的- (BOOL)shouldAutorotate设置的值来改变的。</span></p>\n<p>最后最终的解决办法是将下面这段代码放在AppDelegate.m的最后面，这个时候NavigationController就会根据你显示的ViewController改变返回值了，然后再去ViewController覆写方法，返回NO，方法生效了！<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UINavigationController</span> (<span class=\"title\">Rotation</span>)  </span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)shouldAutorotate  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span><span class=\"variable\">.viewControllers</span> lastObject] shouldAutorotate];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)supportedInterfaceOrientations  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span><span class=\"variable\">.viewControllers</span> lastObject] supportedInterfaceOrientations];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span><span class=\"variable\">.viewControllers</span> lastObject] preferredInterfaceOrientationForPresentation];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"NSURLErrorDomain Code=-1002 “Unsupported URL”","url":"http://www.jvaeyhcd.cc/2016/06/30/NSURLErrorDomain-Code-1002-“unsupported-URL”/","content":"<p>在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。</p>\n<h2 id=\"问题概述\"><a href=\"#问题概述\" class=\"headerlink\" title=\"问题概述\"></a>问题概述</h2><p>我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>通过对比发现（分析问题常见的方法），当这个接口传入了中文后将会报错，如果不传中文接口并不会报错，所以我基本上就可以锁定问题就出在中文字符的问题上。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>找到了问题出现的原因后其它的一切都变得简单了，因为传入中文字符会出现服务器不能解析然后报错的情况，所以我们应该将传入的中文字符用UTF8编码一下后再通过接口传递给服务器。（问题轻松解决～～～就是这么简单）<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//text为传入参数</span></span><br><span class=\"line\">text = [text stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CocosPods使用过程中遇到的一些问题，以及解决办法","url":"http://www.jvaeyhcd.cc/2016/06/16/CocosPods使用过程中遇到的一些问题，以及解决办法/","content":"<p>经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。</p>\n<h2 id=\"library-not-found-for-lPods\"><a href=\"#library-not-found-for-lPods\" class=\"headerlink\" title=\"library not found for -lPods\"></a>library not found for -lPods</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld: library not found <span class=\"keyword\">for</span> <span class=\"operator\">-l</span>Pods</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>于是在网上搜索了一番找打了一篇帖子：<a href=\"http://www.cocoachina.com/bbs/read.php?tid-253614.html\" target=\"_blank\" rel=\"external\">http://www.cocoachina.com/bbs/read.php?tid-253614.html</a></p>\n<p>各种各样的回复都有，我最终的解决步骤如下：</p>\n<ol>\n<li>更新cocospods到最新版本，注：gem的最新的镜像地址：<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"external\">https://gems.ruby-china.org/</a>， 淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。</li>\n<li>在Build Setting &gt; Other Linker Flag 中删除所有，只留下$(inherited)轻松解决。</li>\n</ol>\n<p>其实还有一个原因就是我的工程目录名称和Finder工程目录的文件夹不一致造成的。</p>\n"},{"title":"Objective-C身份证验证实现","url":"http://www.jvaeyhcd.cc/2016/06/15/Objective-C身份证验证实现/","content":"<p>最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。</p>\n<p>直接上代码</p>\n<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)isValidIdCardNum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *value = [<span class=\"keyword\">self</span> <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    value = [value stringByReplacingOccurrencesOfString:<span class=\"string\">@\"X\"</span> withString:<span class=\"string\">@\"x\"</span>];</span><br><span class=\"line\">    value = [value stringByTrimmingCharactersInSet:[<span class=\"built_in\">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        length = (<span class=\"keyword\">int</span>)value<span class=\"variable\">.length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length != <span class=\"number\">15</span> &amp;&amp; length !=<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省份代码</span></span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *areasArray =@[<span class=\"string\">@\"11\"</span>, <span class=\"string\">@\"12\"</span>, <span class=\"string\">@\"13\"</span>, <span class=\"string\">@\"14\"</span>, <span class=\"string\">@\"15\"</span>, <span class=\"string\">@\"21\"</span>, <span class=\"string\">@\"22\"</span>, <span class=\"string\">@\"23\"</span>, <span class=\"string\">@\"31\"</span>, <span class=\"string\">@\"32\"</span>, <span class=\"string\">@\"33\"</span>, <span class=\"string\">@\"34\"</span>, <span class=\"string\">@\"35\"</span>, <span class=\"string\">@\"36\"</span>, <span class=\"string\">@\"37\"</span>, <span class=\"string\">@\"41\"</span>, <span class=\"string\">@\"42\"</span>, <span class=\"string\">@\"43\"</span>, <span class=\"string\">@\"44\"</span>, <span class=\"string\">@\"45\"</span>, <span class=\"string\">@\"46\"</span>, <span class=\"string\">@\"50\"</span>, <span class=\"string\">@\"51\"</span>, <span class=\"string\">@\"52\"</span>, <span class=\"string\">@\"53\"</span>, <span class=\"string\">@\"54\"</span>, <span class=\"string\">@\"61\"</span>, <span class=\"string\">@\"62\"</span>, <span class=\"string\">@\"63\"</span>, <span class=\"string\">@\"64\"</span>, <span class=\"string\">@\"65\"</span>, <span class=\"string\">@\"71\"</span>, <span class=\"string\">@\"81\"</span>, <span class=\"string\">@\"82\"</span>, <span class=\"string\">@\"91\"</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *valueStart2 = [value substringToIndex:<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">BOOL</span> areaFlag = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *areaCode <span class=\"keyword\">in</span> areasArray) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class=\"line\">            areaFlag = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areaFlag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">NSRegularExpression</span> *regularExpression;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> numberofMatch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> year = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">15</span>:</span><br><span class=\"line\">            year = [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">2</span>)]<span class=\"variable\">.intValue</span> +<span class=\"number\">1900</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> ==<span class=\"number\">0</span> || (year % <span class=\"number\">100</span> ==<span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">4</span> ==<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@\"^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$\"</span>                   options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@\"^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$\"</span>           options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class=\"built_in\">NSMatchingReportProgress</span> range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, value<span class=\"variable\">.length</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numberofMatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">18</span>:</span><br><span class=\"line\">            year = [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">4</span>)]<span class=\"variable\">.intValue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> ==<span class=\"number\">0</span> || (year % <span class=\"number\">100</span> ==<span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">4</span> ==<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@\"^[1-9][0-9]&#123;5&#125;19|20[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$\"</span>options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                regularExpression = [[<span class=\"built_in\">NSRegularExpression</span> alloc] initWithPattern:<span class=\"string\">@\"^[1-9][0-9]&#123;5&#125;19|20[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$\"</span></span><br><span class=\"line\">                                                                         options:<span class=\"built_in\">NSRegularExpressionCaseInsensitive</span> error:<span class=\"literal\">nil</span>];<span class=\"comment\">// 测试出生日期的合法性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class=\"built_in\">NSMatchingReportProgress</span> range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, value<span class=\"variable\">.length</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numberofMatch &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> S = ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">10</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">7</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">11</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">9</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">12</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">10</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">3</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">13</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">5</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">4</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">14</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">8</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">5</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">15</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">4</span> + ([value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">6</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">16</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span>) *<span class=\"number\">2</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">7</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> *<span class=\"number\">1</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">8</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> *<span class=\"number\">6</span> + [value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">9</span>,<span class=\"number\">1</span>)]<span class=\"variable\">.intValue</span> *<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> Y = S % <span class=\"number\">11</span>;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *M = <span class=\"string\">@\"F\"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">NSString</span> *JYM = <span class=\"string\">@\"10X98765432\"</span>;</span><br><span class=\"line\">                M = [JYM substringWithRange:<span class=\"built_in\">NSMakeRange</span>(Y,<span class=\"number\">1</span>)]; <span class=\"comment\">// 判断校验位</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ([M isEqualToString:[[value substringWithRange:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">17</span>,<span class=\"number\">1</span>)] uppercaseString]]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;<span class=\"comment\">// 检测ID的校验位</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码验证十分全面。</p>\n"},{"title":"RXSwift基础","url":"http://www.jvaeyhcd.cc/2016/06/08/RXSwift基础/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应</p>\n<h2 id=\"为什么发用RxSwift\"><a href=\"#为什么发用RxSwift\" class=\"headerlink\" title=\"为什么发用RxSwift\"></a>为什么发用RxSwift</h2><p>一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式</p>\n<ul>\n<li>Observable的创建和订阅</li>\n<li>Subjects的使用</li>\n<li>Combination：Observable的混合操作</li>\n<li>Transforming：Observable的转换操作</li>\n<li>Filtering：Observable消息元素的过滤操作</li>\n<li>对Observable元素做运算操作</li>\n<li>Connectable操作</li>\n<li>错误处理</li>\n<li>debug</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"消息的订阅方式\"><a href=\"#消息的订阅方式\" class=\"headerlink\" title=\"消息的订阅方式\"></a>消息的订阅方式</h2><p>这些都是Observable的方法，参数都是闭包，闭包是观察者</p>\n<ol>\n<li>subscribe(on:(Event) -&gt; void)：订阅所有消息(Next, Error, and Completed)</li>\n<li>subscribeNext((Element) -&gt; void)：只订阅Next</li>\n<li>subscribeError((ErrorType) -&gt; void)：只订阅Error</li>\n<li>subscribeCompleted(() -&gt; Void)：只订阅Completed</li>\n<li>subscribe(onNext:(Element) -&gt; void, onError:(ErrorType) -&gt; void, onCompleted:() -&gt; Void, onDisposed:() -&gt; Void)订阅多个消息</li>\n</ol>\n<h2 id=\"释放分配的资源\"><a href=\"#释放分配的资源\" class=\"headerlink\" title=\"释放分配的资源\"></a>释放分配的资源</h2><p>订阅者可以通过调用.dispose()来释放分配的资源，但通过DisposeBag来管理或者通过takeUntil来自动释放更好</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">subscription.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequence</span><br><span class=\"line\">    .takeUntil(<span class=\"keyword\">self</span>.rx_deallocated)</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Observable的创建和订阅\"><a href=\"#Observable的创建和订阅\" class=\"headerlink\" title=\"Observable的创建和订阅\"></a>Observable的创建和订阅</h2><p>Observable序列分为两类：</p>\n<ul>\n<li>冷：只有当有观察者订阅这个序列时，序列才发射值</li>\n<li>热：序列创建时就开始发射值</li>\n</ul>\n<h3 id=\"never-创建即不会完成也不会发消息的Observable\"><a href=\"#never-创建即不会完成也不会发消息的Observable\" class=\"headerlink\" title=\"never()创建即不会完成也不会发消息的Observable\"></a>never()创建即不会完成也不会发消息的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> neverSequence = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.never()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> neverSequenceSubscription = neverSequence</span><br><span class=\"line\">        .subscribe &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"This will never be printed\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">neverSequenceSubscription.addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><img src=\"./never.png\" width=\"400/\"></p>\n<h3 id=\"empty-创建只会发送一次完成消息的Observable\"><a href=\"#empty-创建只会发送一次完成消息的Observable\" class=\"headerlink\" title=\"empty()创建只会发送一次完成消息的Observable\"></a>empty()创建只会发送一次完成消息的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Completed</p>\n<p><img src=\"./empty.png\" width=\"400\"></p>\n<h3 id=\"just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\"><a href=\"#just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\" class=\"headerlink\" title=\"just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息\"></a>just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.just(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果传递null给just，它将返回一个发送null消息的Observable，不要传入错误的参数，否则将会得到一个空的Observable</p>\n</blockquote>\n<p><code>output:</code><br>Next(🔴)<br>Completed<br><br><br><img src=\"./just.png\" width=\"400\"></p>\n<h3 id=\"of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略\"><a href=\"#of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略\" class=\"headerlink\" title=\"of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略\"></a>of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐭\"</span>, <span class=\"string\">\"🐹\"</span>)</span><br><span class=\"line\">       .subscribeNext &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐶<br>🐱<br>🐭<br>🐹</p>\n<h3 id=\"create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable\"><a href=\"#create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable\" class=\"headerlink\" title=\"create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable\"></a>create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myJust = &#123; (element: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            observer.on(.<span class=\"type\">Next</span>(element))</span><br><span class=\"line\">            observer.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> myJust(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🔴)<br>Completed<br><br><br><img src=\"./create.png\" width=\"400\"><br><br></p>\n<h3 id=\"range-创建一个发送一个范围的整数的Observable，发送完后发送Completed\"><a href=\"#range-创建一个发送一个范围的整数的Observable，发送完后发送Completed\" class=\"headerlink\" title=\"range()创建一个发送一个范围的整数的Observable，发送完后发送Completed\"></a>range()创建一个发送一个范围的整数的Observable，发送完后发送Completed</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, <span class=\"built_in\">count</span>: <span class=\"number\">10</span>)</span><br><span class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(1)<br>Next(2)<br>Next(3)<br>Next(4)<br>Next(5)<br>Next(6)<br>Next(7)<br>Next(8)<br>Next(9)<br>Next(10)<br>Completed</p>\n<h3 id=\"repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\"><a href=\"#repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\" class=\"headerlink\" title=\"repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送\"></a>repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\">        .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🔴<br>🔴<br>🔴</p>\n<blockquote>\n<p>注：take可以用于所有Observable指定限制元素个数</p>\n</blockquote>\n<h3 id=\"generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素\"><a href=\"#generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素\" class=\"headerlink\" title=\"generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素\"></a>generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">Observable</span>.generate(</span><br><span class=\"line\">            initialState: <span class=\"number\">0</span>,</span><br><span class=\"line\">            condition: &#123; $<span class=\"number\">0</span> &lt; <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">            iterate: &#123; $<span class=\"number\">0</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><strong>iterate：每次condition之后都会对当前值做一次相应迭代运算</strong></p>\n<p><code>output:</code><br><br>0<br>1<br>2</p>\n<h3 id=\"deferred-序列为每一个订阅者创建一个全新的Observable\"><a href=\"#deferred-序列为每一个订阅者创建一个全新的Observable\" class=\"headerlink\" title=\"deferred()序列为每一个订阅者创建一个全新的Observable\"></a>deferred()序列为每一个订阅者创建一个全新的Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> deferredSequence = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.deferred &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Creating <span class=\"subst\">\\(<span class=\"built_in\">count</span>)</span>\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">count</span> += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Emitting...\"</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">deferredSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">deferredSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：deferred序列只有在一个观察者订阅它的时候才执行它的创建Observable方法，产生一个全新的Observable**</p>\n</blockquote>\n<p><code>output:</code><br>Creating 1<br>Emitting…<br>🐶<br>🐱<br>🐵<br>Creating 2<br>Emitting…<br>🐶<br>🐱<br>🐵<br><img src=\"./deferred.png\" width=\"400\"><br><br></p>\n<h3 id=\"error-创建一个不发送元素的Observable，然后立即发送error并终止\"><a href=\"#error-创建一个不发送元素的Observable，然后立即发送error并终止\" class=\"headerlink\" title=\"error()创建一个不发送元素的Observable，然后立即发送error并终止\"></a>error()创建一个不发送元素的Observable，然后立即发送error并终止</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.error(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Error(Test)</p>\n<h3 id=\"doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\"><a href=\"#doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\" class=\"headerlink\" title=\"doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息\"></a>doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🍎\"</span>, <span class=\"string\">\"🍐\"</span>, <span class=\"string\">\"🍊\"</span>, <span class=\"string\">\"🍋\"</span>)</span><br><span class=\"line\">        .doOn &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Intercepted:\"</span>, $<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">        .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注： doOn(onNext:onError:onCompleted:)为不同订阅方式分别指定</p>\n</blockquote>\n<p><code>output:</code><br>Intercepted: Next(🍎)<br>🍎<br>Intercepted: Next(🍐)<br>🍐<br>Intercepted: Next(🍊)<br>🍊<br>Intercepted: Next(🍋)<br>🍋<br>Intercepted: Completed</p>\n<p><img src=\"./doOn.png\" width=\"400\"><br><br></p>\n<h3 id=\"toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable\"><a href=\"#toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable\" class=\"headerlink\" title=\"toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable\"></a>toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable</h3><p><br></p>\n<h2 id=\"Subjects的使用\"><a href=\"#Subjects的使用\" class=\"headerlink\" title=\"Subjects的使用\"></a>Subjects的使用</h2><p>Subjects理解为observer和Observable之间的桥梁或代理，即扮演着observer又扮演着Observable，规定了添加的observer如何接收消息</p>\n<h3 id=\"PublishSubject向所有订阅者广播从订阅之后的事件\"><a href=\"#PublishSubject向所有订阅者广播从订阅之后的事件\" class=\"headerlink\" title=\"PublishSubject向所有订阅者广播从订阅之后的事件\"></a>PublishSubject向所有订阅者广播从订阅之后的事件</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"1\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"2\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🅰️\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🅱️\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)</p>\n<h3 id=\"ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\"><a href=\"#ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\" class=\"headerlink\" title=\"ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息\"></a>ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject = <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"1\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"2\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🅰️\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🅱️\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)</p>\n<h3 id=\"BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\"><a href=\"#BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\" class=\"headerlink\" title=\"BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息\"></a>BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"1\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"2\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🅰️\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🅱️\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.addObserver(<span class=\"string\">\"3\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🍐\"</span>)</span><br><span class=\"line\">subject.onNext(<span class=\"string\">\"🍊\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>note：以上都不会自动发送Completed当它们被释放的时候</strong></p>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🔴)<br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)<br>Subscription: 3 Event: Next(🅱️)<br>Subscription: 1 Event: Next(🍐)<br>Subscription: 2 Event: Next(🍐)<br>Subscription: 3 Event: Next(🍐)<br>Subscription: 1 Event: Next(🍊)<br>Subscription: 2 Event: Next(🍊)<br>Subscription: 3 Event: Next(🍊)</p>\n<h3 id=\"Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\"><a href=\"#Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\" class=\"headerlink\" title=\"Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist\"></a>Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable().addObserver(<span class=\"string\">\"1\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">variable.value = <span class=\"string\">\"🐶\"</span></span><br><span class=\"line\">variable.value = <span class=\"string\">\"🐱\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable().addObserver(<span class=\"string\">\"2\"</span>).addDisposableTo(disposeBag)</span><br><span class=\"line\">variable.value = <span class=\"string\">\"🅰️\"</span></span><br><span class=\"line\">variable.value = <span class=\"string\">\"🅱️\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注:variable.asObservable()实际是获取variable中的BehaviorSubject。variable也没有onNext，而是通过value来获取或添加元素，它会添加元素到BehaviorSubject</p>\n</blockquote>\n<p><code>output:</code><br>Subscription: 1 Event: Next(🔴)<br>Subscription: 1 Event: Next(🐶)<br>Subscription: 1 Event: Next(🐱)<br>Subscription: 2 Event: Next(🐱)<br>Subscription: 1 Event: Next(🅰️)<br>Subscription: 2 Event: Next(🅰️)<br>Subscription: 1 Event: Next(🅱️)<br>Subscription: 2 Event: Next(🅱️)<br>Subscription: 1 Event: Completed<br>Subscription: 2 Event: Completed</p>\n<h2 id=\"Combination：Observable的混合操作\"><a href=\"#Combination：Observable的混合操作\" class=\"headerlink\" title=\"Combination：Observable的混合操作\"></a>Combination：Observable的混合操作</h2><h3 id=\"startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\"><a href=\"#startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\" class=\"headerlink\" title=\"startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈\"></a>startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐭\"</span>, <span class=\"string\">\"🐹\"</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">\"1️⃣\"</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">\"2️⃣\"</span>)</span><br><span class=\"line\">     .startWith(<span class=\"string\">\"3️⃣\"</span>, <span class=\"string\">\"🅰️\"</span>, <span class=\"string\">\"🅱️\"</span>)</span><br><span class=\"line\">     .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">     .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>3️⃣<br>🅰️<br>🅱️<br>2️⃣<br>1️⃣<br>🐶<br>🐱<br>🐭<br>🐹<br><a href=\"http://reactivex.io/documentation/operators/startwith.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/startwith.html</a></p>\n<h3 id=\"merge-按顺序混合多个Observable为一个新Observable\"><a href=\"#merge-按顺序混合多个Observable为一个新Observable\" class=\"headerlink\" title=\"merge()按顺序混合多个Observable为一个新Observable\"></a>merge()按顺序混合多个Observable为一个新Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject3 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(subject1, subject2, subject3)</span><br><span class=\"line\">    .merge()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🅰️\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🅱️\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"①\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"②\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🆎\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject3.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"③\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅰️<br>🅱️<br>①<br>②<br>🆎<br>③<br><a href=\"http://reactivex.io/documentation/operators/merge.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/merge.html</a></p>\n<h3 id=\"zip-相当于并排的将多个Observable合并成一个新Observable\"><a href=\"#zip-相当于并排的将多个Observable合并成一个新Observable\" class=\"headerlink\" title=\"zip()相当于并排的将多个Observable合并成一个新Observable\"></a>zip()相当于并排的将多个Observable合并成一个新Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringSubject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> intSubject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.<span class=\"built_in\">zip</span>(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">\"<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">\"🅰️\"</span>)</span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">\"🅱️\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">\"🆎\"</span>)</span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅰️ 1<br>🅱️ 2<br>🆎 3</p>\n<p><a href=\"http://reactivex.io/documentation/operators/zip.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/zip.html</a><br><br></p>\n<h3 id=\"combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\"><a href=\"#combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\" class=\"headerlink\" title=\"combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合\"></a>combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringSubject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> intSubject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.combineLatest(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"string\">\"<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">\"🅰️\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">\"🅱️\"</span>)</span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stringSubject.onNext(<span class=\"string\">\"🆎\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🅱️ 1<br>🅱️ 2<br>🆎 2<br><a href=\"http://reactivex.io/documentation/operators/combinelatest.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/combinelatest.html</a></p>\n<p>在数组上的应用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stringObservable = <span class=\"type\">Observable</span>.just(<span class=\"string\">\"❤️\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> fruitObservable = [<span class=\"string\">\"🍎\"</span>, <span class=\"string\">\"🍐\"</span>, <span class=\"string\">\"🍊\"</span>].toObservable()</span><br><span class=\"line\"><span class=\"keyword\">let</span> animalObservable = <span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐭\"</span>, <span class=\"string\">\"🐹\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[stringObservable, fruitObservable, animalObservable].combineLatest &#123;</span><br><span class=\"line\">        <span class=\"string\">\"<span class=\"subst\">\\($<span class=\"number\">0</span>[<span class=\"number\">0</span>])</span> <span class=\"subst\">\\($<span class=\"number\">0</span>[<span class=\"number\">1</span>])</span> <span class=\"subst\">\\($<span class=\"number\">0</span>[<span class=\"number\">2</span>])</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><strong>note：所有集合的类型必须一样</strong></p>\n<p><code>output:</code><br>❤️ 🍊 🐶<br>❤️ 🍊 🐱<br>❤️ 🍊 🐭<br>❤️ 🍊 🐹</p>\n<h3 id=\"switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\"><a href=\"#switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\" class=\"headerlink\" title=\"switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息\"></a>switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"⚽️\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"🍎\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable()</span><br><span class=\"line\">    .switchLatest()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🏈\"</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🏀\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value = subject2</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"⚾️\"</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🎾\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"🍐\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value = subject1</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>⚽️<br>🏈<br>🏀<br>🍎<br>🍐<br>🎾<br><strong>note：⚽️ 被忽略</strong><br><br><br><img src=\"./switch.png\" width=\"400\"><br><br></p>\n<h2 id=\"Transforming：Observable的转换操作\"><a href=\"#Transforming：Observable的转换操作\" class=\"headerlink\" title=\"Transforming：Observable的转换操作\"></a>Transforming：Observable的转换操作</h2><h3 id=\"map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\"><a href=\"#map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\" class=\"headerlink\" title=\"map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列\"></a>map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>1<br>4<br>9<br><a href=\"http://reactivex.io/documentation/operators/map.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/map.html</a></p>\n<h3 id=\"scan-可以迭代的操作，并且可以设置一个初始的迭代值\"><a href=\"#scan-可以迭代的操作，并且可以设置一个初始的迭代值\" class=\"headerlink\" title=\"scan()可以迭代的操作，并且可以设置一个初始的迭代值\"></a>scan()可以迭代的操作，并且可以设置一个初始的迭代值</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .scan(<span class=\"number\">1</span>) &#123; aggregateValue, newValue <span class=\"keyword\">in</span></span><br><span class=\"line\">        aggregateValue + newValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>11<br>111<br>1111<br><a href=\"http://reactivex.io/documentation/operators/scan.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/scan.html</a></p>\n<h2 id=\"Filtering：Observable消息元素的过滤操作\"><a href=\"#Filtering：Observable消息元素的过滤操作\" class=\"headerlink\" title=\"Filtering：Observable消息元素的过滤操作\"></a>Filtering：Observable消息元素的过滤操作</h2><h3 id=\"filter-发出满足bool条件的元素\"><a href=\"#filter-发出满足bool条件的元素\" class=\"headerlink\" title=\"filter()发出满足bool条件的元素\"></a>filter()发出满足bool条件的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(</span><br><span class=\"line\">    <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"🐹\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">filter</span> &#123;</span><br><span class=\"line\">        $<span class=\"number\">0</span> == <span class=\"string\">\"🐱\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐱<br>🐱<br><a href=\"http://reactivex.io/documentation/operators/filter.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/filter.html</a></p>\n<h3 id=\"distinctUntilChanged-过滤掉连续的相同元素\"><a href=\"#distinctUntilChanged-过滤掉连续的相同元素\" class=\"headerlink\" title=\"distinctUntilChanged()过滤掉连续的相同元素\"></a>distinctUntilChanged()过滤掉连续的相同元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐵\"</span>, <span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\">    .distinctUntilChanged()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐷<br>🐱<br>🐵<br>🐱<br><a href=\"http://reactivex.io/documentation/operators/distinct.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/distinct.html</a></p>\n<h3 id=\"elementAt-只发送指定下标的元素\"><a href=\"#elementAt-只发送指定下标的元素\" class=\"headerlink\" title=\"elementAt()只发送指定下标的元素\"></a>elementAt()只发送指定下标的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">    .elementAt(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br><a href=\"http://reactivex.io/documentation/operators/elementat.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/elementat.html</a></p>\n<h3 id=\"single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息\"><a href=\"#single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息\" class=\"headerlink\" title=\"single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息\"></a>single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">    .single&#123; $<span class=\"number\">0</span> &lt;= <span class=\"number\">6</span>&#125;<span class=\"comment\">//如果是==这种确切的判断，将没有Error消息而是Completed消息</span></span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(1)<br>Error(Sequence contains more than one element.)</p>\n<h3 id=\"take-仅发送从第一个元素开始指定个数的元素\"><a href=\"#take-仅发送从第一个元素开始指定个数的元素\" class=\"headerlink\" title=\"take()仅发送从第一个元素开始指定个数的元素\"></a>take()仅发送从第一个元素开始指定个数的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐱<br>🐰<br>🐶<br><a href=\"http://reactivex.io/documentation/operators/take.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/take.html</a></p>\n<h3 id=\"takeLast-与take不同的是takeLast是从末尾开始\"><a href=\"#takeLast-与take不同的是takeLast是从末尾开始\" class=\"headerlink\" title=\"takeLast()与take不同的是takeLast是从末尾开始\"></a>takeLast()与take不同的是takeLast是从末尾开始</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">    .takeLast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/takelast.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/takelast.html</a></p>\n<h3 id=\"takeWhile-发送从头开始的满足条件的元素\"><a href=\"#takeWhile-发送从头开始的满足条件的元素\" class=\"headerlink\" title=\"takeWhile()发送从头开始的满足条件的元素\"></a>takeWhile()发送从头开始的满足条件的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .takeWhile &#123; $<span class=\"number\">0</span> &lt; <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>1<br>2<br>3<br><img src=\"./takeWhile.png\" width=\"400\"><br><br></p>\n<h3 id=\"takeUntil：在与之关联的另一Observable发送元素前发送元素\"><a href=\"#takeUntil：在与之关联的另一Observable发送元素前发送元素\" class=\"headerlink\" title=\"takeUntil：在与之关联的另一Observable发送元素前发送元素\"></a>takeUntil：在与之关联的另一Observable发送元素前发送元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> referenceSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence</span><br><span class=\"line\">    .takeUntil(referenceSequence)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐰\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">referenceSequence.onNext(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐸\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐷\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐵\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🐱)<br>Next(🐰)<br>Next(🐶)<br>Completed<br><br><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/takeuntil.html</a></p>\n<h3 id=\"skip-与take相反，它是不发送\"><a href=\"#skip-与take相反，它是不发送\" class=\"headerlink\" title=\"skip()与take相反，它是不发送\"></a>skip()与take相反，它是不发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">    .skip(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐶<br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/skip.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/skip.html</a></p>\n<h3 id=\"skipWhile-与takeWhile相反，它是不发送\"><a href=\"#skipWhile-与takeWhile相反，它是不发送\" class=\"headerlink\" title=\"skipWhile()与takeWhile相反，它是不发送\"></a>skipWhile()与takeWhile相反，它是不发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .skipWhile &#123; $<span class=\"number\">0</span> &lt; <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>4<br>5<br>6<br><br><br><img src=\"./skipWhile.png\" width=\"400\"><br><br></p>\n<h3 id=\"skipWhileWithIndex-只是skipWhile基础上增加了一个下标index\"><a href=\"#skipWhileWithIndex-只是skipWhile基础上增加了一个下标index\" class=\"headerlink\" title=\"skipWhileWithIndex()只是skipWhile基础上增加了一个下标index\"></a>skipWhileWithIndex()只是skipWhile基础上增加了一个下标index</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">\"🐱\"</span>, <span class=\"string\">\"🐰\"</span>, <span class=\"string\">\"🐶\"</span>, <span class=\"string\">\"🐸\"</span>, <span class=\"string\">\"🐷\"</span>, <span class=\"string\">\"🐵\"</span>)</span><br><span class=\"line\">    .skipWhileWithIndex &#123; element, index <span class=\"keyword\">in</span></span><br><span class=\"line\">        index &lt; <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵</p>\n<h3 id=\"skipUntil-与takeUntil相反，它是之后发送\"><a href=\"#skipUntil-与takeUntil相反，它是之后发送\" class=\"headerlink\" title=\"skipUntil()与takeUntil相反，它是之后发送\"></a>skipUntil()与takeUntil相反，它是之后发送</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> referenceSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence</span><br><span class=\"line\">    .skipUntil(referenceSequence)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐰\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">referenceSequence.onNext(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐸\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐷\"</span>)</span><br><span class=\"line\">sourceSequence.onNext(<span class=\"string\">\"🐵\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🐸<br>🐷<br>🐵<br><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/skipuntil.html</a></p>\n<h2 id=\"对Observable元素做运算操作\"><a href=\"#对Observable元素做运算操作\" class=\"headerlink\" title=\"对Observable元素做运算操作\"></a>对Observable元素做运算操作</h2><h3 id=\"toArray-将Observable序列转换成array并发送，然后终止\"><a href=\"#toArray-将Observable序列转换成array并发送，然后终止\" class=\"headerlink\" title=\"toArray()将Observable序列转换成array并发送，然后终止\"></a>toArray()将Observable序列转换成array并发送，然后终止</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, <span class=\"built_in\">count</span>: <span class=\"number\">10</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<br>Completed<br><br><br><img src=\"./toArray.png\" width=\"400\"><br><br></p>\n<h3 id=\"reduce-迭代运算，通过指定初始迭代值和运算符\"><a href=\"#reduce-迭代运算，通过指定初始迭代值和运算符\" class=\"headerlink\" title=\"reduce()迭代运算，通过指定初始迭代值和运算符\"></a>reduce()迭代运算，通过指定初始迭代值和运算符</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">reduce</span>(<span class=\"number\">1</span>, accumulator: +)</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code>=<br>1111<br><a href=\"http://reactivex.io/documentation/operators/reduce.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/reduce.html</a></p>\n<h3 id=\"concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\"><a href=\"#concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\" class=\"headerlink\" title=\"concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素\"></a>concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject1 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"🍎\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subject2 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.asObservable()</span><br><span class=\"line\">    .concat()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🍐\"</span>)</span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🍊\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">variable.value = subject2</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"I would be ignored\"</span>)</span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subject1.onNext(<span class=\"string\">\"🍹\"</span>)</span><br><span class=\"line\">subject1.onCompleted()</span><br><span class=\"line\"></span><br><span class=\"line\">subject2.onNext(<span class=\"string\">\"🐭\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(🍎)<br>Next(🍐)<br>Next(🍊)<br>Next(🍹)<br>Next(🐱)<br>Next(🐭)<br><a href=\"http://reactivex.io/documentation/operators/concat.html\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators/concat.html</a></p>\n<h2 id=\"Connectable操作\"><a href=\"#Connectable操作\" class=\"headerlink\" title=\"Connectable操作\"></a>Connectable操作</h2><p>Connectable操作，Connectable Observable操作跟普通的Observable区别在于，Connectable Observable只有在它们的connect()方法调用后才开始发送元素，因此可以等到所有订阅者都订阅后才开始发送元素，有点像事务一样</p>\n<h3 id=\"publish-将一个普通序列转换成Connectable-Observable序列\"><a href=\"#publish-将一个普通序列转换成Connectable-Observable序列\" class=\"headerlink\" title=\"publish()将一个普通序列转换成Connectable Observable序列\"></a>publish()将一个普通序列转换成Connectable Observable序列</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(#function)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence = <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .publish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription 1:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription 2:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription 3:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subscription 1:, Event: 0<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 3:, Event: 3<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 4<br><br><br><img src=\"./publish.png\" width=\"400\"><br><br></p>\n<h3 id=\"replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\"><a href=\"#replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\" class=\"headerlink\" title=\"replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素\"></a>replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(#function)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence = <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .replay(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription 1:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription 2:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription 3:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subscription 1:, Event: 0<br>Subscription 2:, Event: 0<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 0<br>Subscription 3:, Event: 1<br>Subscription 3:, Event: 2<br>Subscription 3:, Event: 3<br>Subscription 3:, Event: 4<br>Subscription 1:, Event: 5<br>Subscription 2:, Event: 5<br>Subscription 3:, Event: 5<br><br><br><img src=\"./replay.png\" width=\"400\"><br><br></p>\n<h3 id=\"multicast-需要传入一个subject，通过subject来管理向订阅者发送消息\"><a href=\"#multicast-需要传入一个subject，通过subject来管理向订阅者发送消息\" class=\"headerlink\" title=\"multicast()需要传入一个subject，通过subject来管理向订阅者发送消息\"></a>multicast()需要传入一个subject，通过subject来管理向订阅者发送消息</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printExampleHeader(#function)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">_</span> = subject</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Subject: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> intSequence = <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(<span class=\"number\">1</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .multicast(subject)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\tSubscription 1:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">2</span>) &#123; intSequence.connect() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     <span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\tSubscription 2:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">     <span class=\"number\">_</span> = intSequence</span><br><span class=\"line\">        .subscribeNext &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"\\tSubscription 3:, Event: <span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>output:</code></p>\n<p>delay 2</p>\n<p>Subject: 0<br>Subscription 1:, Event: 0<br> Subject: 1<br>Subscription 1:, Event: 1<br>Subscription 2:, Event: 1<br> Subject: 2<br>Subscription 1:, Event: 2<br>Subscription 2:, Event: 2<br> Subject: 3<br>Subscription 1:, Event: 3<br>Subscription 2:, Event: 3<br>Subscription 3:, Event: 3<br> Subject: 4<br>Subscription 1:, Event: 4<br>Subscription 2:, Event: 4<br>Subscription 3:, Event: 4<br> Subject: 5<br>Subscription 1:, Event: 5<br>Subscription 2:, Event: 5<br>Subscription 3:, Event: 5</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed\"><a href=\"#catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed\" class=\"headerlink\" title=\"catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed\"></a>catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatFails = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatFails</span><br><span class=\"line\">    .catchErrorJustReturn(<span class=\"string\">\"😊\"</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">\"😬\"</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">\"😨\"</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">\"😡\"</span>)</span><br><span class=\"line\">sequenceThatFails.onNext(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\">sequenceThatFails.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(😬)<br>Next(😨)<br>Next(😡)<br>Next(🔴)<br>Next(😊)<br>Completed</p>\n<h3 id=\"catchError-当捕获错误后会返回一个正常的Observable序列与之合并\"><a href=\"#catchError-当捕获错误后会返回一个正常的Observable序列与之合并\" class=\"headerlink\" title=\"catchError()当捕获错误后会返回一个正常的Observable序列与之合并\"></a>catchError()当捕获错误后会返回一个正常的Observable序列与之合并</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatErrors = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> recoverySequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors</span><br><span class=\"line\">    .catchError &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Error:\"</span>, $<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recoverySequence</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">\"😬\"</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">\"😨\"</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">\"😡\"</span>)</span><br><span class=\"line\">sequenceThatErrors.onNext(<span class=\"string\">\"🔴\"</span>)</span><br><span class=\"line\">sequenceThatErrors.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">recoverySequence.onNext(<span class=\"string\">\"😊\"</span>)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>Next(😬)<br>Next(😨)<br>Next(😡)<br>Next(🔴)<br>Error: Test<br>Next(😊)<br><br><br><img src=\"./catch.png\" width=\"400\"><br><br></p>\n<h3 id=\"retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\"><a href=\"#retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\" class=\"headerlink\" title=\"retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数\"></a>retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceThatErrors = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">    observer.onNext(<span class=\"string\">\"🍎\"</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">\"🍐\"</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">\"🍊\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        observer.onError(<span class=\"type\">Error</span>.<span class=\"type\">Test</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Error encountered\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">count</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    observer.onNext(<span class=\"string\">\"🐶\"</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">\"🐱\"</span>)</span><br><span class=\"line\">    observer.onNext(<span class=\"string\">\"🐭\"</span>)</span><br><span class=\"line\">    observer.onCompleted()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sequenceThatErrors</span><br><span class=\"line\">    .retry()</span><br><span class=\"line\">    .subscribeNext &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    .addDisposableTo(disposeBag)</span><br></pre></td></tr></table></figure>\n<p><code>output:</code><br>🍎<br>🍐<br>🍊<br>Error encountered<br>🍎<br>🍐<br>🍊<br>🐶<br>🐱<br>🐭<br><br><br><img src=\"./retry.png\" width=\"400\"><br><br></p>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><ol>\n<li>debug()会打印详细的信息</li>\n<li>RxSwift.resourceCount()打印资源分配计数</li>\n</ol>\n<blockquote>\n<p>注：不要在Release builds中使用</p>\n</blockquote>\n"},{"title":"Swift学习笔记之闭包","url":"http://www.jvaeyhcd.cc/2016/06/01/Swift学习笔记之闭包/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？</p>\n<blockquote>\n<p>闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。</p>\n</blockquote>\n<p>闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。</p>\n<a id=\"more\"></a>\n<p>全局和嵌套函数其实也是特殊的闭包，闭包采取如下三种形式之一：</p>\n<ul>\n<li>全局函数是一个有名字但不会捕获任何值的闭包</li>\n<li>嵌套函数是一个有名字并可以捕获其封闭函数内值的闭包</li>\n<li>闭包表达式是一个利用轻量级语法    所写的可以捕获其上下文中变量或常量值的匿名闭包</li>\n</ul>\n<p>Swift表达式拥有简洁的风格，并鼓励在常见场景进行语法优化，主要有如下优化方式</p>\n<ul>\n<li>利用上下文推断判断参数和返回值类型</li>\n<li>隐式返回单表达式闭包，即单表达式可以省略<code>return</code>关键字</li>\n<li>参数名称缩写</li>\n<li>尾随（Trailing）闭包语法</li>\n</ul>\n<h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><p>闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变得简单明了。下面闭包表达式的例子通过几次迭代展示了<code>sort</code>方法定义和语法优化的方式。每一次都用更简洁的方式描述了相同的功能。</p>\n<h3 id=\"sort方法\"><a href=\"#sort方法\" class=\"headerlink\" title=\"sort方法\"></a>sort方法</h3><p>Swift标准库提供了名为<code>sort</code>的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。一旦排序完成，<code>sort</code>方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组并不会被<code>sort</code>方法修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"Jay\"</span>, <span class=\"string\">\"Vae\"</span>, <span class=\"string\">\"Jvaeyhcd\"</span>, <span class=\"string\">\"Tom\"</span>, <span class=\"string\">\"Jack\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">sortFun</span><span class=\"params\">(s1:String, s2:String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sortedNames = names.<span class=\"built_in\">sort</span>(sortFun)</span><br></pre></td></tr></table></figure>\n<p>该例子是对一个<code>String</code>类型的数组进行排序，因此排序闭包函数类型需为<code>(String,String)-&gt;Bool</code>。提供排序闭包函数的方式是写一个符合其类型要求的普通函数，并将其作为<code>sort</code>的参数传入。然而，这是一个相当冗长的方式，本质上只是写一个单表达式函数（<code>s1 &gt; s2</code>）。下面例子中，利用闭包表达式可以更好地构建一个内联排序闭包。</p>\n<h3 id=\"闭包表达式语法\"><a href=\"#闭包表达式语法\" class=\"headerlink\" title=\"闭包表达式语法\"></a>闭包表达式语法</h3><p>闭包表达式语法一般如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (parameters) -&gt; returnType <span class=\"keyword\">in</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>闭包表达式可以使用变量、常量以及<code>inout</code>类型作为参数，但是不能提供默认值。也可以在参数列表的最后使用可变参数，元组也可以作为参数和返回值。</p>\n<p>下面例子展示了上面<code>sortFun(_:_:)</code>函数对应的闭包表达式版本的代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames = names.<span class=\"built_in\">sort</span>(&#123;</span><br><span class=\"line\">    (s1:<span class=\"type\">String</span>, s2:<span class=\"type\">String</span>)-&gt;<span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 &lt; s2</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是内联闭包参数和返回值类型申明与<code>sortFun(_:_:)</code>类型申明相同。两种方式中，都写成了<code>(s1:String, s2:String)-&gt;Bool</code>。然而在内联表达式中，函数和返回值类型都写在大括号内，而不是大括号外。<br>闭包函数体部分由关键字<code>in</code>引入。该关键字表示闭包的参数和返回值类型都已定义完成，闭包函数体即将开始。由于这个闭包函数体部分如此短，以至于可以将其写成一行代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames = names.<span class=\"built_in\">sort</span>(&#123;(s1:<span class=\"type\">String</span>, s2:<span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &lt; s2&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>该例中<code>sort(_:)</code>方法的整体调用保持不变，一对圆括号仍然包裹住了方法的整个参数。然而，参数现在变成了内联闭包。</p>\n<h3 id=\"根据上下文推断类型\"><a href=\"#根据上下文推断类型\" class=\"headerlink\" title=\"根据上下文推断类型\"></a>根据上下文推断类型</h3><p>因为排序闭包函数是作为<code>sort(_:)</code>方法参数传入的，Swift可判断其参数和返回值的类型。<code>sort(_:)</code>方法被一个字符串数组调用，此参数必须是<code>(String, String)-&gt;Bool</code>类型的函数。这意味着<code>(String, String)</code>和<code>Bool</code>类型并不是必须作为闭包表达式定义的一部分。因为所有类型都可以被正确判断，返回箭头(<code>-&gt;</code>)和围绕在周围的括号也可以被省略：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames = names.<span class=\"built_in\">sort</span>(&#123;s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际上任何情况下，通过内联闭包表达式构造的闭包作为参数传递给函数或方法时，都可以推断出闭包的参数和返回值类型。 这意味着闭包作为函数或者方法的参数时，您几乎不需要利用完整格式构造内联闭包。</p>\n<p>尽管如此，您仍然可以明确写出有着完整格式的闭包。如果完整格式的闭包能够提高代码的可读性，则可以采用完整格式的闭包。</p>\n<h3 id=\"单表达式闭包隐式返回\"><a href=\"#单表达式闭包隐式返回\" class=\"headerlink\" title=\"单表达式闭包隐式返回\"></a>单表达式闭包隐式返回</h3><p>单行表达式闭包可以通过省略<code>return</code>关键字来隐式返回单行表达式的结果，如上面版本代码可以改写为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames = names.<span class=\"built_in\">sort</span>(&#123;s1, s2 <span class=\"keyword\">in</span> s1 &gt; s2&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，<code>sort(_:)</code>方法的参数类型明确了闭包必须返回一个<code>Bool</code>类型值。因为闭包函数体只包含了一个单一表达式（<code>s1 &gt; s2</code>），该表达式返回<code>Bool</code>类型值，因此这里没有歧义，<code>return</code>关键字可以省略。</p>\n<h3 id=\"参数名称缩写\"><a href=\"#参数名称缩写\" class=\"headerlink\" title=\"参数名称缩写\"></a>参数名称缩写</h3><p>Swift自动为内联包提供了参数名称缩写功能，你可以直接通过<code>$0</code>,<code>$1</code>,<code>$2</code>来顺序调用闭包的参数，以此类推。如果您在闭包表达式中使用参数名缩写，你可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。<code>in</code>关键字同样也可以被省略，因此闭包表达式完全由闭包函数体构成：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames = names.<span class=\"built_in\">sort</span>(&#123;$<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，<code>$0</code>和<code>$1</code>表示闭包中第一个和第二个<code>String</code>类型的参数。</p>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>实际上还有更简单的方式来实现上面例子中的闭包表达式。Swift中<code>String</code>类型定义了关于大于符号(<code>&gt;</code>)的字符串实现，其作为一个函数接收两个<code>String</code>类型的参数并返回<code>Bool</code>类型的值。而这正好与<code>sort(_:)</code>方法的参数需要的函数类型相符合。因此，您可以简单地传递一个大于号，Swift 可以自动推断出您想使用大于号的字符串函数实现：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNames = names.<span class=\"built_in\">sort</span>(&gt;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h2><p>如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用尾随闭包来增强函数的可读性。尾随闭包是一个书写在函数括号后的闭包表达式，函数支持将其作为最后一个参数调用：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionThatTakesAClosure</span><span class=\"params\">(closure: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体部分</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下是不使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下是使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以上面<code>sort(_:)</code>方法参数字符串排序闭包可以改写为<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNumbers = numbers.<span class=\"built_in\">sort</span>&#123;$<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果函数只需要闭包表达式一个参数，当使用尾随闭包时可以把<code>()</code>省略<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortedNumbers = numbers.<span class=\"built_in\">sort</span>()&#123;$<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当闭包非常长以至于不能在一行进行书写，尾随闭包变得非常有用。举个例子来说，Swifte的<code>Array</code>类型有一个<code>map(_:)</code>方法，其获取一个闭包表达式作为唯一参数。该闭包函数会为数组中的额每一个元素调用一次，并返回该元素所映射的值。具体的映射方式和返回值类型由闭包来指定。当提供给数组的闭包用于数组每个元素后，<code>map(_:)</code>方法将返回一个新的数组，数组中包含了与原数组中的元素一一对应的映射后的值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> digitNames = [</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">\"Zero\"</span>, <span class=\"number\">1</span>:<span class=\"string\">\"One\"</span>, <span class=\"number\">2</span>:<span class=\"string\">\"Two\"</span>, <span class=\"number\">3</span>:<span class=\"string\">\"Three\"</span>, <span class=\"number\">4</span>:<span class=\"string\">\"Four\"</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>:<span class=\"string\">\"Five\"</span>, <span class=\"number\">6</span>:<span class=\"string\">\"Six\"</span>, <span class=\"number\">7</span>:<span class=\"string\">\"Seven\"</span>, <span class=\"number\">8</span>:<span class=\"string\">\"Eight\"</span>, <span class=\"number\">9</span>:<span class=\"string\">\"Nine\"</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">89</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings = numbers.<span class=\"built_in\">map</span> &#123;</span><br><span class=\"line\">    (number) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> number = number</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> number &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        output = digitNames[number % <span class=\"number\">10</span>]! + output</span><br><span class=\"line\">        number /= <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(strings)</span><br></pre></td></tr></table></figure></p>\n<p>上面示例代码展示了如何在<code>map(_:)</code>方法中使用尾随闭包将<code>Int</code>类型的数组<code>[34, 65, 89]</code>转换为包含对应<code>String</code>类型值的数组<code>[&quot;ThreeFour&quot;, &quot;SixFive&quot;, &quot;EightNine&quot;]</code>。<br><code>map(_:)</code>为数组中每一个元素调用了闭包表达式。您不需要指定闭包的输入参数<code>number</code>的类型，因为可以通过要映射的数组类型进行推断。<br>在该例中，局部变量<code>number</code>的值由闭包中的<code>numbe</code>r参数获得,因此可以在闭包函数体内对其进行修改，(闭包或者函数的参数总是固定的),闭包表达式指定了返回类型为<code>String</code>，以表明存储映射值的新数组类型为<code>String</code>。</p>\n<p>闭包表达式在每次被调用的时候创建了一个叫做<code>output</code>的字符串并返回。其使用求余运算符（<code>number % 10</code>）计算最后一位数字并利用<code>digitNames</code>字典获取所映射的字符串。</p>\n<blockquote>\n<p>注：字典digitNames下标后跟着一个叹号（<code>!</code>），因为字典下标返回一个可选值（optional value），表明该键不存在时会查找失败。在上例中，由于可以确定<code>number % 10</code>总是digitNames字典的有效下标，因此叹号可以用于强制解包 (force-unwrap) 存储在下标的可选类型的返回值中的<code>String</code>类型的值。</p>\n</blockquote>\n<h2 id=\"捕获值\"><a href=\"#捕获值\" class=\"headerlink\" title=\"捕获值\"></a>捕获值</h2><p>闭包可以在其被定义的上下文中捕获常量或者变量。即使定义这些常量或变量的作用域已经不在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift中可捕获值的最简单的形势就是嵌套函数，也就是定义在其它函数内的函数。嵌套函数可以捕获其外部函数所有的参数以及常量和变量。</p>\n<p>举个例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementor</span><span class=\"params\">(forIncrement amount: Int)</span></span> -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">incrementor</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        runningTotal += amount</span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByOne = makeIncrementor(forIncrement: <span class=\"number\">1</span>)</span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回1</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByTen = makeIncrementor(forIncrement: <span class=\"number\">10</span>)</span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回10</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回3</span></span><br></pre></td></tr></table></figure></p>\n<p>上面例子中有一个叫<code>makeIncrementor</code>的函数，它包含了一个叫<code>incrementor</code>的嵌套函数。嵌套函数<code>incrementor</code>从上下文捕获了两个值<code>runningTotal</code>和<code>amount</code>，捕获值后<code>makeIncrementor</code>将<code>incrementor</code>作为闭包返回。每次调用<code>incrementor</code>时，它会以<code>amount</code>作为增量增加<code>runningTotal</code>的值。<br><code>makeIncrementor</code>函数返回类型为<code>() -&gt; Int</code>，这意味着它返回的是一个函数，而不是一个简单类型的值。该函数在每次调用时不接受参数，只返回一个<code>Int</code>类型的值。<br><code>makeIncrementer(forIncrement:)</code>又一个<code>Int</code>类型的参数，其外部参数名为<code>forIncrement</code>，内部参数名为<code>amount</code>，该参数表示每次<code>incrementor</code>被调用时<code>runningTotal</code>将要增加的量。<br>嵌套函数<code>incrementor</code>用来执行实际的增加操作，使<code>runningTotal</code>增加<code>amount</code>，并将其返回。<br>如果我们单独看<code>incrementor()</code>这个函数，会发现不同寻常<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">incrementor</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    runningTotal += amount</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>incrementor()</code>并没有接受任何参数，但是在函数体内访问了<code>runningTotal</code>和<code>amount</code>，这是因为它从外围函数捕获了<code>runningTotal</code>和<code>amount</code>变量的引用。捕获引用保证了<code>runningTotal</code>和<code>amount</code>变量在调用完<code>makeIncrementor</code>或不会消失，并且保证在下一次执行<code>incrementer</code>函数时<code>runningTotal</code>依然存在。</p>\n<blockquote>\n<p>注：为了优化，如果一个值是不可变的，Swift可能会改为捕获并保存一份对值的拷贝。Swift也会负责被捕获变量的所有内存管理工作。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> incrementByOne = makeIncrementor(forIncrement: <span class=\"number\">1</span>)</span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回1</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> incrementByTen = makeIncrementor(forIncrement: <span class=\"number\">10</span>)</span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回10</span></span><br><span class=\"line\">incrementByOne()<span class=\"comment\">//返回3</span></span><br><span class=\"line\">incrementByTen()<span class=\"comment\">//返回20</span></span><br></pre></td></tr></table></figure>\n<p>如果您创建了另一个<code>incrementor</code>，它会有属于它自己的一个全新、独立的<code>runningTotal</code>变量的引用：<br>再次调用原来的<code>incrementByOne</code>会在原来的变量<code>runningTotal</code>上继续增加值，该变量和<code>incrementByTen</code>中捕获的变量没有任何联系。</p>\n<blockquote>\n<p>注：如果您将闭包赋值给一个类实例的属性，并且该闭包通过访问该实例或其成员而捕获了该实例，您将创建一个在闭包和该实例间的循环强引用。Swift 使用捕获列表来打破这种循环强引用。</p>\n</blockquote>\n<h2 id=\"闭包是引用类型\"><a href=\"#闭包是引用类型\" class=\"headerlink\" title=\"闭包是引用类型\"></a>闭包是引用类型</h2><p>上面的例子中，<code>incrementByOne</code>和<code>incrementByTen</code>是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。<br>无论你将函数或者闭包赋值给一个常量还是变量，实际上都是将常量或者变量的值设置为对应函数或闭包的引用。。上面的示例中，指向闭包的引用<code>incrementByTen</code>是一个常量，而非闭包内容本身。<br>这也意味着如果您将闭包赋值给了两个不同的常量或变量，两个值都会指向同一个闭包：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alsoIncrementByTen = incrementByTen</span><br><span class=\"line\">alsoIncrementByTen()<span class=\"comment\">//返回30</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"非逃逸闭包\"><a href=\"#非逃逸闭包\" class=\"headerlink\" title=\"非逃逸闭包\"></a>非逃逸闭包</h2><p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注<code>@noescape</code>，用来指明这个闭包时不允许“逃逸”出这个函数的。将闭包标注<code>@noescape</code>能使编译器知道这个闭包的生命周期（闭包只能在函数体中被执行，不能脱离函数体执行，所以编译器明确知道运行时的上下文），从而可以进行一些比较激进的优化。<br><code>Array</code>中提供的<code>sort(_:)</code>方法接受一个用来进行元素比较的闭包作为函数，这个参数被标注了<code>@noescape</code>，因为它确保自己在排序结束后就没用了。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionWithNoescapeClosure</span><span class=\"params\">(@noescape closure: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    closure()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>someFunctionWithNoescapeClosure</code>定义了一个传入非逃逸闭包的函数。<br>一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。比如，很多启动异步操作的函数接受一个闭包参数作为completion handler。这类函数会在异步操作开始之后立即返回，但是闭包直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。例如：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> completionHandlers:[() -&gt; <span class=\"type\">Void</span>] = []</span><br><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionWithEscapingClosure</span><span class=\"params\">(completionHandler:<span class=\"params\">()</span></span></span>-&gt;<span class=\"type\">Void</span>) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">    completionHandlers.append(completionHandler)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>someFunctionWithEscapingClosure(_:)</code>函数接受一个闭包作为参数，该闭包被添加到一个函数外定义的数组中。如果你试图将这个参数标注为<code>@noescape</code>将会得到一个编译错误。<br>将闭包标注为<code>@noescape</code>使你能在闭包中隐式地引用<code>self</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">        someFunctionWithEscapingClosure(&#123;<span class=\"keyword\">self</span>.x = <span class=\"number\">120</span>&#125;)</span><br><span class=\"line\">        someFunctionWithEscapingClosure(&#123;<span class=\"keyword\">self</span>.x = <span class=\"number\">10</span>&#125;)</span><br><span class=\"line\">        someFunctionWithNoescapeClosure(&#123;x = <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"type\">ExClass</span>()</span><br><span class=\"line\">instance.doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br><span class=\"line\"></span><br><span class=\"line\">completionHandlers.first?()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br><span class=\"line\"></span><br><span class=\"line\">completionHandlers.last?()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(instance.x)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Swift学习笔记之函数","url":"http://www.jvaeyhcd.cc/2016/05/31/Swift学习笔记之函数/","content":"<p>函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。</p>\n<p>Swift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。</p>\n<p>在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。</p>\n<a id=\"more\"></a>\n<h2 id=\"函数的定义与调用\"><a href=\"#函数的定义与调用\" class=\"headerlink\" title=\"函数的定义与调用\"></a>函数的定义与调用</h2><p>当你定义一个函数时，你可以定义一个或多个有名字和类型的值，作为函数的输入（称为参数），也可以定义某种类型的值作为函数执行结束的输出（称为返回类型）。</p>\n<p>每个函数有个函数名，用来描述函数执行的任务，要使用一个函数时，你用函数名“调用”，并传给它匹配的输入值（称作实参）。一个函数的实参必须与函数表里的顺序一致。</p>\n<p>下面有个例子函数叫做<code>sayHello(_:)</code>,之所以叫这个名字，是因为这个函数用一个人的名字当做输入，并返回给这个人的问候语。为了完成这个任务，你定义一个输入参数，一个叫做<code>personName</code>的<code>String</code>值，和一个包含给这个人的问候语的<code>String</code>类型的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(personName: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> greeting = <span class=\"string\">\"Hello, \"</span> + personName + <span class=\"string\">\"!\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> greeting</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有这些信息汇总起来成为函数的定义，并以<code>func</code>作为前缀。指定函数返回类型时，用返回箭头<code>-&gt;</code>后跟返回类型的名称的方式来表示。</p>\n<p>该定义描述了函数做什么，它期望接受什么和执行结束时它返回的结果类型是什么，这样的定义使得函数可以在别的地方以一种清晰的方式被调用：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">\"Anna\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints \"Hello, Anna!\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">\"Brian\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints \"Hello, Brian!\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数参数和返回值\"><a href=\"#函数参数和返回值\" class=\"headerlink\" title=\"函数参数和返回值\"></a>函数参数和返回值</h3><p>函数参数与返回值在Swift中极为灵活，你可以定义任何类型的函数，包括从只带一个未名参数的简单函数到复杂的带有表达性参数名和不同参数选项的复杂函数。</p>\n<h3 id=\"无参函数\"><a href=\"#无参函数\" class=\"headerlink\" title=\"无参函数\"></a>无参函数</h3><p>函数可以没有参数。下面这个函数就是一个无参函数，当被调用时，它返回固定的 <code>String</code> 消息：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">sayHelloWorld</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello, world\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHelloWorld())</span><br><span class=\"line\"><span class=\"comment\">// prints \"hello, world\"</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>尽管这个函数没有参数，但是定义中在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。</p>\n</blockquote>\n<h3 id=\"多参函数\"><a href=\"#多参函数\" class=\"headerlink\" title=\"多参函数\"></a>多参函数</h3><p>函数可以有多种输入参数，这些参数被包含在函数的括号之中，以逗号分隔。<br>这个函数用一个人名和是否已经打过招呼作为输入，并返回对这个人的适当问候语:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(personName: String, alreadyGreeted: Bool)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> alreadyGreeted &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sayHelloAgain(personName)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sayHello(personName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sayHello(<span class=\"string\">\"Tim\"</span>, alreadyGreeted: <span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints \"Hello again, Tim!\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"无返回值函数\"><a href=\"#无返回值函数\" class=\"headerlink\" title=\"无返回值函数\"></a>无返回值函数</h3><p>函数可以没有返回值。下面是<code>sayHello(_:)</code>函数的另一个版本，叫<code>sayGoodbye(_:)</code>，这个函数直接输出<code>String</code>值，而不是返回它：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">sayGoodbye</span><span class=\"params\">(personName: String)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Goodbye, <span class=\"subst\">\\(personName)</span>!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayGoodbye(<span class=\"string\">\"Dave\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// prints \"Goodbye, Dave!\"</span></span><br></pre></td></tr></table></figure></p>\n<p>因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头<code>-&gt;</code>和返回类型。</p>\n<blockquote>\n<p>注：严格上来说，虽然没有返回值被定义，<code>sayGoodbye(_:)</code>函数依然返回了值。没有定义返回类型的函数会返回特殊的值，叫做<code>Void</code>。它是一个空的元组，没有任何元素，可以写成<code>()</code>。</p>\n</blockquote>\n"},{"title":"初识ReactiveCocoa响应式编程","url":"http://www.jvaeyhcd.cc/2016/05/24/初识ReactiveCocoa响应式编程/","content":"<p>参考文章<br><a href=\"http://www.itiger.me/?p=38\" target=\"_blank\" rel=\"external\">使用ReactiveCocoa实现iOS平台响应式编程</a><br><a href=\"http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html\" target=\"_blank\" rel=\"external\">ReactiveCocoa与Functional Reactive Programming</a><br><a href=\"http://www.jianshu.com/p/87ef6720a096\" target=\"_blank\" rel=\"external\">最快让你上手ReactiveCocoa之基础篇</a><br><a href=\"http://www.infoq.com/cn/news/2014/07/reactiveCocoa-cocoa\" target=\"_blank\" rel=\"external\">花瓣网李忠：ReactiveCocoa是Cocoa的未来</a><br><a href=\"http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/\" target=\"_blank\" rel=\"external\">ReactiveCocoa 讨论会</a></p>\n"},{"title":"Jenkins+Cocoapods+Coding+Git+Fir iOS项目持续集成","url":"http://www.jvaeyhcd.cc/2016/05/21/使用Jenkins构建iOS持续集成自动打包/","content":"<blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<h3 id=\"为什么使用持续集成\"><a href=\"#为什么使用持续集成\" class=\"headerlink\" title=\"为什么使用持续集成\"></a>为什么使用持续集成</h3><p>1、减少重复繁琐的打包过程<br>2、任何时间、任何地点测试都可以获取到新包<br>3、增强项目的可见性</p>\n<p>做持续集成对我们开发者来说是一件一劳永益的事情，对于发包这个问题，相信是每个程序员GG心中挥之不去的痛，而测试MM们也在每次马上就发出来的承诺中得出一个结论就是“你是个大骗子”。</p>\n<p>所以每次被测试MM追着要包，产品经理说给我装一个新包瞧瞧呗，后台GG说给我装一个老版本调试一下啊。。。这个时候我们的内心是奔溃的，然后我们不得不暂停手下的工作，切换到某个版本，Archive。。。其实对于打包发包这种事情根本就不是开发需要做的，因为这是一个简单没有技术含量且浪费时间的工作。时间就是金钱，所以为了不再浪费我们开发宝贵的时间，自动化构建这件事情必须得提上日程了。</p>\n<a id=\"more\"></a>\n<h3 id=\"常见的持续集成工具\"><a href=\"#常见的持续集成工具\" class=\"headerlink\" title=\"常见的持续集成工具\"></a>常见的持续集成工具</h3><ul>\n<li><a href=\"https://jenkins-ci.org\" target=\"_blank\" rel=\"external\">Jenkins CI</a></li>\n<li><a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"external\">Travis CI</a></li>\n<li><a href=\"http://hudson-ci.org/\" target=\"_blank\" rel=\"external\">Hudson CI</a></li>\n<li><a href=\"https://circleci.com/\" target=\"_blank\" rel=\"external\">Circle CI</a></li>\n</ul>\n<p>持续集成的工具有很多，不过最好用的还是Jenkins，Travis能够对Github上的开源项目做很好的集成，考虑到Jenkins的稳定性，我们还是选择Jenkins来开始我的iOS持续集成。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><p>本事例项目工程代码存放在coding，使用Cocoapods管理第三方库，存在在coding上的项目目录结构如下：<br><img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/coding.png\" alt=\"目录结构图\" title=\"目录结构图\"><br>由于cocoapods文件过多，所以没有必要上传到git仓库中，只用将Podfile文件传上去即可。</p>\n<h3 id=\"Jenkins的安装\"><a href=\"#Jenkins的安装\" class=\"headerlink\" title=\"Jenkins的安装\"></a>Jenkins的安装</h3><p>由于Jenkins是Java开发的，所以首先我们需要先安装好Java环境，然后去Jenkins的<a href=\"http://jenkins-ci.org/\" target=\"_blank\" rel=\"external\">官网</a>下载最新的war包。下载完成后，打开终端，进入到war包所在目录，执行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war --httpPort=<span class=\"number\">8888</span></span><br></pre></td></tr></table></figure></p>\n<p>httpPort指的就是Jenkins所使用的http端口，这里指定8888，可根据具体情况来修改。待Jenkins启动后，在浏览器页面输入以下地址:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:<span class=\"number\">8888</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就可以打开Jenkins页面了。</p>\n<blockquote>\n<p><code>--httpPort=8888</code>可以不输入，不输入默认端口号为8080</p>\n</blockquote>\n<p>打开链接后，先要设置一些安装信息，这里就不再啰嗦，因为十分简单，接下来我们来看安装成功后的相关配置。</p>\n<h3 id=\"Jenkins的配置\"><a href=\"#Jenkins的配置\" class=\"headerlink\" title=\"Jenkins的配置\"></a>Jenkins的配置</h3><p>到Jenkins页面，Jenkins－系统管理－插件管理－可选插件中，安装一下插件：</p>\n<ul>\n<li>GIT plugin</li>\n<li>Git client plugin</li>\n<li>Xcode integration</li>\n<li>CocoaPods Jenkins Integration</li>\n</ul>\n<h4 id=\"Git私有仓库配置\"><a href=\"#Git私有仓库配置\" class=\"headerlink\" title=\"Git私有仓库配置\"></a>Git私有仓库配置</h4><p>按照如下方式添加SSH，因为项目代码是存放在coding上的所以，这个关于生成SSH可以以Coding为例：<a href=\"https://coding.net/help/doc/git/ssh-key.html\" target=\"_blank\" rel=\"external\">https://coding.net/help/doc/git/ssh-key.html</a></p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/ssh_username_private_key.png\" alt=\"SSH 秘钥配置\" title=\"SSH 秘钥配置\">\n<h4 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h4><p>这里的步骤我准备全部一图片的形式展示出来。</p>\n<p>点击“Jenkins”－“新建”：</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/new_job.png\" alt=\"创建Job\" title=\"创建Job\">\n<h4 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a>源码管理</h4><p>选择刚刚创建的项目，点击“配置”：</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/set_code_source.png\" alt=\"设置源码地址\" title=\"设置源码地址\">\n<p>这里最好使用SSH，这个工程是私有项目，如果出现错误肯定是由你自己配置错误造成的。</p>\n<h4 id=\"构建步骤设置\"><a href=\"#构建步骤设置\" class=\"headerlink\" title=\"构建步骤设置\"></a>构建步骤设置</h4><p>选择构建步骤，记得添加Xcode插件，选择添加Execute Shell和Xcode，有先后顺序。</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/execte_config.png\" alt=\"添加构建步骤\" title=\"添加构建步骤\">\n<p>设置Execute Shell</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/execute_shell.png\" alt=\"Execute Shell\" title=\"Execute Shell\">\n<h4 id=\"Xcode-General-build-settings\"><a href=\"#Xcode-General-build-settings\" class=\"headerlink\" title=\"Xcode General build settings\"></a>Xcode General build settings</h4><img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/xcode_general_build_settings.png\" alt=\"General build settings\" title=\"General build settings\">\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/code_signing_OS_X_keychain_options.png\" alt=\"Code signing & OS X keychain options\" title=\"Code signing & OS X keychain options\">\n<p>Keychain path填写<code>${HOME}/Library/Keychains/login.keychain</code><br>Keychain password对应的密码可以在钥匙串中查看：</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/keychain.png\" alt=\"Code signing & OS X keychain password查看方法\" title=\"Code signing & OS X keychain password查看方法\">\n<h4 id=\"Advanced-Xcode-build-options\"><a href=\"#Advanced-Xcode-build-options\" class=\"headerlink\" title=\"Advanced Xcode build options\"></a>Advanced Xcode build options</h4><img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/xcode_build_options.png\" alt=\"Advanced Xcode build options\" title=\"Advanced Xcode build options\">\n<h3 id=\"fir-im-Jenkins-插件安装\"><a href=\"#fir-im-Jenkins-插件安装\" class=\"headerlink\" title=\"fir.im Jenkins 插件安装\"></a>fir.im Jenkins 插件安装</h3><p>上面的构建配置好了后，如果顺利的话就已经能够编译出ipa文件了，但是编译出来的ipa只能放在本地，不能给大家安装，所以编译完成后我们还需要将ipa文件上传到fir.im。<br>fir插件的安装方法详情请移步：<a href=\"http://blog.fir.im/jenkins/\" target=\"_blank\" rel=\"external\">《fir.im Jenkins 插件使用方法》</a></p>\n<h3 id=\"构建后上传到fir-im\"><a href=\"#构建后上传到fir-im\" class=\"headerlink\" title=\"构建后上传到fir.im\"></a>构建后上传到fir.im</h3><p>安装好fir插件后在“构建后操作”中点击“添加构建后操作步骤”，可以看到：</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/upload_fir.png\" alt=\"添加构建后上传fir步骤\" title=\"添加构建后上传fir步骤\">\n<p>点击“upload to fir.im”，然后会出现如下界面：</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/set_upload_fir.png\" alt=\"设置fir.im的Token\" title=\"设置fir.im的Token\">\n<p>Fir.im的Token获取地址：<a href=\"http://fir.im/apps/apitoken\" target=\"_blank\" rel=\"external\">http://fir.im/apps/apitoken</a></p>\n<h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p>选中你要构建的项目，然后点击“立即构建”</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/shoudong_goujian.png\" alt=\"手动构建\" title=\"手动构建\">\n<p>选择正在构建的Build，然后点击“Console Output”可以查看build过程中打印的一些信息，如果遇到什么报错信息都可以在这里面查看。</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/build_message.png\" alt=\"控制台输出\" title=\"控制台输出\">\n<h3 id=\"自动构建设置\"><a href=\"#自动构建设置\" class=\"headerlink\" title=\"自动构建设置\"></a>自动构建设置</h3><p>构建触发器有一下几种触发方式：</p>\n<ul>\n<li>触发远程构建 (例如,使用脚本)</li>\n<li>Build after other projects are built</li>\n<li>Build periodically</li>\n<li>Poll SCM</li>\n</ul>\n<p>这里我只用到了Build periodically</p>\n<img src=\"/2016/05/21/使用Jenkins构建iOS持续集成自动打包/zidong_goujian.png\" alt=\"Build periodically触发自动构建\" title=\"Build periodically触发自动构建\">\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为了搭建这个Jenkins我看了很多博客，不过大多比较难懂，一直都没有成功，经过各种尝试后最终搭建成功，我在此将整个过程记录下来，以来是对自己知识的一个积累，二来如果能够给将要搭建Jenkins的iOS持续集成的朋友们一点帮助也是极好的。</p>\n<p>参考文档：<br><a href=\"http://www.jianshu.com/p/c69deb29720d#\" target=\"_blank\" rel=\"external\">一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP</a><br><a href=\"http://rannie.github.io/ios/2014/12/29/xcodebuild-jenkins-ci.html\" target=\"_blank\" rel=\"external\">使用 Xcodebuild + Jenkins + Apache 做 iOS 持续集成</a></p>\n"},{"title":"关闭iOS系统自动更新提示的方法","url":"http://www.jvaeyhcd.cc/2016/05/16/关闭iOS系统自动更新提示的方法/","content":"<p>一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。</p>\n<a id=\"more\"></a>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>经过一段时间的试验，有如下几个对应方案：</p>\n<ol>\n<li>设置 - 通用 - 用量 - 管理存储空间 - 找到更新包，然后删除它</li>\n<li>设置 - iTunes&amp;App Stores, 找到Updates，关闭</li>\n</ol>\n<p>如果以上两个方案还不管用，直接放大招：<br>在手机上打开safari，地址栏输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://oldcat.me/web/NOOTA9.mobileconfig</span><br></pre></td></tr></table></figure>\n<p>然后回车<br>按照要求安装此provision文件即可，然后重启。</p>\n<img src=\"/2016/05/16/关闭iOS系统自动更新提示的方法/thumb_IMG_0889_1024.jpg\" alt=\"安装provision文件\" title=\"安装provision文件\">\n<p>重启后打开设置 - 通用 - 软件更新 有惊喜</p>\n<img src=\"/2016/05/16/关闭iOS系统自动更新提示的方法/thumb_IMG_0890_1024.jpg\" alt=\"结果图\" title=\"结果图\">\n"},{"title":"objc过滤NSString中的HTML标签","url":"http://www.jvaeyhcd.cc/2016/05/04/Objective-C过滤NSString中的HTML标签/","content":"<p>开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>用NSScanner扫描来处理</p>\n<a id=\"more\"></a>\n<p>NSString+Jvaeyhcd.h<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">Jvaeyhcd</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>NSString+Jvaeyhcd.m<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSScanner</span> *theScanner;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *text = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    theScanner = [<span class=\"built_in\">NSScanner</span> scannerWithString:<span class=\"keyword\">self</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ([theScanner isAtEnd] == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// find start of tag</span></span><br><span class=\"line\">        [theScanner scanUpToString:<span class=\"string\">@\"&lt;\"</span> intoString:<span class=\"literal\">NULL</span>] ;</span><br><span class=\"line\">        <span class=\"comment\">// find end of tag</span></span><br><span class=\"line\">        [theScanner scanUpToString:<span class=\"string\">@\"&gt;\"</span> intoString:&amp;text] ;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// replace the found tag with a space</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//(you can filter multi-spaces out later if you wish)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> stringByReplacingOccurrencesOfString:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@&gt;\"</span>, text] withString:<span class=\"string\">@\" \"</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>用NSString自带的Seprated自截断方法</p>\n<p>NSString+Jvaeyhcd.h<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">Jvaeyhcd</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>NSString+Jvaeyhcd.m<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)removeHTML2 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *components = [<span class=\"keyword\">self</span> componentsSeparatedByCharactersInSet:[<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"&lt;&gt;\"</span>]];</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *componentsToKeep = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; [components count]; i = i + <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        [componentsToKeep addObject:[components objectAtIndex:i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *plainText = [componentsToKeep componentsJoinedByString:<span class=\"string\">@\"\"</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> plainText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Swift学习笔记之基础部分","url":"http://www.jvaeyhcd.cc/2016/04/29/Swift学习笔记之基础部分/","content":"<blockquote>\n<p>本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。</p>\n<a id=\"more\"></a>\n<p>Swift包含了C 和objc上所有的数据类型，<code>Int</code>表示整型值；<code>Double</code>和<code>Float</code>表示浮点型值；<code>Bool</code>是布尔型值；<code>String</code>是字符串型值。此外Swift还提供了三个基本的集合类型，<code>Array</code>，<code>Set</code>和<code>Dictionary</code>。<br>除了我们熟悉的类型，Swift 还增加了 objc 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。</p>\n<p>Swift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示“那儿有一个值，并且它等于 x ”或者“那儿没有值”。可选有点像在 objc 中使用<code>nil</code>，但是它可以用在任何类型上，不仅仅是类。可选类型比 objc 中的nil指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。</p>\n<p>Swift 是一门类型安全的语言，可选类型就是一个很好的例子。Swift 可以让你清楚地知道值的类型。如果你的代码期望得到一个String，类型安全会阻止你不小心传入一个<code>Int</code>。你可以在开发阶段尽早发现并修正错误。</p>\n<h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><p>常量的值一旦设定就不能改变，而变量的值可以随意更改。</p>\n<h2 id=\"声明常量和变量\"><a href=\"#声明常量和变量\" class=\"headerlink\" title=\"声明常量和变量\"></a>声明常量和变量</h2><p>常量和变量必须在使用前声明，用<code>let</code>来声明常量，用<code>var</code>来声明变量。下面的例子展示了如何用常量和变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> maxNumberOfLoginTimes = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentLoginTimes = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这两行代码可以理解为：<br><code>maxNumberOfLoginTimes</code>声明为一个常量，它的值是10并且不可再被改变，<code>currentLoginAttempt</code>申明为一个初始值为0的变量。<br>我们可以在一行中声明多个常量或者多个变量，用逗号隔开：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：如果你的代码中有不需要改变的值，请使用<code>let</code>关键字将它声明为常量。只将需要改变的值声明为变量。与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> languageName = <span class=\"string\">\"Swift\"</span></span><br><span class=\"line\">languageName = <span class=\"string\">\"Swift++\"</span></span><br><span class=\"line\"><span class=\"comment\">// 这会报编译时错误 - languageName 不可改变</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类型标注\"><a href=\"#类型标注\" class=\"headerlink\" title=\"类型标注\"></a>类型标注</h2><p>当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。<br>这个例子给<code>welcomeMessage</code>变量添加了类型标注，表示这个变量可以存储<code>String</code>类型的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> welcomeMessage: <span class=\"type\">String</span></span><br></pre></td></tr></table></figure></p>\n<p>声明中的冒号代表着“是…类型”，所以这行代码可以被理解为：<br>“声明一个类型为<code>String</code>，名字为<code>welcomeMessage</code>的变量。”<br>“类型为<code>String</code>”的意思是“可以存储任意<code>String</code>类型的值。”<br><code>welcomeMessage</code>变量现在可以被设置成任意字符串：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">welcomeMessage = <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p>你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型标注：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> red, green, blue: <span class=\"type\">Double</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给<code>welcomeMessage</code>赋初始值，所以变量<code>welcomeMessage</code>的类型是通过一个类型标注指定的，而不是通过初始值推断的。</p>\n</blockquote>\n<h2 id=\"常量和变量的命名\"><a href=\"#常量和变量的命名\" class=\"headerlink\" title=\"常量和变量的命名\"></a>常量和变量的命名</h2><p>你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> π = <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> 你好 = <span class=\"string\">\"你好世界\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> 🐶🐮 = <span class=\"string\">\"dogcow\"</span></span><br></pre></td></tr></table></figure></p>\n<p>常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>\n<p>一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。</p>\n<blockquote>\n<p>注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。</p>\n</blockquote>\n<h2 id=\"输出常量和变量\"><a href=\"#输出常量和变量\" class=\"headerlink\" title=\"输出常量和变量\"></a>输出常量和变量</h2><p>你可以用<code>print(_:separator:terminator:)</code>函数来输出当前常量或变量的值:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friendlyWelcome = <span class=\"string\">\"Bonjour!\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(friendlyWelcome)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"Bonjour!\"</span></span><br></pre></td></tr></table></figure></p>\n<p><code>print(_:separator:terminator:)</code>是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，<code>print(_:separator:terminator:)</code>将会输出内容到“console”面板上。separator和terminator参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给terminator参数–例如，<code>print(someValue, terminator:&quot;&quot;)</code>。</p>\n<p>Swift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The current value of friendlyWelcome is <span class=\"subst\">\\(friendlyWelcome)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The current value of friendlyWelcome is Bonjour!</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。<br>与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这是第一个多行注释的开头</span><br><span class=\"line\"><span class=\"comment\">/* 这是第二个被嵌套的多行注释 */</span></span><br><span class=\"line\">这是第一个多行注释的结尾 */</span></span><br></pre></td></tr></table></figure></p>\n<p>通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。<br>当然Swift的单行注释和多行注释和C语言的类似。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一个单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 这是一个,</span><br><span class=\"line\">多行注释 */</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h2><p>与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"string\">\"🐱\"</span>; <span class=\"built_in\">print</span>(cat)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"🐱\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h2><p>整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。</p>\n<p>Swift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是<code>UInt8</code>，32位有符号整数类型是<code>Int32</code>。就像 Swift 的其他类型一样，整数类型采用大写命名法。</p>\n<h2 id=\"整数范围\"><a href=\"#整数范围\" class=\"headerlink\" title=\"整数范围\"></a>整数范围</h2><p>你可以访问不同整数类型的<code>min</code>和<code>max</code>属性来获取对应类型的最小值和最大值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> minValue = <span class=\"type\">UInt8</span>.<span class=\"built_in\">min</span>  <span class=\"comment\">// minValue 为 0，是 UInt8 类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxValue = <span class=\"type\">UInt8</span>.<span class=\"built_in\">max</span>  <span class=\"comment\">// maxValue 为 255，是 UInt8 类型</span></span><br></pre></td></tr></table></figure></p>\n<p><code>min</code>和<code>max</code>所传回值的类型，正是其所对的整数类型(如上例<code>UInt8</code>, 所传回的类型是<code>UInt8</code>)，可用在表达式中相同类型值旁。</p>\n<h2 id=\"Int\"><a href=\"#Int\" class=\"headerlink\" title=\"Int\"></a>Int</h2><p>一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：</p>\n<ul>\n<li>在32位平台上，<code>Int</code>和<code>Int32</code>长度相同。</li>\n<li>在64位平台上，<code>Int</code>和<code>Int64</code>长度相同。<br>除非你需要特定长度的整数，一般来说使用<code>Int</code>就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，<code>Int</code>可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。</li>\n</ul>\n<h2 id=\"UInt\"><a href=\"#UInt\" class=\"headerlink\" title=\"UInt\"></a>UInt</h2><p>Swift 也提供了一个特殊的无符号类型<code>UInt</code>，长度与当前平台的原生字长相同：</p>\n<ul>\n<li>在32位平台上，<code>UInt</code>和<code>UInt32</code>长度相同。</li>\n<li>在64位平台上，<code>UInt</code>和<code>UInt64</code>长度相同。<blockquote>\n<p>注意：尽量不要使用<code>UInt</code>，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用<code>Int</code>，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h2><p>浮点数是有小数部分的数字，比如<code>3.14159</code>，<code>0.1</code>和<code>-273.15</code>。</p>\n<p>浮点类型比整数类型表示的范围更大，可以存储比<code>Int</code>类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：</p>\n<ul>\n<li><code>Double</code>表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。</li>\n<li><code>Float</code>表示32位浮点数。精度要求不高的话可以使用此类型。</li>\n</ul>\n<h2 id=\"类型安全和类型推断\"><a href=\"#类型安全和类型推断\" class=\"headerlink\" title=\"类型安全和类型推断\"></a>类型安全和类型推断</h2><p>Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个<code>String</code>，你绝对不可能不小心传进去一个<code>Int</code>。</p>\n<p>由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。</p>\n<p>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。</p>\n<p>因为有类型推断，和 C 或者 objc 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。</p>\n<p>当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如<code>42</code>和<code>3.14159</code>。）</p>\n<p>例如，如果你给一个新常量赋值<code>42</code>并且没有标明类型，Swift 可以推断出常量类型是Int，因为你给它赋的初始值看起来像一个整数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meaningOfLife = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"comment\">// meaningOfLife 会被推测为 Int 类型</span></span><br></pre></td></tr></table></figure></p>\n<p>同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是<code>Double</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pi = <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"comment\">// pi 会被推测为 Double 类型</span></span><br></pre></td></tr></table></figure></p>\n<p>当推断浮点数的类型时，Swift 总是会选择<code>Double</code>而不是<code>Float</code>。<br>如果表达式中同时出现了整数和浮点数，会被推断为<code>Double</code>类型：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherPi = <span class=\"number\">3</span> + <span class=\"number\">0.14159</span></span><br><span class=\"line\"><span class=\"comment\">// anotherPi 会被推测为 Double 类型</span></span><br></pre></td></tr></table></figure></p>\n<p>原始值<code>3</code>没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为<code>Double</code>类型。</p>\n<h2 id=\"数值型字面量\"><a href=\"#数值型字面量\" class=\"headerlink\" title=\"数值型字面量\"></a>数值型字面量</h2><p>整数字面量可以被写作：</p>\n<ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是<code>0b</code></li>\n<li>一个八进制数，前缀是<code>0o</code></li>\n<li>一个十六进制数，前缀是<code>0x</code></li>\n</ul>\n<p>下面的所有整数字面量的十进制值都是16:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decimalInteger = <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryInteger = <span class=\"number\">0b10000</span>       <span class=\"comment\">// 二进制的16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> octalInteger = <span class=\"number\">0o20</span>           <span class=\"comment\">// 八进制的16</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger = <span class=\"number\">0x10</span>     <span class=\"comment\">// 十六进制的16</span></span><br></pre></td></tr></table></figure></p>\n<p>浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是<code>0x</code>）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 <code>e</code> 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 <code>p</code> 来指定。<br>如果一个十进制数的指数为<code>exp</code>，那这个数相当于基数和10^exp的乘积：</p>\n<ul>\n<li><code>1.25e2</code> 表示 1.25 × 10^2，等于 <code>125.0</code>。</li>\n<li><code>1.25e-2</code> 表示 1.25 × 10^-2，等于 <code>0.0125</code>。</li>\n</ul>\n<p>如果一个十六进制数的指数为<code>exp</code>，那这个数相当于基数和2^exp的乘积：</p>\n<ul>\n<li><code>0xFp2</code> 表示 15 × 2^2，等于 <code>60.0</code>。</li>\n<li><code>0xFp-2</code> 表示 15 × 2^-2，等于 <code>3.75</code>。</li>\n</ul>\n<p>下面的这些浮点字面量都等于十进制的<code>12.1875</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decimalDouble = <span class=\"number\">12.1875</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> exponentDouble = <span class=\"number\">1.21875e1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexadecimalDouble = <span class=\"number\">0xC.3p0</span></span><br></pre></td></tr></table></figure></p>\n<p>数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> paddedDouble = <span class=\"number\">000123.456</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oneMillion = <span class=\"number\">1_000_000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> justOverOneMillion = <span class=\"number\">1_000_000.000_000_1</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数值型类型转换\"><a href=\"#数值型类型转换\" class=\"headerlink\" title=\"数值型类型转换\"></a>数值型类型转换</h2><p>通常来讲，即使代码中的整数常量和变量已知非负，也请使用<code>Int</code>类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。</p>\n<p>只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。</p>\n<h2 id=\"整数转换\"><a href=\"#整数转换\" class=\"headerlink\" title=\"整数转换\"></a>整数转换</h2><p>不同整数类型的变量和常量可以存储不同范围的数字。<code>Int8</code>类型的常量或者变量可以存储的数字范围是-128~127，而<code>UInt8</code>类型的常量或者变量能存储的数字范围是0~255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cannotBeNegative: <span class=\"type\">UInt8</span> = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// UInt8 类型不能存储负数，所以会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tooBig: <span class=\"type\">Int8</span> = <span class=\"type\">Int8</span>.<span class=\"built_in\">max</span> + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// Int8 类型不能存储超过最大值的数，所以会报错</span></span><br></pre></td></tr></table></figure></p>\n<p>由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。</p>\n<p>要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量<code>twoThousand</code>是<code>UInt16</code>类型，然而常量<code>one</code>是<code>UInt8</code>类型。它们不能直接相加，因为它们类型不同。所以要调用<code>UInt16(one)</code>来创建一个新的<code>UInt16</code>数字并用<code>one</code>的值来初始化，然后使用这个新数字来计算：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> twoThousand: <span class=\"type\">UInt16</span> = <span class=\"number\">2_000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> one: <span class=\"type\">UInt8</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> twoThousandAndOne = twoThousand + <span class=\"type\">UInt16</span>(one)</span><br></pre></td></tr></table></figure></p>\n<p>现在两个数字的类型都是<code>UInt16</code>，可以进行相加。目标常量<code>twoThousandAndOne</code>的类型被推断为<code>UInt16</code>，因为它是两个<code>UInt16</code>值的和。</p>\n<p><code>SomeType(ofInitialValue)</code>是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，<code>UInt16</code>有一个构造器，可以接受一个<code>UInt8</code>类型的值，所以这个构造器可以用现有的<code>UInt8</code>来创建一个新的<code>UInt16</code>。注意，你并不能传入任意类型的值，只能传入<code>UInt16</code>内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型）。</p>\n<h2 id=\"整数和浮点数转换\"><a href=\"#整数和浮点数转换\" class=\"headerlink\" title=\"整数和浮点数转换\"></a>整数和浮点数转换</h2><p>整数和浮点数的转换必须显式指定类型：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> three = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pointOneFourOneFiveNine = <span class=\"number\">0.14159</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pi = <span class=\"type\">Double</span>(three) + pointOneFourOneFiveNine</span><br><span class=\"line\"><span class=\"comment\">// pi 等于 3.14159，所以被推测为 Double 类型</span></span><br></pre></td></tr></table></figure></p>\n<p>这个例子中，常量<code>three</code>的值被用来创建一个<code>Double</code>类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。<br>浮点数到整数的反向转换同样行，整数类型可以用<code>Double</code>或者<code>Float</code>类型来初始化：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> integerPi = <span class=\"type\">Int</span>(pi)</span><br><span class=\"line\"><span class=\"comment\">// integerPi 等于 3，所以被推测为 Int 类型</span></span><br></pre></td></tr></table></figure></p>\n<p>当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说<code>4.75</code>会变成<code>4</code>，<code>-3.9</code>会变成<code>-3</code>。</p>\n<blockquote>\n<p>注意：结合数字类常量和变量不同于结合数字类字面量。字面量<code>3</code>可以直接和字面量<code>0.14159</code>相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。</p>\n</blockquote>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用<code>typealias</code>关键字来定义类型别名。</p>\n<p>当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">AudioSample</span> = <span class=\"type\">UInt16</span></span><br></pre></td></tr></table></figure></p>\n<p>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxAmplitudeFound = <span class=\"type\">AudioSample</span>.<span class=\"built_in\">min</span></span><br><span class=\"line\"><span class=\"comment\">// maxAmplitudeFound 现在是 0</span></span><br></pre></td></tr></table></figure></p>\n<p>本例中，<code>AudioSample</code>被定义为<code>UInt16</code>的一个别名。因为它是别名，<code>AudioSample.min</code>实际上是<code>UInt16.min</code>，所以会给<code>maxAmplitudeFound</code>赋一个初值<code>0</code>。</p>\n<h2 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h2><p>Swift 有一个基本的布尔（Boolean）类型，叫做<code>Bool</code>。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，<code>true</code>和<code>false</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> orangesAreOrange = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> turnipsAreDelicious = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p><code>orangesAreOrange</code>和<code>turnipsAreDelicious</code>的类型会被推断为<code>Bool</code>，因为它们的初值是布尔字面量。就像之前提到的<code>Int</code>和<code>Double</code>一样，如果你创建变量的时候给它们赋值<code>true</code>或者<code>false</code>，那你不需要将常量或者变量声明为<code>Bool</code>类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。<br>当你编写条件语句比如<code>if</code>语句的时候，布尔值非常有用：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> turnipsAreDelicious &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Mmm, tasty turnips!\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Eww, turnips are horrible.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"Eww, turnips are horrible.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你在需要使用<code>Bool</code>类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> i &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个例子不会通过编译，会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然而，下面的例子是合法的：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> i == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个例子会编译成功</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>i == 1</code>的比较结果是<code>Bool</code>类型，所以第二个例子可以通过类型检查。</p>\n<p>和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。</p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p>元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。</p>\n<p>下面这个例子中，<code>(404, &quot;Not Found&quot;)</code>是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个<code>404 Not Found</code>状态码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error = (<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// http404Error 的类型是 (Int, String)，值是 (404, \"Not Found\")</span></span><br></pre></td></tr></table></figure></p>\n<p><code>(404, &quot;Not Found&quot;)</code>元组把一个<code>Int</code>值和一个<code>String</code>值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为<code>(Int, String)</code>的元组”。<br>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为<code>(Int, Int, Int)</code>或者<code>(String, Bool)</code>或者其他任何你想要的组合的元组。<br>你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is <span class=\"subst\">\\(statusCode)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is <span class=\"subst\">\\(statusMessage)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status message is Not Found\"</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（<code>_</code>）标记：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (justTheStatusCode, <span class=\"number\">_</span>) = http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is <span class=\"subst\">\\(justTheStatusCode)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\"</span></span><br></pre></td></tr></table></figure></p>\n<p>此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is <span class=\"subst\">\\(http404Error.<span class=\"number\">0</span>)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status code is 404\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is <span class=\"subst\">\\(http404Error.<span class=\"number\">1</span>)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status message is Not Found\"</span></span><br></pre></td></tr></table></figure></p>\n<p>你可以在定义元组的时候给单个元素命名：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http200Status = (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">\"OK\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>给元组中的元素命名后，你可以通过名字来获取这些元素的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is <span class=\"subst\">\\(http200Status.statusCode)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status code is 200\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is <span class=\"subst\">\\(http200Status.description)</span>\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"The status message is OK\"</span></span><br></pre></td></tr></table></figure></p>\n<p>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个<code>(Int, String)</code>元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。</p>\n<blockquote>\n<p>注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。</p>\n</blockquote>\n<h2 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h2><p>使用可选类型（optionals）来处理值可能缺失的情况。<br>来看一个例子。Swift 的<code>Int</code>类型有一种构造器，作用是将一个<code>String</code>值转换成一个<code>Int</code>值。然而，并不是所有的字符串都可以转换成一个整数。字符串<code>&quot;123&quot;</code>可以被转换成数字<code>123</code>，但是字符串<code>&quot;hello, world&quot;</code>不行。</p>\n<p>下面的例子使用这种构造器来尝试将一个<code>String</code>转换成<code>Int</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleNumber = <span class=\"string\">\"123\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> convertedNumber = <span class=\"type\">Int</span>(possibleNumber)</span><br><span class=\"line\"><span class=\"comment\">// convertedNumber 被推测为类型 \"Int?\"， 或者类型 \"optional Int\"</span></span><br></pre></td></tr></table></figure></p>\n<p>因为该构造器可能会失败，所以它返回一个可选类型（optional）<code>Int</code>，而不是一个<code>Int</code>。一个可选的<code>Int</code>被写作<code>Int?</code>而不是<code>Int</code>。问号暗示包含的值是可选类型，也就是说可能包含<code>Int</code>值也可能不包含值。（不能包含其他任何值比如<code>Bool</code>值或者<code>String</code>值。只能是    <code>Int</code>或者什么都没有。）</p>\n<h2 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h2><p>你可以给可选变量赋值为<code>nil</code>来表示它没有值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serverResponseCode: <span class=\"type\">Int</span>? = <span class=\"number\">404</span></span><br><span class=\"line\"><span class=\"comment\">// serverResponseCode 包含一个可选的 Int 值 404</span></span><br><span class=\"line\">serverResponseCode = <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"comment\">// serverResponseCode 现在不包含值</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：<code>nil</code>不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</p>\n</blockquote>\n<p>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为<code>nil</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> surveyAnswer: <span class=\"type\">String</span>?</span><br><span class=\"line\"><span class=\"comment\">// surveyAnswer 被自动设置为 nil</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：Swift 的<code>nil</code>和 objc 中的<code>nil</code>并不一样。在 objc 中，<code>nil</code>是一个指向不存在对象的指针。在 Swift 中，<code>nil</code>不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为<code>nil</code>，不只是对象类型。</p>\n</blockquote>\n<h2 id=\"if-语句以及强制解析\"><a href=\"#if-语句以及强制解析\" class=\"headerlink\" title=\"if 语句以及强制解析\"></a>if 语句以及强制解析</h2><p>你可以使用<code>if</code>语句和<code>nil</code>比较来判断一个可选值是否包含值。你可以使用“相等”(<code>==</code>)或“不等”(<code>!=</code>)来执行比较。</p>\n<p>如果可选类型有值，它将不等于<code>nil</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"convertedNumber contains some integer value.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"convertedNumber contains some integer value.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（<code>!</code>）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"convertedNumber has an integer value of <span class=\"subst\">\\(convertedNumber!)</span>.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"convertedNumber has an integer value of 123.\"</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：使用<code>!</code>来获取一个不存在的可选值会导致运行时错误。使用<code>!</code>来强制解析值之前，一定要确定可选包含一个非<code>nil</code>的值。</p>\n</blockquote>\n<h2 id=\"可选绑定\"><a href=\"#可选绑定\" class=\"headerlink\" title=\"可选绑定\"></a>可选绑定</h2><p>使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在<code>if</code>和<code>while</code>语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。</p>\n<p>像下面这样在<code>if</code>语句中写一个可选绑定：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName = someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>你可以像上面这样使用可选绑定来重写<code>possibleNumber</code>这个例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualNumber = <span class=\"type\">Int</span>(possibleNumber) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\'<span class=\"subst\">\\(possibleNumber)</span>\\' has an integer value of <span class=\"subst\">\\(actualNumber)</span>\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\'<span class=\"subst\">\\(possibleNumber)</span>\\' could not be converted to an integer\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"'123' has an integer value of 123\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码可以被理解为：“如果<code>Int(possibleNumber)</code>返回的可选<code>Int</code>包含一个值，创建一个叫做<code>actualNumber</code>的新常量并将可选包含的值赋给它。”</p>\n<p>如果转换成功，<code>actualNumber</code>常量可以在<code>if</code>语句的第一个分支中使用。它已经被可选类型 包含的 值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，<code>actualNumber</code>只被用来输出转换结果。</p>\n<p>你可以在可选绑定中使用常量和变量。如果你想在<code>if</code>语句的第一个分支中操作<code>actualNumber</code>的值，你可以改成<code>if var actualNumber</code>，这样可选类型包含的值就会被赋给一个变量而非常量。</p>\n<p>你可以包含多个可选绑定在<code>if</code>语句中，并使用<code>where</code>子句做布尔值判断。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstNumber = <span class=\"type\">Int</span>(<span class=\"string\">\"4\"</span>), secondNumber = <span class=\"type\">Int</span>(<span class=\"string\">\"42\"</span>) <span class=\"keyword\">where</span> firstNumber &lt; secondNumber &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"<span class=\"subst\">\\(firstNumber)</span> &lt; <span class=\"subst\">\\(secondNumber)</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// prints \"4 &lt; 42\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"隐式解析可选类型\"><a href=\"#隐式解析可选类型\" class=\"headerlink\" title=\"隐式解析可选类型\"></a>隐式解析可选类型</h2><p>如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。</p>\n<p>有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型<em>总会</em>有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。</p>\n<p>这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（<code>String?</code>）改成感叹号（<code>String!</code>）来声明一个隐式解析可选类型。</p>\n<p>当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。</p>\n<p>一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型<code>String</code>和隐式解析可选类型<code>String</code>之间的区别：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? = <span class=\"string\">\"An optional string.\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> = possibleString! <span class=\"comment\">// 需要惊叹号来获取值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! = <span class=\"string\">\"An implicitly unwrapped optional string.\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString: <span class=\"type\">String</span> = assumedString  <span class=\"comment\">// 不需要感叹号</span></span><br></pre></td></tr></table></figure></p>\n<p>你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。</p>\n<blockquote>\n<p>注意：如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个惊叹号一样。</p>\n</blockquote>\n<p>你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"An implicitly unwrapped optional string.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString = assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 \"An implicitly unwrapped optional string.\"</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：如果一个变量之后可能变成<code>nil</code>的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是<code>nil</code>的话，请使用普通可选类型。</p>\n</blockquote>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>你可以使用错误处理（error handling）来应对程序执行中可能会遇到的错误条件。相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">canThrowAnError</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数有可能抛出错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一个函数可以通过在声明中添加<code>throws</code>关键词来抛出错误消息。当你的函数能抛出错误消息时, 你应该在表达式中前置<code>try</code>关键词。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">    <span class=\"comment\">// 没有错误消息抛出</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有一个错误消息抛出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一个<code>do</code>语句创建了一个新的包含作用域,使得错误能被传播到一个或多个<code>catch</code>从句。<br>这里有一个错误处理如何用来应对不同错误条件的例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span> <span class=\"title\">makeASandwich</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> makeASandwich()</span><br><span class=\"line\">    eatASandwich()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">OutOfCleanDishes</span> &#123;</span><br><span class=\"line\">    washDishes()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">Error</span>.<span class=\"type\">MissingIngredients</span>(<span class=\"keyword\">let</span> ingredients) &#123;</span><br><span class=\"line\">    buyGroceries(ingredients)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在此例中，<code>makeASandwich()</code>（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为<code>makeASandwich()</code>抛出错误，函数调用被包裹在<code>try</code>表达式中。将函数包裹在一个<code>do</code>语句中,任何被抛出的错误会被传播到提供的<code>catch</code>从句中。</p>\n<p>如果没有错误被抛出, <code>eatASandwich()</code>函数会被调用。如果一个匹配<code>Error.OutOfCleanDishes</code>的错误被抛出,<code>washDishes</code>函数会被调用。如果一个匹配<code>Error.MissingIngredients</code>的错误被抛出，<code>buyGroceries(_:)</code>函数会随着被<code>catch</code>所捕捉到的关联值[<code>String</code>]被调用。</p>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><p>可选类型可以让你判断值是否存在，你可以在代码中优雅地处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能没办法继续执行。这时，你可以在你的代码中触发一个断言（assertion）来结束代码运行并通过调试来找到值缺失的原因。</p>\n<h2 id=\"使用断言进行调试\"><a href=\"#使用断言进行调试\" class=\"headerlink\" title=\"使用断言进行调试\"></a>使用断言进行调试</h2><p>断言会在运行时判断一个逻辑条件是否为<code>true</code>。从字面意思来说，断言“断言”一个条件是否为真。你可以使用断言来保证在运行其他代码之前，某些重要的条件已经被满足。如果条件判断为<code>true</code>，代码运行会继续进行；如果条件判断为<code>false</code>，代码执行结束，你的应用被终止。</p>\n<p>如果你的代码在调试环境下触发了一个断言，比如你在 Xcode 中构建并运行一个应用，你可以清楚地看到不合法的状态发生在哪里并检查断言被触发时你的应用的状态。此外，断言允许你附加一条调试信息。</p>\n<p>你可以使用全局<code>assert(_:_file:line:)</code>函数来写一个断言。向这个函数传入一个结果为<code>true</code>或者<code>false</code>的表达式以及一条信息，当表达式的结果为<code>false</code>的时候这条信息会被显示：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age = -<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(age &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"A person's age cannot be less than zero\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 因为 age &lt; 0，所以断言会触发</span></span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，只有<code>age &gt;= 0</code>为<code>true</code>的时候，即<code>age</code>的值非负的时候，代码才会继续执行。如果<code>age</code>的值是负数，就像代码中那样，<code>age &gt;= 0为false</code>，断言被触发，终止应用。</p>\n<p>如果不需要断言信息，可以省略，就像这样：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assert</span>(age &gt;= <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。</p>\n</blockquote>\n<h2 id=\"何时使用断言\"><a href=\"#何时使用断言\" class=\"headerlink\" title=\"何时使用断言\"></a>何时使用断言</h2><p>当条件可能为假时使用断言，但是最终一定要<em>保证</em>条件为真，这样你的代码才能继续运行。断言的适用情景：</p>\n<ul>\n<li>整数类型的下标索引被传入一个自定义下标实现，但是下标索引值可能太小或者太大。</li>\n<li>需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。</li>\n<li>一个可选值现在是<code>nil</code>，但是后面的代码运行需要一个非<code>nil</code>值。</li>\n</ul>\n<blockquote>\n<p>注意：断言可能导致你的应用终止运行，所以你应当仔细设计你的代码来让非法条件不会出现。然而，在你的应用发布之前，有时候非法条件可能出现，这时使用断言可以快速发现问题。</p>\n</blockquote>\n"},{"title":"Mac基础：如何让Finder显示隐藏文件和文件夹","url":"http://www.jvaeyhcd.cc/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/","content":"<p>有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？</p>\n<h2 id=\"让Finder显示隐藏文件和文件夹\"><a href=\"#让Finder显示隐藏文件和文件夹\" class=\"headerlink\" title=\"让Finder显示隐藏文件和文件夹\"></a>让Finder显示隐藏文件和文件夹</h2><ul>\n<li><b>第一步：</b>打开「终端」应用程序（我推荐使用<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iTerm</a>,他比Mac自带终端好用很多）。</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p><b>第二步：</b>输入如下命令，如图一所示：</p>\n<img src=\"/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/bash.png\" alt=\"图一\" title=\"图一\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">true</span> ; killall Finder</span><br><span class=\"line\">//OS X Mountain Lion 和早期版本命令如下：</span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><b>第三步：</b>按下「Return」键确认。<br>现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。如图二所示：</p>\n<img src=\"/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/finder.png\" alt=\"图二\" title=\"图二\">\n</li>\n</ul>\n<h2 id=\"让Finder隐藏隐藏文件和文件夹\"><a href=\"#让Finder隐藏隐藏文件和文件夹\" class=\"headerlink\" title=\"让Finder隐藏隐藏文件和文件夹\"></a>让Finder隐藏隐藏文件和文件夹</h2><ul>\n<li><p>只需要一步<br>如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成（图三）即可。</p>\n<img src=\"/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/show.png\" alt=\"图三\" title=\"图三\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">false</span> ; killall Finder</span><br><span class=\"line\">//OS X Mountain Lion 和早期版本命令如下：</span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后看到的效果如图四所示：</p>\n<img src=\"/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/hidefinder.png\" alt=\"图四\" title=\"图四\"></li>\n</ul>\n"},{"title":"Failed to Locate or Generate Matchin Signing Assets","url":"http://www.jvaeyhcd.cc/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/","content":"<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。</p>\n<img src=\"/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/problem.png\" alt=\"问题详情\" title=\"问题详情\">\n<a id=\"more\"></a>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><p>还是Google大法好，一下就找到了解决办法。</p>\n<p>以下是我在网上找到了解决办法的详细步骤：</p>\n<ul>\n<li><p>首先创建一个文件夹，名字就叫Payload，<a style=\"color:#4cc190\">一定要是Payload</a>（如果你不信，可以换一个名字试试）。</p>\n</li>\n<li><p>然后在Organizer中然后把 archive 出来的那个在 finder 打开。</p>\n<img src=\"/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/export.png\" alt=\"Organizer中显示\" title=\"Organizer中显示\">\n</li>\n<li><p>然后点击显示包内容。</p>\n<img src=\"/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/show_in_finder.png\" alt=\"在Finder中显示\" title=\"在Finder中显示\">\n</li>\n<li><p>把app 和 dsym 那两个文件拷贝到 Payload文件夹中。</p>\n<img src=\"/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/product.png\" alt=\"product文件目录\" title=\"product文件目录\">\n<img src=\"/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/dSYMs.png\" alt=\"dSYMs文件目录\" title=\"dSYMs文件目录\">\n</li>\n<li><p>然后对Payload压缩</p>\n<img src=\"/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/zip.png\" alt=\"Payload压缩\" title=\"Payload压缩\">\n</li>\n<li><p>最后将Playload.zip的后缀名改成ipa即可。</p>\n</li>\n</ul>\n<p>以上的方法完全可以解决无法导出ipa的问题，但是导出ipa比export出来的包要大一些。</p>\n"},{"title":"Swift开源项目汇总","url":"http://www.jvaeyhcd.cc/2016/04/11/Swift开源项目汇总/","content":"<blockquote>\n<p>拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。</p>\n</blockquote>\n<p>虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。</p>\n<h2 id=\"界面类\"><a href=\"#界面类\" class=\"headerlink\" title=\"界面类\"></a>界面类</h2><ul>\n<li><p><a href=\"https://github.com/raulriera/TextFieldEffects\" target=\"_blank\" rel=\"external\">TextFieldEffects</a><br>你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！</p>\n</li>\n<li><p><a href=\"https://github.com/FahimF/FloatLabelFields\" target=\"_blank\" rel=\"external\">FloatLabelFields</a><br>带浮动标签的输入框</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\" target=\"_blank\" rel=\"external\">MGSwipeTableCell</a><br>另一个UI组件，在很多app里都常见，苹果应该考虑在iOS标准库里加入类似的东西。可滑动的table cell，这是这个pod最好的描述。</p>\n</li>\n<li><p><a href=\"https://github.com/lexrus/LTMorphingLabel\" target=\"_blank\" rel=\"external\">LTMorphingLabel</a><br>有超赞特效效果的Label</p>\n</li>\n<li><p><a href=\"https://github.com/ephread/Instructions\" target=\"_blank\" rel=\"external\">Instructions</a><br>操作指引框架</p>\n</li>\n<li><p><a href=\"https://github.com/mamaral/Onboard\" target=\"_blank\" rel=\"external\">Onboard</a><br>启动导航界面，很方便的集成</p>\n</li>\n<li><p><a href=\"https://github.com/SnapKit/SnapKit\" target=\"_blank\" rel=\"external\">SnapKit</a><br>Swift布局框架 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了</p>\n</li>\n</ul>\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><ul>\n<li><p><a href=\"https://github.com/nickoneill/PermissionScope\" target=\"_blank\" rel=\"external\">PermissionScope</a><br>用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高</p>\n</li>\n<li><p><a href=\"https://github.com/Quick/Quick\" target=\"_blank\" rel=\"external\">Quick</a><br>Swift里的单元测试。</p>\n</li>\n<li><p><a href=\"https://github.com/saturngod/IAPHelper\" target=\"_blank\" rel=\"external\">IAPHelper</a><br>app内购带给我们很多陈词滥调的代码，用这个库就不需要了，把最有关交易金钱的普遍的任务从iOS用户到你的（或者你的公司的）钱包简单包装起来。</p>\n</li>\n<li><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"external\">SwiftyJSON</a><br>GitHub上最为开发者认可的JSON解析类</p>\n</li>\n<li><p><a href=\"https://github.com/ankurp/Dollar\" target=\"_blank\" rel=\"external\">Dollar</a><br>Swift版Lo-Dash(或underscore)函数式工具库</p>\n</li>\n<li><p><a href=\"https://github.com/DaveWoodCom/XCGLogger\" target=\"_blank\" rel=\"external\">XCGLogger</a><br>功能完整的日志管理类库</p>\n</li>\n<li><p><a href=\"https://github.com/mattt/Surge\" target=\"_blank\" rel=\"external\">Surge</a><br>基于苹果Accelerate高性能计算框架封装库</p>\n</li>\n<li><p><a href=\"https://github.com/duemunk/Async\" target=\"_blank\" rel=\"external\">Async</a><br>简洁的后台执行代码封装库</p>\n</li>\n<li><p><a href=\"https://github.com/ArtSabintsev/Siren\" target=\"_blank\" rel=\"external\">Siren</a><br>当应用更新时，通知用户并提供App Store链接</p>\n</li>\n<li><p><a href=\"https://github.com/Thomvis/BrightFutures\" target=\"_blank\" rel=\"external\">BrightFutures</a><br>漫长或复杂计算由独立线程异步来完成</p>\n</li>\n<li><p><a href=\"https://github.com/tadija/AEXML\" target=\"_blank\" rel=\"external\">AEXML</a><br>简单又易于的XML解析类及示例</p>\n</li>\n<li><p><a href=\"https://github.com/andreamazz/AMScrollingNavbar\" target=\"_blank\" rel=\"external\">AMScrollingNavbar</a><br>swift语言编写 上下滑动时动态隐藏标题栏</p>\n</li>\n</ul>\n<h2 id=\"存储类\"><a href=\"#存储类\" class=\"headerlink\" title=\"存储类\"></a>存储类</h2><ul>\n<li><a href=\"https://github.com/stephencelis/SQLite.swift\" target=\"_blank\" rel=\"external\">SQLite.swift</a><br>swift版本简单、轻量，使用上最SQL的SQLite封装库</li>\n</ul>\n<h2 id=\"网络类\"><a href=\"#网络类\" class=\"headerlink\" title=\"网络类\"></a>网络类</h2><ul>\n<li><p><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"external\">Alamofire</a><br>AFNetworking网络基础库Swift语言版</p>\n</li>\n<li><p><a href=\"https://github.com/RxSwiftCommunity/RxAlamofire\" target=\"_blank\" rel=\"external\">RxAlamofire</a><br>对 Alamofire的封装，很是强大</p>\n</li>\n</ul>\n<h2 id=\"基础工具类以及Category\"><a href=\"#基础工具类以及Category\" class=\"headerlink\" title=\"基础工具类以及Category\"></a>基础工具类以及Category</h2><ul>\n<li><a href=\"https://github.com/FabrizioBrancati/BFKit-Swift\" target=\"_blank\" rel=\"external\">BFKit Swift版本</a><br>国外的一个大神写的很好用的分类，比较齐全</li>\n</ul>\n<h2 id=\"图片类\"><a href=\"#图片类\" class=\"headerlink\" title=\"图片类\"></a>图片类</h2><ul>\n<li><p><a href=\"https://github.com/Alamofire/AlamofireImage\" target=\"_blank\" rel=\"external\">AlamofireImage</a><br>swift版本的SDWebImage</p>\n</li>\n<li><p><a href=\"https://github.com/kaishin/ImageScout\" target=\"_blank\" rel=\"external\">ImageScout</a><br>最小网络代价获得图片大小及类型</p>\n</li>\n<li><p><a href=\"https://github.com/indragiek/DominantColor\" target=\"_blank\" rel=\"external\">DominantColor</a><br>提取图片主色示例项目</p>\n</li>\n<li><p><a href=\"https://github.com/gavinbunney/Toucan\" target=\"_blank\" rel=\"external\">Toucan</a><br>小而美的图片变换及处理类</p>\n</li>\n<li><p><a href=\"https://github.com/kaishin/gifu\" target=\"_blank\" rel=\"external\">gifu</a><br>高性能GIF显示类库</p>\n</li>\n<li><p><a href=\"https://github.com/Haneke/HanekeSwift\" target=\"_blank\" rel=\"external\">HanekeSwift</a><br>轻量带缓存高性能图片加载组件</p>\n</li>\n</ul>\n<h2 id=\"框架类\"><a href=\"#框架类\" class=\"headerlink\" title=\"框架类\"></a>框架类</h2><ul>\n<li><p><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\">ReactiveCocoa</a><br>ReactiveCocoa带给我们一种完全不同的编程方式/结构，基于值的信号和流。这是完全的头脑风暴，首先你需要忘记你曾经学习的来理解它是如何工作的。这不是一个简单的任务，但是是有回报的。</p>\n</li>\n<li><p><a href=\"https://github.com/MengTo/Spring\" target=\"_blank\" rel=\"external\">Spring</a></p>\n</li>\n<li><p><a href=\"https://github.com/robb/Cartography\" target=\"_blank\" rel=\"external\">Cartography</a><br>基于代码级的自动布局封装框架</p>\n</li>\n<li><p><a href=\"https://github.com/mutualmobile/MMWormhole\" target=\"_blank\" rel=\"external\">MMWormhole</a><br>iOS扩展与宿主应用的通讯框架</p>\n</li>\n</ul>\n<h2 id=\"示例项目\"><a href=\"#示例项目\" class=\"headerlink\" title=\"示例项目\"></a>示例项目</h2><ul>\n<li><p><a href=\"https://github.com/ochococo/Design-Patterns-In-Swift\" target=\"_blank\" rel=\"external\">Design-Patterns-In-Swift</a><br>如何使用常用设计模式及示例</p>\n</li>\n<li><p><a href=\"https://github.com/robb/hamburger-button\" target=\"_blank\" rel=\"external\">hamburger-button</a><br>无论设计还是代码，都进行了精雕细琢</p>\n</li>\n</ul>\n<h2 id=\"完整项目\"><a href=\"#完整项目\" class=\"headerlink\" title=\"完整项目\"></a>完整项目</h2><ul>\n<li><p><a href=\"https://github.com/tnantoka/edhita\" target=\"_blank\" rel=\"external\">edhita</a><br>支持Markdown, HTML预览的文本编辑器</p>\n</li>\n<li><p><a href=\"https://github.com/mozilla/firefox-ios\" target=\"_blank\" rel=\"external\">firefox-ios</a><br>来自Mozilla开发团队大型纯Swift项目</p>\n</li>\n<li><p><a href=\"https://github.com/JakeLin/SwiftWeather\" target=\"_blank\" rel=\"external\">SwiftWeather</a><br>清新淡雅持续改进天气预报项目<br>hcd是脑残</p>\n</li>\n</ul>\n"},{"title":"iOS中造成dealloc不调用的原因","url":"http://www.jvaeyhcd.cc/2016/04/06/iOS中造成dealloc不调用的原因/","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)dealloc &#123;</span><br><span class=\"line\">    [_mapView release];</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> dealloc];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//并且在界面将要显示的时候设置代理，将要消失的时候取消代理</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewWillAppear:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    _mapView<span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    _mapView<span class=\"variable\">.delegate</span> = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>以上给出的方法确实是对的，可以解决反复切换地图页面和地图上一级页面内存暴增造成的闪退问题。但是这里要说的不是这个问题，而是一个新的问题，我在dealloc中打了断点，但是dealloc根本就没有执行，所以mapView也就根本就没有释放，内存还是一样在暴增。为什么ViewController已经被pop了，而ViewController的dealloc方法却没有被调用？（按理说ViewController被pop的时候它的dealloc的方法应该被调用才对）。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>通过Google搜索终于在晚上找到了答案（大家就不要用百度，想要快速准确的找到自己想要的答案推荐大家用google）。造成ViewController不释放的原因可能有很多。遇到dealloc不调用的时候只需要检查您的ViewController中是否存在以下几个问题：</p>\n<ol>\n<li><p><b>ViewController中存在NSTimer</b></p>\n<p> 如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">1.0</span> </span><br><span class=\"line\">                                 target:<span class=\"keyword\">self</span> </span><br><span class=\"line\">                               selector:<span class=\"keyword\">@selector</span>(updateTime:) </span><br><span class=\"line\">                               userInfo:<span class=\"literal\">nil</span> </span><br><span class=\"line\">                                repeats:<span class=\"literal\">YES</span>];</span><br></pre></td></tr></table></figure>\n<p> 时，这个<a style=\"color: #FF00EE\">target:self</a>就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。</p>\n</li>\n<li><p><b>ViewController中有关的代理</b></p>\n<p> 一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性？比如一个代理的delegate应该是 assign 的现在是retain，(╯‵□′)╯︵┻━┻，就是这个，它会影响你不让你调用dealloc，不信，就试试吧。（这个我还没有遇到过）。</p>\n</li>\n<li><p><b>ViewController中有Block</b></p>\n<p> 这个就是我我上面不进入dealloc的真正原因，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。<br> 例如你这个类叫OneViewController,有个属性是NSString *name; 如果你在block体中使用了self.name，那样子的话这个类就没法释放。<br> 要解决这个问题，MRC下只需</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block Viewcontroller *weakSelf = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<p> ARC下将<strong>block 换为 </strong>weak</p>\n</li>\n</ol>\n<p>目前我所知道的就以上三种情况，如果有什么错误的地方或者还存在的一些情况，欢迎大家来补充。</p>\n"},{"title":"关于UItableView的复用","url":"http://www.jvaeyhcd.cc/2016/04/05/关于UItableView的复用/","content":"<p>UITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。</p>\n<a id=\"more\"></a>\n<p>关于UItableView的复用机制大概是这样的：假设一个UItableView要加载10000条数据，但是一个屏幕最大只能展示3条数据（这里屏幕最多能展示的数据条数是根据UItableViewCell的高度来定的）。然后当你向上滑动，想要查看更多的内容，那么肯定需要一个cell放在已经存在的内容下边。这个时候并不会重新去创建一个UItableViewCell放在下面，而是根据cellIdetifier去内存池中拿到与之对应的UItableViewCell。</p>\n<h2 id=\"复用方式\"><a href=\"#复用方式\" class=\"headerlink\" title=\"复用方式\"></a>复用方式</h2><p>UItableView的复用方式有如下四种方式实现</p>\n<p>方式一:<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UITableViewCell</span> *cell=[tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!cell) &#123;</span><br><span class=\"line\">\tcell=[[<span class=\"built_in\">UITableViewCell</span> alloc]initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier]; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>方式二:UItableViewCell是xib写的<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXXTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">nil</span> == cell) &#123;  </span><br><span class=\"line\">    cell = [[[<span class=\"built_in\">NSBundle</span> mainBundle]loadNibNamed:<span class=\"string\">@\"XXXTableViewCell\"</span> owner:<span class=\"keyword\">self</span> options:<span class=\"literal\">nil</span>]lastObject];  </span><br><span class=\"line\">    cell<span class=\"variable\">.selectionStyle</span>=<span class=\"built_in\">UITableViewCellSelectionStyleNone</span>;  </span><br><span class=\"line\">    [tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@\"XXXTableViewCell\"</span> bundle:[<span class=\"built_in\">NSBundle</span> mainBundle]] forCellReuseIdentifier:cellIdentifier];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>方式三:在xib中identifier属性必须写上cellIdentifier ,对应代码中的cellIdentifier<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXTableViewCell *cell;  </span><br><span class=\"line\">cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">nil</span> == cell) &#123;  </span><br><span class=\"line\">    cell= [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"XXTableViewCell\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>] lastObject];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> cell;</span><br></pre></td></tr></table></figure></p>\n<p>方式四：先register cell，然后复用<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#pragma mark - 初始化控件</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITableView</span> *)tableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_tableView) &#123;</span><br><span class=\"line\">        _tableView = [[<span class=\"built_in\">UITableView</span> alloc]initWithFrame:<span class=\"keyword\">self</span><span class=\"variable\">.frame</span> style:<span class=\"built_in\">UITableViewStylePlain</span>];</span><br><span class=\"line\">        _tableView<span class=\"variable\">.backgroundColor</span> = kMainBgColor;</span><br><span class=\"line\">        _tableView<span class=\"variable\">.dataSource</span> = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">        _tableView<span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">        _tableView<span class=\"variable\">.separatorStyle</span> = <span class=\"built_in\">UITableViewCellSeparatorStyleNone</span>;</span><br><span class=\"line\">        [_tableView registerClass:[XXXCell_iPhone class] forCellReuseIdentifier:kCellIdentifier_XXXCell];</span><br><span class=\"line\">        _tableView<span class=\"variable\">.tableFooterView</span> = <span class=\"keyword\">self</span><span class=\"variable\">.loadingFooterView</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _tableView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//复用</span></span><br><span class=\"line\">    XXXCell_iPhone *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier_XXXCell forIndexPath:indexPath];</span><br><span class=\"line\">    cell<span class=\"variable\">.type</span> = <span class=\"keyword\">self</span><span class=\"variable\">.type</span>;</span><br><span class=\"line\">    [cell setExpressOrder:[_list safeObjectAtIndex:indexPath<span class=\"variable\">.row</span>] needTopView:indexPath<span class=\"variable\">.row</span> == <span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>"},{"title":"关于iOS多线程小记","url":"http://www.jvaeyhcd.cc/2016/03/30/关于iOS多线程小记/","content":"<p>这篇文章我将整理一下iOS中的几种多线程方案，以及使用方法和注意事项。当然也会给出几种简单的代码案例，再试实际使用中去感受它们的区别。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在了解线程前，我们需要先了解进程。一句话概括线程和进程就是：操作系统可以同时执行多个任务，每个任务就是进程，进程可以同时执行多个任务，每个任务就是线程。对于多线程的优点大致可以总结为以下几点：</p>\n<ul>\n<li>进程间不能共享内存，但线程间共享内存非常容易。</li>\n<li>系统创建进程需要为该进程重新分配系统资源，但创建线程的代价要小得多，因此使用多线程来实现任务并发比多进程效率高得多。</li>\n</ul>\n<a id=\"more\"></a>\n<p>在实际开发过程中多线程是非常有用的，假如用户点击界面上某个按钮的时候，该按钮需要执行的任务需要耗时很长，如果我们直接在UI线程中完成这个任务，在该任务执行完成返回之前，UI线程被该任务阻塞，将无法再相应用户的其它操作。在这段时间内用户对界面上的任何操作将不会被相应（除非按Home键返回），这并不是我们希望看到的结果。一般这个时候我们能够想到的办法就是将耗时的操作放到非UI线程（开启一个线程）中完成，这样UI线程就不会被阻塞，应用也就不会失去相应。</p>\n<p>iOS系统大致提供了如下3种实现多线程：</p>\n<ul>\n<li>NSThread</li>\n<li>NSOperation和NSOperationQueue</li>\n<li>GCD(Grand Central Dispatch)</li>\n</ul>\n"},{"title":"iOS上完美编译FFmpeg","url":"http://www.jvaeyhcd.cc/2016/03/28/iOS上完美编译FFmpeg/","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>最新在使用FFmpeg的时候遇到了如下的报错信息，但是现在一直都还未找到解决办法。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols <span class=\"keyword\">for</span> architecture arm64:</span><br><span class=\"line\">  <span class=\"string\">\"_avcodec_close\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::~CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_av_init_packet\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DecoderFrame(unsigned char*, int, int&amp;, int&amp;) <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_av_malloc\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CreateYUVTab_16() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_av_free\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DeleteYUVTab() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">      CH264Decoder::~CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_av_register_all\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_avcodec_find_decoder\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_avcodec_decode_video2\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::DecoderFrame(unsigned char*, int, int&amp;, int&amp;) <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_avcodec_open2\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_avcodec_alloc_context3\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">  <span class=\"string\">\"_avcodec_alloc_frame\"</span>, referenced from:</span><br><span class=\"line\">      CH264Decoder::CH264Decoder() <span class=\"keyword\">in</span> H264Decoder.o</span><br><span class=\"line\">ld: symbol(s) not found <span class=\"keyword\">for</span> architecture arm64</span><br><span class=\"line\">clang: error: linker <span class=\"built_in\">command</span> failed with <span class=\"built_in\">exit</span> code <span class=\"number\">1</span> (use -v to see invocation)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>解决办法，直接上图</p>\n<img src=\"/2016/03/28/iOS上完美编译FFmpeg/1.png\" alt=\"解决办法\" title=\"解决办法\">"},{"title":"iOS UIWebView简单使用","url":"http://www.jvaeyhcd.cc/2016/03/26/iOS-UIWebView简单使用/","content":"<p>UIVebView可以帮你在App中创建一个网页浏览器，来加载一些网页展示页面。现在我们可能会看到很多的app中或多或多或少都有嵌入一些h5的页面，对于一些复杂的页面有h5来展示时一种不错的办法。</p>\n<p>下面我想简单记录一下UIWebView的简单使用。</p>\n<ol>\n<li><p>创建UIWebView</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> bouds = [[<span class=\"built_in\">UIScreen</span> manScreen]applicationFrame];  </span><br><span class=\"line\"><span class=\"built_in\">UIWebView</span>* webView = [[<span class=\"built_in\">UIWebView</span> alloc]initWithFrame:bounds];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置相关属性</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView<span class=\"variable\">.scalespageToFit</span> = <span class=\"literal\">YES</span>;\t    <span class=\"comment\">//自动对页面进行缩放以适应屏幕  </span></span><br><span class=\"line\">webView<span class=\"variable\">.detectsPhoneNumbers</span> = <span class=\"literal\">YES</span>;  <span class=\"comment\">//自动检测网页上的电话号码，单击可以拨打</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>显示UIWebView到UIViewController上</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:webView];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载内容</p>\n<p> 加载一个完整的网页的内容</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span>* url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://www.youku.com\"</span>];<span class=\"comment\">//创建URL  </span></span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url]; <span class=\"comment\">//创建NSURLRequest  </span></span><br><span class=\"line\">[webView loadRequest:request];                             <span class=\"comment\">//加载</span></span><br></pre></td></tr></table></figure>\n<p> 加载本地网页资源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span>* url = [<span class=\"built_in\">NSURL</span>   fileURLWithPath:filePath];          <span class=\"comment\">//创建URL  </span></span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];<span class=\"comment\">//创建NSURLRequest  </span></span><br><span class=\"line\">[webView loadRequest:request];                            <span class=\"comment\">//加载</span></span><br></pre></td></tr></table></figure>\n<p> 加载带标签的htmlString，你可以提供一个基础URL,来指导UIWebView对象如何跟随链加载远程资源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.webContentView</span> loadHTMLString:<span class=\"string\">@\"&lt;a&gt;hahhaha&lt;/a&gt;\"</span> baseURL:<span class=\"literal\">nil</span>];<span class=\"comment\">//显示带标签的字符串</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导航</p>\n<p> UIWebView内部会管理浏览器的导航动作，通过goForward和goBack方法你可以控制前进与后退动作</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webView goBack];          <span class=\"comment\">//后退</span></span><br><span class=\"line\">[webView goForward];       <span class=\"comment\">//前进</span></span><br><span class=\"line\">[webView reload];          <span class=\"comment\">//重载  </span></span><br><span class=\"line\">[webView stopLoading];     <span class=\"comment\">//取消载入内容</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UIWebViewDelegate委托代理</p>\n<p> UIWebViewDelegate的一组代理方法在特定时间会得到通知，要使用这些方法必须先设定webView的委托</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView<span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<p> 具体的一些委托方法有</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  当网页视图被指示载入内容而得到通知。应当返回YES，这样会进行加载</span><br><span class=\"line\"> *  通过导航类型参数可以得到请求发起的原因，可以是以下任意值：</span><br><span class=\"line\"> *  UIWebViewNavigationTypeLinkClicked</span><br><span class=\"line\"> *  UIWebViewNavigationTypeFormSubmitted</span><br><span class=\"line\"> *  UIWebViewNavigationTypeBackForward</span><br><span class=\"line\"> *  UIWebViewNavigationTypeReload</span><br><span class=\"line\"> *  UIWebViewNavigationTypeFormResubmitted</span><br><span class=\"line\"> *  UIWebViewNavigationTypeOther</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">-(<span class=\"built_in\">BOOL</span>)webView:(<span class=\"built_in\">UIWebView</span>*)webView </span><br><span class=\"line\">shouldStartLoadWithRequest:(<span class=\"built_in\">NSURLRequest</span>*) reuqest </span><br><span class=\"line\">navigationType:(<span class=\"built_in\">UIWebViewNavigationType</span>)navigationType;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当网页视图已经开始加载一个请求后，得到通知。</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)webViewDidStartLoad:(<span class=\"built_in\">UIWebView</span>*)webView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当网页视图结束加载一个请求之后，得到通知。 </span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)webViewDidFinishLoad:(<span class=\"built_in\">UIWebView</span>*)webView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当在请求加载中发生错误时，得到通知。会提供一个NSSError对象，以标识所发生错误类型。</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)webView:(<span class=\"built_in\">UIWebView</span>*)webView  DidFailLoadWithError:(<span class=\"built_in\">NSError</span>*)error;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Objc常用关键字的使用与区别","url":"http://www.jvaeyhcd.cc/2016/03/23/Objective-C常用关键字的使用与区别/","content":"<p>虽然接触iOS已经很久了，但是对于objc中常见的关键字还经常处于傻傻分不清楚的状态。遇到最多的情况就是在申明一个属性的时候，比如：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@propperty (?,?) ?*!;</span><br><span class=\"line\">...............</span><br><span class=\"line\">............</span><br><span class=\"line\">.........</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure></p>\n<p>就是这里，每次在这里的时候都不知道，怎么去申明他的关键字。这个看起来简单（弄明白了确实也是很简单的），但是如果没有系统的去区分这些关键字很容易混淆。<br>所以今天通过自己的一些积累以及在网上总结的一些资料，给自己总结一下，主要作为自己对iOS学习的一个小小的总结。</p>\n<p>OC中常见的关键字有copy,assign,strong,retain,weak,readonly,nonatomic,atomic。<br>这篇文章主要从这几个关键字的含义和简单的使用以及iOS开发中使用的时候的一些区别来进行总结。（看似简单但却非常重要）</p>\n<a id=\"more\"></a>\n<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><ul>\n<li><p><strong>copy</strong> 创建一个索引计数为1的对象,释放掉原来的对象。复制内容（深复制），如果调用copy的是数组，则为指针复制（浅复制），仅仅复制子元素的指针。copy常常用来修饰NSString，NSMutableArray和Block。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span>  *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSMutableArray</span> *myArray;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"keyword\">void</span>(^myBlock)();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>assign</strong> 简单的赋值，不会更改索引计数，主要是对基本数据类型使用。eg：（NSInteger，CGFloat和C语言的int,float, double,char等）</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">BOOL</span> isOK;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> width;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGPoint</span> height;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>retain</strong><br>释放旧的对象，将旧对象的值赋予输入对象并将输入对象的索引计数＋1，主要应用与NSObject与其子类中。 retain是指针复制（浅复制），引用计数加1，而不会导致内容被复制。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">nonatomic</span>, retain) <span class=\"built_in\">UIColor</span> *myColor;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)newName &#123;</span><br><span class=\"line\">    [newName retain];</span><br><span class=\"line\">    [name release];  </span><br><span class=\"line\">    name = newName;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>strong</strong><br>相当于retain，strong在ARC环境下为默认属性类型。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readwrite</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIViewController</span> *viewController;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,  <span class=\"keyword\">strong</span>) <span class=\"keyword\">id</span> childObject;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>weak</strong><br>取代之前的assign，对象销毁之后会自动置为nil，防止野指针。<br>assign不能自动置为nil，需要手动置为nil。<br>delegate基本总是使用weak，以防止循环引用。特殊情况是，如果希望在dealloc中调用delegate的某些方法进行释放，此时如果使用weak将引起异常，因为此时已经是nil了，那么采用assign更为合适。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span>  (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *myButton;<span class=\"comment\">//处于最顶层的IBOutlet应该为strong</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">id</span> parentObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readwrite</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">id</span>  &lt;MyDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">NSObject</span> &lt;SomeDelegate&gt; *delegate;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>readonly</strong><br>此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在@implementation中只需要一个读取器。或者如果你使用@synthesize关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。</p>\n</li>\n<li><p><strong>readwrite</strong><br>此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在@implementation中实现。如果使用@synthesize关键字，读取器和设置器都会被解析。</p>\n</li>\n</ul>\n<h2 id=\"使用区别\"><a href=\"#使用区别\" class=\"headerlink\" title=\"使用区别\"></a>使用区别</h2><ul>\n<li><strong>copy和retain</strong></li>\n</ul>\n<ol>\n<li>copy其实是建立了一个相同的对象，而retain不是；</li>\n<li>copy是内容拷贝，retain是指针拷贝；</li>\n<li>copy是内容的拷贝 ,对于像NSString的确是这样，但是如果copy的是一个NSArray呢?这时只是copy了指向array中相对应元素的指针.这便是所谓的”浅复制”.</li>\n<li>copy的情况：NSString *newPt = [pt copy];<br>此时会在堆上重新开辟一段内存存放@”abc” 比如0X1122 内容为@”abc 同时会在栈上为newPt分配空间 比如地址：0Xaacc 内容为0X1122 因此retainCount增加1供newPt来管理0X1122这段内存；</li>\n</ol>\n<ul>\n<li><strong>assign与retain</strong></li>\n</ul>\n<ol>\n<li>assign: 简单赋值，不更改索引计数；</li>\n<li>assign的情况：NSString *newPt = [pt assing];<br>此时newPt和pt完全相同 地址都是0Xaaaa 内容为0X1111 即newPt只是pt的别名，对任何一个操作就等于对另一个操作， 因此retainCount不需要增加；</li>\n<li>assign就是直接赋值；</li>\n<li>retain使用了引用计数，retain引起引用计数加1, release引起引用计数减1，当引用计数为0时，dealloc函数被调用，内存被回收；</li>\n<li>retain的情况：NSString *newPt = [pt retain];<br>此时newPt的地址不再为0Xaaaa，可能为0Xaabb 但是内容依然为0X1111。 因此newPt 和 pt 都可以管理”abc”所在的内存，因此 retainCount需要增加1；</li>\n</ol>\n<ul>\n<li><strong>readonly与readwrite</strong></li>\n</ul>\n<ol>\n<li>readonly：只产生简单的getter,没有setter。</li>\n<li>readwrite：同时产生setter\\getter方法</li>\n</ol>\n<ul>\n<li><strong>nonatomic与atomic</strong></li>\n</ul>\n<ol>\n<li>nonatomic非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问；</li>\n<li>成员变量的@property属性时，默认为atomic，提供多线程安全。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果<br>weak and strong property (强引用和弱引用的区别)</li>\n<li>比如setter函数里面改变两个成员变量，如果你用nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态，这样取到的东西会有问题，就是不完整的。当然如果不需要多线程支持的话，用nonatomic就够了，因为不涉及到线程锁的操作，所以它执行率相对快些。</li>\n<li>atomic的意思就是setter/getter这个函数，是一个原语操作。如果有多个线程同时调用setter的话，不会出现某一个线程执行完setter全部语句之前，另一个线程开始执行setter情况，相当于函数头尾加了锁一样，可以保证数据的完整性。nonatomic不保证setter/getter的原语行，所以你可能会取到不完整的东西。因此，在多线程的环境下原子操作是非常必要的，否则有可能会引起错误的结果。</li>\n</ol>\n<ul>\n<li><strong>weak与strong</strong></li>\n</ul>\n<ol>\n<li>weak 和 strong 属性只有在你打开ARC时才会被要求使用，这时你是不能使用retain release autorelease 操作的，因为ARC会自动为你做好这些操作，但是你需要在对象属性上使用weak 和strong,其中strong就相当于retain属性，而weak相当于assign。</li>\n<li>只有一种情况你需要使用weak（默认是strong），就是为了避免retain cycles（就是父类中含有子类{父类retain了子类}，子类中又调用了父类{子类又retain了父类}，这样都无法release）</li>\n<li>声明为weak的指针，指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。</li>\n</ol>\n"},{"title":"iOS几种不同传值方式","url":"http://www.jvaeyhcd.cc/2016/03/17/iOS几种不同传值方式/","content":"<p>关于iOS的传值方式我所知道的一共有一下6种方式：</p>\n<ul>\n<li>属性传值</li>\n<li>代理传值</li>\n<li>block传值</li>\n<li>单例传值</li>\n<li>通知传值</li>\n<li>NSUserDefault保存数据传值</li>\n</ul>\n<p>以上六种方式都可以实现iOS不同对象之间的传值，但是针对不同的情况，我们会采取不同的传值方式。</p>\n<a id=\"more\"></a>\n<h2 id=\"属性传值\"><a href=\"#属性传值\" class=\"headerlink\" title=\"属性传值\"></a>属性传值</h2><p>属性传值一般常用在页面中，从一个页面传值到另一个页面。例如从A页面跳转到B页面，如果需要将A页面中的某个值传递到B页面中，这个时候用到最简单的传值方式就是属性传值。</p>\n<p>下面是一个简单例子实现将AViewController中UItextFiled中的值传到BViewController中Label中。<br>AViewController.m中的代码如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"AViewController.h\"</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"BViewController.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义输入框</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UITextField</span> *textField;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:<span class=\"keyword\">self</span><span class=\"variable\">.textField</span>];</span><br><span class=\"line\">    <span class=\"comment\">//定义点击跳转的按钮</span></span><br><span class=\"line\">    <span class=\"built_in\">UIButton</span> *pushBtn = [[<span class=\"built_in\">UIButton</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>)];</span><br><span class=\"line\">    pushBtn<span class=\"variable\">.titleLabel</span><span class=\"variable\">.font</span> = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">12</span>];</span><br><span class=\"line\">    [pushBtn setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    [pushBtn setTitle:<span class=\"string\">@\"push显示\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    [pushBtn setBackgroundColor:[<span class=\"built_in\">UIColor</span> yellowColor]];</span><br><span class=\"line\">    [pushBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pushAction) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:pushBtn];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)pushAction &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义跳转页面，并给B页面str赋值</span></span><br><span class=\"line\">    BViewController *vc = [[BViewController alloc]init];</span><br><span class=\"line\">    vc<span class=\"variable\">.str</span> = <span class=\"keyword\">self</span><span class=\"variable\">.textField</span><span class=\"variable\">.text</span>;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.navigationController</span> pushViewController:vc animated:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UITextField</span> *)textField &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_textField) &#123;</span><br><span class=\"line\">        _textField = [[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">280</span>, <span class=\"number\">30</span>)];</span><br><span class=\"line\">        _textField<span class=\"variable\">.borderStyle</span> = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _textField;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>BViewController.h文件中，声明被赋值的属性<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BViewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>BViewController.m中显示AViewController传递过来的属性值<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"BViewController.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.backgroundColor</span> = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UILabel</span> *label = [[<span class=\"built_in\">UILabel</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)];</span><br><span class=\"line\">    label<span class=\"variable\">.font</span> = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</span><br><span class=\"line\">    label<span class=\"variable\">.textColor</span> = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">    <span class=\"comment\">//显示AViewController传递过来的值</span></span><br><span class=\"line\">    label<span class=\"variable\">.text</span> = <span class=\"keyword\">self</span><span class=\"variable\">.str</span>;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:label];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代理传值\"><a href=\"#代理传值\" class=\"headerlink\" title=\"代理传值\"></a>代理传值</h2>"},{"title":"App Store上线完整流程","url":"http://www.jvaeyhcd.cc/2016/03/05/App-Store上线完整流程/","content":"<p>经过一年的iOS开发，到现在一共上线了6款App到App Store。从iOS6到iOS9，每一次苹果系统的更新，App Store的上线流程都会有点相应的改变。对于上线App到App Store的这个流程现在已经是得心应手，现在利用周末这个闲暇的时间纪录一下完整的上传App到App Store的流程。</p>\n<h2 id=\"预先准备\"><a href=\"#预先准备\" class=\"headerlink\" title=\"预先准备\"></a>预先准备</h2><p>在你开始将程序提交到App Store之前，您需要有一个开发者帐号、一个App ID、一个有效的证书以及一个有效的Provisioning Profiles。</p>\n<a id=\"more\"></a>\n<h3 id=\"Step-1-申请开发者帐号\"><a href=\"#Step-1-申请开发者帐号\" class=\"headerlink\" title=\"Step 1:申请开发者帐号\"></a>Step 1:申请开发者帐号</h3><p>如果您现在已有开发者帐号，那么恭喜您，您可以直接跳过此步骤直接进入下一步骤。苹果开发者帐号分为三种：个人开发者帐号、公司帐号、企业帐号。</p>\n<p><strong>个人帐号（Individual）:</strong></p>\n<ul>\n<li>费用：99美元一年</li>\n<li>App Store上架：是</li>\n<li>最大uuid支持数：100</li>\n<li>协作人数：1人（开发者自己）</li>\n</ul>\n<p>说明：“个人”开发者可以申请升级“公司”，可以通过拨打苹果公司客服电话（400 6701 855）来咨询和办理。</p>\n<p><strong> 公司帐号（Company）: </strong></p>\n<ul>\n<li>费用：99美元一年</li>\n<li>App Store上架：是</li>\n<li>最大uuid支持数：100</li>\n<li>协作人数：多人</li>\n</ul>\n<p>说明：允许多个开发者进行协作开发，比个人多一些帐号管理的设置，可设置多个Apple ID，分4种管理级别的权限。申请时需要填写公司的邓白氏编码（DUNS Number）。</p>\n<p><strong> 企业帐号（Enterprise）: </strong></p>\n<ul>\n<li>费用：299美元一年</li>\n<li>App Store上架：否</li>\n<li>最大uuid支持数：不限制</li>\n<li>协作人数：多人</li>\n</ul>\n<p>说明：需要注意的是，企业账号开发的应用不能上线App Store，适合那些不希望公开发布应用的企业。同样，申请时也需要公司的邓白氏编码（DUNS Number）。</p>\n<h3 id=\"Step-2-App-ID（应用ID）\"><a href=\"#Step-2-App-ID（应用ID）\" class=\"headerlink\" title=\"Step 2:App ID（应用ID）\"></a>Step 2:App ID（应用ID）</h3><p>App ID是识别不同应用程序的唯一标示符。每个app都需要一个App ID或者app标识。目前有两种类型的App标识：一个是精确的App ID（explicit App ID），一个是通配符App ID（wildcard App ID）。使用通配符的App ID可以用来构建和安装多个程序。尽管通配符App ID非常方便，但是一个精确的App ID也是需要的，尤其是当App使用iCloud 或者使用其他iOS功能的时候，比如Game Center、Push Notifications或者IAP。如果你已经申请开发者帐号，接下你需要登录<a href=\"https://developer.apple.com/membercenter/。\" target=\"_blank\" rel=\"external\">https://developer.apple.com/membercenter/。</a><br>登录成功后界面如下：<br><img src=\"/2016/03/05/App-Store上线完整流程/developer_center.png\" alt=\"Developer页面\" title=\"Developer页面\"><br>点击“Certificates,Identifiers&amp;Profiles”进入到<br><img src=\"/2016/03/05/App-Store上线完整流程/Identifiers.png\" alt=\"Identifiers\" title=\"Identifiers\"><br>选择Identifiers，然后点击“＋”注册你自己的应用的App Id<br><img src=\"/2016/03/05/App-Store上线完整流程/create_app_id.png\" alt=\"创建App ID\" title=\"创建App ID\"><br>以上两项设置好后，点击下一步，然后注册即可，这样一个App Id就创建好了。接下来需要设置开发证书。</p>\n<h3 id=\"Step-3-Distribution-Certificate-发布证书\"><a href=\"#Step-3-Distribution-Certificate-发布证书\" class=\"headerlink\" title=\"Step 3:Distribution Certificate(发布证书)\"></a>Step 3:Distribution Certificate(发布证书)</h3><p>iOS应用都有一个安全证书用于验证开发者身份和签名。为了可以向App Store提交app，你需要创建一个iOS provisioning profile 。首先需要创建一个distribution certificate（发布证书），过程类似于创建一个development certificate（开发证书）。如果你已经在实体设备上测试你的App，那么你对创建development certificate就已经很熟悉了。</p>\n<p>首先选择Certificate,然后点击“＋”</p>\n<img src=\"/2016/03/05/App-Store上线完整流程/create_certificates_step1.png\" alt=\"创建Certificate证书第一步\" title=\"创建Certificate证书第一步\">\n<img src=\"/2016/03/05/App-Store上线完整流程/create_certificates_step2.png\" alt=\"创建Certificate证书第二步\" title=\"创建Certificate证书第二步\">\n<p>然后点击“下一步”来到如下界面：<br><img src=\"/2016/03/05/App-Store上线完整流程/create_certificates_step3.png\" alt=\"创建Certificate证书第三步\" title=\"创建Certificate证书第三步\"></p>\n<p>这里需要上传一个.certSigningRequest文件来生成相应的证书。下面简单讲一下.certSigningRequest文件的生成方法：<br>首先打开“钥匙串访问”，在菜单中选择“钥匙串访问”-&gt;“证书助理”-&gt;“从证书颁发机构请求证书…”。<br><img src=\"/2016/03/05/App-Store上线完整流程/create_certSigningRequest_step1.png\" alt=\"创建.certSigningRequest文件\" title=\"创建.certSigningRequest文件\"><br>然后填写好相应的信息，注意：选择保存到磁盘。<br><img src=\"/2016/03/05/App-Store上线完整流程/create_certSigningRequest_step2.png\" alt=\"填写.certSigningRequest文件信息\" title=\"填写.certSigningRequest文件信息\"><br>点击继续，然后会生成一个.certSigningRequest文件。<br>然后选择生成的.certSigningRequest文件，点击下一步即可生成相应的证书。</p>\n<h3 id=\"Step-4-Provisioning-Profile-配置文件\"><a href=\"#Step-4-Provisioning-Profile-配置文件\" class=\"headerlink\" title=\"Step 4:Provisioning Profile(配置文件)\"></a>Step 4:Provisioning Profile(配置文件)</h3><p>一旦你创建了App ID和distribution certificate，你可以创建一个iOS provisioning profile以方便在App Store中销售你的App。Provisioning Profile主要分为开发配置文件和发布配置文件，发布配置文件中又分App Store配置文件和Ad Hoc配置文件。App Store类型的Provisioning Profile顾名思义是用于发布到App Store的配置文件。Ad Hoc的Provisioning Profile配置文件是用于发布应用内的测试包的，在应用还没有上线的时候需要发ipa给客户安装的时候需要用到，只需要获取到客户手机的UDID然后生成相应的Ad Hoc类型的Provisioning Profile文件然后打包发布即可。<br>同样Provisioning Profile的创建方式如下：<br>选择“Provisioning Profiles”，然后点击“➕”创建Provisioning Profiles文件</p>\n<img src=\"/2016/03/05/App-Store上线完整流程/create_pp_step1.png\" alt=\"创建Provisioning Profiles文件\" title=\"创建Provisioning Profiles文件\">\n<p>选择相应的Provisioning Profiles文件类型<br><img src=\"/2016/03/05/App-Store上线完整流程/create_pp_step2.png\" alt=\"选择Provisioning Profiles文件类型\" title=\"选择Provisioning Profiles文件类型\"></p>\n<p>选择您需要生成Provisioning Profiles文件的App ID<br><img src=\"/2016/03/05/App-Store上线完整流程/create_pp_step3.png\" alt=\"选择Provisioning Profiles文件的App ID\" title=\"选择Provisioning Profiles文件的App ID\"><br>选择相应的证书<br><img src=\"/2016/03/05/App-Store上线完整流程/create_pp_step4.png\" alt=\"选择相应的证书\" title=\"选择相应的证书\"><br>选择已注册的设备<br><img src=\"/2016/03/05/App-Store上线完整流程/create_pp_step5.png\" alt=\"选择已注册的设备\" title=\"选择已注册的设备\"><br>然后点击下一步即可生成Provisioning Profiles文件，点击下载，然后双击打开。</p>\n<h3 id=\"Step-5-Build-Settings-生成设置\"><a href=\"#Step-5-Build-Settings-生成设置\" class=\"headerlink\" title=\"Step 5:Build Settings(生成设置)\"></a>Step 5:Build Settings(生成设置)</h3><p>配置App ID、distribution certificate 和provisioning profile已经完成，是时候配置Xcode中target的build settings了。在Xcode Project  Navigator的targets列表中选择一个target，打开顶部的Build Settings选项，然后更新一下Code Signing来跟之前创建的distribution provisioning profile相匹配。最近添加的provisioning profiles有时候不会立马就在build settings的Code Signing中看到，重启一下Xcode就可以解决这个问题。<br><img src=\"/2016/03/05/App-Store上线完整流程/build_setting.png\" alt=\"Build Setting配置\" title=\"Build Setting配置\"></p>\n<h3 id=\"Step-6-Deployment-Target-部署目标\"><a href=\"#Step-6-Deployment-Target-部署目标\" class=\"headerlink\" title=\"Step 6:Deployment Target(部署目标)\"></a>Step 6:Deployment Target(部署目标)</h3><p>所有配置都已配好后，就可以开始打包了生成ipa了。<br><img src=\"/2016/03/05/App-Store上线完整流程/archive.png\" alt=\"开始打包\" title=\"开始打包\"></p>\n<h2 id=\"iTunes-Connect相关配置\"><a href=\"#iTunes-Connect相关配置\" class=\"headerlink\" title=\"iTunes Connect相关配置\"></a>iTunes Connect相关配置</h2><h3 id=\"Step-1-创建“我的App”\"><a href=\"#Step-1-创建“我的App”\" class=\"headerlink\" title=\"Step 1:创建“我的App”\"></a>Step 1:创建“我的App”</h3><p>首先用你自己的开发者帐号登录到<a href=\"https://itunesconnect.apple.com/\" target=\"_blank\" rel=\"external\">iTunes Connect</a>。</p>\n<img src=\"/2016/03/05/App-Store上线完整流程/itunes_connect_step1.png\" alt=\"iTunes Connect\" title=\"iTunes Connect\">\n<p>登录成功后点击“我的App”，然后点击“＋”-&gt;“新建App”<br><img src=\"/2016/03/05/App-Store上线完整流程/itunes_connect_step2.png\" alt=\"在iTunes Connect上新建App\" title=\"在iTunes Connect上新建App\"><br>其中平台选择iOS，名称为你的app的名词，主要语言为你的app的主要语言，套装ID为之前创建的App ID，也就是Xcode工程中的Bundle ID。<br>点击下一步，创建成功后，选择你刚创建成功的应用，进行相关的设置。<br><img src=\"/2016/03/05/App-Store上线完整流程/itunes_connect_step3.png\" alt=\"填写相关信息\" title=\"填写相关信息\"></p>\n<p>相关设置比较简单就不再多说。</p>\n<h3 id=\"Step-2-打包上传到iTunes-Connect\"><a href=\"#Step-2-打包上传到iTunes-Connect\" class=\"headerlink\" title=\"Step 2:打包上传到iTunes Connect\"></a>Step 2:打包上传到iTunes Connect</h3><p>配置好了iTunes Connect的相关配置后，就可以将我们生成的ipa包上传到iTunes Connect上了。Xcode中配置完成后archive成功后Xcode会弹出如下界面：<br><img src=\"/2016/03/05/App-Store上线完整流程/upload_itunes_connect.png\" alt=\"上传到iTunes Connect\" title=\"上传到iTunes Connect\"><br> 上传到iTunes Connect有两种方法：</p>\n<p><strong> 方法一 </strong><br>直接点击上图的“Upload to App Store”按钮直接上传到App Store。</p>\n<p><strong> 方法二 </strong><br>先导出ipa，然后使用Application Loader上传到App Store。<br>点击“Export”，会弹出如下界面，选择导出的类型，这里要上传App Store，所以选择第一种。<br><img src=\"/2016/03/05/App-Store上线完整流程/archive_step_1.png\" alt=\"导出ipa文件\" title=\"导出ipa文件\"><br>点击“下一步”，默认回去检查你的证书，如果没有什么问题一直下一步，最后会在桌面生成一个ipa的包。然后在Xcode中打开Application Loader。<br><img src=\"/2016/03/05/App-Store上线完整流程/application_loader_1.png\" alt=\"Application Loader\" title=\"Application Loader\"><br>用你自己的开发者帐号登录Application Loader，<br><img src=\"/2016/03/05/App-Store上线完整流程/application_loader_login.png\" alt=\"Application Loader登录\" title=\"Application Loader登录\"><br>登录成功后选取你刚刚生成的ipa<br><img src=\"/2016/03/05/App-Store上线完整流程/application_loader_step2.png\" alt=\"Application Loader上传\" title=\"Application Loader上传\"><br>然后上传提交到App Store。</p>\n<h3 id=\"Step-3-提交给苹果审核\"><a href=\"#Step-3-提交给苹果审核\" class=\"headerlink\" title=\"Step 3:提交给苹果审核\"></a>Step 3:提交给苹果审核</h3><p>完成上面的步骤后，返回到iTunes Connect界面，选择你先前创建的App，在它的活动页面下可以看到所有已上传过的ipa版本。<br><img src=\"/2016/03/05/App-Store上线完整流程/itunes_connect_step4.png\" alt=\"上传成功后\" title=\"上传成功后\"><br>选择App信息配置界面，找到“构建版本”，然后选择你刚刚上传的构建版本，然后提交审核即可<br><img src=\"/2016/03/05/App-Store上线完整流程/itunes_connect_step5.png\" alt=\"提交审核\" title=\"提交审核\"></p>\n"},{"title":"RESideMenu在所有界面都会侧滑的问题解决办法","url":"http://www.jvaeyhcd.cc/2016/03/05/RESideMenu在所有界面都会侧滑的问题解决办法/","content":"<blockquote>\n<p>RESideMenu一个非常好用的左右侧滑菜单控件，很多IOS项目都会用到此类左右侧滑效果。然而在RESideMenu的使用过程中，发现其默认将所有界面都加入了侧滑效果。如在主界面导航的Menu放在屏幕的左右两侧，侧滑才可以显示出来，但是当我们进入主界面的某个次级View中，甚至更深一层的View中，侧滑功能仍然可用。这一点就用IOS的UINavigationController的滑动返回冲突。为了解决这个问题，通过Google在网上搜索找到了如下的解决方法。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>奉上参考原文链接地址：<a href=\"http://blog.csdn.net/icetime17/article/details/46883915\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/icetime17/article/details/46883915</a></p>\n<h2 id=\"RESideMenu基本用法\"><a href=\"#RESideMenu基本用法\" class=\"headerlink\" title=\"RESideMenu基本用法\"></a>RESideMenu基本用法</h2><p>首先创建window的rootViewController，在RootViewController引入并继承RESideMenu及其RESideMenuDelegate. </p>\n<p>具体相关代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"RESideMenu.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> : <span class=\"title\">RESideMenu</span> &lt;<span class=\"title\">RESideMenuDelegate</span>&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>然后在RootViewController.m文件中设置好RESideMenu</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"RootViewController.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> ()</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">RootViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)awakeFromNib &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.menuPreferredStatusBarStyle</span> = <span class=\"built_in\">UIStatusBarStyleLightContent</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.contentViewShadowColor</span> = [<span class=\"built_in\">UIColor</span> blackColor];</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.contentViewShadowOffset</span> = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.contentViewShadowOpacity</span> = <span class=\"number\">0.6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.contentViewShadowRadius</span> = <span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.contentViewShadowEnabled</span> = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.contentViewController</span> = [<span class=\"keyword\">self</span><span class=\"variable\">.storyboard</span> instantiateViewControllerWithIdentifier:<span class=\"string\">@\"ContentViewController\"</span>];</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.leftMenuViewController</span> = [<span class=\"keyword\">self</span><span class=\"variable\">.storyboard</span> instantiateViewControllerWithIdentifier:<span class=\"string\">@\"LeftMenuViewController\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#pragma mark - RESideMenu Delegate</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)sideMenu:(RESideMenu *)sideMenu willShowMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)sideMenu:(RESideMenu *)sideMenu didShowMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)sideMenu:(RESideMenu *)sideMenu willHideMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)sideMenu:(RESideMenu *)sideMenu didHideMenuViewController:(<span class=\"built_in\">UIViewController</span> *)menuViewController &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><p>在RESideMenu的使用过程中，发现所有的界面都加上了侧滑功能，并且iOS的滑动返回功能失效了。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>通过观察RESideMenu的源码发现，RESideMenu类中有一个BOOL属性panGestureEnabled, 可以将其视为侧滑效果的开关。以RESideMenu的panGestureEnabled属性为突破口，采用通知的方式来解决这个问题。<br>在RootViewController.m文件中加入如下代码：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">  [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                           selector:<span class=\"keyword\">@selector</span>(disableRESideMenu)</span><br><span class=\"line\">                                               name:<span class=\"string\">@\"disableRESideMenu\"</span></span><br><span class=\"line\">                                             object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">  [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                           selector:<span class=\"keyword\">@selector</span>(enableRESideMenu) </span><br><span class=\"line\">                                               name:<span class=\"string\">@\"enableRESideMenu\"</span></span><br><span class=\"line\">                                             object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)enableRESideMenu &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.panGestureEnabled</span> = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)disableRESideMenu &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.panGestureEnabled</span> = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在其他页面需要禁止侧滑的时候调用如下代码,发送通知<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关闭侧滑效果</span></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class=\"string\">@\"disableRESideMenu\"</span></span><br><span class=\"line\">                                                            object:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                          userInfo:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure></p>\n<p>相反在需要侧滑的地方调用<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启侧滑效果</span></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class=\"string\">@\"enableRESideMenu\"</span></span><br><span class=\"line\">                                                    object:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                  userInfo:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Block正确使用避免Cycle Retain和Crash","url":"http://www.jvaeyhcd.cc/2016/02/24/Block正确使用避免Cycle-Retain和Crash/","content":"<blockquote>\n<p>本文只介绍了MRC时的情况，有些细节不适用于ARC。比如MRC下<strong>block不会增加引用计数，但ARC会，ARC下必须用</strong>weak指明不增加引用计数；ARC下block内存分配机制也与MRC不一样，所以文中的一些例子在ARC下测试结果可能与文中描述的不一样</p>\n</blockquote>\n<h2 id=\"Block简介\"><a href=\"#Block简介\" class=\"headerlink\" title=\"Block简介\"></a>Block简介</h2><p>Block作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于objc在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理 要么导致return cycle内存泄漏要么内存被提前释放导致crash。 Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅 实现函数的功能，还能携带函数的执行环境。</p>\n<p>可以这样理解，Block其实包含两个部分内容</p>\n<ul>\n<li>Block执行的代码，这是在编译的时候已经生成好的；</li>\n<li>一个包含Block执行时需要的所有外部变量值的数据结构。 Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。</li>\n</ul>\n<p>Block与函数另一个不同是，Block类似ObjC的对象，可以使用自动释放池管理内存（但Block并不完全等同于ObjC对象，后面将详细说明）。</p>\n<a id=\"more\"></a>\n<h2 id=\"Block基本语法\"><a href=\"#Block基本语法\" class=\"headerlink\" title=\"Block基本语法\"></a>Block基本语法</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个Block变量</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> (^sum) (<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"comment\">// sum是个Block变量，该Block类型有两个int型参数，返回类型是long。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义Block并赋给变量sum</span></span><br><span class=\"line\">sum = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用Block：</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> s = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>定义一个实例函数，该函数返回Block：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">long</span> (^)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)) sumBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[ ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用Block</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> sumBlock](<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></p>\n<p>是不是感觉很怪？为了看的舒服，我们把Block类型typedef一下<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> (^BlkSum)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">- (BlkSum) sumBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">    BlkSum blk = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[blk <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Block在内存中的位置\"><a href=\"#Block在内存中的位置\" class=\"headerlink\" title=\"Block在内存中的位置\"></a>Block在内存中的位置</h2><p>根据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。</p>\n<ul>\n<li>NSGlobalBlock：类似函数，位于text段；</li>\n<li>NSStackBlock：位于栈内存，函数返回后Block将无效；</li>\n<li>NSMallocBlock：位于堆内存。</li>\n</ul>\n<p>来看下面一段代码<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BlkSum blk1 = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blk1 = %@\"</span>, blk1);<span class=\"comment\">// blk1 = &lt;__NSGlobalBlock__: 0x47d0&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum blk2 = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blk2 = %@\"</span>, blk2); <span class=\"comment\">// blk2 = &lt;__NSStackBlock__: 0xbfffddf8&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">BlkSum blk3 = [[blk2 <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blk3 = %@\"</span>, blk3); <span class=\"comment\">// blk3 = &lt;__NSMallocBlock__: 0x902fda0&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为什么blk1类型是NSGlobalBlock，而blk2类型是NSStackBlock？blk1和blk2的区别在于，blk1没有使用Block以外的任何外部变量，Block不需要建立局部变量值的快照，这使blk1与函数没有任何区别，从blk1所在内存地址0x47d0猜测编译器把blk1放到了text代码段。blk2与blk1唯一不同是的使用了局部变量base，在定义（注意是定义，不是运行）blk2时，局部变量base当前值被copy到栈上，作为常量供Block使用。执行下面代码，结果是203，而不是204。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">base += <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base++;</span><br><span class=\"line\">printf(<span class=\"string\">\"%ld\"</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在Block内变量base是只读的，如果想在Block内改变base的值，在定义base时要用 <strong>block修饰：</strong>block int base = 100;</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block <span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">base += <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">    base += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base++;</span><br><span class=\"line\">printf(<span class=\"string\">\"%ld\\n\"</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">printf(<span class=\"string\">\"%d\\n\"</span>,base);</span><br></pre></td></tr></table></figure>\n<p>上方的代码输出将是214,211。Block中使用__block修饰的变量时，将取变量此刻运行时的值，而不是定义时的快照。这个例子中，执行sum(1,2)时，base将取base++之后的值，也就是201，再执行Blockbase+=10; base+a+b，运行结果是214。执行完Block时，base已经变成211了。</p>\n<h2 id=\"Block的copy、retain、release操作\"><a href=\"#Block的copy、retain、release操作\" class=\"headerlink\" title=\"Block的copy、retain、release操作\"></a>Block的copy、retain、release操作</h2><p>不同于NSObjec的copy、retain、release操作：</p>\n<ul>\n<li>Block_copy与copy等效，Block_release与release等效；</li>\n<li>对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；</li>\n<li>NSGlobalBlock：retain、copy、release操作都无效；</li>\n<li>NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。支持copy，copy之后生成新的NSMallocBlock类型对象。</li>\n<li>NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；</li>\n<li>尽量不要对Block使用retain操作。</li>\n</ul>\n<h2 id=\"Block对不同类型的变量的存取\"><a href=\"#Block对不同类型的变量的存取\" class=\"headerlink\" title=\"Block对不同类型的变量的存取\"></a>Block对不同类型的变量的存取</h2><p><strong> 基本类型 </strong></p>\n<ul>\n<li><p>局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// base++; 编译错误，只读</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base = <span class=\"number\">0</span>;</span><br><span class=\"line\">printf(<span class=\"string\">\"%ld\\n\"</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 这里输出是103，而不是3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。<br>如下所示的一段代码输出结果是0 3 1，表明Block外部对base的更新会影响Block中的base的取值，同样Block对base的更新也会影响Block外部的base值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">BlkSum sum = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">  base++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base + a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">base = <span class=\"number\">0</span>;</span><br><span class=\"line\">printf(<span class=\"string\">\"%d\\n\"</span>, base);</span><br><span class=\"line\">printf(<span class=\"string\">\"%ld\\n\"</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 这里输出是3，而不是103</span></span><br><span class=\"line\">printf(<span class=\"string\">\"%d\\n\"</span>, base);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Block变量，被__block修饰的变量称作Block变量。 基本类型的Block变量等效于全局变量、或静态变量。Block被另一个Block使用时，另一个Block被copy到堆上时，被使用的Block也会被copy。但作为参数的Block是不会发生copy的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> foo() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> base = <span class=\"number\">100</span>;</span><br><span class=\"line\">  BlkSum blk = ^ <span class=\"keyword\">long</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  base + a + b;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, blk); <span class=\"comment\">// &lt;__NSStackBlock__: 0xbfffdb40&gt;</span></span><br><span class=\"line\">  bar(blk);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> bar(BlkSum sum_blk) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sum_blk); <span class=\"comment\">// 与上面一样，说明作为参数传递时，并不会发生copy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> (^blk) (BlkSum) = ^ (BlkSum sum) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sum);     <span class=\"comment\">// 无论blk在堆上还是栈上，作为参数的Block不会发生copy。</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,sum_blk); <span class=\"comment\">// 当blk copy到堆上时，sum_blk也被copy了一分到堆上上。</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  blk(sum_blk); <span class=\"comment\">// blk在栈上</span></span><br><span class=\"line\"></span><br><span class=\"line\">  blk = [[blk <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">  blk(sum_blk); <span class=\"comment\">// blk在堆上</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ObjC对象，不同于基本类型，Block会引起对象的引用计数变化。<br>先看下面代码<br>执行结果为1 1 1 2 1。<br><strong>globalObj和</strong>staticObj在内存中的位置是确定的，所以Block copy时不会retain对象。<br>_instanceObj在Block copy时也没有直接retain _instanceObj对象本身，但会retain self。所以在Block中可以直接读写_instanceObj变量。<br>localObj在Block copy时，系统自动retain对象，增加其引用计数。<br>blockObj在Block copy时也不会retain。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSObject</span>* _instanceObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSObject</span>* __globalObj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>) init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</span><br><span class=\"line\">        _instanceObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) test &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSObject</span>* __staticObj = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    __globalObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    __staticObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSObject</span>* localObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    __block <span class=\"built_in\">NSObject</span>* blockObj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span> (^MyBlock)(<span class=\"keyword\">void</span>) ;</span><br><span class=\"line\">    MyBlock aBlock = ^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, __globalObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, __staticObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, _instanceObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, localObj);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, blockObj);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    aBlock = [[aBlock <span class=\"keyword\">copy</span>] autorelease];</span><br><span class=\"line\">    aBlock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%d\"</span>, [__globalObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%d\"</span>, [__staticObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%d\"</span>, [_instanceObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%d\"</span>, [localObj retainCount]);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%d\"</span>, [blockObj retainCount]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\">        [obj test];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数，这点要非常小心。</p>\n</li>\n</ul>\n<h2 id=\"Block中使用的ObjC对象的行为\"><a href=\"#Block中使用的ObjC对象的行为\" class=\"headerlink\" title=\"Block中使用的ObjC对象的行为\"></a>Block中使用的ObjC对象的行为</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"keyword\">void</span>(^myBlock)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.myBlock</span> = ^ &#123;</span><br><span class=\"line\">  [obj doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。</p>\n<h2 id=\"retain-cycle\"><a href=\"#retain-cycle\" class=\"headerlink\" title=\"retain cycle\"></a>retain cycle</h2><p>retain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</span><br><span class=\"line\">[request setCompletionBlock:^&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSString</span>* string = [request responseString];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">---&gt; |           | --------&gt; |           |</span><br><span class=\"line\">     | retain <span class=\"number\">2</span>  | &lt;-------- | retain <span class=\"number\">1</span>  |</span><br><span class=\"line\">     |           |           |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>解决这个问题的办法是使用弱引用打断retain cycle：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</span><br><span class=\"line\">[request setCompletionBlock:^&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSString</span>* string = [request responseString];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">----&gt;|           | --------&gt; |           |</span><br><span class=\"line\">     | retain <span class=\"number\">1</span>  | &lt; - - - - | retain <span class=\"number\">1</span>  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure>\n<p>request被持有者释放后。request 的retainCount变成0,request被dealloc，request释放持有的Block，导致Block的retainCount变成0，也被销毁。这样这两个对象内存都被回收。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |</span><br><span class=\"line\">--X-&gt;|           | ----X---&gt; |           |</span><br><span class=\"line\">     | retain <span class=\"number\">0</span>  | &lt; - - - - | retain <span class=\"number\">0</span>  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure></p>\n<p>与上面情况类似的陷阱：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.myBlock</span> = ^ &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">self</span> doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里self和myBlock循环引用，解决办法同上：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.myBlock</span> = ^ &#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, retain) <span class=\"built_in\">NSString</span>* someVar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.myBlock</span> = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, _someVer);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里在Block中虽然没直接使用self，但使用了成员变量。在Block中使用成员变量，retain的不是这个变量，而会retain self。解决办法也和上面一样。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, retain) <span class=\"built_in\">NSString</span>* someVar;</span><br><span class=\"line\"></span><br><span class=\"line\">__block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.myBlock</span> = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, <span class=\"keyword\">self</span><span class=\"variable\">.someVer</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span>* str = _someVer;</span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.myBlock</span> = ^ &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, str);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>retain cycle不只发生在两个对象之间，也可能发生在多个对象之间，这样问题更复杂，更难发现<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class=\"line\">objA<span class=\"variable\">.myBlock</span> = ^&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> doSomething];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.objA</span> = objA;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+           +-----------+           +-----------+</span><br><span class=\"line\">|   self    |           |   objA    |           |   Block   |</span><br><span class=\"line\">|           | --------&gt; |           | --------&gt; |           |</span><br><span class=\"line\">| retain <span class=\"number\">1</span>  |           | retain <span class=\"number\">1</span>  |           | retain <span class=\"number\">1</span>  |</span><br><span class=\"line\">|           |           |           |           |           |</span><br><span class=\"line\">+-----------+           +-----------+           +-----------+</span><br><span class=\"line\">     ^                                                |</span><br><span class=\"line\">     |                                                |</span><br><span class=\"line\">     +------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>解决办法同样是用__block打破循环引用<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">objA<span class=\"variable\">.myBlock</span> = ^&#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.objA</span> = objA;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：MRC中<strong>block是不会引起retain；但在ARC中</strong>block则会引起retain。ARC中应该使用<strong>weak或</strong>unsafe_unretained弱引用。__weak只能在iOS5以后使用。</p>\n</blockquote>\n<h2 id=\"Block使用对象被提前释放\"><a href=\"#Block使用对象被提前释放\" class=\"headerlink\" title=\"Block使用对象被提前释放\"></a>Block使用对象被提前释放</h2><p>看下面例子，有这种情况，如果不只是request持有了Block，另一个对象也持有了Block。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |   objA</span><br><span class=\"line\">----&gt;|           | --------&gt; |           |&lt;--------</span><br><span class=\"line\">     | retain <span class=\"number\">1</span>  | &lt; - - - - | retain <span class=\"number\">2</span>  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure></p>\n<p>这时如果request 被持有者释放。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     +-----------+           +-----------+</span><br><span class=\"line\">     | request   |           |   Block   |   objA</span><br><span class=\"line\">--X-&gt;|           | --------&gt; |           |&lt;--------</span><br><span class=\"line\">     | retain <span class=\"number\">0</span>  | &lt; - - - - | retain <span class=\"number\">1</span>  |</span><br><span class=\"line\">     |           |   weak    |           |</span><br><span class=\"line\">     +-----------+           +-----------+</span><br></pre></td></tr></table></figure></p>\n<p>这时request已被完全释放，但Block仍被objA持有，没有释放，如果这时触发了Block，在Block中将访问已经销毁的request，这将导致程序crash。为了避免这种情况，开发者必须要注意对象和Block的生命周期。</p>\n<p>另一个常见错误使用是，开发者担心retain cycle错误的使用__block。比如<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__block kkProducView* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">  weakSelf<span class=\"variable\">.xx</span> = xx;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>将Block作为参数传给dispatch_async时，系统会将Block拷贝到堆上，如果Block中使用了实例变量，还将retain self，因为dispatch_async并不知道self会在什么时候被释放，为了确保系统调度执行Block中的任务时self没有被意外释放掉，dispatch_async必须自己retain一次self，任务完成后再release self。但这里使用__block，使dispatch_async没有增加self的引用计数，这使得在系统在调度执行Block之前，self可能已被销毁，但系统并不知道这个情况，导致Block被调度执行时self已经被释放导致crash。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass.m</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) test &#123;</span><br><span class=\"line\">  __block MyClass* weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">  <span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">10.0</span>;</span><br><span class=\"line\">  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">  dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, weakSelf);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.m</span></span><br><span class=\"line\">MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class=\"line\">[obj test];</span><br></pre></td></tr></table></figure></p>\n<p>这里用dispatch_after模拟了一个异步任务，10秒后执行Block。但执行Block的时候MyClass* obj已经被释放了，导致crash。解决办法是不要使用__block。</p>\n"},{"title":"Github上优秀的objc项目简介","url":"http://www.jvaeyhcd.cc/2016/02/20/Github上优秀的Objective-C项目简介/","content":"<p>主要对当前Github排名靠前的项目做一个简单的简介，方便自己快速了解 objc的一些优秀的开源框架。</p>\n<ul>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"AFNetworking\">AFNetworking</a><br>作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest</li>\n<li><a href=\"https://github.com/gavinkwoe/BeeFramework\" target=\"_blank\" rel=\"external\">BeeFramework</a><br>BeeFramework是一个iOS应用开发框架，由国内开发者郭虹宇创立并且在Github上开源。经过一年多的发展，BeeFramework在Github上，得到了广泛关注，有1000多的star数和400多的fork数</li>\n<li><a href=\"https://github.com/BradLarson/GPUImage\" target=\"_blank\" rel=\"external\">GPUImage</a><br>一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 SO 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"external\">SDWebImage</a><br>作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</li>\n<li><a href=\"https://github.com/RestKit/RestKit\" target=\"_blank\" rel=\"external\">RestKit</a><br>主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上</li>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\">ReactiveCocoa</a><br>由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 “An open source project that exemplifies this brave new era for objc”, 也有人说它是 Cocoa 的未来,GitHub自家的函数式响应式编程范式的objc实现，名字听着很高大上，学习曲线确实也比较陡，但是绝对会改变你对iOS编程的认知</li>\n<li><a href=\"https://github.com/facebookarchive/three20\" target=\"_blank\" rel=\"external\">three20</a><br>由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 PR 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 Nimbus, 算是 three20 的一个替代品</li>\n<li><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"external\">MBProgressHUD</a><br>作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)</li>\n<li><a href=\"https://github.com/magicalpanda/MagicalRecord\" target=\"_blank\" rel=\"external\">MagicalRecord</a><br>作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作</li>\n<li><a href=\"https://github.com/ccgus/fmdb\" target=\"_blank\" rel=\"external\">FMDB</a><br>一个对 SQLite 进行封装的库, 使用起来方便, 简单</li>\n<li><a href=\"https://github.com/Mantle/Mantle\" target=\"_blank\" rel=\"external\">Mantle</a><br>作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了。GitHub自家的产物，轻量级建模的首选，也可以很好的配合CoreData工作</li>\n<li><a href=\"https://github.com/Grouper/FlatUIKit\" target=\"_blank\" rel=\"external\">FlatUIKit</a><br>收集了很多扁平化 UI 的 iOS 组件, 方便使用</li>\n<li><a href=\"https://github.com/pokeb/asi-http-request\" target=\"_blank\" rel=\"external\">ASIHTTPRequest</a><br>一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)</li>\n<li><a href=\"https://github.com/path/FastImageCache\" target=\"_blank\" rel=\"external\">FastImageCache</a><br>Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点</li>\n<li><a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"external\">Masonry</a><br>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</li>\n<li><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"external\">Shimmer</a><br>Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单</li>\n<li><a href=\"https://github.com/TransitApp/SVProgressHUD\" target=\"_blank\" rel=\"external\">SVProgressHUD</a><br>又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用</li>\n<li><a href=\"https://github.com/johnezang/JSONKit\" target=\"_blank\" rel=\"external\">JSONKit</a><br>主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了</li>\n<li><a href=\"https://github.com/jverkoey/nimbus\" target=\"_blank\" rel=\"external\">Nimbus</a><br>作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全</li>\n<li><a href=\"https://github.com/facebook/facebook-ios-sdk\" target=\"_blank\" rel=\"external\"> Facebook SDK for iOS</a><br>Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面</li>\n<li><a href=\"https://github.com/facebook/AsyncDisplayKit\" target=\"_blank\" rel=\"external\">AsyncDisplayKit</a><br>Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎</li>\n<li><a href=\"https://github.com/supermarin/Alcatraz\" target=\"_blank\" rel=\"external\">Alcatraz</a><br>Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传</li>\n<li><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"external\">JSQMessagesViewController</a><br>优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高</li>\n<li><a href=\"https://github.com/facebook/xctool\" target=\"_blank\" rel=\"external\">Xctool</a><br>是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, Travis CI, OCLint 等测试工具</li>\n<li><a href=\"https://github.com/OpenEmu/OpenEmu\" target=\"_blank\" rel=\"external\">OpenEmu</a><br>超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错</li>\n<li><a href=\"https://github.com/nicklockwood/iCarousel\" target=\"_blank\" rel=\"external\">iCarousel</a><br>作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果</li>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"external\">RESideMenu</a><br>作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8</li>\n<li><a href=\"https://github.com/kevinzhow/PNChart\" target=\"_blank\" rel=\"external\">PNChart</a><br>作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱</li>\n<li><a href=\"https://github.com/square/PonyDebugger\" target=\"_blank\" rel=\"external\">PonyDebugger</a><br>由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试</li>\n<li><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\" target=\"_blank\" rel=\"external\">JVFloatLabeledTextField</a><br>作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本</li>\n<li><a href=\"https://github.com/CEWendel/SWTableViewCell\" target=\"_blank\" rel=\"external\">SWTableViewCell</a><br>UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮</li>\n<li><a href=\"https://github.com/levey/AwesomeMenu\" target=\"_blank\" rel=\"external\">AwesomeMenu</a><br>作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果</li>\n<li><a href=\"https://github.com/tonymillion/Reachability\" target=\"_blank\" rel=\"external\">Reachability</a><br>Reachablity 是用于检测 iOS 设备网络环境的库,Beeframeowrk中使用过的库</li>\n<li><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"external\"> VVDocumenter-Xcode</a><br>作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞</li>\n<li><a href=\"https://github.com/google/physical-web\" target=\"_blank\" rel=\"external\">The Physical Web</a><br>由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段</li>\n<li><a href=\"https://github.com/samuelclay/NewsBlur\" target=\"_blank\" rel=\"external\">NewsBlur</a><br>作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码</li>\n<li><a href=\"https://github.com/cocos2d/cocos2d-objc\" target=\"_blank\" rel=\"external\">Cocos2D-SpriteBuilder</a><br>一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁</li>\n<li><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\" target=\"_blank\" rel=\"external\">TTTAttributedLabel</a><br>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</li>\n<li><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\" target=\"_blank\" rel=\"external\">CocoaAsyncSocket</a><br>一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师</li>\n<li><a href=\"https://github.com/devinross/tapkulibrary\" target=\"_blank\" rel=\"external\">TapkuLibrary</a><br>作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</li>\n<li><a href=\"https://github.com/CanvasPod/Canvas\" target=\"_blank\" rel=\"external\">Canvas</a><br>无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手</li>\n<li><a href=\"https://github.com/square/SocketRocket\" target=\"_blank\" rel=\"external\">SocketRocket</a><br>Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱</li>\n<li><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\" target=\"_blank\" rel=\"external\">ECSlidingViewController</a><br>一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工</li>\n<li><a href=\"https://github.com/stig/json-framework\" target=\"_blank\" rel=\"external\">Json Framework</a><br>用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了</li>\n<li><a href=\"https://github.com/facebook/Tweaks\" target=\"_blank\" rel=\"external\">Tweaks</a><br>Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了</li>\n<li><a href=\"https://github.com/realm/realm-cocoa\" target=\"_blank\" rel=\"external\">realm-cocoa</a><br>Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库</li>\n<li><a href=\"https://github.com/icanzilb/JSONModel\" target=\"_blank\" rel=\"external\">JSONModel</a><br>一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换</li>\n<li><a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"external\">KVOController</a><br>一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一</li>\n<li><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\" target=\"_blank\" rel=\"external\">MWPhotoBrowser</a><br>一款简单的 iOS 照片浏览控件</li>\n<li><a href=\"https://github.com/samvermette/SVPullToRefresh\" target=\"_blank\" rel=\"external\">SVPullToRefresh</a><br><b>一款只需一行代码便可集成上拉刷新和下拉加载的组件</b></li>\n<li><a href=\"https://github.com/facebook/pop\" target=\"_blank\" rel=\"external\">POP</a><br>facebook出品的paper，动画效果太好了，赶超apple的原生app一大截。pop就是paper的动画库！</li>\n<li><a href=\"https://github.com/dennisreimann/ioctocat\" target=\"_blank\" rel=\"external\">ioctocat</a><br>github的iOS客户端，目前开源代码是V1版本，V2版本在appstore上可以下载</li>\n<li><a href=\"https://github.com/ChatSecure/ChatSecure-iOS\" target=\"_blank\" rel=\"external\">ChatSecure</a><br>使用XMPP协议的IM开源软件，很强大，在appstore上可以下载</li>\n<li><a href=\"https://github.com/forkingdog/FDFullscreenPopGesture\" target=\"_blank\" rel=\"external\">FDFullscreenPopGesture</a><br>一个丝滑的全屏滑动返回手势,相关博客文章点击<a href=\"http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/\" target=\"_blank\" rel=\"external\">这里</a></li>\n<li><a href=\"https://github.com/Jvaeyhcd/TKSubmitTransition\" target=\"_blank\" rel=\"external\">TKSubmitTransition</a><br>非常漂亮的一个登录转场动画</li>\n<li><p><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"external\">DZNEmptyDataSet</a><br>非常方便的对一些没有数据的UITableView或者UIScrollView加上提示图片和文字。</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iRate\" target=\"_blank\" rel=\"external\">iRate</a><br>一个开源的评分控件，能够非常友好的设置提醒用户去评论我们的app</p>\n</li>\n<li><p><a href=\"https://github.com/nicklockwood/iVersion\" target=\"_blank\" rel=\"external\">iVersion</a><br>和iRate一样出自同一个人之手，，这个是提示用户更新版本。</p>\n</li>\n<li><p><a href=\"https://github.com/PureLayout/PureLayout\" target=\"_blank\" rel=\"external\">PureLayout</a><br>自动布局</p>\n</li>\n</ul>\n<h1 id=\"文本相关\"><a href=\"#文本相关\" class=\"headerlink\" title=\"文本相关\"></a>文本相关</h1><ul>\n<li><p><a href=\"https://github.com/slackhq/SlackTextViewController\" target=\"_blank\" rel=\"external\">SlackTextViewController</a><br>你曾经用过Slack iOS应用吗？如果你在较大的软件公司工作，也许会用过。对那些没用过的人呢？—?Slack令人激动。用到Slack的应用也是这样，尤其是用作极佳、定制的文本输入控制时。这时你有了一个现成可用在应用中的代码。自适应文本区域？试一下。手势识别、自动填充、多媒体合并？试一下。快速drop-in解决方案？试一下。其他还想要什么？SlackTextViewController 可以替代 UITableViewController &amp; UICollectionViewController。</p>\n</li>\n<li><p><a href=\"https://github.com/honcheng/RTLabel\" target=\"_blank\" rel=\"external\">RTLabel</a><br>用于显示html的Label</p>\n</li>\n<li><p><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"external\">Shimmer</a><br>滑动解锁效果的界面</p>\n</li>\n<li><p><a href=\"https://github.com/daiweilai/DDRichText\" target=\"_blank\" rel=\"external\">DDRichText</a><br>为图文混排提供了一个思路</p>\n</li>\n</ul>\n<h1 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h1><ul>\n<li><p><a href=\"https://github.com/ninjinkun/NJKWebViewProgress\" target=\"_blank\" rel=\"external\">NJKWebViewProgress</a><br>web界面加载进度条</p>\n</li>\n<li><p><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"external\">MBProgressHUD</a><br>MBProgressHUD 使用非常广泛，网上很多基于ta的封装</p>\n</li>\n<li><p><a href=\"https://github.com/SVProgressHUD/SVProgressHUD\" target=\"_blank\" rel=\"external\">SVProgressHUD</a><br>Navigation的扩展，强烈推荐</p>\n</li>\n<li><p><a href=\"https://github.com/scalessec/Toast\" target=\"_blank\" rel=\"external\">Toast</a></p>\n</li>\n</ul>\n<h1 id=\"导航栏\"><a href=\"#导航栏\" class=\"headerlink\" title=\"导航栏\"></a>导航栏</h1><ul>\n<li><p><a href=\"https://github.com/ltebean/LTNavigationbar\" target=\"_blank\" rel=\"external\">LTNavigationbar</a><br>上下滑动动态改变导航栏颜色</p>\n</li>\n<li><p><a href=\"https://github.com/JazysYu/JZNavigationExtension\" target=\"_blank\" rel=\"external\">JZNavigationExtension</a></p>\n</li>\n</ul>\n<h1 id=\"键盘类\"><a href=\"#键盘类\" class=\"headerlink\" title=\"键盘类\"></a>键盘类</h1><ul>\n<li><p><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"external\">IQKeyboardManager</a></p>\n</li>\n<li><p><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\" target=\"_blank\" rel=\"external\">TPKeyboardAvoiding</a><br>这个我用得很多，界面上如果有输入框可以界面会跟着键盘动，而不被键盘挡住。</p>\n</li>\n</ul>\n<h1 id=\"基础工具类以及Category\"><a href=\"#基础工具类以及Category\" class=\"headerlink\" title=\"基础工具类以及Category\"></a>基础工具类以及Category</h1><ul>\n<li><p><a href=\"https://github.com/FabrizioBrancati/BFKit\" target=\"_blank\" rel=\"external\">BFKit OC版本</a><br>国外的一个大神写的很好用的分类，比较齐全</p>\n</li>\n<li><p><a href=\"https://github.com/MatthewYork/DateTools\" target=\"_blank\" rel=\"external\">DateTools</a><br>很强大的日期工具类</p>\n</li>\n<li><p><a href=\"https://github.com/shaojiankui/iOS-Categories\" target=\"_blank\" rel=\"external\">iOS-Categories</a><br>很是全面的一个扩展 iOS中的各种objc Category, a collection of useful objc Categories extending iOS Frameworks such as Foundation,UIKit,CoreData,QuartzCore,CoreLocation,MapKit Etc.</p>\n</li>\n<li><p><a href=\"https://github.com/fpt-software/Material-Controls-For-iOS\" target=\"_blank\" rel=\"external\">Material-Controls-For-iOS</a><br>大神模仿谷歌做的iOS原生特效控件</p>\n</li>\n<li><p><a href=\"https://github.com/zwaldowski/BlocksKit\" target=\"_blank\" rel=\"external\">BlocksKit</a><br>为基础类提供Block支持，很好用</p>\n</li>\n</ul>\n<h1 id=\"弹出框\"><a href=\"#弹出框\" class=\"headerlink\" title=\"弹出框\"></a>弹出框</h1><ul>\n<li><p><a href=\"https://github.com/kevin0571/STPopup\" target=\"_blank\" rel=\"external\">STPopup</a><br>很方便的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/adad184/MMPopupView\" target=\"_blank\" rel=\"external\">MMPopupView</a><br>里脊串的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/nealyoung/NYAlertViewController\" target=\"_blank\" rel=\"external\">NYAlertViewController</a><br>非常强大的弹出框</p>\n</li>\n<li><p><a href=\"https://github.com/12207480/TYAlertController\" target=\"_blank\" rel=\"external\">TYAlertController</a><br>很好很强大的弹出框，多种样式满足你的需求</p>\n</li>\n<li><p><a href=\"https://github.com/UncleJoke/JKPopMenuView\" target=\"_blank\" rel=\"external\">JKPopMenuView</a><br>一个简单的弹出菜单</p>\n</li>\n</ul>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><ul>\n<li><p><a href=\"https://github.com/CEWendel/SWTableViewCell\" target=\"_blank\" rel=\"external\">SWTableViewCell</a><br>自定义侧滑</p>\n</li>\n<li><p><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\" target=\"_blank\" rel=\"external\">MGSwipeTableCell</a><br>同上自定义侧滑</p>\n</li>\n<li><p><a href=\"https://github.com/forkingdog/FDFullscreenPopGesture\" target=\"_blank\" rel=\"external\">FDFullscreenPopGesture</a><br>全屏滑动返回上级页面</p>\n</li>\n<li><p><a href=\"https://github.com/jivesoftware/PDTSimpleCalendar\" target=\"_blank\" rel=\"external\">PDTSimpleCalendar</a><br>一款日历控件，可以看看</p>\n</li>\n</ul>\n<h1 id=\"Xcode插件\"><a href=\"#Xcode插件\" class=\"headerlink\" title=\"Xcode插件\"></a>Xcode插件</h1><ul>\n<li><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"external\">cocoapods-xcode-plugin</a><br>Dependency management helper for your CocoaPods, right in Xcode.<br>用于在Xcode中管理CocoaPods依赖库。<br><img src=\"http://wangzz.github.io/images/article1/plugin_cocoapods_menu.png\" alt=\"&quot;&quot;\"></li>\n<li><a href=\"https://github.com/qfish/XAlign\" target=\"_blank\" rel=\"external\">XAlign</a><br>An amazing Xcode plugin to align regular code. it can align Xnything in any way you want.<br>方便实现代码对其功能，使代码风格统一。<br><img src=\"http://wangzz.github.io/images/article1/plugin_align.gif\" alt=\"&quot;&quot;\"></li>\n<li><a href=\"https://github.com/supermarin/Alcatraz\" target=\"_blank\" rel=\"external\">Alcatraz</a><br>Alcatraz is an open-source package manager for Xcode 5+. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.—Xcode插件管理工具。<br><img src=\"https://camo.githubusercontent.com/919efe4e1e53237df51d7010c862bd5c04fd6a70/687474703a2f2f616c63617472617a2e696f2f696d616765732f73637265656e73686f744032782e706e67\" alt=\"&quot;&quot;\"></li>\n<li><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"external\">VVDocumenter-Xcode</a><br>提供了为代码增加注视的最快捷方式,非常好的Xcode插件。<br><img src=\"https://camo.githubusercontent.com/ca5518c9872e15b8a95b9d8c5f44bc331977d710/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f53637265656e53686f742e676966\" alt=\"&quot;&quot;\"><br>并且支持了Swift的注释，太棒了！<br><img src=\"https://camo.githubusercontent.com/58e452b57245cd79c2e59ac7926609be4dffbfd8/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f7676646f63756d656e7465722d73776966742e676966\" alt=\"&quot;&quot;\"></li>\n<li><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\" target=\"_blank\" rel=\"external\">KSImageNamed-Xcode</a><br>当输入[NSImage imageNamed: 或者[UIImage imageNamed:时，会自动补全工程中可用的图片名称，同时能提供选中图片的预览。<br><img src=\"http://foggry.com/images/article1/plugin_image_named.gif\" alt=\"&quot;&quot;\"></li>\n</ul>\n<p>自己做个笔记，方便以后工作遇到问题能够得到快速的解决</p>\n"},{"title":"Hexo安装新主题apollo","url":"http://www.jvaeyhcd.cc/2016/02/20/Hexo安装新主题apollo/","content":"<p>Hexo博客系统的流行原因，是因为他的个人性，而皮肤就是个人性的一种体现。Hexo换皮肤还是比较简单的,既可以自己根据默认的主题来修改，也可以到<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/</a>上去找主题。</p>\n<p>下面简单描述一下我安装apollo主题的过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>github上的文档给出了详细的安装命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init <span class=\"comment\">#blogname#</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"comment\">#blogname# </span></span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启用\"><a href=\"#启用\" class=\"headerlink\" title=\"启用\"></a>启用</h2><p>安装成功后就可以开始启用主题，主题的启用需要修改_config.yml 的 theme 配置项为 apollo：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions 插件和皮肤</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># theme: landscape</span></span><br><span class=\"line\">theme: apollo</span><br></pre></td></tr></table></figure></p>\n<p>启动hexo后修改成功后的皮肤如图所示<br><img src=\"/2016/02/20/Hexo安装新主题apollo/apollo.png\" alt=\"apollo主题\" title=\"apollo主题\"></p>\n"},{"title":"Hexo在github上构建免费的博客","url":"http://www.jvaeyhcd.cc/2016/02/20/Hexo在github上构建免费的博客/","content":"<p>很多次想搭建一个自己的博客，彻底从csdn上转移到自己的博客站点中，但是一直由于时间的原因耽搁了。之前也使用过Wordpress来搭建自己的博客，但是发现Wordpress使用起来不是太方便。后来再接触了markdown语法写文章后，喜欢上了markdown。再后来了解到了hexo，一个基于Node的博客框架，同样可以实现基于github的博客，而且更轻更快，更适合Node的开发程序员。</p>\n<h2 id=\"Hexo介绍\"><a href=\"#Hexo介绍\" class=\"headerlink\" title=\"Hexo介绍\"></a>Hexo介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"external\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<a id=\"more\"></a>\n<h2 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">git</a></li>\n</ul>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<blockquote>\n<p>Mac用户在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p>\n</blockquote>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">git</a></li>\n<li>Mac：使用 <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">Homebrew</a>, <a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"external\">MacPorts</a> 或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a><br>cURL:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure></p>\n<p>Wget:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install <span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure></p>\n<p>或者您也可以下载 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">安装程序</a> 来安装。</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo,Hexo安装，要用全局安装，加-g参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>查看hexo的版本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br><span class=\"line\">hexo-cli: <span class=\"number\">1.0</span>.<span class=\"number\">1</span></span><br><span class=\"line\">os: Darwin <span class=\"number\">15.3</span>.<span class=\"number\">0</span> darwin x64</span><br><span class=\"line\">http_parser: <span class=\"number\">2.5</span>.<span class=\"number\">0</span></span><br><span class=\"line\">node: <span class=\"number\">4.2</span>.<span class=\"number\">1</span></span><br><span class=\"line\">v8: <span class=\"number\">4.5</span>.<span class=\"number\">103.35</span></span><br><span class=\"line\">uv: <span class=\"number\">1.7</span>.<span class=\"number\">5</span></span><br><span class=\"line\">zlib: <span class=\"number\">1.2</span>.<span class=\"number\">8</span></span><br><span class=\"line\">ares: <span class=\"number\">1.10</span>.<span class=\"number\">1</span>-DEV</span><br><span class=\"line\">icu: <span class=\"number\">56.1</span></span><br><span class=\"line\">modules: <span class=\"number\">46</span></span><br><span class=\"line\">openssl: <span class=\"number\">1.0</span>.<span class=\"number\">2</span>d</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hexo创建项目\"><a href=\"#Hexo创建项目\" class=\"headerlink\" title=\"Hexo创建项目\"></a>Hexo创建项目</h2><p>我的系统环境：</p>\n<ul>\n<li>Mac OS X EI Capitan</li>\n<li>node v4.2.1</li>\n<li>npm 2.14.7</li>\n</ul>\n<p>安装好后，我们就可以使用Hexo创建项目了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init nodejs-hexo</span><br></pre></td></tr></table></figure></p>\n<p>我们看到当前在目录下，出现了一个文件夹，包括初始化的文件。</p>\n<p>进入目录，并启动Hexo服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nodejs-hexo</span><br><span class=\"line\"><span class=\"comment\"># 启动hexo服务器</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Hexo is running at http://<span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">4000</span>/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"external\">http://0.0.0.0:4000/</a><br>ps:Mac上的地址是<a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"external\">http://0.0.0.0:4000/</a>， windows上的地址是<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a></p>\n<h2 id=\"Hexo结构解析\"><a href=\"#Hexo结构解析\" class=\"headerlink\" title=\"Hexo结构解析\"></a>Hexo结构解析</h2><p>接下来，我们需要对Hexo做全面的了解，才能做出个性化的博客。</p>\n<h3 id=\"目录和文件\"><a href=\"#目录和文件\" class=\"headerlink\" title=\"目录和文件\"></a>目录和文件</h3><img src=\"/2016/02/20/Hexo在github上构建免费的博客/hexo-dict.png\" alt=\"Hexo目录结构示意图\" title=\"Hexo目录结构示意图\">\n<ul>\n<li>.deploy_git 发布到github上生成的静态文件夹</li>\n<li>node_modules mode的modules</li>\n<li>scaffolds 脚手架，也就是一个工具模板</li>\n<li>scripts 写文件的js，扩展hexo的功能</li>\n<li>source 存放博客正文内容</li>\n<li>source/_drafts 草稿箱</li>\n<li>source/_posts 文件箱</li>\n<li>themes 存放皮肤的目录</li>\n<li>themes/landscape 默认的皮肤</li>\n<li>_config.yml 全局的配置文件</li>\n<li>db.json 静态常量</li>\n</ul>\n<p>_posts目录：我们每次创建的文章都放在了_posts目录下面，Hexo是一个静态博客框架，没有数据库，文章内容都是以文本文件的方式进行存储的，直接存储在_posts的目录。</p>\n<p>themes目录：是存放皮肤的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。</p>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>_config.yml是全局的配置文件：很多的网站配置都在这个文件中定义。</p>\n<ul>\n<li>站点信息: 定义标题，作者，语言</li>\n<li>URL: URL访问路径</li>\n<li>文件目录: 正文的存储目录</li>\n<li>写博客配置：文章标题，文章类型，外部链接等</li>\n<li>目录和标签：默认分类，分类图，标签图</li>\n<li>归档设置：归档的类型</li>\n<li>服务器设置：IP，访问端口，日志输出</li>\n<li>时间和日期格式： 时间显示格式，日期显示格式</li>\n<li>分页设置：每页显示数量</li>\n<li>评论：外挂的Disqus评论系统</li>\n<li>插件和皮肤：换皮肤，安装插件</li>\n<li>Markdown语言：markdown的标准</li>\n<li>CSS的stylus格式：是否允许压缩</li>\n<li>部署配置：主要是github发布</li>\n</ul>\n<p>附上我本地的_config.yml配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site 站点信息</span></span><br><span class=\"line\">title: Salvador</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description:</span><br><span class=\"line\">author: Salvador</span><br><span class=\"line\">language: en</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Directory 文件目录</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>_dir: <span class=\"built_in\">source</span></span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing 写博客配置</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">filename_<span class=\"keyword\">case</span>: <span class=\"number\">0</span></span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\">relative_link: <span class=\"literal\">false</span></span><br><span class=\"line\">future: <span class=\"literal\">true</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  auto_detect: <span class=\"literal\">false</span></span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Category &amp; Tag 目录和标签</span></span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date / Time format 时间和日期格式</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pagination 分页设置</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\">per_page: <span class=\"number\">10</span></span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extensions 插件和皮肤</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\"># theme: landscape</span></span><br><span class=\"line\">theme: apollo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment 部署配置</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git </span><br><span class=\"line\">  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h2><h3 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h3><p>接下来，我们可以开始创建博客了。Hexo建议通过命令来创建文章，当然你也可以直接在_posts目录下创建文件。<br>通过命令创建新的文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post Hexo在github上构建免费的</span><br><span class=\"line\">INFO  Created: ~/hexo-blog/<span class=\"built_in\">source</span>/_posts/Hexo在github上构建免费的.md</span><br></pre></td></tr></table></figure></p>\n<p>创建完成后在_posts目录下，就会生成文件“Hexo在github上构建免费的.md”</p>\n<img src=\"/2016/02/20/Hexo在github上构建免费的博客/hexo-new.png\" alt=\"Hexo创建新的文章\" title=\"Hexo创建新的文章\">\n<p>然后，我们编辑文件：”Hexo在github上构建免费的.md”，以markdown语法写文章，然后保存。</p>\n<p>在命令行，启动服务器。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo server</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文章的语法\"><a href=\"#文章的语法\" class=\"headerlink\" title=\"文章的语法\"></a>文章的语法</h3><p>我们在写文章时，有一些语法的要求。<br>语法包括3部分：</p>\n<ul>\n<li>基本信息：标题，发布日期，分类目录，标签，类型，固定发布链接</li>\n<li>正文：markdown语法和Swig语法(掌握一个就行)</li>\n<li>特殊标记：引用，链接，图片，代码块，iframe，youtube视频</li>\n</ul>\n<h4 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h4><p>必须在文件的顶部，—的行之前的部分。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo在github上构建免费的博客</span><br><span class=\"line\">date: <span class=\"number\">2016</span>-<span class=\"number\">02</span>-<span class=\"number\">20</span> <span class=\"number\">12</span>:<span class=\"number\">07</span>:<span class=\"number\">20</span></span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>hexo的正文要求使用markdown的语法，markdown的语法可以参考 <a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"external\">此处</a>.</p>\n<h4 id=\"特殊标记\"><a href=\"#特殊标记\" class=\"headerlink\" title=\"特殊标记\"></a>特殊标记</h4><p>hexo对于一些有特殊标记 文字块，做了特殊的定义。</p>\n<p><strong> 引用 </strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/<span class=\"number\">2009</span>/<span class=\"number\">07</span>/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class=\"line\">Every interaction is both precious and an opportunity to delight.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\">&gt; Every interaction is both precious and an opportunity to delight.</span><br></pre></td></tr></table></figure></p>\n<p><strong> 代码块 </strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% codeblock .compact http://underscorejs.org/<span class=\"comment\">#compact Underscore.js %&#125;</span></span><br><span class=\"line\">.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, ‘’, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\"><span class=\"string\">'```&#123;bash&#125;</span><br><span class=\"line\">.compact([0, 1, false, 2, ‘’, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br><span class=\"line\">```'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong> 链接 </strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swig语法</span></span><br><span class=\"line\">&#123;% link 粉丝日志 http://blog.fens.me <span class=\"literal\">true</span> 粉丝日志 %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Markdown语法</span></span><br><span class=\"line\">[粉丝日志](http://blog.fens.me)</span><br></pre></td></tr></table></figure></p>\n<p><strong> 图片 </strong><br>对于本地图片，需要在_config.yml文件中配置”post_asset_folder: true”。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Writing 写博客配置</span></span><br><span class=\"line\">new_post_name: :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\">external_link: <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\">filename_<span class=\"keyword\">case</span>: <span class=\"number\">0</span></span><br><span class=\"line\">render_drafts: <span class=\"literal\">false</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\">relative_link: <span class=\"literal\">false</span></span><br><span class=\"line\">future: <span class=\"literal\">true</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  auto_detect: <span class=\"literal\">false</span></span><br><span class=\"line\">  tab_replace:</span><br></pre></td></tr></table></figure></p>\n<p>这样在”hexo new”创建文章的时候hexo会自动会在_posts文件夹下面生成一个与文章同名的文件夹存放图片资源,如下图所示<br><img src=\"/2016/02/20/Hexo在github上构建免费的博客/hexo-new.png\" alt=\"Hexo创建新的文章\" title=\"Hexo创建新的文章\"></p>\n<p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n<p>比如说：当你打开文章资源文件夹功能后，你把一个 “example.jpg” 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 它将 不会 出现在页面上。正确的引用本地图片方式是使用下面的标签而不是 markdown ：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"发布到github\"><a href=\"#发布到github\" class=\"headerlink\" title=\"发布到github\"></a>发布到github</h2><h3 id=\"静态化处理\"><a href=\"#静态化处理\" class=\"headerlink\" title=\"静态化处理\"></a>静态化处理</h3><p>写完了文章，我们就可以发布了。要说明的一点是hexo的静态博客框架，那什么是静态博客呢？静态博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。</p>\n<p><strong> 静态化命令 </strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>运行完命令后，在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。</p>\n<h3 id=\"上传到github\"><a href=\"#上传到github\" class=\"headerlink\" title=\"上传到github\"></a>上传到github</h3><p>接下来，我们把这个博客发布到github。<br>首先在github上创建一个项目“你的用户名.github.io”,我创建的项目是<a href=\"https://github.com/Jvaeyhcd/jvaeyhcd.github.io\" target=\"_blank\" rel=\"external\">jvaeyhcd.github.io</a><br>编辑全局配置文件：_config.yml，找到deploy的部分，设置github的项目地址。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment 部署配置</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy: </span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git <span class=\"comment\">#这里必须是git，以前是github</span></span><br><span class=\"line\">  repo: https://github.com/Jvaeyhcd/jvaeyhcd.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>然后，通过命令进行部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo d</span><br></pre></td></tr></table></figure></p>\n<p>部署完成后，打开你在github上创建的工程，你会看到<br><img src=\"/2016/02/20/Hexo在github上构建免费的博客/github.png\" alt=\"github\" title=\"github\"><br>然后访问<a href=\"http://jvaeyhcd.github.io/\" target=\"_blank\" rel=\"external\">http://jvaeyhcd.github.io/</a>就能看到你发布到github上的博客了。</p>\n"},{"title":"CocoaPods安装和使用教程","url":"http://www.jvaeyhcd.cc/2016/02/20/CocoaPods安装和使用教程/","content":"<h2 id=\"CocosPods是什么\"><a href=\"#CocosPods是什么\" class=\"headerlink\" title=\"CocosPods是什么\"></a>CocosPods是什么</h2><p>CocoaPods是iOS项目的依赖管理工具，该项目源码在Github上管理。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和第三方开源库的时间。<br>在使用CocoaPods之前，开发项目需要用到第三方开源库的时候，我们需要<br>1.把开源库的源代码复制到项目中<br>2.添加一些依赖框架和动态库<br>3.设置-ObjC，-fno-objc-arc等参数<br>4.管理他们的更新<br>在使用CocoaPods后，我们只需要把用到的开源库放到一个名为Podfile的文件中，然后执行pod install.Cocoapods就会自动将这些第三方开源库的源码下载下来，并且为我们的工程设置好响应的系统依赖和编译参数。</p>\n<a id=\"more\"></a>\n<h2 id=\"CocoaPods的原理\"><a href=\"#CocoaPods的原理\" class=\"headerlink\" title=\"CocoaPods的原理\"></a>CocoaPods的原理</h2><p>CocoaPods的原理是将所有的依赖库都放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p>\n<h2 id=\"CocoaPods的安装\"><a href=\"#CocoaPods的安装\" class=\"headerlink\" title=\"CocoaPods的安装\"></a>CocoaPods的安装</h2><p>CocoaPods可以方便地通过Mac自带的RubyGems安装。<br>打开Terminal，然后键入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>执行完这句如果报告以下错误：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Could not find a valid gem <span class=\"string\">'cocoapods'</span> (&gt;= <span class=\"number\">0</span>), here is why:</span><br><span class=\"line\">Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Operation timed out - connect(<span class=\"number\">2</span>) (https://rubygems.org/latest_specs.<span class=\"number\">4.8</span>.gz)</span><br><span class=\"line\">ERROR: Possible alternatives: cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被我天朝屏蔽了，需要更新一下ruby的源，过程如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources <span class=\"operator\">-l</span> (查看当前ruby的源)</span><br><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources <span class=\"operator\">-a</span> https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources <span class=\"operator\">-l</span></span><br></pre></td></tr></table></figure></p>\n<p>如果gem太老，可以尝试用如下命令升级gem<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem update --system</span><br></pre></td></tr></table></figure></p>\n<p>升级成功后会提示: RubyGems system software updated</p>\n<p>然后重新执行安装下载命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>这时候应该没什么问题了</p>\n<p>接下来进行安装，执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure></p>\n<p>Terminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下.如果想加快速度,可使用cocoapods的镜像索引.（文章末尾附使用镜像索引的方法）</p>\n<h2 id=\"Cocoapods的使用\"><a href=\"#Cocoapods的使用\" class=\"headerlink\" title=\"Cocoapods的使用\"></a>Cocoapods的使用</h2><p>进入工程所在的目录（工程根目录）<br>执行命令 touch Podfile<br>这句是说新建一个名为Podfile的文件（不能写成别的名字，也可以自己在工程根目录里面直接新建）</p>\n<p>然后对改文件进行编辑，执行命令 open -e Podfile<br>第一次执行这个命令,会有一个空白文件打开，可以先放在一边，<br>Podfile文件的格式应该如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform :ios, <span class=\"string\">'7.0'</span></span><br><span class=\"line\">pod <span class=\"string\">'AMap2DMap'</span>, <span class=\"string\">'~&gt; 2.5.0'</span></span><br><span class=\"line\">pod <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 2.5.3'</span></span><br><span class=\"line\">pod <span class=\"string\">'SDWebImage'</span>, <span class=\"string\">'~&gt; 3.7.2'</span></span><br></pre></td></tr></table></figure></p>\n<p>需要注意的几点：platform那一行，ios三个字母都要小写，而且与前面的冒号之间不能有间隔，后面的版本号也可以不写，但是有些开源库对版本是有要求的，比如要在6.0以上才能运行，遇到这样的开源库就需要写上版本号。</p>\n<p>platform下面就是Cocoapods需要集成的开源库，根据你的需要确定集成那些库。</p>\n<p>举个例子：<br>我要集成AFNetworking这个库类，需要在Cocoapods里面先搜索是否有需要的库，可以在Terminal中输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod search AFNetworking</span><br></pre></td></tr></table></figure></p>\n<p>回车之后就可以看到和你搜索的关键字相关的一些库类。</p>\n<p>其中第一个就是我们需要的，把pod ‘AFNetworking’， ‘~&gt;2.5.3’<br>那一行复制到我们的Podfile文件中，保存修改。<br>然后在Terminal中执行 ：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure></p>\n<p>这样，AFNetworking就已经下载完成并且设置好了编译参数和依赖，以后使用的时候切记如下两点：<br>1.从此以后需要使用Cocoapods生成的 .xcworkspace文件来打开工程，而不是使用以前的.xcodeproj文件<br>2.每次更改了Podfile文件，都需要重新执行一次pod update命令</p>\n<p>ps:当执行pod install之后，除了Podfile，还会生成一个名为Podfile.lock的文件，它会锁定当前各依赖库的版本，之后即使多次执行pod install也不会更改版本，只有执行pod update才会改变Podfile.lock.在多人协作的时候，这样可以防止第三方库升级时候造成大家各自的第三方库版本不一致。所以在提交版本的时候不能把它落下，也不要添加到.gitignore中.</p>\n"},{"title":"标签","url":"http://www.jvaeyhcd.cc/tags/index.html","content":""},{"title":"Tag","url":"http://www.jvaeyhcd.cc/tag/index.html","content":""},{"title":"Search","url":"http://www.jvaeyhcd.cc/search/index.html","content":""},{"title":"Project","url":"http://www.jvaeyhcd.cc/project/index.html","content":""},{"title":"Link","url":"http://www.jvaeyhcd.cc/link/index.html","content":""},{"title":"","url":"http://www.jvaeyhcd.cc/googlec25480101521e91f.html","content":"google-site-verification: googlec25480101521e91f.html\n"},{"title":"Category","url":"http://www.jvaeyhcd.cc/category/index.html","content":""},{"title":"Categories","url":"http://www.jvaeyhcd.cc/categories/index.html","content":""},{"title":"","url":"http://www.jvaeyhcd.cc/baidu_verify_wFUlZEYgwT.html","content":"wFUlZEYgwT\n"},{"title":"About","url":"http://www.jvaeyhcd.cc/about/index.html","content":""}]