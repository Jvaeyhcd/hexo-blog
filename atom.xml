<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jvaeyhcd&#39;s Note</title>
  <subtitle>My Coding Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jvaeyhcd.cc/"/>
  <updated>2016-08-02T07:04:10.000Z</updated>
  <id>http://www.jvaeyhcd.cc/</id>
  
  <author>
    <name>Jvaeyhcd</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift学习笔记之高级运算符</title>
    <link href="http://www.jvaeyhcd.cc/2016/08/02/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%AB%98%E7%BA%A7%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://www.jvaeyhcd.cc/2016/08/02/Swift学习笔记之高级运算符/</id>
    <published>2016-08-02T07:01:30.000Z</published>
    <updated>2016-08-02T07:04:10.000Z</updated>
    
    <content type="html">&lt;p&gt;除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。&lt;/p&gt;
&lt;p&gt;与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（&lt;code&gt;&amp;amp;+&lt;/code&gt;）,所有的溢出运算符都是以&lt;code&gt;&amp;amp;&lt;/code&gt;开头的。&lt;/p&gt;
&lt;h2 id=&quot;位运算符&quot;&gt;&lt;a href=&quot;#位运算符&quot; class=&quot;headerlink&quot; title=&quot;位运算符&quot;&gt;&lt;/a&gt;位运算符&lt;/h2&gt;&lt;p&gt;位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;按位取反运算符&quot;&gt;&lt;a href=&quot;#按位取反运算符&quot; class=&quot;headerlink&quot; title=&quot;按位取反运算符&quot;&gt;&lt;/a&gt;按位取反运算符&lt;/h3&gt;&lt;p&gt;按位取反运算符（&lt;code&gt;~&lt;/code&gt;）可以对一个数值的全部比特位进行取反：&lt;/p&gt;

&lt;p&gt;按位取反运算符是一个前缀运算符，需要直接放在运算的数之前，并且它们之间不能加空格。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; initialBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0b00001111&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//十进制等于15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; invertedBits = ~initialBits       &lt;span class=&quot;comment&quot;&gt;//等于 0b11110000，十进制为240&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;按位与运算符&quot;&gt;&lt;a href=&quot;#按位与运算符&quot; class=&quot;headerlink&quot; title=&quot;按位与运算符&quot;&gt;&lt;/a&gt;按位与运算符&lt;/h3&gt;&lt;p&gt;按位与运算符（&lt;code&gt;&amp;amp;&lt;/code&gt;）可以对两个数的比特位进行合并。它返回一个新的数，只有当两个数对应位都为&lt;code&gt;1&lt;/code&gt;的时候，新数的对应位才为&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在下面的示例当中，&lt;code&gt;firstBits&lt;/code&gt; 和 &lt;code&gt;lastBits&lt;/code&gt; 中间 4 个位的值都为 1。按位与运算符对它们进行了运算，得到二进制数值 &lt;code&gt;00111100&lt;/code&gt;，等价于无符号十进制数的 60：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; firstBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0b11111100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; lastBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt;  = &lt;span class=&quot;number&quot;&gt;0b00111111&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; middleBits = firstBits &amp;amp; lastBits &lt;span class=&quot;comment&quot;&gt;// 等于 00111100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;按位或运算符&quot;&gt;&lt;a href=&quot;#按位或运算符&quot; class=&quot;headerlink&quot; title=&quot;按位或运算符&quot;&gt;&lt;/a&gt;按位或运算符&lt;/h3&gt;&lt;p&gt;按位或运算符(&lt;code&gt;|&lt;/code&gt;)可以对两个数的比特位进行比较，它返回一个新的数，如果两个对应的比特位中有任意一个为&lt;code&gt;1&lt;/code&gt;时，新数对应位就为&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在下面的示例中，&lt;code&gt;someBits&lt;/code&gt; 和 &lt;code&gt;moreBits&lt;/code&gt; 不同的位会被设置为 &lt;code&gt;1&lt;/code&gt;。接位或运算符对它们进行了运算，得到二进制数值 &lt;code&gt;11111110&lt;/code&gt;，等价于无符号十进制数的 &lt;code&gt;254&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; someBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0b10110010&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; moreBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0b01011110&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; combinedbits = someBits | moreBits &lt;span class=&quot;comment&quot;&gt;// 等于 11111110&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;按位异或运算符&quot;&gt;&lt;a href=&quot;#按位异或运算符&quot; class=&quot;headerlink&quot; title=&quot;按位异或运算符&quot;&gt;&lt;/a&gt;按位异或运算符&lt;/h3&gt;&lt;p&gt;按位异或运算符(&lt;code&gt;^&lt;/code&gt;)可以对两个数的比特位进行比较，它返回一个新的数，当两个数对应比特位不相同时，新数的对应位就为&lt;code&gt;1&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;在下面的示例当中，&lt;code&gt;firstBits&lt;/code&gt; 和 &lt;code&gt;otherBits&lt;/code&gt; 都有一个自己的位为 &lt;code&gt;1&lt;/code&gt; 而对方的对应位为 &lt;code&gt;0&lt;/code&gt; 的位。 按位异或运算符将新数的这两个位都设置为 &lt;code&gt;1&lt;/code&gt;，同时将其它位都设置为 &lt;code&gt;0&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; firstBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0b00010100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; otherBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0b00000101&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; outputBits = firstBits ^ otherBits &lt;span class=&quot;comment&quot;&gt;// 等于 00010001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;按位左移、右移运算符&quot;&gt;&lt;a href=&quot;#按位左移、右移运算符&quot; class=&quot;headerlink&quot; title=&quot;按位左移、右移运算符&quot;&gt;&lt;/a&gt;按位左移、右移运算符&lt;/h3&gt;&lt;p&gt;按位左移运算符（&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;）和按位右移运算符（&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;）可以对一个数的所有位进行指定位数的左移和右移。对一个数的左移和右移一位相当于对一个数乘以2或者除以2。&lt;/p&gt;
&lt;h4 id=&quot;无符号整数的位移运算&quot;&gt;&lt;a href=&quot;#无符号整数的位移运算&quot; class=&quot;headerlink&quot; title=&quot;无符号整数的位移运算&quot;&gt;&lt;/a&gt;无符号整数的位移运算&lt;/h4&gt;&lt;p&gt;对无符号的整数进行位移的规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已经存在的位按指定的位数进行左移和右移&lt;/li&gt;
&lt;li&gt;任何因移动超出整型存储范围的位都会被丢弃&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;0&lt;/code&gt;来填充位移后产生的空白&lt;br&gt;这种方法称为逻辑位移。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下这张图展示了 &lt;code&gt;11111111 &amp;lt;&amp;lt; 1&lt;/code&gt;（即把 &lt;code&gt;11111111&lt;/code&gt; 向左移动 &lt;code&gt;1&lt;/code&gt; 位），和 &lt;code&gt;11111111 &amp;gt;&amp;gt; 1&lt;/code&gt;（即把 &lt;code&gt;11111111&lt;/code&gt; 向右移动 &lt;code&gt;1&lt;/code&gt; 位）的结果。蓝色的部分是被移位的，灰色的部分是被抛弃的，橙色的部分则是被填充进来的：&lt;/p&gt;

&lt;p&gt;下面的代码演示了 Swift 中的移位运算：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; shiftBits: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 即二进制的 00000100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shiftBits &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 00001000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shiftBits &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 00010000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shiftBits &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 10000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shiftBits &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 00000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shiftBits &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 00000001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还可以使用位移运算对其它数据类型进行编码和解码。&lt;/p&gt;
&lt;h4 id=&quot;有符号整数的位移运算&quot;&gt;&lt;a href=&quot;#有符号整数的位移运算&quot; class=&quot;headerlink&quot; title=&quot;有符号整数的位移运算&quot;&gt;&lt;/a&gt;有符号整数的位移运算&lt;/h4&gt;&lt;p&gt;对比无符号整数，有符号整数的位移运算相对就要复杂得多，这种复杂性源于有符号整数的二进制表现新式。&lt;br&gt;有符号整数使用第一个比特位（通常称为符号位）来表示这个数的正负。符号为&lt;code&gt;0&lt;/code&gt;代表正数，为&lt;code&gt;1&lt;/code&gt;代表负数。其余的比特位（通常称为数值位）存储了实际的值。&lt;/p&gt;

&lt;p&gt;符号位为 &lt;code&gt;0&lt;/code&gt;，说明这是一个正数，另外 7 位则代表了十进制数值 4 的二进制表示。&lt;/p&gt;
&lt;p&gt;负数的存储方式略有不同。它存储的值的绝对值等于 &lt;code&gt;2&lt;/code&gt; 的 &lt;code&gt;n&lt;/code&gt; 次方减去它的实际值（也就是数值位表示的值），这里的 &lt;code&gt;n&lt;/code&gt; 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 &lt;code&gt;2&lt;/code&gt; 的 &lt;code&gt;7&lt;/code&gt; 次方，即 &lt;code&gt;128&lt;/code&gt;。&lt;br&gt;这是值为 &lt;code&gt;-4&lt;/code&gt; 的 &lt;code&gt;Int8&lt;/code&gt; 型整数的二进制位表现形式：&lt;/p&gt;

&lt;p&gt;这次的符号位为 &lt;code&gt;1&lt;/code&gt;，说明这是一个负数，另外 7 个位则代表了数值 &lt;code&gt;124&lt;/code&gt;（即 &lt;code&gt;128 - 4&lt;/code&gt;）的二进制表示。负数的表示通常被称为二进制补码表示，用这种方法表示负数乍看起来有点奇怪，但它有一下几个优点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果想对&lt;code&gt;-1&lt;/code&gt;和&lt;code&gt;-4&lt;/code&gt;进行加法运算，我们只需要将这两个数的全部8个比特位相加，并且将计算结果中超出8位的值丢弃,其次，使用二进制补码可以使负数的按位左移和右移运算得到跟正数同样的效果，即每向左移一位就将自身的数值乘以 2，每向右一位就将自身的数值除以 2。要达到此目的，对有符号整数的右移有一个额外的规则：&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个行为可以确保有符号整数的符号位不会因为右移运算而改变，这通常被称为&lt;b&gt;算术移位&lt;/b&gt;。&lt;br&gt;由于正数和负数的特殊存储方式，在对它们进行右移的时候，会使它们越来越接近 &lt;code&gt;0&lt;/code&gt;。在移位的过程中保持符号位不变，意味着负整数在接近 &lt;code&gt;0&lt;/code&gt; 的过程中会一直保持为负。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;溢出运算符&quot;&gt;&lt;a href=&quot;#溢出运算符&quot; class=&quot;headerlink&quot; title=&quot;溢出运算符&quot;&gt;&lt;/a&gt;溢出运算符&lt;/h2&gt;&lt;p&gt;在默认情况下，当向一个整数赋予超过它容量的值时，Swift默认会报错，而不是产生一个无效的数。这个行为为我们在运算过大或者过小的数的时候提供了额外的安全性。&lt;br&gt;例如&lt;code&gt;Int16&lt;/code&gt;型整数能容纳的有符号整数范围是&lt;code&gt;-32768&lt;/code&gt;到&lt;code&gt;32767&lt;/code&gt;,当一个为Int16型变量的值超出了这个范围时，系统会报错：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; potentialOverflow = &lt;span class=&quot;type&quot;&gt;Int16&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// potentialOverflow 的值是 32767，这是 Int16 能容纳的最大整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;potentialOverflow += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;// 这里会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;溢出运算符可以让数值溢出的时候采取截断处理，而非报错。可以使用Swift提供的三个溢出运算符来让系统支持整数溢出运算。这些运算符都是以&lt;code&gt;&amp;amp;&lt;/code&gt;开头的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;溢出加法 &lt;code&gt;&amp;amp;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;溢出减法 &lt;code&gt;&amp;amp;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;溢出乘法 &lt;code&gt;&amp;amp;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;无符号数值上溢&quot;&gt;&lt;a href=&quot;#无符号数值上溢&quot; class=&quot;headerlink&quot; title=&quot;无符号数值上溢&quot;&gt;&lt;/a&gt;无符号数值上溢&lt;/h3&gt;&lt;p&gt;数值有可能出现上溢或者下溢。&lt;br&gt;这个示例演示了但我们对一个无符号整数使用溢出加法(&lt;code&gt;&amp;amp;+&lt;/code&gt;)进行上溢运算时会发生什么：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; unsignedOverflow = &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// unsignedOverflow 等于 UInt8 所能容纳的最大整数 255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unsignedOverflow = unsignedOverflow &amp;amp;+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此时 unsignedOverflow 等于 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unsignedOverflow&lt;/code&gt; 被初始化为 &lt;code&gt;UInt8&lt;/code&gt; 所能容纳的最大整数（&lt;code&gt;255&lt;/code&gt;，以二进制表示即 &lt;code&gt;11111111&lt;/code&gt;）。然后使用了溢出加法运算符（&lt;code&gt;&amp;amp;+&lt;/code&gt;）对其进行加 1 运算。这使得它的二进制表示正好超出 UInt8 所能容纳的位数，也就导致了数值的溢出，如下图所示。数值溢出后，留在 &lt;code&gt;UInt8&lt;/code&gt; 边界内的值是 &lt;code&gt;00000000&lt;/code&gt;，也就是十进制数值的 0。&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;无符号数值下溢&quot;&gt;&lt;a href=&quot;#无符号数值下溢&quot; class=&quot;headerlink&quot; title=&quot;无符号数值下溢&quot;&gt;&lt;/a&gt;无符号数值下溢&lt;/h3&gt;&lt;p&gt;同样的，当我们对一个无符号整数使用溢出减法(&lt;code&gt;&amp;amp;-&lt;/code&gt;)进行下溢运算时也会产生类似的现象：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; unsignedOverflow = &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// unsignedOverflow 等于 UInt8 所能容纳的最小整数 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unsignedOverflow = unsignedOverflow &amp;amp;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此时 unsignedOverflow 等于 255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UInt8&lt;/code&gt; 型整数能容纳的最小值是 &lt;code&gt;0&lt;/code&gt;，以二进制表示即 &lt;code&gt;00000000&lt;/code&gt;。当使用溢出减法运算符对其进行减 1 运算时，数值会产生下溢并被截断为 &lt;code&gt;11111111&lt;/code&gt;， 也就是十进制数值的 &lt;code&gt;255&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;有符号数值溢出&quot;&gt;&lt;a href=&quot;#有符号数值溢出&quot; class=&quot;headerlink&quot; title=&quot;有符号数值溢出&quot;&gt;&lt;/a&gt;有符号数值溢出&lt;/h3&gt;&lt;p&gt;溢出也会发生在有符号整型数值上。在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算。比如下面的例子：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; signedOverflow = &lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// signedOverflow 等于 Int8 所能容纳的最小整数 -128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;signedOverflow = signedOverflow &amp;amp;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此时 signedOverflow 等于 127&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Int8&lt;/code&gt;型整数能容纳的最小值是&lt;code&gt;－128&lt;/code&gt;，以二进制表示即&lt;code&gt;10000000&lt;/code&gt;。当使用溢出减法运算符对其进行减&lt;code&gt;1&lt;/code&gt;运算时，符号位被翻转，得到二进制数值&lt;code&gt;01111111&lt;/code&gt;，也就是十进制的&lt;code&gt;127&lt;/code&gt;，这个值也是&lt;code&gt;Int8&lt;/code&gt;型整数所能容纳的最大值。&lt;/p&gt;

&lt;p&gt;对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。&lt;/p&gt;
&lt;h2 id=&quot;运算符函数&quot;&gt;&lt;a href=&quot;#运算符函数&quot; class=&quot;headerlink&quot; title=&quot;运算符函数&quot;&gt;&lt;/a&gt;运算符函数&lt;/h2&gt;&lt;p&gt;类和结构体可以为现有的运算符提供自定义的实现，这通常被称为运算符重载。&lt;/p&gt;
&lt;p&gt;下面一个例子展示了如何为自定义的结构体实现加法运算符(&lt;code&gt;+&lt;/code&gt;)。算数运算符是一个双目运算符，因为它可以对两个值进行运算，同时它还是中缀运算符，因为它出现在两个值中间。&lt;/p&gt;
&lt;p&gt;例子中定义了一个名为 &lt;code&gt;Vector2D&lt;/code&gt; 的结构体用来表示二维坐标向量 &lt;code&gt;(x, y)&lt;/code&gt;，紧接着定义了一个可以对两个 &lt;code&gt;Vector2D&lt;/code&gt; 结构体进行相加的运算符函数：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vector2D&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, y = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; + &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;: Vector2D, &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;: Vector2D)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;.x + &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;.x, y: &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;.y + &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;.y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该运算符函数被定义为一个全局函数，并且函数的名字与它要进行重载的 &lt;code&gt;+&lt;/code&gt; 名字一致。因为算术加法运算符是双目运算符，所以这个运算符函数接收两个类型为 &lt;code&gt;Vector2D&lt;/code&gt; 的参数，同时有一个 &lt;code&gt;Vector2D&lt;/code&gt; 类型的返回值。&lt;/p&gt;
&lt;p&gt;在这个实现中，输入参数分别被命名为 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt;，代表在 + 运算符左边和右边的两个 &lt;code&gt;Vector2D&lt;/code&gt; 实例。函数返回了一个新的 &lt;code&gt;Vector2D&lt;/code&gt; 实例，这个实例的 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 分别等于作为参数的两个实例的 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的值之和。&lt;/p&gt;
&lt;p&gt;这个函数被定义成全局的，而不是 &lt;code&gt;Vector2D&lt;/code&gt; 结构体的成员方法，所以任意两个 &lt;code&gt;Vector2D&lt;/code&gt; 实例都可以使用这个中缀运算符：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vector = &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; anotherVector = &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; combinedVector = vector + anotherVector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// combinedVector 是一个新的 Vector2D 实例，值为 (5.0, 5.0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;前缀和后缀运算符&quot;&gt;&lt;a href=&quot;#前缀和后缀运算符&quot; class=&quot;headerlink&quot; title=&quot;前缀和后缀运算符&quot;&gt;&lt;/a&gt;前缀和后缀运算符&lt;/h3&gt;&lt;p&gt;上个例子演示了一个双目中缀运算符的自定义实现。类与结构体也能提供标准单目运算符的实现。单目运算符只运算一个值。当运算符出现在值之前时，它就是前缀的（例如 &lt;code&gt;-a&lt;/code&gt;），而当它出现在值之后时，它就是后缀的（例如 &lt;code&gt;b!&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;要实现前缀或者后缀运算符，需要在声明运算符函数的时候在&lt;code&gt;func&lt;/code&gt;关键字之前指定&lt;code&gt;prefix&lt;/code&gt;或者&lt;code&gt;postfix&lt;/code&gt;修饰符。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; - &lt;span class=&quot;params&quot;&gt;(vector: Vector2D)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: -vector.x, y: -vector.y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码为 &lt;code&gt;Vector2D&lt;/code&gt; 类型实现了单目负号运算符。由于该运算符是前缀运算符，所以这个函数需要加上 &lt;code&gt;prefix&lt;/code&gt; 修饰符。&lt;/p&gt;
&lt;p&gt;对于简单数值，单目负号运算符可以对它们的正负性进行改变。对于 &lt;code&gt;Vector2D&lt;/code&gt; 来说，该运算将其 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 属性的正负性都进行了改变：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; positive = &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; negative = -positive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// negative 是一个值为 (-3.0, -4.0) 的 Vector2D 实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; alsoPositive = -negative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// alsoPositive 是一个值为 (3.0, 4.0) 的 Vector2D 实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;复合赋值运算符&quot;&gt;&lt;a href=&quot;#复合赋值运算符&quot; class=&quot;headerlink&quot; title=&quot;复合赋值运算符&quot;&gt;&lt;/a&gt;复合赋值运算符&lt;/h3&gt;&lt;p&gt;复合赋值运算符将赋值运算符（&lt;code&gt;=&lt;/code&gt;）与其它运算符进行结合。例如，将加法与赋值结合成加法赋值运算符（&lt;code&gt;+=&lt;/code&gt;）。在实现的时候，需要把运算符的左参数设置成 &lt;code&gt;inout&lt;/code&gt; 类型，因为这个参数的值会在运算符函数内直接被修改。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; += &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;: Vector2D, &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;: Vector2D)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为加法运算在之前已经定义过了，所以在这里无需重新定义。在这里可以直接利用现有的加法运算符函数，用它来对左值和右值进行相加，并再次赋值给左值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; original = &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vectorToAdd = &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;original += vectorToAdd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// original 的值现在为 (4.0, 6.0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：不能对默认的赋值运算符（&lt;code&gt;=&lt;/code&gt;）进行重载。只有组合赋值运算符可以被重载。同样地，也无法对三目条件运算符 （&lt;code&gt;a ? b : c&lt;/code&gt;） 进行重载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;等价运算符&quot;&gt;&lt;a href=&quot;#等价运算符&quot; class=&quot;headerlink&quot; title=&quot;等价运算符&quot;&gt;&lt;/a&gt;等价运算符&lt;/h3&gt;&lt;p&gt;自定义的类和结构体没有对等价运算符进行默认实现，等价运算符通常被称为“相等”运算符（&lt;code&gt;==&lt;/code&gt;）与“不等”运算符（&lt;code&gt;!=&lt;/code&gt;）。对于自定义类型，Swift 无法判断其是否“相等”，因为“相等”的含义取决于这些自定义类型在你的代码中所扮演的角色。&lt;/p&gt;
&lt;p&gt;为了使用等价运算符能对自定义的类型进行判等运算，需要为其提供自定义实现，实现的方法与其它中缀运算符一样：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; == &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;: Vector2D, &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;: Vector2D)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;.x == &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;.x) &amp;amp;&amp;amp; (&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;.y == &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;.y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; != &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;: Vector2D, &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;: Vector2D)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !(&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; == &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义运算符&quot;&gt;&lt;a href=&quot;#自定义运算符&quot; class=&quot;headerlink&quot; title=&quot;自定义运算符&quot;&gt;&lt;/a&gt;自定义运算符&lt;/h2&gt;&lt;p&gt;除了实现标准运算符，在 Swift 中还可以声明和实现自定义运算符。&lt;br&gt;新的运算符要使用 &lt;code&gt;operator&lt;/code&gt; 关键字在全局作用域内进行定义，同时还要指定 &lt;code&gt;prefix&lt;/code&gt;、&lt;code&gt;infix&lt;/code&gt; 或者 &lt;code&gt;postfix&lt;/code&gt; 修饰符：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; +++ &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码定义了一个新的名为 &lt;code&gt;+++&lt;/code&gt; 的前缀运算符。对于这个运算符，在 Swift 中并没有意义，因此我们针对 &lt;code&gt;Vector2D&lt;/code&gt; 的实例来定义它的意义。对这个示例来讲，&lt;code&gt;+++&lt;/code&gt; 被实现为“前缀双自增”运算符。它使用了前面定义的复合加法运算符来让矩阵对自身进行相加，从而让 &lt;code&gt;Vector2D&lt;/code&gt; 实例的 &lt;code&gt;x&lt;/code&gt; 属性和 &lt;code&gt;y&lt;/code&gt; 属性的值翻倍：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; +++ &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; vector: Vector2D)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Vector2D&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vector += vector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;除了基本运算符外，Swift还提供了许多可以对数值进行复杂运算的高级运算符。这些高级运算符包含了在C和objc中已经被大家熟知的位运算符和位移运算符。&lt;/p&gt;
&lt;p&gt;与C语言和objc的算数运算符不同，Swift中的算数运算符默认是不会溢出的。所有溢出行为都会被捕获并报告位错误。如果想让系统允许溢出行为，可以选择使用Swift中另一套默认支持溢出的运算符，比如溢出运算符（&lt;code&gt;&amp;amp;+&lt;/code&gt;）,所有的溢出运算符都是以&lt;code&gt;&amp;amp;&lt;/code&gt;开头的。&lt;/p&gt;
&lt;h2 id=&quot;位运算符&quot;&gt;&lt;a href=&quot;#位运算符&quot; class=&quot;headerlink&quot; title=&quot;位运算符&quot;&gt;&lt;/a&gt;位运算符&lt;/h2&gt;&lt;p&gt;位运算符可以操作数据结构中每个独立的比特位，它通常被用在底层开发中，比如图形编程和创建设备驱动。位运算符在处理外部资源和原始数据也十分有用，比如自定义通信协议传输的数据进行编码和解码。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac环境中Jenkins停止和启动命令</title>
    <link href="http://www.jvaeyhcd.cc/2016/08/02/Mac%E7%8E%AF%E5%A2%83%E4%B8%ADJenkins%E5%81%9C%E6%AD%A2%E5%92%8C%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.jvaeyhcd.cc/2016/08/02/Mac环境中Jenkins停止和启动命令/</id>
    <published>2016-08-02T04:02:06.000Z</published>
    <updated>2016-08-02T06:20:10.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;停止&quot;&gt;&lt;a href=&quot;#停止&quot; class=&quot;headerlink&quot; title=&quot;停止&quot;&gt;&lt;/a&gt;停止&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;停止&quot;&gt;&lt;a href=&quot;#停止&quot; class=&quot;headerlink&quot; title=&quot;停止&quot;&gt;&lt;/a&gt;停止&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CocoaPods的制作过程</title>
    <link href="http://www.jvaeyhcd.cc/2016/07/08/CocoaPods%E7%9A%84%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8B/"/>
    <id>http://www.jvaeyhcd.cc/2016/07/08/CocoaPods的制作过程/</id>
    <published>2016-07-08T09:14:00.000Z</published>
    <updated>2016-07-08T10:25:22.000Z</updated>
    
    <content type="html">&lt;p&gt;最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。&lt;/p&gt;
&lt;h3 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; title=&quot;创建仓库&quot;&gt;&lt;/a&gt;创建仓库&lt;/h3&gt;&lt;h4 id=&quot;本地仓库&quot;&gt;&lt;a href=&quot;#本地仓库&quot; class=&quot;headerlink&quot; title=&quot;本地仓库&quot;&gt;&lt;/a&gt;本地仓库&lt;/h4&gt;&lt;p&gt;使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。&lt;/p&gt;
&lt;h4 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h4&gt;&lt;p&gt;在github上同样创建一个&lt;code&gt;HcdCachePlayer&lt;/code&gt;,最好保持同名,需要注意的是,在创建仓库的时候需要添加&lt;code&gt;license&lt;/code&gt;类型,这里我使用&lt;code&gt;license&lt;/code&gt;类型为&lt;code&gt;MIT&lt;/code&gt;。这个很简单就不再啰嗦了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;关联本地仓库到远程仓库&quot;&gt;&lt;a href=&quot;#关联本地仓库到远程仓库&quot; class=&quot;headerlink&quot; title=&quot;关联本地仓库到远程仓库&quot;&gt;&lt;/a&gt;关联本地仓库到远程仓库&lt;/h4&gt;&lt;p&gt;进入本地仓库目录&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/github/H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关联远程仓库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin https://github.com/Jvaeyhcd/H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加Pods依赖库所需文件&quot;&gt;&lt;a href=&quot;#添加Pods依赖库所需文件&quot; class=&quot;headerlink&quot; title=&quot;添加Pods依赖库所需文件&quot;&gt;&lt;/a&gt;添加Pods依赖库所需文件&lt;/h3&gt;&lt;p&gt;依赖库所需的文件格式为&lt;code&gt;{project}.podspec&lt;/code&gt;格式，每个Pods依赖库必须有这个描述文件。&lt;/p&gt;
&lt;h4 id=&quot;添加-project-podspec文件&quot;&gt;&lt;a href=&quot;#添加-project-podspec文件&quot; class=&quot;headerlink&quot; title=&quot;添加{project}.podspec文件&quot;&gt;&lt;/a&gt;添加{project}.podspec文件&lt;/h4&gt;&lt;p&gt;使用pod命令创建&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod spec create H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就生成了HcdCachePlayer.podspec文件，打开该文件添加内容，并删除不需要的后就像这样：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pod::Spec.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.name         = &lt;span class=&quot;string&quot;&gt;&quot;HcdCachePlayer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.version      = &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.summary      = &lt;span class=&quot;string&quot;&gt;&quot;一个带缓存的视频播放器HcdCachePlayer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.description  = &amp;lt;&amp;lt;-DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  一个使用AVPlayer封装的带缓存的视频播放器,支持全屏，可以左右滑动手势快进快退，上下滑动手势调节屏幕亮度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.homepage     = &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/Jvaeyhcd/HcdCachePlayer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.license      = &amp;#123; :&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;, :file =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;LICENSE&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.author             = &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;Jvaeyhcd&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;chedahuang@icloud.com&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.platform     = :ios, &lt;span class=&quot;string&quot;&gt;&#39;7.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source       = &amp;#123; :git =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/Jvaeyhcd/HcdCachePlayer.git&quot;&lt;/span&gt;, :tag =&amp;gt; s.version.to_s &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source_files  = &lt;span class=&quot;string&quot;&gt;&quot;hcdCachePlayer/**/*.&amp;#123;h,m&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.resource  = &lt;span class=&quot;string&quot;&gt;&quot;hcdCachePlayer/hcdCachePlayer.bundle&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.frameworks = &lt;span class=&quot;string&quot;&gt;&quot;UIKit&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;AVFoundation&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;MobileCoreServices&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Foundation&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.requires_arc = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.dependency &lt;span class=&quot;string&quot;&gt;&quot;Masonry&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;s.source_files指向循环滚动的核心代码放在项目的s.hcdCachePlayer/&lt;em&gt;*/&lt;/em&gt;.{h,m},所以这里最好将库代码都放在同一个目录下。&lt;/p&gt;
&lt;h3 id=&quot;提交到github&quot;&gt;&lt;a href=&quot;#提交到github&quot; class=&quot;headerlink&quot; title=&quot;提交到github&quot;&gt;&lt;/a&gt;提交到github&lt;/h3&gt;&lt;p&gt;此时编码已经完成了，并且配置好了相关文件我们可以先将代码提交到github上了。&lt;/p&gt;
&lt;h4 id=&quot;Pods验证&quot;&gt;&lt;a href=&quot;#Pods验证&quot; class=&quot;headerlink&quot; title=&quot;Pods验证&quot;&gt;&lt;/a&gt;Pods验证&lt;/h4&gt;&lt;p&gt;提交之前我们需要先验证一下HcdCachePlayer.podspec文件。在HcdCachePlayer.podspec所在目录运行如下命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod lib lint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果出现ERROR和WARING都会失败，如果失败会明确指明哪个地方出错了，按提示修改就可以了。&lt;/p&gt;
&lt;h4 id=&quot;提交代码到Github&quot;&gt;&lt;a href=&quot;#提交代码到Github&quot; class=&quot;headerlink&quot; title=&quot;提交代码到Github&quot;&gt;&lt;/a&gt;提交代码到Github&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;version 0.0.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打上标签&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不出问题的话,就可以在github上看到最新提交的内容了。&lt;/p&gt;
&lt;h3 id=&quot;上传-project-podspec到CocoaPods官方仓库中&quot;&gt;&lt;a href=&quot;#上传-project-podspec到CocoaPods官方仓库中&quot; class=&quot;headerlink&quot; title=&quot;上传{project}.podspec到CocoaPods官方仓库中&quot;&gt;&lt;/a&gt;上传{project}.podspec到CocoaPods官方仓库中&lt;/h3&gt;&lt;p&gt;要想一个HcdCachePlayer真正可以用,就得把生成的HcdCachePlayer.podspec文件提交到Cocoapods官方的&lt;a href=&quot;https://github.com/CocoaPods/Specs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Specs&lt;/a&gt;仓库中,才能被search到并使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前的提交方式是先将&lt;a href=&quot;https://github.com/CocoaPods/Specs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Specs&lt;/a&gt;仓库fork一份，添加修改，然后push，等待审核，这种显示是不安全的，所以现在不能使用了。也就是这篇文章：&lt;a href=&quot;http://blog.csdn.net/wzzvictory/article/details/20067595&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《CocoaPods详解之—-制作篇》&lt;/a&gt;中说提到的方法，注意这个方法已经不能使用了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CocoaPods为我们提供了另外一个更加安全的方法&lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-Trunk/#transition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trunk&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Trunk的Register&quot;&gt;&lt;a href=&quot;#Trunk的Register&quot; class=&quot;headerlink&quot; title=&quot;Trunk的Register&quot;&gt;&lt;/a&gt;Trunk的Register&lt;/h4&gt;&lt;p&gt;如果第一次使用的话那么就需要注册了，需要CocoaPods0.33版本以上才支持&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod trunk register *youremail* *yourname* --description=&lt;span class=&quot;string&quot;&gt;&#39;iMac&#39;&lt;/span&gt; --verbose&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上命令是注册所需的,替换你的邮箱,用户名,以及描述内容, –verbose可以输入详细的debug。&lt;/p&gt;
&lt;p&gt;注册完成后可以使用一下命令查看注册信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod trunk me&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;提交-project-podspec&quot;&gt;&lt;a href=&quot;#提交-project-podspec&quot; class=&quot;headerlink&quot; title=&quot;提交{project}.podspec&quot;&gt;&lt;/a&gt;提交{project}.podspec&lt;/h4&gt;&lt;p&gt;在{project}.podspec文件的路径下执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod trunk push H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这条命令做了如下三件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证本地的podspec文件,也可以使用 pod lib lint验证&lt;/li&gt;
&lt;li&gt;上传podspec文件到trunk服务&lt;/li&gt;
&lt;li&gt;将{project}.podspec文件转为{poject}.podspec.json文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有报错那么就成功了。&lt;/p&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;终端执行 pod search HcdCachePlayer就可以找到了,如果没有找到 pod setup再试一下。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   一个带缓存的视频播放器H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pod &lt;span class=&quot;string&quot;&gt;&#39;HcdCachePlayer&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 0.0.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - Homepage: https://github.com/Jvaeyhcd/H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - Source:   https://github.com/Jvaeyhcd/H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - Versions: &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [master repo]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(END)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里遇到一个问题创建成功了，但是另外一台电脑却收不到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;协同工作&quot;&gt;&lt;a href=&quot;#协同工作&quot; class=&quot;headerlink&quot; title=&quot;协同工作&quot;&gt;&lt;/a&gt;协同工作&lt;/h4&gt;&lt;p&gt;当需要其他人来共同维护你的代码,需要提供权限。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod trunk add-owner H&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;CachePlayer *email*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://foggry.com/blog/2016/03/23/cocoapods-xiang-jie-zhi-geng-xin-pian/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods 详解之—-更新篇&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最新项目不算太忙，于是抽出了一点时间将以前项目中的使用的AVPlayer视频播放器做了一个简单的封装。现在我想把它做成CocoaPods方便以后的使用。下面我要详细的记录下我的制作过程。&lt;/p&gt;
&lt;h3 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; title=&quot;创建仓库&quot;&gt;&lt;/a&gt;创建仓库&lt;/h3&gt;&lt;h4 id=&quot;本地仓库&quot;&gt;&lt;a href=&quot;#本地仓库&quot; class=&quot;headerlink&quot; title=&quot;本地仓库&quot;&gt;&lt;/a&gt;本地仓库&lt;/h4&gt;&lt;p&gt;使用Xcode创建一个叫做HcdCachePlayer的工程，然后将相关的封装全部编写完毕。&lt;/p&gt;
&lt;h4 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h4&gt;&lt;p&gt;在github上同样创建一个&lt;code&gt;HcdCachePlayer&lt;/code&gt;,最好保持同名,需要注意的是,在创建仓库的时候需要添加&lt;code&gt;license&lt;/code&gt;类型,这里我使用&lt;code&gt;license&lt;/code&gt;类型为&lt;code&gt;MIT&lt;/code&gt;。这个很简单就不再啰嗦了。&lt;br&gt;
    
    </summary>
    
    
      <category term="CocoaPods" scheme="http://www.jvaeyhcd.cc/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>全屏设置setStatusBarOrientation 未生效的解决办法</title>
    <link href="http://www.jvaeyhcd.cc/2016/07/06/%E5%85%A8%E5%B1%8F%E8%AE%BE%E7%BD%AEsetStatusBarOrientation-%E6%9C%AA%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://www.jvaeyhcd.cc/2016/07/06/全屏设置setStatusBarOrientation-未生效的解决办法/</id>
    <published>2016-07-06T07:21:10.000Z</published>
    <updated>2016-07-06T10:19:57.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。&lt;br&gt;手动调用了如下代码，但是并没有什么卵用：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication]setStatusBarOrientation:&lt;span class=&quot;built_in&quot;&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;首先在Info.plist中设置View controller-based status bar appearance为NO&lt;/li&gt;
&lt;li&gt;需要旋转的视频ViewController的方法&lt;code&gt;- (BOOL)shouldAutorotate&lt;/code&gt;要返回NO，不然手动旋转不会生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips:本以为到了这里问题就应该已经解决了，but问题并没有得到解决,覆写&lt;code&gt;- (BOOL)shouldAutorotate&lt;/code&gt;方法并为生效，或许此时你一定会说:”WTF?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后的原因是:&lt;span style=&quot;textColor:&#39;#00ff00&#39;&quot;&gt;由于UIViewController放置在Navigation中，而由于Navigation不人性化的设计，navigation的- (BOOL)shouldAutorotate是不会根据显示ViewController的- (BOOL)shouldAutorotate设置的值来改变的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后最终的解决办法是将下面这段代码放在AppDelegate.m的最后面，这个时候NavigationController就会根据你显示的ViewController改变返回值了，然后再去ViewController覆写方法，返回NO，方法生效了！&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UINavigationController&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Rotation&lt;/span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)shouldAutorotate  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.viewControllers&lt;/span&gt; lastObject] shouldAutorotate];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)supportedInterfaceOrientations  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.viewControllers&lt;/span&gt; lastObject] supportedInterfaceOrientations];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIInterfaceOrientation&lt;/span&gt;)preferredInterfaceOrientationForPresentation &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.viewControllers&lt;/span&gt; lastObject] preferredInterfaceOrientationForPresentation];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在一个项目中用到了视频播放组件，并且项目要求视频能够边下边播，并且需要实现视频的缓存，如果下次播放就不要再通过网络去访问播放，而是直接读取本地的缓存文件播放。在实现让视频全屏播放的时候遇到了比较难搞的问题，当视频全屏的时候，视频成功旋转过来了，，但是状态栏的方向始终不能旋转过来。&lt;br&gt;手动调用了如下代码，但是并没有什么卵用：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication]setStatusBarOrientation:&lt;span class=&quot;built_in&quot;&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;经过一番搜索，网上给了各种方法，归纳起来大致是这个样子的：&lt;/p&gt;
    
    </summary>
    
      <category term="常见问题" scheme="http://www.jvaeyhcd.cc/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="StatusBar" scheme="http://www.jvaeyhcd.cc/tags/StatusBar/"/>
    
  </entry>
  
  <entry>
    <title>NSURLErrorDomain Code=-1002 “Unsupported URL”</title>
    <link href="http://www.jvaeyhcd.cc/2016/06/30/NSURLErrorDomain-Code-1002-%E2%80%9Cunsupported-URL%E2%80%9D/"/>
    <id>http://www.jvaeyhcd.cc/2016/06/30/NSURLErrorDomain-Code-1002-“unsupported-URL”/</id>
    <published>2016-06-30T07:13:42.000Z</published>
    <updated>2016-06-30T07:41:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。&lt;/p&gt;
&lt;h2 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h2&gt;&lt;p&gt;我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;p&gt;通过对比发现（分析问题常见的方法），当这个接口传入了中文后将会报错，如果不传中文接口并不会报错，所以我基本上就可以锁定问题就出在中文字符的问题上。&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;找到了问题出现的原因后其它的一切都变得简单了，因为传入中文字符会出现服务器不能解析然后报错的情况，所以我们应该将传入的中文字符用UTF8编码一下后再通过接口传递给服务器。（问题轻松解决～～～就是这么简单）&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//text为传入参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text = [text stringByAddingPercentEscapesUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在进行iOS网络请求的时候，报Error Domain=NSURLErrorDomain Code=-1002 “unsupported URL”的错误，请求的类型是GET，但是使用PSOTMAN和在浏览器中打开此接口可以返回正确的数据。通过google搜索最后找到了解决办法，今天记录下这个奇怪的问题。&lt;/p&gt;
&lt;h2 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h2&gt;&lt;p&gt;我在一个接手的二次开发的项目中，发现了这样一个问题，有的接口可以用正常访问，但是却有一个接口就不能正常访问。我对比了这个不能访问的接口和其它能够正常访问的接口的区别发现，当我传入的参数有值为中文字符串时就会报如下的错误，所以显然问题就出在传入参数为中文字符串的问题上。&lt;/p&gt;
    
    </summary>
    
      <category term="常见错误" scheme="http://www.jvaeyhcd.cc/categories/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
    
      <category term="常见错误" scheme="http://www.jvaeyhcd.cc/tags/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>CocosPods使用过程中遇到的一些问题，以及解决办法</title>
    <link href="http://www.jvaeyhcd.cc/2016/06/16/CocosPods%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://www.jvaeyhcd.cc/2016/06/16/CocosPods使用过程中遇到的一些问题，以及解决办法/</id>
    <published>2016-06-16T07:21:30.000Z</published>
    <updated>2016-06-17T06:37:58.000Z</updated>
    
    <content type="html">&lt;p&gt;经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。&lt;/p&gt;
&lt;h2 id=&quot;library-not-found-for-lPods&quot;&gt;&lt;a href=&quot;#library-not-found-for-lPods&quot; class=&quot;headerlink&quot; title=&quot;library not found for -lPods&quot;&gt;&lt;/a&gt;library not found for -lPods&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ld: library not found &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt;Pods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h3&gt;&lt;p&gt;于是在网上搜索了一番找打了一篇帖子：&lt;a href=&quot;http://www.cocoachina.com/bbs/read.php?tid-253614.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/bbs/read.php?tid-253614.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各种各样的回复都有，我最终的解决步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更新cocospods到最新版本，注：gem的最新的镜像地址：&lt;a href=&quot;https://gems.ruby-china.org/，淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gems.ruby-china.org/，淘宝的好像不能访问了。（也有说将版本降到0.37的，但是我是不想退步的，要用就用最新的）。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Build Setting &amp;gt; Other Linker Flag 中删除所有，只留下$(inherited)轻松解决。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实还有一个原因就是我的工程目录名称和Finder工程目录的文件夹不一致造成的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经常会遇到很多莫名其妙的问题，这次遇到了，下次可能依然还会遇到，常常因为自己没有做什么记录，所以下次遇到了还是不知道如何解决。所以在这里我想记录一些我在使用CocosPods的过程中遇到过的一些问题。&lt;/p&gt;
&lt;h2 id=&quot;library-not-found-for-lPods&quot;&gt;&lt;a href=&quot;#library-not-found-for-lPods&quot; class=&quot;headerlink&quot; title=&quot;library not found for -lPods&quot;&gt;&lt;/a&gt;library not found for -lPods&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;这是一个很奇葩的问题，我在使用Cocoapods管理项目，编译Debug运行没有任何问题，但是就是在Archive的时候，报错如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ld: library not found &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt;Pods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Objective-C身份证验证实现</title>
    <link href="http://www.jvaeyhcd.cc/2016/06/15/Objective-C%E8%BA%AB%E4%BB%BD%E8%AF%81%E9%AA%8C%E8%AF%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.jvaeyhcd.cc/2016/06/15/Objective-C身份证验证实现/</id>
    <published>2016-06-15T04:04:58.000Z</published>
    <updated>2016-06-15T04:59:33.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。&lt;/p&gt;
&lt;p&gt;直接上代码&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isValidIdCardNum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = [value stringByReplacingOccurrencesOfString:&lt;span class=&quot;string&quot;&gt;@&quot;X&quot;&lt;/span&gt; withString:&lt;span class=&quot;string&quot;&gt;@&quot;x&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = [value stringByTrimmingCharactersInSet:[&lt;span class=&quot;built_in&quot;&gt;NSCharacterSet&lt;/span&gt; whitespaceAndNewlineCharacterSet]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)value&lt;span class=&quot;variable&quot;&gt;.length&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length != &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; &amp;amp;&amp;amp; length !=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 省份代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *areasArray =@[&lt;span class=&quot;string&quot;&gt;@&quot;11&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;12&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;13&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;14&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;15&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;21&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;22&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;23&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;31&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;32&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;33&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;34&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;35&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;36&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;37&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;41&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;42&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;43&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;44&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;45&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;46&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;50&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;51&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;52&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;53&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;54&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;61&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;62&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;63&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;64&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;65&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;71&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;81&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;82&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;91&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *valueStart2 = [value substringToIndex:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; areaFlag = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *areaCode &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; areasArray) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([areaCode isEqualToString:valueStart2]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            areaFlag = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!areaFlag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; *regularExpression;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; numberofMatch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; year = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            year = [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;1900&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (year % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || (year % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; year % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                regularExpression = [[&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; alloc] initWithPattern:&lt;span class=&quot;string&quot;&gt;@&quot;^[1-9][0-9]&amp;#123;5&amp;#125;[0-9]&amp;#123;2&amp;#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&amp;#123;3&amp;#125;$&quot;&lt;/span&gt;                   options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionCaseInsensitive&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;// 测试出生日期的合法性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                regularExpression = [[&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; alloc] initWithPattern:&lt;span class=&quot;string&quot;&gt;@&quot;^[1-9][0-9]&amp;#123;5&amp;#125;[0-9]&amp;#123;2&amp;#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&amp;#123;3&amp;#125;$&quot;&lt;/span&gt;           options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionCaseInsensitive&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;// 测试出生日期的合法性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            numberofMatch = [regularExpression numberOfMatchesInString:value options:&lt;span class=&quot;built_in&quot;&gt;NSMatchingReportProgress&lt;/span&gt; range:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, value&lt;span class=&quot;variable&quot;&gt;.length&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numberofMatch &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            year = [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (year % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || (year % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; year % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                regularExpression = [[&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; alloc] initWithPattern:&lt;span class=&quot;string&quot;&gt;@&quot;^[1-9][0-9]&amp;#123;5&amp;#125;19|20[0-9]&amp;#123;2&amp;#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&amp;#123;3&amp;#125;[0-9Xx]$&quot;&lt;/span&gt;options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionCaseInsensitive&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;// 测试出生日期的合法性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                regularExpression = [[&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; alloc] initWithPattern:&lt;span class=&quot;string&quot;&gt;@&quot;^[1-9][0-9]&amp;#123;5&amp;#125;19|20[0-9]&amp;#123;2&amp;#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&amp;#123;3&amp;#125;[0-9Xx]$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                                         options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionCaseInsensitive&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;// 测试出生日期的合法性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            numberofMatch = [regularExpression numberOfMatchesInString:value options:&lt;span class=&quot;built_in&quot;&gt;NSMatchingReportProgress&lt;/span&gt; range:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, value&lt;span class=&quot;variable&quot;&gt;.length&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numberofMatch &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; S = ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; + ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; + ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; + ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + ([value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt;) *&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; *&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; *&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; + [value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;span class=&quot;variable&quot;&gt;.intValue&lt;/span&gt; *&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Y = S % &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *M = &lt;span class=&quot;string&quot;&gt;@&quot;F&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *JYM = &lt;span class=&quot;string&quot;&gt;@&quot;10X98765432&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                M = [JYM substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(Y,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]; &lt;span class=&quot;comment&quot;&gt;// 判断校验位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([M isEqualToString:[[value substringWithRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)] uppercaseString]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 检测ID的校验位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码验证十分全面。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在一个二次开发的项目中看到了一段身份证验证的OC代码，虽然我一直讨厌二次开发。因为这这个二次开发的项目太老，代码太乱，毫无层次感。可是令人欣慰的是，我在里面发现了一段有用的代码。&lt;/p&gt;
&lt;p&gt;直接上代码&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RXSwift基础</title>
    <link href="http://www.jvaeyhcd.cc/2016/06/08/RXSwift%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.jvaeyhcd.cc/2016/06/08/RXSwift基础/</id>
    <published>2016-06-08T01:32:44.000Z</published>
    <updated>2016-06-08T02:04:56.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应&lt;/p&gt;
&lt;h2 id=&quot;为什么发用RxSwift&quot;&gt;&lt;a href=&quot;#为什么发用RxSwift&quot; class=&quot;headerlink&quot; title=&quot;为什么发用RxSwift&quot;&gt;&lt;/a&gt;为什么发用RxSwift&lt;/h2&gt;&lt;p&gt;一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Observable的创建和订阅&lt;/li&gt;
&lt;li&gt;Subjects的使用&lt;/li&gt;
&lt;li&gt;Combination：Observable的混合操作&lt;/li&gt;
&lt;li&gt;Transforming：Observable的转换操作&lt;/li&gt;
&lt;li&gt;Filtering：Observable消息元素的过滤操作&lt;/li&gt;
&lt;li&gt;对Observable元素做运算操作&lt;/li&gt;
&lt;li&gt;Connectable操作&lt;/li&gt;
&lt;li&gt;错误处理&lt;/li&gt;
&lt;li&gt;debug&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;消息的订阅方式&quot;&gt;&lt;a href=&quot;#消息的订阅方式&quot; class=&quot;headerlink&quot; title=&quot;消息的订阅方式&quot;&gt;&lt;/a&gt;消息的订阅方式&lt;/h2&gt;&lt;p&gt;这些都是Observable的方法，参数都是闭包，闭包是观察者&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;subscribe(on:(Event) -&amp;gt; void)：订阅所有消息(Next, Error, and Completed)&lt;/li&gt;
&lt;li&gt;subscribeNext((Element) -&amp;gt; void)：只订阅Next&lt;/li&gt;
&lt;li&gt;subscribeError((ErrorType) -&amp;gt; void)：只订阅Error&lt;/li&gt;
&lt;li&gt;subscribeCompleted(() -&amp;gt; Void)：只订阅Completed&lt;/li&gt;
&lt;li&gt;subscribe(onNext:(Element) -&amp;gt; void, onError:(ErrorType) -&amp;gt; void, onCompleted:() -&amp;gt; Void, onDisposed:() -&amp;gt; Void)订阅多个消息&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;释放分配的资源&quot;&gt;&lt;a href=&quot;#释放分配的资源&quot; class=&quot;headerlink&quot; title=&quot;释放分配的资源&quot;&gt;&lt;/a&gt;释放分配的资源&lt;/h2&gt;&lt;p&gt;订阅者可以通过调用.dispose()来释放分配的资源，但通过DisposeBag来管理或者通过takeUntil来自动释放更好&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subscription.addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .takeUntil(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.rx_deallocated)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Observable的创建和订阅&quot;&gt;&lt;a href=&quot;#Observable的创建和订阅&quot; class=&quot;headerlink&quot; title=&quot;Observable的创建和订阅&quot;&gt;&lt;/a&gt;Observable的创建和订阅&lt;/h2&gt;&lt;p&gt;Observable序列分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷：只有当有观察者订阅这个序列时，序列才发射值&lt;/li&gt;
&lt;li&gt;热：序列创建时就开始发射值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;never-创建即不会完成也不会发消息的Observable&quot;&gt;&lt;a href=&quot;#never-创建即不会完成也不会发消息的Observable&quot; class=&quot;headerlink&quot; title=&quot;never()创建即不会完成也不会发消息的Observable&quot;&gt;&lt;/a&gt;never()创建即不会完成也不会发消息的Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; neverSequence = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;.never()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; neverSequenceSubscription = neverSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe &amp;#123; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;This will never be printed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;neverSequenceSubscription.addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;./never.png&quot; width=&quot;400/&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;empty-创建只会发送一次完成消息的Observable&quot;&gt;&lt;a href=&quot;#empty-创建只会发送一次完成消息的Observable&quot; class=&quot;headerlink&quot; title=&quot;empty()创建只会发送一次完成消息的Observable&quot;&gt;&lt;/a&gt;empty()创建只会发送一次完成消息的Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;.empty()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe &amp;#123; event &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(event)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Completed&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./empty.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息&quot;&gt;&lt;a href=&quot;#just-创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息&quot; class=&quot;headerlink&quot; title=&quot;just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息&quot;&gt;&lt;/a&gt;just()创建只包含一个元素的Observable，在发送一次Next消息后便发送Completed消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.just(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; event &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(event)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注：如果传递null给just，它将返回一个发送null消息的Observable，不要传入错误的参数，否则将会得到一个空的Observable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(🔴)&lt;br&gt;Completed&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./just.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略&quot;&gt;&lt;a href=&quot;#of-创建可以包含任意个元素的Observable，连续相同的元素会被忽略&quot; class=&quot;headerlink&quot; title=&quot;of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略&quot;&gt;&lt;/a&gt;of()创建可以包含任意个元素的Observable，连续相同的元素会被忽略&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐭&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐹&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .subscribeNext &amp;#123; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐶&lt;br&gt;🐱&lt;br&gt;🐭&lt;br&gt;🐹&lt;/p&gt;
&lt;h3 id=&quot;create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable&quot;&gt;&lt;a href=&quot;#create-可以创建自定义的Observable，在最原始的Observable基础上创建Observable&quot; class=&quot;headerlink&quot; title=&quot;create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable&quot;&gt;&lt;/a&gt;create()可以创建自定义的Observable，在最原始的Observable基础上创建Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; myJust = &amp;#123; (element: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.create &amp;#123; observer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            observer.on(.&lt;span class=&quot;type&quot;&gt;Next&lt;/span&gt;(element))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            observer.on(.&lt;span class=&quot;type&quot;&gt;Completed&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NopDisposable&lt;/span&gt;.instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; myJust(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(🔴)&lt;br&gt;Completed&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./create.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;range-创建一个发送一个范围的整数的Observable，发送完后发送Completed&quot;&gt;&lt;a href=&quot;#range-创建一个发送一个范围的整数的Observable，发送完后发送Completed&quot; class=&quot;headerlink&quot; title=&quot;range()创建一个发送一个范围的整数的Observable，发送完后发送Completed&quot;&gt;&lt;/a&gt;range()创建一个发送一个范围的整数的Observable，发送完后发送Completed&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.range(start: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(1)&lt;br&gt;Next(2)&lt;br&gt;Next(3)&lt;br&gt;Next(4)&lt;br&gt;Next(5)&lt;br&gt;Next(6)&lt;br&gt;Next(7)&lt;br&gt;Next(8)&lt;br&gt;Next(9)&lt;br&gt;Next(10)&lt;br&gt;Completed&lt;/p&gt;
&lt;h3 id=&quot;repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送&quot;&gt;&lt;a href=&quot;#repeatElement-创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送&quot; class=&quot;headerlink&quot; title=&quot;repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送&quot;&gt;&lt;/a&gt;repeatElement()创建一个可以重复发送消息的Observable，可以指定重复的次数，未指定即无限发送&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.repeatElement(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .take(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🔴&lt;br&gt;🔴&lt;br&gt;🔴&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：take可以用于所有Observable指定限制元素个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素&quot;&gt;&lt;a href=&quot;#generate-创建一个可以指定规则的Observable，会发送所有满足规则的元素&quot; class=&quot;headerlink&quot; title=&quot;generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素&quot;&gt;&lt;/a&gt;generate()创建一个可以指定规则的Observable，会发送所有满足规则的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.generate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            initialState: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            condition: &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            iterate: &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;iterate：每次condition之后都会对当前值做一次相应迭代运算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;&lt;br&gt;0&lt;br&gt;1&lt;br&gt;2&lt;/p&gt;
&lt;h3 id=&quot;deferred-序列为每一个订阅者创建一个全新的Observable&quot;&gt;&lt;a href=&quot;#deferred-序列为每一个订阅者创建一个全新的Observable&quot; class=&quot;headerlink&quot; title=&quot;deferred()序列为每一个订阅者创建一个全新的Observable&quot;&gt;&lt;/a&gt;deferred()序列为每一个订阅者创建一个全新的Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; deferredSequence = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;.deferred &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Creating &lt;span class=&quot;subst&quot;&gt;\(&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.create &amp;#123; observer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Emitting...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NopDisposable&lt;/span&gt;.instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deferredSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deferredSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注：deferred序列只有在一个观察者订阅它的时候才执行它的创建Observable方法，产生一个全新的Observable**&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Creating 1&lt;br&gt;Emitting…&lt;br&gt;🐶&lt;br&gt;🐱&lt;br&gt;🐵&lt;br&gt;Creating 2&lt;br&gt;Emitting…&lt;br&gt;🐶&lt;br&gt;🐱&lt;br&gt;🐵&lt;br&gt;&lt;img src=&quot;./deferred.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;error-创建一个不发送元素的Observable，然后立即发送error并终止&quot;&gt;&lt;a href=&quot;#error-创建一个不发送元素的Observable，然后立即发送error并终止&quot; class=&quot;headerlink&quot; title=&quot;error()创建一个不发送元素的Observable，然后立即发送error并终止&quot;&gt;&lt;/a&gt;error()创建一个不发送元素的Observable，然后立即发送error并终止&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;.error(&lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Test&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Error(Test)&lt;/p&gt;
&lt;h3 id=&quot;doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息&quot;&gt;&lt;a href=&quot;#doOn-在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息&quot; class=&quot;headerlink&quot; title=&quot;doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息&quot;&gt;&lt;/a&gt;doOn()在发送元素消息前对每一个元素做指定的操作，然后返回操作前的元素消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🍎&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🍐&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🍊&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🍋&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .doOn &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Intercepted:&quot;&lt;/span&gt;, $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注： doOn(onNext:onError:onCompleted:)为不同订阅方式分别指定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Intercepted: Next(🍎)&lt;br&gt;🍎&lt;br&gt;Intercepted: Next(🍐)&lt;br&gt;🍐&lt;br&gt;Intercepted: Next(🍊)&lt;br&gt;🍊&lt;br&gt;Intercepted: Next(🍋)&lt;br&gt;🍋&lt;br&gt;Intercepted: Completed&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./doOn.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable&quot;&gt;&lt;a href=&quot;#toObservable-通过Array-Dictionary-或Set等SequenceType创建一个Observable&quot; class=&quot;headerlink&quot; title=&quot;toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable&quot;&gt;&lt;/a&gt;toObservable()通过Array,Dictionary,或Set等SequenceType创建一个Observable&lt;/h3&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Subjects的使用&quot;&gt;&lt;a href=&quot;#Subjects的使用&quot; class=&quot;headerlink&quot; title=&quot;Subjects的使用&quot;&gt;&lt;/a&gt;Subjects的使用&lt;/h2&gt;&lt;p&gt;Subjects理解为observer和Observable之间的桥梁或代理，即扮演着observer又扮演着Observable，规定了添加的observer如何接收消息&lt;/p&gt;
&lt;h3 id=&quot;PublishSubject向所有订阅者广播从订阅之后的事件&quot;&gt;&lt;a href=&quot;#PublishSubject向所有订阅者广播从订阅之后的事件&quot; class=&quot;headerlink&quot; title=&quot;PublishSubject向所有订阅者广播从订阅之后的事件&quot;&gt;&lt;/a&gt;PublishSubject向所有订阅者广播从订阅之后的事件&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Subscription: 1 Event: Next(🐶)&lt;br&gt;Subscription: 1 Event: Next(🐱)&lt;br&gt;Subscription: 1 Event: Next(🅰️)&lt;br&gt;Subscription: 2 Event: Next(🅰️)&lt;br&gt;Subscription: 1 Event: Next(🅱️)&lt;br&gt;Subscription: 2 Event: Next(🅱️)&lt;/p&gt;
&lt;h3 id=&quot;ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息&quot;&gt;&lt;a href=&quot;#ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息&quot; class=&quot;headerlink&quot; title=&quot;ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息&quot;&gt;&lt;/a&gt;ReplaySubject有一个缓存机制，可以在创建时通过指定bufferSize指定缓存大小或调用buffer方法指定更详细的缓存条件来指定新添加的订阅者可以接收多少订阅前的消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject = &lt;span class=&quot;type&quot;&gt;ReplaySubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;.create(bufferSize: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Subscription: 1 Event: Next(🐶)&lt;br&gt;Subscription: 1 Event: Next(🐱)&lt;br&gt;Subscription: 2 Event: Next(🐱)&lt;br&gt;Subscription: 1 Event: Next(🅰️)&lt;br&gt;Subscription: 2 Event: Next(🅰️)&lt;br&gt;Subscription: 1 Event: Next(🅱️)&lt;br&gt;Subscription: 2 Event: Next(🅱️)&lt;/p&gt;
&lt;h3 id=&quot;BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息&quot;&gt;&lt;a href=&quot;#BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息&quot; class=&quot;headerlink&quot; title=&quot;BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息&quot;&gt;&lt;/a&gt;BehaviorSubject向新的订阅者发送一条最近的事件，如果没有事件则发送一条默认的消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject = &lt;span class=&quot;type&quot;&gt;BehaviorSubject&lt;/span&gt;(value: &lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.addObserver(&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍐&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍊&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;note：以上都不会自动发送Completed当它们被释放的时候&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Subscription: 1 Event: Next(🔴)&lt;br&gt;Subscription: 1 Event: Next(🐶)&lt;br&gt;Subscription: 1 Event: Next(🐱)&lt;br&gt;Subscription: 2 Event: Next(🐱)&lt;br&gt;Subscription: 1 Event: Next(🅰️)&lt;br&gt;Subscription: 2 Event: Next(🅰️)&lt;br&gt;Subscription: 1 Event: Next(🅱️)&lt;br&gt;Subscription: 2 Event: Next(🅱️)&lt;br&gt;Subscription: 3 Event: Next(🅱️)&lt;br&gt;Subscription: 1 Event: Next(🍐)&lt;br&gt;Subscription: 2 Event: Next(🍐)&lt;br&gt;Subscription: 3 Event: Next(🍐)&lt;br&gt;Subscription: 1 Event: Next(🍊)&lt;br&gt;Subscription: 2 Event: Next(🍊)&lt;br&gt;Subscription: 3 Event: Next(🍊)&lt;/p&gt;
&lt;h3 id=&quot;Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist&quot;&gt;&lt;a href=&quot;#Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist&quot; class=&quot;headerlink&quot; title=&quot;Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist&quot;&gt;&lt;/a&gt;Variable与BehaviorSubject的区别是在完成的时候它会自动发送一条Completed消息和调用deist&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; variable = &lt;span class=&quot;type&quot;&gt;Variable&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.asObservable().addObserver(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.asObservable().addObserver(&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;).addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = &lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = &lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注:variable.asObservable()实际是获取variable中的BehaviorSubject。variable也没有onNext，而是通过value来获取或添加元素，它会添加元素到BehaviorSubject&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Subscription: 1 Event: Next(🔴)&lt;br&gt;Subscription: 1 Event: Next(🐶)&lt;br&gt;Subscription: 1 Event: Next(🐱)&lt;br&gt;Subscription: 2 Event: Next(🐱)&lt;br&gt;Subscription: 1 Event: Next(🅰️)&lt;br&gt;Subscription: 2 Event: Next(🅰️)&lt;br&gt;Subscription: 1 Event: Next(🅱️)&lt;br&gt;Subscription: 2 Event: Next(🅱️)&lt;br&gt;Subscription: 1 Event: Completed&lt;br&gt;Subscription: 2 Event: Completed&lt;/p&gt;
&lt;h2 id=&quot;Combination：Observable的混合操作&quot;&gt;&lt;a href=&quot;#Combination：Observable的混合操作&quot; class=&quot;headerlink&quot; title=&quot;Combination：Observable的混合操作&quot;&gt;&lt;/a&gt;Combination：Observable的混合操作&lt;/h2&gt;&lt;h3 id=&quot;startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈&quot;&gt;&lt;a href=&quot;#startWith-分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈&quot; class=&quot;headerlink&quot; title=&quot;startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈&quot;&gt;&lt;/a&gt;startWith()分为原Observable和新Observable，并且在发送原Observable元素前会先发送完新Observable元素，有点像栈&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐭&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐹&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     .startWith(&lt;span class=&quot;string&quot;&gt;&quot;1️⃣&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     .startWith(&lt;span class=&quot;string&quot;&gt;&quot;2️⃣&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     .startWith(&lt;span class=&quot;string&quot;&gt;&quot;3️⃣&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;3️⃣&lt;br&gt;🅰️&lt;br&gt;🅱️&lt;br&gt;2️⃣&lt;br&gt;1️⃣&lt;br&gt;🐶&lt;br&gt;🐱&lt;br&gt;🐭&lt;br&gt;🐹&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/startwith.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/startwith.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;merge-按顺序混合多个Observable为一个新Observable&quot;&gt;&lt;a href=&quot;#merge-按顺序混合多个Observable为一个新Observable&quot; class=&quot;headerlink&quot; title=&quot;merge()按顺序混合多个Observable为一个新Observable&quot;&gt;&lt;/a&gt;merge()按顺序混合多个Observable为一个新Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject1 = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject2 = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject3 = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(subject1, subject2, subject3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .merge()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;①&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;②&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🆎&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject3.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;③&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🅰️&lt;br&gt;🅱️&lt;br&gt;①&lt;br&gt;②&lt;br&gt;🆎&lt;br&gt;③&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/merge.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/merge.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;zip-相当于并排的将多个Observable合并成一个新Observable&quot;&gt;&lt;a href=&quot;#zip-相当于并排的将多个Observable合并成一个新Observable&quot; class=&quot;headerlink&quot; title=&quot;zip()相当于并排的将多个Observable合并成一个新Observable&quot;&gt;&lt;/a&gt;zip()相当于并排的将多个Observable合并成一个新Observable&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; stringSubject = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; intSubject = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;zip&lt;/span&gt;(stringSubject, intSubject) &amp;#123; stringElement, intElement &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(stringElement)&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;\(intElement)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringSubject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringSubject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intSubject.onNext(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intSubject.onNext(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringSubject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🆎&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intSubject.onNext(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🅰️ 1&lt;br&gt;🅱️ 2&lt;br&gt;🆎 3&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/zip.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/zip.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合&quot;&gt;&lt;a href=&quot;#combineLatest-总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合&quot; class=&quot;headerlink&quot; title=&quot;combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合&quot;&gt;&lt;/a&gt;combineLatest()总是将某个Observable发出的最新元素与其他Observable的最后发出的元素混合&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; stringSubject = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; intSubject = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.combineLatest(stringSubject, intSubject) &amp;#123; stringElement, intElement &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(stringElement)&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;\(intElement)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringSubject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅰️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringSubject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🅱️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intSubject.onNext(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intSubject.onNext(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringSubject.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🆎&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🅱️ 1&lt;br&gt;🅱️ 2&lt;br&gt;🆎 2&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/combinelatest.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/combinelatest.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在数组上的应用：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; stringObservable = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.just(&lt;span class=&quot;string&quot;&gt;&quot;❤️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fruitObservable = [&lt;span class=&quot;string&quot;&gt;&quot;🍎&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🍐&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🍊&quot;&lt;/span&gt;].toObservable()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; animalObservable = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐭&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐹&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[stringObservable, fruitObservable, animalObservable].combineLatest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;note：所有集合的类型必须一样&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;❤️ 🍊 🐶&lt;br&gt;❤️ 🍊 🐱&lt;br&gt;❤️ 🍊 🐭&lt;br&gt;❤️ 🍊 🐹&lt;/p&gt;
&lt;h3 id=&quot;switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息&quot;&gt;&lt;a href=&quot;#switchLatest-可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息&quot; class=&quot;headerlink&quot; title=&quot;switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息&quot;&gt;&lt;/a&gt;switchLatest()可以将多个Observable序列合并成一个一维的Observable序列，只合并当前关注的Observable序列最近的消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject1 = &lt;span class=&quot;type&quot;&gt;BehaviorSubject&lt;/span&gt;(value: &lt;span class=&quot;string&quot;&gt;&quot;⚽️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject2 = &lt;span class=&quot;type&quot;&gt;BehaviorSubject&lt;/span&gt;(value: &lt;span class=&quot;string&quot;&gt;&quot;🍎&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; variable = &lt;span class=&quot;type&quot;&gt;Variable&lt;/span&gt;(subject1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.asObservable()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .switchLatest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🏈&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🏀&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = subject2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;⚾️&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🎾&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍐&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = subject1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;⚽️&lt;br&gt;🏈&lt;br&gt;🏀&lt;br&gt;🍎&lt;br&gt;🍐&lt;br&gt;🎾&lt;br&gt;&lt;strong&gt;note：⚽️ 被忽略&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./switch.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Transforming：Observable的转换操作&quot;&gt;&lt;a href=&quot;#Transforming：Observable的转换操作&quot; class=&quot;headerlink&quot; title=&quot;Transforming：Observable的转换操作&quot;&gt;&lt;/a&gt;Transforming：Observable的转换操作&lt;/h2&gt;&lt;h3 id=&quot;map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列&quot;&gt;&lt;a href=&quot;#map-将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列&quot; class=&quot;headerlink&quot; title=&quot;map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列&quot;&gt;&lt;/a&gt;map()将闭包操作应用到一个被观察序列的所有元素上，然后返回一个新的被观察序列&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; * $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;1&lt;br&gt;4&lt;br&gt;9&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/map.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/map.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;scan-可以迭代的操作，并且可以设置一个初始的迭代值&quot;&gt;&lt;a href=&quot;#scan-可以迭代的操作，并且可以设置一个初始的迭代值&quot; class=&quot;headerlink&quot; title=&quot;scan()可以迭代的操作，并且可以设置一个初始的迭代值&quot;&gt;&lt;/a&gt;scan()可以迭代的操作，并且可以设置一个初始的迭代值&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .scan(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; aggregateValue, newValue &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aggregateValue + newValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;11&lt;br&gt;111&lt;br&gt;1111&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/scan.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/scan.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Filtering：Observable消息元素的过滤操作&quot;&gt;&lt;a href=&quot;#Filtering：Observable消息元素的过滤操作&quot; class=&quot;headerlink&quot; title=&quot;Filtering：Observable消息元素的过滤操作&quot;&gt;&lt;/a&gt;Filtering：Observable消息元素的过滤操作&lt;/h2&gt;&lt;h3 id=&quot;filter-发出满足bool条件的元素&quot;&gt;&lt;a href=&quot;#filter-发出满足bool条件的元素&quot; class=&quot;headerlink&quot; title=&quot;filter()发出满足bool条件的元素&quot;&gt;&lt;/a&gt;filter()发出满足bool条件的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;🐹&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐱&lt;br&gt;🐱&lt;br&gt;🐱&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/filter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/filter.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;distinctUntilChanged-过滤掉连续的相同元素&quot;&gt;&lt;a href=&quot;#distinctUntilChanged-过滤掉连续的相同元素&quot; class=&quot;headerlink&quot; title=&quot;distinctUntilChanged()过滤掉连续的相同元素&quot;&gt;&lt;/a&gt;distinctUntilChanged()过滤掉连续的相同元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .distinctUntilChanged()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐱&lt;br&gt;🐷&lt;br&gt;🐱&lt;br&gt;🐵&lt;br&gt;🐱&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/distinct.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/distinct.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;elementAt-只发送指定下标的元素&quot;&gt;&lt;a href=&quot;#elementAt-只发送指定下标的元素&quot; class=&quot;headerlink&quot; title=&quot;elementAt()只发送指定下标的元素&quot;&gt;&lt;/a&gt;elementAt()只发送指定下标的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .elementAt(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐸&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/elementat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/elementat.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息&quot;&gt;&lt;a href=&quot;#single-不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个-Error消息&quot; class=&quot;headerlink&quot; title=&quot;single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息&quot;&gt;&lt;/a&gt;single()不传参数则发送Observable的第一个元素，否则为满足条件表达式的第一个元素，如果没有发送一个确切的元素，将发送一个 Error消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .single&amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//如果是==这种确切的判断，将没有Error消息而是Completed消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(1)&lt;br&gt;Error(Sequence contains more than one element.)&lt;/p&gt;
&lt;h3 id=&quot;take-仅发送从第一个元素开始指定个数的元素&quot;&gt;&lt;a href=&quot;#take-仅发送从第一个元素开始指定个数的元素&quot; class=&quot;headerlink&quot; title=&quot;take()仅发送从第一个元素开始指定个数的元素&quot;&gt;&lt;/a&gt;take()仅发送从第一个元素开始指定个数的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .take(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐱&lt;br&gt;🐰&lt;br&gt;🐶&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/take.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/take.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;takeLast-与take不同的是takeLast是从末尾开始&quot;&gt;&lt;a href=&quot;#takeLast-与take不同的是takeLast是从末尾开始&quot; class=&quot;headerlink&quot; title=&quot;takeLast()与take不同的是takeLast是从末尾开始&quot;&gt;&lt;/a&gt;takeLast()与take不同的是takeLast是从末尾开始&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .takeLast(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐸&lt;br&gt;🐷&lt;br&gt;🐵&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/takelast.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/takelast.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;takeWhile-发送从头开始的满足条件的元素&quot;&gt;&lt;a href=&quot;#takeWhile-发送从头开始的满足条件的元素&quot; class=&quot;headerlink&quot; title=&quot;takeWhile()发送从头开始的满足条件的元素&quot;&gt;&lt;/a&gt;takeWhile()发送从头开始的满足条件的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .takeWhile &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;&lt;img src=&quot;./takeWhile.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;takeUntil：在与之关联的另一Observable发送元素前发送元素&quot;&gt;&lt;a href=&quot;#takeUntil：在与之关联的另一Observable发送元素前发送元素&quot; class=&quot;headerlink&quot; title=&quot;takeUntil：在与之关联的另一Observable发送元素前发送元素&quot;&gt;&lt;/a&gt;takeUntil：在与之关联的另一Observable发送元素前发送元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sourceSequence = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; referenceSequence = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .takeUntil(referenceSequence)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;referenceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(🐱)&lt;br&gt;Next(🐰)&lt;br&gt;Next(🐶)&lt;br&gt;Completed&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/takeuntil.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/takeuntil.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;skip-与take相反，它是不发送&quot;&gt;&lt;a href=&quot;#skip-与take相反，它是不发送&quot; class=&quot;headerlink&quot; title=&quot;skip()与take相反，它是不发送&quot;&gt;&lt;/a&gt;skip()与take相反，它是不发送&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .skip(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐶&lt;br&gt;🐸&lt;br&gt;🐷&lt;br&gt;🐵&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/skip.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/skip.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;skipWhile-与takeWhile相反，它是不发送&quot;&gt;&lt;a href=&quot;#skipWhile-与takeWhile相反，它是不发送&quot; class=&quot;headerlink&quot; title=&quot;skipWhile()与takeWhile相反，它是不发送&quot;&gt;&lt;/a&gt;skipWhile()与takeWhile相反，它是不发送&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .skipWhile &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./skipWhile.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;skipWhileWithIndex-只是skipWhile基础上增加了一个下标index&quot;&gt;&lt;a href=&quot;#skipWhileWithIndex-只是skipWhile基础上增加了一个下标index&quot; class=&quot;headerlink&quot; title=&quot;skipWhileWithIndex()只是skipWhile基础上增加了一个下标index&quot;&gt;&lt;/a&gt;skipWhileWithIndex()只是skipWhile基础上增加了一个下标index&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .skipWhileWithIndex &amp;#123; element, index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐸&lt;br&gt;🐷&lt;br&gt;🐵&lt;/p&gt;
&lt;h3 id=&quot;skipUntil-与takeUntil相反，它是之后发送&quot;&gt;&lt;a href=&quot;#skipUntil-与takeUntil相反，它是之后发送&quot; class=&quot;headerlink&quot; title=&quot;skipUntil()与takeUntil相反，它是之后发送&quot;&gt;&lt;/a&gt;skipUntil()与takeUntil相反，它是之后发送&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sourceSequence = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; referenceSequence = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .skipUntil(referenceSequence)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐰&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;referenceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐸&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐷&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐵&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🐸&lt;br&gt;🐷&lt;br&gt;🐵&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/skipuntil.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/skipuntil.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;对Observable元素做运算操作&quot;&gt;&lt;a href=&quot;#对Observable元素做运算操作&quot; class=&quot;headerlink&quot; title=&quot;对Observable元素做运算操作&quot;&gt;&lt;/a&gt;对Observable元素做运算操作&lt;/h2&gt;&lt;h3 id=&quot;toArray-将Observable序列转换成array并发送，然后终止&quot;&gt;&lt;a href=&quot;#toArray-将Observable序列转换成array并发送，然后终止&quot; class=&quot;headerlink&quot; title=&quot;toArray()将Observable序列转换成array并发送，然后终止&quot;&gt;&lt;/a&gt;toArray()将Observable序列转换成array并发送，然后终止&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.range(start: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .toArray()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])&lt;br&gt;Completed&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./toArray.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;reduce-迭代运算，通过指定初始迭代值和运算符&quot;&gt;&lt;a href=&quot;#reduce-迭代运算，通过指定初始迭代值和运算符&quot; class=&quot;headerlink&quot; title=&quot;reduce()迭代运算，通过指定初始迭代值和运算符&quot;&gt;&lt;/a&gt;reduce()迭代运算，通过指定初始迭代值和运算符&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;built_in&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, accumulator: +)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;=&lt;br&gt;1111&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/reduce.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/reduce.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素&quot;&gt;&lt;a href=&quot;#concat-将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素&quot; class=&quot;headerlink&quot; title=&quot;concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素&quot;&gt;&lt;/a&gt;concat()将一个Observable序列的内部Observable序列串联起来，且同一时间只操作一个序列，只有当前序列Completed后，才开始串联下一个序列的前一个元素及之后的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject1 = &lt;span class=&quot;type&quot;&gt;BehaviorSubject&lt;/span&gt;(value: &lt;span class=&quot;string&quot;&gt;&quot;🍎&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject2 = &lt;span class=&quot;type&quot;&gt;BehaviorSubject&lt;/span&gt;(value: &lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; variable = &lt;span class=&quot;type&quot;&gt;Variable&lt;/span&gt;(subject1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.asObservable()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .concat()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍐&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍊&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;variable.value = subject2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;I would be ignored&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍹&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject1.onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject2.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐭&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(🍎)&lt;br&gt;Next(🍐)&lt;br&gt;Next(🍊)&lt;br&gt;Next(🍹)&lt;br&gt;Next(🐱)&lt;br&gt;Next(🐭)&lt;br&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/concat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactivex.io/documentation/operators/concat.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Connectable操作&quot;&gt;&lt;a href=&quot;#Connectable操作&quot; class=&quot;headerlink&quot; title=&quot;Connectable操作&quot;&gt;&lt;/a&gt;Connectable操作&lt;/h2&gt;&lt;p&gt;Connectable操作，Connectable Observable操作跟普通的Observable区别在于，Connectable Observable只有在它们的connect()方法调用后才开始发送元素，因此可以等到所有订阅者都订阅后才开始发送元素，有点像事务一样&lt;/p&gt;
&lt;h3 id=&quot;publish-将一个普通序列转换成Connectable-Observable序列&quot;&gt;&lt;a href=&quot;#publish-将一个普通序列转换成Connectable-Observable序列&quot; class=&quot;headerlink&quot; title=&quot;publish()将一个普通序列转换成Connectable Observable序列&quot;&gt;&lt;/a&gt;publish()将一个普通序列转换成Connectable Observable序列&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;printExampleHeader(#function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; intSequence = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;.interval(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, scheduler: &lt;span class=&quot;type&quot;&gt;MainScheduler&lt;/span&gt;.instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .publish()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subscription 1:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123; intSequence.connect() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subscription 2:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subscription 3:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;delay 2&lt;/p&gt;
&lt;p&gt;Subscription 1:, Event: 0&lt;br&gt;Subscription 1:, Event: 1&lt;br&gt;Subscription 2:, Event: 1&lt;br&gt;Subscription 1:, Event: 2&lt;br&gt;Subscription 2:, Event: 2&lt;br&gt;Subscription 1:, Event: 3&lt;br&gt;Subscription 2:, Event: 3&lt;br&gt;Subscription 3:, Event: 3&lt;br&gt;Subscription 1:, Event: 4&lt;br&gt;Subscription 2:, Event: 4&lt;br&gt;Subscription 3:, Event: 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./publish.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素&quot;&gt;&lt;a href=&quot;#replay-相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素&quot; class=&quot;headerlink&quot; title=&quot;replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素&quot;&gt;&lt;/a&gt;replay()相对于publish增加了bufferSize指定对元素的缓存大小，这样新加入的订阅者可以获取相应个数的已发送的元素&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;printExampleHeader(#function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; intSequence = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;.interval(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, scheduler: &lt;span class=&quot;type&quot;&gt;MainScheduler&lt;/span&gt;.instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .replay(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subscription 1:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123; intSequence.connect() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subscription 2:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subscription 3:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;delay 2&lt;/p&gt;
&lt;p&gt;Subscription 1:, Event: 0&lt;br&gt;Subscription 2:, Event: 0&lt;br&gt;Subscription 1:, Event: 1&lt;br&gt;Subscription 2:, Event: 1&lt;br&gt;Subscription 1:, Event: 2&lt;br&gt;Subscription 2:, Event: 2&lt;br&gt;Subscription 1:, Event: 3&lt;br&gt;Subscription 2:, Event: 3&lt;br&gt;Subscription 1:, Event: 4&lt;br&gt;Subscription 2:, Event: 4&lt;br&gt;Subscription 3:, Event: 0&lt;br&gt;Subscription 3:, Event: 1&lt;br&gt;Subscription 3:, Event: 2&lt;br&gt;Subscription 3:, Event: 3&lt;br&gt;Subscription 3:, Event: 4&lt;br&gt;Subscription 1:, Event: 5&lt;br&gt;Subscription 2:, Event: 5&lt;br&gt;Subscription 3:, Event: 5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./replay.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;multicast-需要传入一个subject，通过subject来管理向订阅者发送消息&quot;&gt;&lt;a href=&quot;#multicast-需要传入一个subject，通过subject来管理向订阅者发送消息&quot; class=&quot;headerlink&quot; title=&quot;multicast()需要传入一个subject，通过subject来管理向订阅者发送消息&quot;&gt;&lt;/a&gt;multicast()需要传入一个subject，通过subject来管理向订阅者发送消息&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;printExampleHeader(#function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; subject = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = subject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subject: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; intSequence = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;.interval(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, scheduler: &lt;span class=&quot;type&quot;&gt;MainScheduler&lt;/span&gt;.instance)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .multicast(subject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\tSubscription 1:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123; intSequence.connect() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\tSubscription 2:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delay(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = intSequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\tSubscription 3:, Event: &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;delay 2&lt;/p&gt;
&lt;p&gt;Subject: 0&lt;br&gt;Subscription 1:, Event: 0&lt;br&gt; Subject: 1&lt;br&gt;Subscription 1:, Event: 1&lt;br&gt;Subscription 2:, Event: 1&lt;br&gt; Subject: 2&lt;br&gt;Subscription 1:, Event: 2&lt;br&gt;Subscription 2:, Event: 2&lt;br&gt; Subject: 3&lt;br&gt;Subscription 1:, Event: 3&lt;br&gt;Subscription 2:, Event: 3&lt;br&gt;Subscription 3:, Event: 3&lt;br&gt; Subject: 4&lt;br&gt;Subscription 1:, Event: 4&lt;br&gt;Subscription 2:, Event: 4&lt;br&gt;Subscription 3:, Event: 4&lt;br&gt; Subject: 5&lt;br&gt;Subscription 1:, Event: 5&lt;br&gt;Subscription 2:, Event: 5&lt;br&gt;Subscription 3:, Event: 5&lt;/p&gt;
&lt;h2 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;h3 id=&quot;catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed&quot;&gt;&lt;a href=&quot;#catchErrorJustReturn-通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后-Completed&quot; class=&quot;headerlink&quot; title=&quot;catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed&quot;&gt;&lt;/a&gt;catchErrorJustReturn()通过返回一个只发送一个元素的Observable序列来捕获错误信息，然后 Completed&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sequenceThatFails = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatFails&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .catchErrorJustReturn(&lt;span class=&quot;string&quot;&gt;&quot;😊&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatFails.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😬&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatFails.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😨&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatFails.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😡&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatFails.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatFails.onError(&lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Test&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(😬)&lt;br&gt;Next(😨)&lt;br&gt;Next(😡)&lt;br&gt;Next(🔴)&lt;br&gt;Next(😊)&lt;br&gt;Completed&lt;/p&gt;
&lt;h3 id=&quot;catchError-当捕获错误后会返回一个正常的Observable序列与之合并&quot;&gt;&lt;a href=&quot;#catchError-当捕获错误后会返回一个正常的Observable序列与之合并&quot; class=&quot;headerlink&quot; title=&quot;catchError()当捕获错误后会返回一个正常的Observable序列与之合并&quot;&gt;&lt;/a&gt;catchError()当捕获错误后会返回一个正常的Observable序列与之合并&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sequenceThatErrors = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; recoverySequence = &lt;span class=&quot;type&quot;&gt;PublishSubject&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .catchError &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Error:&quot;&lt;/span&gt;, $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; recoverySequence&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😬&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😨&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😡&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🔴&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors.onError(&lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Test&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;recoverySequence.onNext(&lt;span class=&quot;string&quot;&gt;&quot;😊&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;Next(😬)&lt;br&gt;Next(😨)&lt;br&gt;Next(😡)&lt;br&gt;Next(🔴)&lt;br&gt;Error: Test&lt;br&gt;Next(😊)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./catch.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数&quot;&gt;&lt;a href=&quot;#retry-当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数&quot; class=&quot;headerlink&quot; title=&quot;retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数&quot;&gt;&lt;/a&gt;retry()当遇到error后发送一条error消息然后重新重头发送元素，通过传入一个整数可以指定重复次数&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sequenceThatErrors = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;.create &amp;#123; observer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍎&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍐&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🍊&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        observer.onError(&lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Test&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Error encountered&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐶&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;🐭&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    observer.onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NopDisposable&lt;/span&gt;.instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sequenceThatErrors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .retry()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeNext &amp;#123; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addDisposableTo(disposeBag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;output:&lt;/code&gt;&lt;br&gt;🍎&lt;br&gt;🍐&lt;br&gt;🍊&lt;br&gt;Error encountered&lt;br&gt;🍎&lt;br&gt;🍐&lt;br&gt;🍊&lt;br&gt;🐶&lt;br&gt;🐱&lt;br&gt;🐭&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;./retry.png&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;debug&quot;&gt;&lt;a href=&quot;#debug&quot; class=&quot;headerlink&quot; title=&quot;debug&quot;&gt;&lt;/a&gt;debug&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;debug()会打印详细的信息&lt;/li&gt;
&lt;li&gt;RxSwift.resourceCount()打印资源分配计数&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：不要在Release builds中使用&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;一个观察者(Observer)订阅一个可观察序列(Observable)。观察者对Observable发射的数据或数据序列作出响应&lt;/p&gt;
&lt;h2 id=&quot;为什么发用RxSwift&quot;&gt;&lt;a href=&quot;#为什么发用RxSwift&quot; class=&quot;headerlink&quot; title=&quot;为什么发用RxSwift&quot;&gt;&lt;/a&gt;为什么发用RxSwift&lt;/h2&gt;&lt;p&gt;一个程序通常包含着大量的各种事件的产生以及对应的处理逻辑，各种响应方法使代码更加的混乱和复杂，而RxSwift是一个统一的处理各种响应事件的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Observable的创建和订阅&lt;/li&gt;
&lt;li&gt;Subjects的使用&lt;/li&gt;
&lt;li&gt;Combination：Observable的混合操作&lt;/li&gt;
&lt;li&gt;Transforming：Observable的转换操作&lt;/li&gt;
&lt;li&gt;Filtering：Observable消息元素的过滤操作&lt;/li&gt;
&lt;li&gt;对Observable元素做运算操作&lt;/li&gt;
&lt;li&gt;Connectable操作&lt;/li&gt;
&lt;li&gt;错误处理&lt;/li&gt;
&lt;li&gt;debug&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="RXSwift" scheme="http://www.jvaeyhcd.cc/tags/RXSwift/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习笔记之闭包</title>
    <link href="http://www.jvaeyhcd.cc/2016/06/01/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%97%AD%E5%8C%85/"/>
    <id>http://www.jvaeyhcd.cc/2016/06/01/Swift学习笔记之闭包/</id>
    <published>2016-06-01T01:20:16.000Z</published>
    <updated>2016-06-02T05:14:41.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;全局和嵌套函数其实也是特殊的闭包，闭包采取如下三种形式之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局函数是一个有名字但不会捕获任何值的闭包&lt;/li&gt;
&lt;li&gt;嵌套函数是一个有名字并可以捕获其封闭函数内值的闭包&lt;/li&gt;
&lt;li&gt;闭包表达式是一个利用轻量级语法    所写的可以捕获其上下文中变量或常量值的匿名闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Swift表达式拥有简洁的风格，并鼓励在常见场景进行语法优化，主要有如下优化方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用上下文推断判断参数和返回值类型&lt;/li&gt;
&lt;li&gt;隐式返回单表达式闭包，即单表达式可以省略&lt;code&gt;return&lt;/code&gt;关键字&lt;/li&gt;
&lt;li&gt;参数名称缩写&lt;/li&gt;
&lt;li&gt;尾随（Trailing）闭包语法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;闭包表达式&quot;&gt;&lt;a href=&quot;#闭包表达式&quot; class=&quot;headerlink&quot; title=&quot;闭包表达式&quot;&gt;&lt;/a&gt;闭包表达式&lt;/h2&gt;&lt;p&gt;闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变得简单明了。下面闭包表达式的例子通过几次迭代展示了&lt;code&gt;sort&lt;/code&gt;方法定义和语法优化的方式。每一次都用更简洁的方式描述了相同的功能。&lt;/p&gt;
&lt;h3 id=&quot;sort方法&quot;&gt;&lt;a href=&quot;#sort方法&quot; class=&quot;headerlink&quot; title=&quot;sort方法&quot;&gt;&lt;/a&gt;sort方法&lt;/h3&gt;&lt;p&gt;Swift标准库提供了名为&lt;code&gt;sort&lt;/code&gt;的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。一旦排序完成，&lt;code&gt;sort&lt;/code&gt;方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组并不会被&lt;code&gt;sort&lt;/code&gt;方法修改。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; names = [&lt;span class=&quot;string&quot;&gt;&quot;Jay&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Vae&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Jvaeyhcd&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortFun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s1:String, s2:String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1 &amp;gt; s2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(sortFun)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该例子是对一个&lt;code&gt;String&lt;/code&gt;类型的数组进行排序，因此排序闭包函数类型需为&lt;code&gt;(String,String)-&amp;gt;Bool&lt;/code&gt;。提供排序闭包函数的方式是写一个符合其类型要求的普通函数，并将其作为&lt;code&gt;sort&lt;/code&gt;的参数传入。然而，这是一个相当冗长的方式，本质上只是写一个单表达式函数（&lt;code&gt;s1 &amp;gt; s2&lt;/code&gt;）。下面例子中，利用闭包表达式可以更好地构建一个内联排序闭包。&lt;/p&gt;
&lt;h3 id=&quot;闭包表达式语法&quot;&gt;&lt;a href=&quot;#闭包表达式语法&quot; class=&quot;headerlink&quot; title=&quot;闭包表达式语法&quot;&gt;&lt;/a&gt;闭包表达式语法&lt;/h3&gt;&lt;p&gt;闭包表达式语法一般如下：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; (parameters) -&amp;gt; returnType &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;闭包表达式可以使用变量、常量以及&lt;code&gt;inout&lt;/code&gt;类型作为参数，但是不能提供默认值。也可以在参数列表的最后使用可变参数，元组也可以作为参数和返回值。&lt;/p&gt;
&lt;p&gt;下面例子展示了上面&lt;code&gt;sortFun(_:_:)&lt;/code&gt;函数对应的闭包表达式版本的代码：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s1:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, s2:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1 &amp;lt; s2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是内联闭包参数和返回值类型申明与&lt;code&gt;sortFun(_:_:)&lt;/code&gt;类型申明相同。两种方式中，都写成了&lt;code&gt;(s1:String, s2:String)-&amp;gt;Bool&lt;/code&gt;。然而在内联表达式中，函数和返回值类型都写在大括号内，而不是大括号外。&lt;br&gt;闭包函数体部分由关键字&lt;code&gt;in&lt;/code&gt;引入。该关键字表示闭包的参数和返回值类型都已定义完成，闭包函数体即将开始。由于这个闭包函数体部分如此短，以至于可以将其写成一行代码：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(&amp;#123;(s1:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, s2:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1 &amp;lt; s2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该例中&lt;code&gt;sort(_:)&lt;/code&gt;方法的整体调用保持不变，一对圆括号仍然包裹住了方法的整个参数。然而，参数现在变成了内联闭包。&lt;/p&gt;
&lt;h3 id=&quot;根据上下文推断类型&quot;&gt;&lt;a href=&quot;#根据上下文推断类型&quot; class=&quot;headerlink&quot; title=&quot;根据上下文推断类型&quot;&gt;&lt;/a&gt;根据上下文推断类型&lt;/h3&gt;&lt;p&gt;因为排序闭包函数是作为&lt;code&gt;sort(_:)&lt;/code&gt;方法参数传入的，Swift可判断其参数和返回值的类型。&lt;code&gt;sort(_:)&lt;/code&gt;方法被一个字符串数组调用，此参数必须是&lt;code&gt;(String, String)-&amp;gt;Bool&lt;/code&gt;类型的函数。这意味着&lt;code&gt;(String, String)&lt;/code&gt;和&lt;code&gt;Bool&lt;/code&gt;类型并不是必须作为闭包表达式定义的一部分。因为所有类型都可以被正确判断，返回箭头(&lt;code&gt;-&amp;gt;&lt;/code&gt;)和围绕在周围的括号也可以被省略：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(&amp;#123;s1, s2 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1 &amp;gt; s2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上任何情况下，通过内联闭包表达式构造的闭包作为参数传递给函数或方法时，都可以推断出闭包的参数和返回值类型。 这意味着闭包作为函数或者方法的参数时，您几乎不需要利用完整格式构造内联闭包。&lt;/p&gt;
&lt;p&gt;尽管如此，您仍然可以明确写出有着完整格式的闭包。如果完整格式的闭包能够提高代码的可读性，则可以采用完整格式的闭包。&lt;/p&gt;
&lt;h3 id=&quot;单表达式闭包隐式返回&quot;&gt;&lt;a href=&quot;#单表达式闭包隐式返回&quot; class=&quot;headerlink&quot; title=&quot;单表达式闭包隐式返回&quot;&gt;&lt;/a&gt;单表达式闭包隐式返回&lt;/h3&gt;&lt;p&gt;单行表达式闭包可以通过省略&lt;code&gt;return&lt;/code&gt;关键字来隐式返回单行表达式的结果，如上面版本代码可以改写为：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(&amp;#123;s1, s2 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s1 &amp;gt; s2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;sort(_:)&lt;/code&gt;方法的参数类型明确了闭包必须返回一个&lt;code&gt;Bool&lt;/code&gt;类型值。因为闭包函数体只包含了一个单一表达式（&lt;code&gt;s1 &amp;gt; s2&lt;/code&gt;），该表达式返回&lt;code&gt;Bool&lt;/code&gt;类型值，因此这里没有歧义，&lt;code&gt;return&lt;/code&gt;关键字可以省略。&lt;/p&gt;
&lt;h3 id=&quot;参数名称缩写&quot;&gt;&lt;a href=&quot;#参数名称缩写&quot; class=&quot;headerlink&quot; title=&quot;参数名称缩写&quot;&gt;&lt;/a&gt;参数名称缩写&lt;/h3&gt;&lt;p&gt;Swift自动为内联包提供了参数名称缩写功能，你可以直接通过&lt;code&gt;$0&lt;/code&gt;,&lt;code&gt;$1&lt;/code&gt;,&lt;code&gt;$2&lt;/code&gt;来顺序调用闭包的参数，以此类推。如果您在闭包表达式中使用参数名缩写，你可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。&lt;code&gt;in&lt;/code&gt;关键字同样也可以被省略，因此闭包表达式完全由闭包函数体构成：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(&amp;#123;$&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;gt; $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;$0&lt;/code&gt;和&lt;code&gt;$1&lt;/code&gt;表示闭包中第一个和第二个&lt;code&gt;String&lt;/code&gt;类型的参数。&lt;/p&gt;
&lt;h3 id=&quot;运算符函数&quot;&gt;&lt;a href=&quot;#运算符函数&quot; class=&quot;headerlink&quot; title=&quot;运算符函数&quot;&gt;&lt;/a&gt;运算符函数&lt;/h3&gt;&lt;p&gt;实际上还有更简单的方式来实现上面例子中的闭包表达式。Swift中&lt;code&gt;String&lt;/code&gt;类型定义了关于大于符号(&lt;code&gt;&amp;gt;&lt;/code&gt;)的字符串实现，其作为一个函数接收两个&lt;code&gt;String&lt;/code&gt;类型的参数并返回&lt;code&gt;Bool&lt;/code&gt;类型的值。而这正好与&lt;code&gt;sort(_:)&lt;/code&gt;方法的参数需要的函数类型相符合。因此，您可以简单地传递一个大于号，Swift 可以自动推断出您想使用大于号的字符串函数实现：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNames = names.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;尾随闭包&quot;&gt;&lt;a href=&quot;#尾随闭包&quot; class=&quot;headerlink&quot; title=&quot;尾随闭包&quot;&gt;&lt;/a&gt;尾随闭包&lt;/h2&gt;&lt;p&gt;如果你需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用尾随闭包来增强函数的可读性。尾随闭包是一个书写在函数括号后的闭包表达式，函数支持将其作为最后一个参数调用：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;someFunctionThatTakesAClosure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(closure: &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 函数体部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以下是不使用尾随闭包进行函数调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;someFunctionThatTakesAClosure(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 闭包主体部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以下是使用尾随闭包进行函数调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;someFunctionThatTakesAClosure() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 闭包主体部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以上面&lt;code&gt;sort(_:)&lt;/code&gt;方法参数字符串排序闭包可以改写为&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNumbers = numbers.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;&amp;#123;$&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;gt; $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果函数只需要闭包表达式一个参数，当使用尾随闭包时可以把&lt;code&gt;()&lt;/code&gt;省略&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sortedNumbers = numbers.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;()&amp;#123;$&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;gt; $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当闭包非常长以至于不能在一行进行书写，尾随闭包变得非常有用。举个例子来说，Swifte的&lt;code&gt;Array&lt;/code&gt;类型有一个&lt;code&gt;map(_:)&lt;/code&gt;方法，其获取一个闭包表达式作为唯一参数。该闭包函数会为数组中的额每一个元素调用一次，并返回该元素所映射的值。具体的映射方式和返回值类型由闭包来指定。当提供给数组的闭包用于数组每个元素后，&lt;code&gt;map(_:)&lt;/code&gt;方法将返回一个新的数组，数组中包含了与原数组中的元素一一对应的映射后的值。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; digitNames = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Zero&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;One&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Two&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Three&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Four&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Five&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Six&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Seven&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Eight&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Nine&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numbers = [&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;89&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; strings = numbers.&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (number) -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; number = number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; number &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        output = digitNames[number % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]! + output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        number /= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(strings)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面示例代码展示了如何在&lt;code&gt;map(_:)&lt;/code&gt;方法中使用尾随闭包将&lt;code&gt;Int&lt;/code&gt;类型的数组&lt;code&gt;[34, 65, 89]&lt;/code&gt;转换为包含对应&lt;code&gt;String&lt;/code&gt;类型值的数组&lt;code&gt;[&amp;quot;ThreeFour&amp;quot;, &amp;quot;SixFive&amp;quot;, &amp;quot;EightNine&amp;quot;]&lt;/code&gt;。&lt;br&gt;&lt;code&gt;map(_:)&lt;/code&gt;为数组中每一个元素调用了闭包表达式。您不需要指定闭包的输入参数&lt;code&gt;number&lt;/code&gt;的类型，因为可以通过要映射的数组类型进行推断。&lt;br&gt;在该例中，局部变量&lt;code&gt;number&lt;/code&gt;的值由闭包中的&lt;code&gt;numbe&lt;/code&gt;r参数获得,因此可以在闭包函数体内对其进行修改，(闭包或者函数的参数总是固定的),闭包表达式指定了返回类型为&lt;code&gt;String&lt;/code&gt;，以表明存储映射值的新数组类型为&lt;code&gt;String&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;闭包表达式在每次被调用的时候创建了一个叫做&lt;code&gt;output&lt;/code&gt;的字符串并返回。其使用求余运算符（&lt;code&gt;number % 10&lt;/code&gt;）计算最后一位数字并利用&lt;code&gt;digitNames&lt;/code&gt;字典获取所映射的字符串。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：字典digitNames下标后跟着一个叹号（&lt;code&gt;!&lt;/code&gt;），因为字典下标返回一个可选值（optional value），表明该键不存在时会查找失败。在上例中，由于可以确定&lt;code&gt;number % 10&lt;/code&gt;总是digitNames字典的有效下标，因此叹号可以用于强制解包 (force-unwrap) 存储在下标的可选类型的返回值中的&lt;code&gt;String&lt;/code&gt;类型的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;捕获值&quot;&gt;&lt;a href=&quot;#捕获值&quot; class=&quot;headerlink&quot; title=&quot;捕获值&quot;&gt;&lt;/a&gt;捕获值&lt;/h2&gt;&lt;p&gt;闭包可以在其被定义的上下文中捕获常量或者变量。即使定义这些常量或变量的作用域已经不在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift中可捕获值的最简单的形势就是嵌套函数，也就是定义在其它函数内的函数。嵌套函数可以捕获其外部函数所有的参数以及常量和变量。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeIncrementor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forIncrement amount: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; () -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; runningTotal = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incrementor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        runningTotal += amount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; runningTotal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrementor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; incrementByOne = makeIncrementor(forIncrement: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByOne()&lt;span class=&quot;comment&quot;&gt;//返回1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByOne()&lt;span class=&quot;comment&quot;&gt;//返回2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; incrementByTen = makeIncrementor(forIncrement: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByTen()&lt;span class=&quot;comment&quot;&gt;//返回10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByOne()&lt;span class=&quot;comment&quot;&gt;//返回3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面例子中有一个叫&lt;code&gt;makeIncrementor&lt;/code&gt;的函数，它包含了一个叫&lt;code&gt;incrementor&lt;/code&gt;的嵌套函数。嵌套函数&lt;code&gt;incrementor&lt;/code&gt;从上下文捕获了两个值&lt;code&gt;runningTotal&lt;/code&gt;和&lt;code&gt;amount&lt;/code&gt;，捕获值后&lt;code&gt;makeIncrementor&lt;/code&gt;将&lt;code&gt;incrementor&lt;/code&gt;作为闭包返回。每次调用&lt;code&gt;incrementor&lt;/code&gt;时，它会以&lt;code&gt;amount&lt;/code&gt;作为增量增加&lt;code&gt;runningTotal&lt;/code&gt;的值。&lt;br&gt;&lt;code&gt;makeIncrementor&lt;/code&gt;函数返回类型为&lt;code&gt;() -&amp;gt; Int&lt;/code&gt;，这意味着它返回的是一个函数，而不是一个简单类型的值。该函数在每次调用时不接受参数，只返回一个&lt;code&gt;Int&lt;/code&gt;类型的值。&lt;br&gt;&lt;code&gt;makeIncrementer(forIncrement:)&lt;/code&gt;又一个&lt;code&gt;Int&lt;/code&gt;类型的参数，其外部参数名为&lt;code&gt;forIncrement&lt;/code&gt;，内部参数名为&lt;code&gt;amount&lt;/code&gt;，该参数表示每次&lt;code&gt;incrementor&lt;/code&gt;被调用时&lt;code&gt;runningTotal&lt;/code&gt;将要增加的量。&lt;br&gt;嵌套函数&lt;code&gt;incrementor&lt;/code&gt;用来执行实际的增加操作，使&lt;code&gt;runningTotal&lt;/code&gt;增加&lt;code&gt;amount&lt;/code&gt;，并将其返回。&lt;br&gt;如果我们单独看&lt;code&gt;incrementor()&lt;/code&gt;这个函数，会发现不同寻常&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incrementor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runningTotal += amount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; runningTotal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;incrementor()&lt;/code&gt;并没有接受任何参数，但是在函数体内访问了&lt;code&gt;runningTotal&lt;/code&gt;和&lt;code&gt;amount&lt;/code&gt;，这是因为它从外围函数捕获了&lt;code&gt;runningTotal&lt;/code&gt;和&lt;code&gt;amount&lt;/code&gt;变量的引用。捕获引用保证了&lt;code&gt;runningTotal&lt;/code&gt;和&lt;code&gt;amount&lt;/code&gt;变量在调用完&lt;code&gt;makeIncrementor&lt;/code&gt;或不会消失，并且保证在下一次执行&lt;code&gt;incrementer&lt;/code&gt;函数时&lt;code&gt;runningTotal&lt;/code&gt;依然存在。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：为了优化，如果一个值是不可变的，Swift可能会改为捕获并保存一份对值的拷贝。Swift也会负责被捕获变量的所有内存管理工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; incrementByOne = makeIncrementor(forIncrement: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByOne()&lt;span class=&quot;comment&quot;&gt;//返回1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByOne()&lt;span class=&quot;comment&quot;&gt;//返回2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; incrementByTen = makeIncrementor(forIncrement: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByTen()&lt;span class=&quot;comment&quot;&gt;//返回10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByOne()&lt;span class=&quot;comment&quot;&gt;//返回3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incrementByTen()&lt;span class=&quot;comment&quot;&gt;//返回20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果您创建了另一个&lt;code&gt;incrementor&lt;/code&gt;，它会有属于它自己的一个全新、独立的&lt;code&gt;runningTotal&lt;/code&gt;变量的引用：&lt;br&gt;再次调用原来的&lt;code&gt;incrementByOne&lt;/code&gt;会在原来的变量&lt;code&gt;runningTotal&lt;/code&gt;上继续增加值，该变量和&lt;code&gt;incrementByTen&lt;/code&gt;中捕获的变量没有任何联系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：如果您将闭包赋值给一个类实例的属性，并且该闭包通过访问该实例或其成员而捕获了该实例，您将创建一个在闭包和该实例间的循环强引用。Swift 使用捕获列表来打破这种循环强引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;闭包是引用类型&quot;&gt;&lt;a href=&quot;#闭包是引用类型&quot; class=&quot;headerlink&quot; title=&quot;闭包是引用类型&quot;&gt;&lt;/a&gt;闭包是引用类型&lt;/h2&gt;&lt;p&gt;上面的例子中，&lt;code&gt;incrementByOne&lt;/code&gt;和&lt;code&gt;incrementByTen&lt;/code&gt;是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。&lt;br&gt;无论你将函数或者闭包赋值给一个常量还是变量，实际上都是将常量或者变量的值设置为对应函数或闭包的引用。。上面的示例中，指向闭包的引用&lt;code&gt;incrementByTen&lt;/code&gt;是一个常量，而非闭包内容本身。&lt;br&gt;这也意味着如果您将闭包赋值给了两个不同的常量或变量，两个值都会指向同一个闭包：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; alsoIncrementByTen = incrementByTen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alsoIncrementByTen()&lt;span class=&quot;comment&quot;&gt;//返回30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;非逃逸闭包&quot;&gt;&lt;a href=&quot;#非逃逸闭包&quot; class=&quot;headerlink&quot; title=&quot;非逃逸闭包&quot;&gt;&lt;/a&gt;非逃逸闭包&lt;/h2&gt;&lt;p&gt;当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。当你定义接受闭包作为参数的函数时，你可以在参数名之前标注&lt;code&gt;@noescape&lt;/code&gt;，用来指明这个闭包时不允许“逃逸”出这个函数的。将闭包标注&lt;code&gt;@noescape&lt;/code&gt;能使编译器知道这个闭包的生命周期（闭包只能在函数体中被执行，不能脱离函数体执行，所以编译器明确知道运行时的上下文），从而可以进行一些比较激进的优化。&lt;br&gt;&lt;code&gt;Array&lt;/code&gt;中提供的&lt;code&gt;sort(_:)&lt;/code&gt;方法接受一个用来进行元素比较的闭包作为函数，这个参数被标注了&lt;code&gt;@noescape&lt;/code&gt;，因为它确保自己在排序结束后就没用了。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;someFunctionWithNoescapeClosure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@noescape closure: &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closure()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;someFunctionWithNoescapeClosure&lt;/code&gt;定义了一个传入非逃逸闭包的函数。&lt;br&gt;一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。比如，很多启动异步操作的函数接受一个闭包参数作为completion handler。这类函数会在异步操作开始之后立即返回，但是闭包直到异步操作结束后才会被调用。在这种情况下，闭包需要“逃逸”出函数，因为闭包需要在函数返回之后被调用。例如：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; completionHandlers:[() -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;someFunctionWithEscapingClosure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(completionHandler:&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;-&amp;gt;&lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    completionHandlers.append(completionHandler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;someFunctionWithEscapingClosure(_:)&lt;/code&gt;函数接受一个闭包作为参数，该闭包被添加到一个函数外定义的数组中。如果你试图将这个参数标注为&lt;code&gt;@noescape&lt;/code&gt;将会得到一个编译错误。&lt;br&gt;将闭包标注为&lt;code&gt;@noescape&lt;/code&gt;使你能在闭包中隐式地引用&lt;code&gt;self&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        someFunctionWithEscapingClosure(&amp;#123;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.x = &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        someFunctionWithEscapingClosure(&amp;#123;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.x = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        someFunctionWithNoescapeClosure(&amp;#123;x = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; instance = &lt;span class=&quot;type&quot;&gt;ExClass&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instance.doSomething()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(instance.x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;completionHandlers.first?()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(instance.x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;completionHandlers.last?()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(instance.x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;一般来说，在学习一个新的东西前我们都需要先了解这个东西的定义。在Swift中的闭包是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift中的闭包与C和objc中的代码块(blocks)以及其它一些语言中的匿名函数比较相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift学习笔记" scheme="http://www.jvaeyhcd.cc/categories/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Swift" scheme="http://www.jvaeyhcd.cc/tags/Swift/"/>
    
      <category term="闭包" scheme="http://www.jvaeyhcd.cc/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习笔记之函数</title>
    <link href="http://www.jvaeyhcd.cc/2016/05/31/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://www.jvaeyhcd.cc/2016/05/31/Swift学习笔记之函数/</id>
    <published>2016-05-31T10:19:17.000Z</published>
    <updated>2016-06-17T09:27:30.000Z</updated>
    
    <content type="html">&lt;p&gt;函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。&lt;/p&gt;
&lt;p&gt;Swift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。&lt;/p&gt;
&lt;p&gt;在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;函数的定义与调用&quot;&gt;&lt;a href=&quot;#函数的定义与调用&quot; class=&quot;headerlink&quot; title=&quot;函数的定义与调用&quot;&gt;&lt;/a&gt;函数的定义与调用&lt;/h2&gt;&lt;p&gt;当你定义一个函数时，你可以定义一个或多个有名字和类型的值，作为函数的输入（称为参数），也可以定义某种类型的值作为函数执行结束的输出（称为返回类型）。&lt;/p&gt;
&lt;p&gt;每个函数有个函数名，用来描述函数执行的任务，要使用一个函数时，你用函数名“调用”，并传给它匹配的输入值（称作实参）。一个函数的实参必须与函数表里的顺序一致。&lt;/p&gt;
&lt;p&gt;下面有个例子函数叫做&lt;code&gt;sayHello(_:)&lt;/code&gt;,之所以叫这个名字，是因为这个函数用一个人的名字当做输入，并返回给这个人的问候语。为了完成这个任务，你定义一个输入参数，一个叫做&lt;code&gt;personName&lt;/code&gt;的&lt;code&gt;String&lt;/code&gt;值，和一个包含给这个人的问候语的&lt;code&gt;String&lt;/code&gt;类型的返回值。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(personName: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; greeting = &lt;span class=&quot;string&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; + personName + &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; greeting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有这些信息汇总起来成为函数的定义，并以&lt;code&gt;func&lt;/code&gt;作为前缀。指定函数返回类型时，用返回箭头&lt;code&gt;-&amp;gt;&lt;/code&gt;后跟返回类型的名称的方式来表示。&lt;/p&gt;
&lt;p&gt;该定义描述了函数做什么，它期望接受什么和执行结束时它返回的结果类型是什么，这样的定义使得函数可以在别的地方以一种清晰的方式被调用：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(sayHello(&lt;span class=&quot;string&quot;&gt;&quot;Anna&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints &quot;Hello, Anna!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(sayHello(&lt;span class=&quot;string&quot;&gt;&quot;Brian&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints &quot;Hello, Brian!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;函数参数和返回值&quot;&gt;&lt;a href=&quot;#函数参数和返回值&quot; class=&quot;headerlink&quot; title=&quot;函数参数和返回值&quot;&gt;&lt;/a&gt;函数参数和返回值&lt;/h3&gt;&lt;p&gt;函数参数与返回值在Swift中极为灵活，你可以定义任何类型的函数，包括从只带一个未名参数的简单函数到复杂的带有表达性参数名和不同参数选项的复杂函数。&lt;/p&gt;
&lt;h3 id=&quot;无参函数&quot;&gt;&lt;a href=&quot;#无参函数&quot; class=&quot;headerlink&quot; title=&quot;无参函数&quot;&gt;&lt;/a&gt;无参函数&lt;/h3&gt;&lt;p&gt;函数可以没有参数。下面这个函数就是一个无参函数，当被调用时，它返回固定的 &lt;code&gt;String&lt;/code&gt; 消息：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHelloWorld&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello, world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(sayHelloWorld())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints &quot;hello, world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管这个函数没有参数，但是定义中在函数名后还是需要一对圆括号。当被调用时，也需要在函数名后写一对圆括号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;多参函数&quot;&gt;&lt;a href=&quot;#多参函数&quot; class=&quot;headerlink&quot; title=&quot;多参函数&quot;&gt;&lt;/a&gt;多参函数&lt;/h3&gt;&lt;p&gt;函数可以有多种输入参数，这些参数被包含在函数的括号之中，以逗号分隔。&lt;br&gt;这个函数用一个人名和是否已经打过招呼作为输入，并返回对这个人的适当问候语:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(personName: String, alreadyGreeted: Bool)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; alreadyGreeted &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sayHelloAgain(personName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sayHello(personName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(sayHello(&lt;span class=&quot;string&quot;&gt;&quot;Tim&quot;&lt;/span&gt;, alreadyGreeted: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints &quot;Hello again, Tim!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;无返回值函数&quot;&gt;&lt;a href=&quot;#无返回值函数&quot; class=&quot;headerlink&quot; title=&quot;无返回值函数&quot;&gt;&lt;/a&gt;无返回值函数&lt;/h3&gt;&lt;p&gt;函数可以没有返回值。下面是&lt;code&gt;sayHello(_:)&lt;/code&gt;函数的另一个版本，叫&lt;code&gt;sayGoodbye(_:)&lt;/code&gt;，这个函数直接输出&lt;code&gt;String&lt;/code&gt;值，而不是返回它：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayGoodbye&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(personName: String)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Goodbye, &lt;span class=&quot;subst&quot;&gt;\(personName)&lt;/span&gt;!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayGoodbye(&lt;span class=&quot;string&quot;&gt;&quot;Dave&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints &quot;Goodbye, Dave!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为这个函数不需要返回值，所以这个函数的定义中没有返回箭头&lt;code&gt;-&amp;gt;&lt;/code&gt;和返回类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：严格上来说，虽然没有返回值被定义，&lt;code&gt;sayGoodbye(_:)&lt;/code&gt;函数依然返回了值。没有定义返回类型的函数会返回特殊的值，叫做&lt;code&gt;Void&lt;/code&gt;。它是一个空的元组，没有任何元素，可以写成&lt;code&gt;()&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;函数是用来完成特定任务的独立代码块，你给一个个函数起一个合适的名字，用来标识该函数做什么，并且当函数需要执行的时候，这个名字会被用于“调用”函数。&lt;/p&gt;
&lt;p&gt;Swift统一的函数语法足够灵活，可以用来表示任何函数，包括从最简单的没有参数名字的C风格函数，到复杂带局部和外部参数名的Objective-C风格函数。参数可以提供默认值，以简化函数调用。参数也可以即当传入参数，也当传出参数。也就是说函数也是第一等公民，和常亮、变量一样。&lt;/p&gt;
&lt;p&gt;在Swiftl中，每一个函数都有一种类型，包括函数的参数值类型和返回值类型。你可以把函数类型当做其他不同类型变量一样处理，这样就可以更简单地把函数当做别的函数参数，也可以从其他函数中返回函数。函数的定义可以卸载其他函数定义中，这样可以在嵌套函数范围内实现功能封装。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift学习笔记" scheme="http://www.jvaeyhcd.cc/categories/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Swift" scheme="http://www.jvaeyhcd.cc/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>初识ReactiveCocoa响应式编程</title>
    <link href="http://www.jvaeyhcd.cc/2016/05/24/%E5%88%9D%E8%AF%86ReactiveCocoa%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.jvaeyhcd.cc/2016/05/24/初识ReactiveCocoa响应式编程/</id>
    <published>2016-05-24T05:02:01.000Z</published>
    <updated>2016-05-24T05:45:09.000Z</updated>
    
    <content type="html">&lt;p&gt;参考文章&lt;br&gt;&lt;a href=&quot;http://www.itiger.me/?p=38&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用ReactiveCocoa实现iOS平台响应式编程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveCocoa与Functional Reactive Programming&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/87ef6720a096&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最快让你上手ReactiveCocoa之基础篇&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2014/07/reactiveCocoa-cocoa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;花瓣网李忠：ReactiveCocoa是Cocoa的未来&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveCocoa 讨论会&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章&lt;br&gt;&lt;a href=&quot;http://www.itiger.me/?p=38&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用ReactiveCocoa实现iOS平台响应式编程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://limboy.me/
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://www.jvaeyhcd.cc/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>使用Jenkins构建iOS持续集成自动打包</title>
    <link href="http://www.jvaeyhcd.cc/2016/05/21/%E4%BD%BF%E7%94%A8Jenkins%E6%9E%84%E5%BB%BAiOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://www.jvaeyhcd.cc/2016/05/21/使用Jenkins构建iOS持续集成自动打包/</id>
    <published>2016-05-21T07:48:50.000Z</published>
    <updated>2016-05-21T07:55:25.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么使用持续集成&quot;&gt;&lt;a href=&quot;#为什么使用持续集成&quot; class=&quot;headerlink&quot; title=&quot;为什么使用持续集成&quot;&gt;&lt;/a&gt;为什么使用持续集成&lt;/h3&gt;&lt;p&gt;1、减少重复繁琐的打包过程&lt;br&gt;2、任何时间、任何地点测试都可以获取到新包&lt;br&gt;3、增强项目的可见性&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;参考文档：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/c69deb29720d#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://rannie.github.io/ios/2014/12/29/xcodebuild-jenkins-ci.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Xcodebuild + Jenkins + Apache 做 iOS 持续集成&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么使用持续集成&quot;&gt;&lt;a href=&quot;#为什么使用持续集成&quot; class=&quot;headerlink&quot; title=&quot;为什么使用持续集成&quot;&gt;&lt;/a&gt;为什么使用持续集成&lt;/h3&gt;&lt;p&gt;1、减少重复繁琐的打包过程&lt;br&gt;2、任何时间、任何地点测试都可以获取到新包&lt;br&gt;3、增强项目的可见性&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://www.jvaeyhcd.cc/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>关闭iOS系统自动更新提示的方法</title>
    <link href="http://www.jvaeyhcd.cc/2016/05/16/%E5%85%B3%E9%97%ADiOS%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%8F%90%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://www.jvaeyhcd.cc/2016/05/16/关闭iOS系统自动更新提示的方法/</id>
    <published>2016-05-16T02:16:25.000Z</published>
    <updated>2016-06-02T03:47:39.000Z</updated>
    
    <content type="html">&lt;p&gt;一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;经过一段时间的试验，有如下几个对应方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 - 通用 - 用量 - 管理存储空间 - 找到更新包，然后删除它&lt;/li&gt;
&lt;li&gt;设置 - iTunes&amp;amp;App Stores, 找到Updates，关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果以上两个方案还不管用，直接放大招：&lt;br&gt;在手机上打开safari，地址栏输入:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://oldcat.me/web/NOOTA9.mobileconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后回车&lt;br&gt;按照要求安装此provision文件即可，然后重启。&lt;/p&gt;
&lt;img src=&quot;/2016/05/16/关闭iOS系统自动更新提示的方法/thumb_IMG_0889_1024.jpg&quot; alt=&quot;安装provision文件&quot; title=&quot;安装provision文件&quot;&gt;
&lt;p&gt;重启后打开设置 - 通用 - 软件更新 有惊喜&lt;/p&gt;
&lt;img src=&quot;/2016/05/16/关闭iOS系统自动更新提示的方法/thumb_IMG_0890_1024.jpg&quot; alt=&quot;结果图&quot; title=&quot;结果图&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都被iOS的自动更新困扰，每次苹果推出了最新版本的iOS系统都会提示自动更新，真的很烦。并且公司的测试机不可能全都是一个版本的系统，不然很多不同iOS版本系统的bug根本无法测出来，所以为了保持测试机系统的多样性，我想保持一部分手机系统永不更新，让我自己的手机保持最新系统就行了。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.jvaeyhcd.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="iOS系统" scheme="http://www.jvaeyhcd.cc/tags/iOS%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>objc过滤NSString中的HTML标签</title>
    <link href="http://www.jvaeyhcd.cc/2016/05/04/Objective-C%E8%BF%87%E6%BB%A4NSString%E4%B8%AD%E7%9A%84HTML%E6%A0%87%E7%AD%BE/"/>
    <id>http://www.jvaeyhcd.cc/2016/05/04/Objective-C过滤NSString中的HTML标签/</id>
    <published>2016-05-04T03:17:29.000Z</published>
    <updated>2016-06-02T03:57:38.000Z</updated>
    
    <content type="html">&lt;p&gt;开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。&lt;/p&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：&lt;/p&gt;
&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;p&gt;用NSScanner扫描来处理&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;NSString+Jvaeyhcd.h&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Jvaeyhcd&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)removeHTML;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;NSString+Jvaeyhcd.m&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)removeHTML &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSScanner&lt;/span&gt; *theScanner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *text = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    theScanner = [&lt;span class=&quot;built_in&quot;&gt;NSScanner&lt;/span&gt; scannerWithString:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ([theScanner isAtEnd] == &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// find start of tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theScanner scanUpToString:&lt;span class=&quot;string&quot;&gt;@&quot;&amp;lt;&quot;&lt;/span&gt; intoString:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// find end of tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theScanner scanUpToString:&lt;span class=&quot;string&quot;&gt;@&quot;&amp;gt;&quot;&lt;/span&gt; intoString:&amp;amp;text] ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// replace the found tag with a space&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//(you can filter multi-spaces out later if you wish)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; stringByReplacingOccurrencesOfString:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@&amp;gt;&quot;&lt;/span&gt;, text] withString:&lt;span class=&quot;string&quot;&gt;@&quot; &quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h3&gt;&lt;p&gt;用NSString自带的Seprated自截断方法&lt;/p&gt;
&lt;p&gt;NSString+Jvaeyhcd.h&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Jvaeyhcd&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)removeHTML2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;NSString+Jvaeyhcd.m&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)removeHTML2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *components = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; componentsSeparatedByCharactersInSet:[&lt;span class=&quot;built_in&quot;&gt;NSCharacterSet&lt;/span&gt; characterSetWithCharactersInString:&lt;span class=&quot;string&quot;&gt;@&quot;&amp;lt;&amp;gt;&quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *componentsToKeep = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; [components count]; i = i + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [componentsToKeep addObject:[components objectAtIndex:i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *plainText = [componentsToKeep componentsJoinedByString:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; plainText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;开发过程中常常会遇到这样一个情况：对于后台编辑的一些文本都是使用富文本的形式进行编辑的，我们在使用接口区请求数据的时候，请求到的数据是带HTML标签的富文本形式，但是我们前台是使用UIlabel去显示的，这个时候就需要去掉NSString的HTML标签。&lt;/p&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;对于这种常用的一些方法，我们一般会创建一个NSString的Category去实现。关于去掉NSString中HTML标签的实现方法我在网上找到了两种实现方式：&lt;/p&gt;
&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;p&gt;用NSScanner扫描来处理&lt;/p&gt;
    
    </summary>
    
    
      <category term="objc" scheme="http://www.jvaeyhcd.cc/tags/objc/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习笔记之基础部分</title>
    <link href="http://www.jvaeyhcd.cc/2016/04/29/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
    <id>http://www.jvaeyhcd.cc/2016/04/29/Swift学习笔记之基础部分/</id>
    <published>2016-04-29T02:07:32.000Z</published>
    <updated>2016-06-02T04:00:33.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Swift包含了C 和objc上所有的数据类型，&lt;code&gt;Int&lt;/code&gt;表示整型值；&lt;code&gt;Double&lt;/code&gt;和&lt;code&gt;Float&lt;/code&gt;表示浮点型值；&lt;code&gt;Bool&lt;/code&gt;是布尔型值；&lt;code&gt;String&lt;/code&gt;是字符串型值。此外Swift还提供了三个基本的集合类型，&lt;code&gt;Array&lt;/code&gt;，&lt;code&gt;Set&lt;/code&gt;和&lt;code&gt;Dictionary&lt;/code&gt;。&lt;br&gt;除了我们熟悉的类型，Swift 还增加了 objc 中没有的高阶数据类型比如元组（Tuple）。元组可以让你创建或者传递一组数据，比如作为函数的返回值时，你可以用一个元组可以返回多个值。&lt;/p&gt;
&lt;p&gt;Swift 还增加了可选（Optional）类型，用于处理值缺失的情况。可选表示“那儿有一个值，并且它等于 x ”或者“那儿没有值”。可选有点像在 objc 中使用&lt;code&gt;nil&lt;/code&gt;，但是它可以用在任何类型上，不仅仅是类。可选类型比 objc 中的nil指针更加安全也更具表现力，它是 Swift 许多强大特性的重要组成部分。&lt;/p&gt;
&lt;p&gt;Swift 是一门类型安全的语言，可选类型就是一个很好的例子。Swift 可以让你清楚地知道值的类型。如果你的代码期望得到一个String，类型安全会阻止你不小心传入一个&lt;code&gt;Int&lt;/code&gt;。你可以在开发阶段尽早发现并修正错误。&lt;/p&gt;
&lt;h2 id=&quot;常量和变量&quot;&gt;&lt;a href=&quot;#常量和变量&quot; class=&quot;headerlink&quot; title=&quot;常量和变量&quot;&gt;&lt;/a&gt;常量和变量&lt;/h2&gt;&lt;p&gt;常量的值一旦设定就不能改变，而变量的值可以随意更改。&lt;/p&gt;
&lt;h2 id=&quot;声明常量和变量&quot;&gt;&lt;a href=&quot;#声明常量和变量&quot; class=&quot;headerlink&quot; title=&quot;声明常量和变量&quot;&gt;&lt;/a&gt;声明常量和变量&lt;/h2&gt;&lt;p&gt;常量和变量必须在使用前声明，用&lt;code&gt;let&lt;/code&gt;来声明常量，用&lt;code&gt;var&lt;/code&gt;来声明变量。下面的例子展示了如何用常量和变量&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; maxNumberOfLoginTimes = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currentLoginTimes = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两行代码可以理解为：&lt;br&gt;&lt;code&gt;maxNumberOfLoginTimes&lt;/code&gt;声明为一个常量，它的值是10并且不可再被改变，&lt;code&gt;currentLoginAttempt&lt;/code&gt;申明为一个初始值为0的变量。&lt;br&gt;我们可以在一行中声明多个常量或者多个变量，用逗号隔开：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, y = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果你的代码中有不需要改变的值，请使用&lt;code&gt;let&lt;/code&gt;关键字将它声明为常量。只将需要改变的值声明为变量。与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; languageName = &lt;span class=&quot;string&quot;&gt;&quot;Swift&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;languageName = &lt;span class=&quot;string&quot;&gt;&quot;Swift++&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这会报编译时错误 - languageName 不可改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;类型标注&quot;&gt;&lt;a href=&quot;#类型标注&quot; class=&quot;headerlink&quot; title=&quot;类型标注&quot;&gt;&lt;/a&gt;类型标注&lt;/h2&gt;&lt;p&gt;当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。&lt;br&gt;这个例子给&lt;code&gt;welcomeMessage&lt;/code&gt;变量添加了类型标注，表示这个变量可以存储&lt;code&gt;String&lt;/code&gt;类型的值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; welcomeMessage: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;声明中的冒号代表着“是…类型”，所以这行代码可以被理解为：&lt;br&gt;“声明一个类型为&lt;code&gt;String&lt;/code&gt;，名字为&lt;code&gt;welcomeMessage&lt;/code&gt;的变量。”&lt;br&gt;“类型为&lt;code&gt;String&lt;/code&gt;”的意思是“可以存储任意&lt;code&gt;String&lt;/code&gt;类型的值。”&lt;br&gt;&lt;code&gt;welcomeMessage&lt;/code&gt;变量现在可以被设置成任意字符串：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;welcomeMessage = &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以在一行中定义多个同样类型的变量，用逗号分割，并在最后一个变量名之后添加类型标注：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; red, green, blue: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给&lt;code&gt;welcomeMessage&lt;/code&gt;赋初始值，所以变量&lt;code&gt;welcomeMessage&lt;/code&gt;的类型是通过一个类型标注指定的，而不是通过初始值推断的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常量和变量的命名&quot;&gt;&lt;a href=&quot;#常量和变量的命名&quot; class=&quot;headerlink&quot; title=&quot;常量和变量的命名&quot;&gt;&lt;/a&gt;常量和变量的命名&lt;/h2&gt;&lt;p&gt;你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; π = &lt;span class=&quot;number&quot;&gt;3.14159&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; 你好 = &lt;span class=&quot;string&quot;&gt;&quot;你好世界&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; 🐶🐮 = &lt;span class=&quot;string&quot;&gt;&quot;dogcow&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。&lt;/p&gt;
&lt;p&gt;一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;输出常量和变量&quot;&gt;&lt;a href=&quot;#输出常量和变量&quot; class=&quot;headerlink&quot; title=&quot;输出常量和变量&quot;&gt;&lt;/a&gt;输出常量和变量&lt;/h2&gt;&lt;p&gt;你可以用&lt;code&gt;print(_:separator:terminator:)&lt;/code&gt;函数来输出当前常量或变量的值:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; friendlyWelcome = &lt;span class=&quot;string&quot;&gt;&quot;Bonjour!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(friendlyWelcome)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;Bonjour!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print(_:separator:terminator:)&lt;/code&gt;是一个用来输出一个或多个值到适当输出区的全局函数。如果你用 Xcode，&lt;code&gt;print(_:separator:terminator:)&lt;/code&gt;将会输出内容到“console”面板上。separator和terminator参数具有默认值，因此你调用这个函数的时候可以忽略它们。默认情况下，该函数通过添加换行符来结束当前行。如果不想换行，可以传递一个空字符串给terminator参数–例如，&lt;code&gt;print(someValue, terminator:&amp;quot;&amp;quot;)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Swift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The current value of friendlyWelcome is &lt;span class=&quot;subst&quot;&gt;\(friendlyWelcome)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The current value of friendlyWelcome is Bonjour!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。&lt;br&gt;与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 这是第一个多行注释的开头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 这是第二个被嵌套的多行注释 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是第一个多行注释的结尾 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。&lt;br&gt;当然Swift的单行注释和多行注释和C语言的类似。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这是一个单行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 这是一个,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多行注释 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;分号&quot;&gt;&lt;a href=&quot;#分号&quot; class=&quot;headerlink&quot; title=&quot;分号&quot;&gt;&lt;/a&gt;分号&lt;/h2&gt;&lt;p&gt;与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cat = &lt;span class=&quot;string&quot;&gt;&quot;🐱&quot;&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(cat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;🐱&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;整数&quot;&gt;&lt;a href=&quot;#整数&quot; class=&quot;headerlink&quot; title=&quot;整数&quot;&gt;&lt;/a&gt;整数&lt;/h2&gt;&lt;p&gt;整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。&lt;/p&gt;
&lt;p&gt;Swift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是&lt;code&gt;UInt8&lt;/code&gt;，32位有符号整数类型是&lt;code&gt;Int32&lt;/code&gt;。就像 Swift 的其他类型一样，整数类型采用大写命名法。&lt;/p&gt;
&lt;h2 id=&quot;整数范围&quot;&gt;&lt;a href=&quot;#整数范围&quot; class=&quot;headerlink&quot; title=&quot;整数范围&quot;&gt;&lt;/a&gt;整数范围&lt;/h2&gt;&lt;p&gt;你可以访问不同整数类型的&lt;code&gt;min&lt;/code&gt;和&lt;code&gt;max&lt;/code&gt;属性来获取对应类型的最小值和最大值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; minValue = &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// minValue 为 0，是 UInt8 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; maxValue = &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// maxValue 为 255，是 UInt8 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;min&lt;/code&gt;和&lt;code&gt;max&lt;/code&gt;所传回值的类型，正是其所对的整数类型(如上例&lt;code&gt;UInt8&lt;/code&gt;, 所传回的类型是&lt;code&gt;UInt8&lt;/code&gt;)，可用在表达式中相同类型值旁。&lt;/p&gt;
&lt;h2 id=&quot;Int&quot;&gt;&lt;a href=&quot;#Int&quot; class=&quot;headerlink&quot; title=&quot;Int&quot;&gt;&lt;/a&gt;Int&lt;/h2&gt;&lt;p&gt;一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在32位平台上，&lt;code&gt;Int&lt;/code&gt;和&lt;code&gt;Int32&lt;/code&gt;长度相同。&lt;/li&gt;
&lt;li&gt;在64位平台上，&lt;code&gt;Int&lt;/code&gt;和&lt;code&gt;Int64&lt;/code&gt;长度相同。&lt;br&gt;除非你需要特定长度的整数，一般来说使用&lt;code&gt;Int&lt;/code&gt;就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，&lt;code&gt;Int&lt;/code&gt;可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;UInt&quot;&gt;&lt;a href=&quot;#UInt&quot; class=&quot;headerlink&quot; title=&quot;UInt&quot;&gt;&lt;/a&gt;UInt&lt;/h2&gt;&lt;p&gt;Swift 也提供了一个特殊的无符号类型&lt;code&gt;UInt&lt;/code&gt;，长度与当前平台的原生字长相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在32位平台上，&lt;code&gt;UInt&lt;/code&gt;和&lt;code&gt;UInt32&lt;/code&gt;长度相同。&lt;/li&gt;
&lt;li&gt;在64位平台上，&lt;code&gt;UInt&lt;/code&gt;和&lt;code&gt;UInt64&lt;/code&gt;长度相同。&lt;blockquote&gt;
&lt;p&gt;注意：尽量不要使用&lt;code&gt;UInt&lt;/code&gt;，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用&lt;code&gt;Int&lt;/code&gt;，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;浮点数&quot;&gt;&lt;a href=&quot;#浮点数&quot; class=&quot;headerlink&quot; title=&quot;浮点数&quot;&gt;&lt;/a&gt;浮点数&lt;/h2&gt;&lt;p&gt;浮点数是有小数部分的数字，比如&lt;code&gt;3.14159&lt;/code&gt;，&lt;code&gt;0.1&lt;/code&gt;和&lt;code&gt;-273.15&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;浮点类型比整数类型表示的范围更大，可以存储比&lt;code&gt;Int&lt;/code&gt;类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Double&lt;/code&gt;表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Float&lt;/code&gt;表示32位浮点数。精度要求不高的话可以使用此类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;类型安全和类型推断&quot;&gt;&lt;a href=&quot;#类型安全和类型推断&quot; class=&quot;headerlink&quot; title=&quot;类型安全和类型推断&quot;&gt;&lt;/a&gt;类型安全和类型推断&lt;/h2&gt;&lt;p&gt;Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个&lt;code&gt;String&lt;/code&gt;，你绝对不可能不小心传进去一个&lt;code&gt;Int&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。&lt;/p&gt;
&lt;p&gt;当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。&lt;/p&gt;
&lt;p&gt;因为有类型推断，和 C 或者 objc 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。&lt;/p&gt;
&lt;p&gt;当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如&lt;code&gt;42&lt;/code&gt;和&lt;code&gt;3.14159&lt;/code&gt;。）&lt;/p&gt;
&lt;p&gt;例如，如果你给一个新常量赋值&lt;code&gt;42&lt;/code&gt;并且没有标明类型，Swift 可以推断出常量类型是Int，因为你给它赋的初始值看起来像一个整数：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; meaningOfLife = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// meaningOfLife 会被推测为 Int 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是&lt;code&gt;Double&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pi = &lt;span class=&quot;number&quot;&gt;3.14159&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// pi 会被推测为 Double 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当推断浮点数的类型时，Swift 总是会选择&lt;code&gt;Double&lt;/code&gt;而不是&lt;code&gt;Float&lt;/code&gt;。&lt;br&gt;如果表达式中同时出现了整数和浮点数，会被推断为&lt;code&gt;Double&lt;/code&gt;类型：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; anotherPi = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.14159&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// anotherPi 会被推测为 Double 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;原始值&lt;code&gt;3&lt;/code&gt;没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为&lt;code&gt;Double&lt;/code&gt;类型。&lt;/p&gt;
&lt;h2 id=&quot;数值型字面量&quot;&gt;&lt;a href=&quot;#数值型字面量&quot; class=&quot;headerlink&quot; title=&quot;数值型字面量&quot;&gt;&lt;/a&gt;数值型字面量&lt;/h2&gt;&lt;p&gt;整数字面量可以被写作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个十进制数，没有前缀&lt;/li&gt;
&lt;li&gt;一个二进制数，前缀是&lt;code&gt;0b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个八进制数，前缀是&lt;code&gt;0o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个十六进制数，前缀是&lt;code&gt;0x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的所有整数字面量的十进制值都是16:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; decimalInteger = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; binaryInteger = &lt;span class=&quot;number&quot;&gt;0b10000&lt;/span&gt;       &lt;span class=&quot;comment&quot;&gt;// 二进制的16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; octalInteger = &lt;span class=&quot;number&quot;&gt;0o20&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// 八进制的16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; hexadecimalInteger = &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 十六进制的16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是&lt;code&gt;0x&lt;/code&gt;）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的 &lt;code&gt;e&lt;/code&gt; 来指定；十六进制浮点数必须有一个指数，通过大写或者小写的 &lt;code&gt;p&lt;/code&gt; 来指定。&lt;br&gt;如果一个十进制数的指数为&lt;code&gt;exp&lt;/code&gt;，那这个数相当于基数和10^exp的乘积：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.25e2&lt;/code&gt; 表示 1.25 × 10^2，等于 &lt;code&gt;125.0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.25e-2&lt;/code&gt; 表示 1.25 × 10^-2，等于 &lt;code&gt;0.0125&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个十六进制数的指数为&lt;code&gt;exp&lt;/code&gt;，那这个数相当于基数和2^exp的乘积：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0xFp2&lt;/code&gt; 表示 15 × 2^2，等于 &lt;code&gt;60.0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0xFp-2&lt;/code&gt; 表示 15 × 2^-2，等于 &lt;code&gt;3.75&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的这些浮点字面量都等于十进制的&lt;code&gt;12.1875&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; decimalDouble = &lt;span class=&quot;number&quot;&gt;12.1875&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; exponentDouble = &lt;span class=&quot;number&quot;&gt;1.21875e1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; hexadecimalDouble = &lt;span class=&quot;number&quot;&gt;0xC.3p0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; paddedDouble = &lt;span class=&quot;number&quot;&gt;000123.456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; oneMillion = &lt;span class=&quot;number&quot;&gt;1_000_000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; justOverOneMillion = &lt;span class=&quot;number&quot;&gt;1_000_000.000_000_1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;数值型类型转换&quot;&gt;&lt;a href=&quot;#数值型类型转换&quot; class=&quot;headerlink&quot; title=&quot;数值型类型转换&quot;&gt;&lt;/a&gt;数值型类型转换&lt;/h2&gt;&lt;p&gt;通常来讲，即使代码中的整数常量和变量已知非负，也请使用&lt;code&gt;Int&lt;/code&gt;类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推断。&lt;/p&gt;
&lt;p&gt;只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。&lt;/p&gt;
&lt;h2 id=&quot;整数转换&quot;&gt;&lt;a href=&quot;#整数转换&quot; class=&quot;headerlink&quot; title=&quot;整数转换&quot;&gt;&lt;/a&gt;整数转换&lt;/h2&gt;&lt;p&gt;不同整数类型的变量和常量可以存储不同范围的数字。&lt;code&gt;Int8&lt;/code&gt;类型的常量或者变量可以存储的数字范围是-128~127，而&lt;code&gt;UInt8&lt;/code&gt;类型的常量或者变量能存储的数字范围是0~255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cannotBeNegative: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UInt8 类型不能存储负数，所以会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tooBig: &lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Int8 类型不能存储超过最大值的数，所以会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于每种整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。&lt;/p&gt;
&lt;p&gt;要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量&lt;code&gt;twoThousand&lt;/code&gt;是&lt;code&gt;UInt16&lt;/code&gt;类型，然而常量&lt;code&gt;one&lt;/code&gt;是&lt;code&gt;UInt8&lt;/code&gt;类型。它们不能直接相加，因为它们类型不同。所以要调用&lt;code&gt;UInt16(one)&lt;/code&gt;来创建一个新的&lt;code&gt;UInt16&lt;/code&gt;数字并用&lt;code&gt;one&lt;/code&gt;的值来初始化，然后使用这个新数字来计算：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; twoThousand: &lt;span class=&quot;type&quot;&gt;UInt16&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2_000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; one: &lt;span class=&quot;type&quot;&gt;UInt8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; twoThousandAndOne = twoThousand + &lt;span class=&quot;type&quot;&gt;UInt16&lt;/span&gt;(one)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在两个数字的类型都是&lt;code&gt;UInt16&lt;/code&gt;，可以进行相加。目标常量&lt;code&gt;twoThousandAndOne&lt;/code&gt;的类型被推断为&lt;code&gt;UInt16&lt;/code&gt;，因为它是两个&lt;code&gt;UInt16&lt;/code&gt;值的和。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SomeType(ofInitialValue)&lt;/code&gt;是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，&lt;code&gt;UInt16&lt;/code&gt;有一个构造器，可以接受一个&lt;code&gt;UInt8&lt;/code&gt;类型的值，所以这个构造器可以用现有的&lt;code&gt;UInt8&lt;/code&gt;来创建一个新的&lt;code&gt;UInt16&lt;/code&gt;。注意，你并不能传入任意类型的值，只能传入&lt;code&gt;UInt16&lt;/code&gt;内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型）。&lt;/p&gt;
&lt;h2 id=&quot;整数和浮点数转换&quot;&gt;&lt;a href=&quot;#整数和浮点数转换&quot; class=&quot;headerlink&quot; title=&quot;整数和浮点数转换&quot;&gt;&lt;/a&gt;整数和浮点数转换&lt;/h2&gt;&lt;p&gt;整数和浮点数的转换必须显式指定类型：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; three = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pointOneFourOneFiveNine = &lt;span class=&quot;number&quot;&gt;0.14159&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pi = &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;(three) + pointOneFourOneFiveNine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// pi 等于 3.14159，所以被推测为 Double 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个例子中，常量&lt;code&gt;three&lt;/code&gt;的值被用来创建一个&lt;code&gt;Double&lt;/code&gt;类型的值，所以加号两边的数类型须相同。如果不进行转换，两者无法相加。&lt;br&gt;浮点数到整数的反向转换同样行，整数类型可以用&lt;code&gt;Double&lt;/code&gt;或者&lt;code&gt;Float&lt;/code&gt;类型来初始化：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; integerPi = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(pi)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// integerPi 等于 3，所以被推测为 Int 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说&lt;code&gt;4.75&lt;/code&gt;会变成&lt;code&gt;4&lt;/code&gt;，&lt;code&gt;-3.9&lt;/code&gt;会变成&lt;code&gt;-3&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：结合数字类常量和变量不同于结合数字类字面量。字面量&lt;code&gt;3&lt;/code&gt;可以直接和字面量&lt;code&gt;0.14159&lt;/code&gt;相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;类型别名&quot;&gt;&lt;a href=&quot;#类型别名&quot; class=&quot;headerlink&quot; title=&quot;类型别名&quot;&gt;&lt;/a&gt;类型别名&lt;/h2&gt;&lt;p&gt;类型别名（type aliases）就是给现有类型定义另一个名字。你可以使用&lt;code&gt;typealias&lt;/code&gt;关键字来定义类型别名。&lt;/p&gt;
&lt;p&gt;当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;AudioSample&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;UInt16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maxAmplitudeFound = &lt;span class=&quot;type&quot;&gt;AudioSample&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// maxAmplitudeFound 现在是 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本例中，&lt;code&gt;AudioSample&lt;/code&gt;被定义为&lt;code&gt;UInt16&lt;/code&gt;的一个别名。因为它是别名，&lt;code&gt;AudioSample.min&lt;/code&gt;实际上是&lt;code&gt;UInt16.min&lt;/code&gt;，所以会给&lt;code&gt;maxAmplitudeFound&lt;/code&gt;赋一个初值&lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;布尔值&quot;&gt;&lt;a href=&quot;#布尔值&quot; class=&quot;headerlink&quot; title=&quot;布尔值&quot;&gt;&lt;/a&gt;布尔值&lt;/h2&gt;&lt;p&gt;Swift 有一个基本的布尔（Boolean）类型，叫做&lt;code&gt;Bool&lt;/code&gt;。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; orangesAreOrange = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; turnipsAreDelicious = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;orangesAreOrange&lt;/code&gt;和&lt;code&gt;turnipsAreDelicious&lt;/code&gt;的类型会被推断为&lt;code&gt;Bool&lt;/code&gt;，因为它们的初值是布尔字面量。就像之前提到的&lt;code&gt;Int&lt;/code&gt;和&lt;code&gt;Double&lt;/code&gt;一样，如果你创建变量的时候给它们赋值&lt;code&gt;true&lt;/code&gt;或者&lt;code&gt;false&lt;/code&gt;，那你不需要将常量或者变量声明为&lt;code&gt;Bool&lt;/code&gt;类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推断，这让 Swift 代码更加简洁并且可读性更高。&lt;br&gt;当你编写条件语句比如&lt;code&gt;if&lt;/code&gt;语句的时候，布尔值非常有用：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; turnipsAreDelicious &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Mmm, tasty turnips!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Eww, turnips are horrible.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;Eww, turnips are horrible.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你在需要使用&lt;code&gt;Bool&lt;/code&gt;类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这个例子不会通过编译，会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，下面的例子是合法的：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这个例子会编译成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i == 1&lt;/code&gt;的比较结果是&lt;code&gt;Bool&lt;/code&gt;类型，所以第二个例子可以通过类型检查。&lt;/p&gt;
&lt;p&gt;和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。&lt;/p&gt;
&lt;h2 id=&quot;元组&quot;&gt;&lt;a href=&quot;#元组&quot; class=&quot;headerlink&quot; title=&quot;元组&quot;&gt;&lt;/a&gt;元组&lt;/h2&gt;&lt;p&gt;元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。&lt;/p&gt;
&lt;p&gt;下面这个例子中，&lt;code&gt;(404, &amp;quot;Not Found&amp;quot;)&lt;/code&gt;是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个&lt;code&gt;404 Not Found&lt;/code&gt;状态码。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; http404Error = (&lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(404, &amp;quot;Not Found&amp;quot;)&lt;/code&gt;元组把一个&lt;code&gt;Int&lt;/code&gt;值和一个&lt;code&gt;String&lt;/code&gt;值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为&lt;code&gt;(Int, String)&lt;/code&gt;的元组”。&lt;br&gt;你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为&lt;code&gt;(Int, Int, Int)&lt;/code&gt;或者&lt;code&gt;(String, Bool)&lt;/code&gt;或者其他任何你想要的组合的元组。&lt;br&gt;你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (statusCode, statusMessage) = http404Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status code is &lt;span class=&quot;subst&quot;&gt;\(statusCode)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status code is 404&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status message is &lt;span class=&quot;subst&quot;&gt;\(statusMessage)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status message is Not Found&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（&lt;code&gt;_&lt;/code&gt;）标记：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (justTheStatusCode, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;) = http404Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status code is &lt;span class=&quot;subst&quot;&gt;\(justTheStatusCode)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status code is 404&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status code is &lt;span class=&quot;subst&quot;&gt;\(http404Error.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status code is 404&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status message is &lt;span class=&quot;subst&quot;&gt;\(http404Error.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status message is Not Found&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以在定义元组的时候给单个元素命名：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; http200Status = (statusCode: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, description: &lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给元组中的元素命名后，你可以通过名字来获取这些元素的值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status code is &lt;span class=&quot;subst&quot;&gt;\(http200Status.statusCode)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status code is 200&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The status message is &lt;span class=&quot;subst&quot;&gt;\(http200Status.description)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;The status message is OK&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个&lt;code&gt;(Int, String)&lt;/code&gt;元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;可选类型&quot;&gt;&lt;a href=&quot;#可选类型&quot; class=&quot;headerlink&quot; title=&quot;可选类型&quot;&gt;&lt;/a&gt;可选类型&lt;/h2&gt;&lt;p&gt;使用可选类型（optionals）来处理值可能缺失的情况。&lt;br&gt;来看一个例子。Swift 的&lt;code&gt;Int&lt;/code&gt;类型有一种构造器，作用是将一个&lt;code&gt;String&lt;/code&gt;值转换成一个&lt;code&gt;Int&lt;/code&gt;值。然而，并不是所有的字符串都可以转换成一个整数。字符串&lt;code&gt;&amp;quot;123&amp;quot;&lt;/code&gt;可以被转换成数字&lt;code&gt;123&lt;/code&gt;，但是字符串&lt;code&gt;&amp;quot;hello, world&amp;quot;&lt;/code&gt;不行。&lt;/p&gt;
&lt;p&gt;下面的例子使用这种构造器来尝试将一个&lt;code&gt;String&lt;/code&gt;转换成&lt;code&gt;Int&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; possibleNumber = &lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; convertedNumber = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(possibleNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为该构造器可能会失败，所以它返回一个可选类型（optional）&lt;code&gt;Int&lt;/code&gt;，而不是一个&lt;code&gt;Int&lt;/code&gt;。一个可选的&lt;code&gt;Int&lt;/code&gt;被写作&lt;code&gt;Int?&lt;/code&gt;而不是&lt;code&gt;Int&lt;/code&gt;。问号暗示包含的值是可选类型，也就是说可能包含&lt;code&gt;Int&lt;/code&gt;值也可能不包含值。（不能包含其他任何值比如&lt;code&gt;Bool&lt;/code&gt;值或者&lt;code&gt;String&lt;/code&gt;值。只能是    &lt;code&gt;Int&lt;/code&gt;或者什么都没有。）&lt;/p&gt;
&lt;h2 id=&quot;nil&quot;&gt;&lt;a href=&quot;#nil&quot; class=&quot;headerlink&quot; title=&quot;nil&quot;&gt;&lt;/a&gt;nil&lt;/h2&gt;&lt;p&gt;你可以给可选变量赋值为&lt;code&gt;nil&lt;/code&gt;来表示它没有值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; serverResponseCode: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;? = &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// serverResponseCode 包含一个可选的 Int 值 404&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serverResponseCode = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// serverResponseCode 现在不包含值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;nil&lt;/code&gt;不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为&lt;code&gt;nil&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; surveyAnswer: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// surveyAnswer 被自动设置为 nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：Swift 的&lt;code&gt;nil&lt;/code&gt;和 objc 中的&lt;code&gt;nil&lt;/code&gt;并不一样。在 objc 中，&lt;code&gt;nil&lt;/code&gt;是一个指向不存在对象的指针。在 Swift 中，&lt;code&gt;nil&lt;/code&gt;不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为&lt;code&gt;nil&lt;/code&gt;，不只是对象类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;if-语句以及强制解析&quot;&gt;&lt;a href=&quot;#if-语句以及强制解析&quot; class=&quot;headerlink&quot; title=&quot;if 语句以及强制解析&quot;&gt;&lt;/a&gt;if 语句以及强制解析&lt;/h2&gt;&lt;p&gt;你可以使用&lt;code&gt;if&lt;/code&gt;语句和&lt;code&gt;nil&lt;/code&gt;比较来判断一个可选值是否包含值。你可以使用“相等”(&lt;code&gt;==&lt;/code&gt;)或“不等”(&lt;code&gt;!=&lt;/code&gt;)来执行比较。&lt;/p&gt;
&lt;p&gt;如果可选类型有值，它将不等于&lt;code&gt;nil&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; convertedNumber != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;convertedNumber contains some integer value.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;convertedNumber contains some integer value.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（&lt;code&gt;!&lt;/code&gt;）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; convertedNumber != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;convertedNumber has an integer value of &lt;span class=&quot;subst&quot;&gt;\(convertedNumber!)&lt;/span&gt;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;convertedNumber has an integer value of 123.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：使用&lt;code&gt;!&lt;/code&gt;来获取一个不存在的可选值会导致运行时错误。使用&lt;code&gt;!&lt;/code&gt;来强制解析值之前，一定要确定可选包含一个非&lt;code&gt;nil&lt;/code&gt;的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;可选绑定&quot;&gt;&lt;a href=&quot;#可选绑定&quot; class=&quot;headerlink&quot; title=&quot;可选绑定&quot;&gt;&lt;/a&gt;可选绑定&lt;/h2&gt;&lt;p&gt;使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;语句中，这条语句不仅可以用来判断可选类型中是否有值，同时可以将可选类型中的值赋给一个常量或者变量。&lt;/p&gt;
&lt;p&gt;像下面这样在&lt;code&gt;if&lt;/code&gt;语句中写一个可选绑定：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; constantName = someOptional &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以像上面这样使用可选绑定来重写&lt;code&gt;possibleNumber&lt;/code&gt;这个例子：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; actualNumber = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(possibleNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\&#39;&lt;span class=&quot;subst&quot;&gt;\(possibleNumber)&lt;/span&gt;\&#39; has an integer value of &lt;span class=&quot;subst&quot;&gt;\(actualNumber)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\&#39;&lt;span class=&quot;subst&quot;&gt;\(possibleNumber)&lt;/span&gt;\&#39; could not be converted to an integer&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;&#39;123&#39; has an integer value of 123&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码可以被理解为：“如果&lt;code&gt;Int(possibleNumber)&lt;/code&gt;返回的可选&lt;code&gt;Int&lt;/code&gt;包含一个值，创建一个叫做&lt;code&gt;actualNumber&lt;/code&gt;的新常量并将可选包含的值赋给它。”&lt;/p&gt;
&lt;p&gt;如果转换成功，&lt;code&gt;actualNumber&lt;/code&gt;常量可以在&lt;code&gt;if&lt;/code&gt;语句的第一个分支中使用。它已经被可选类型 包含的 值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，&lt;code&gt;actualNumber&lt;/code&gt;只被用来输出转换结果。&lt;/p&gt;
&lt;p&gt;你可以在可选绑定中使用常量和变量。如果你想在&lt;code&gt;if&lt;/code&gt;语句的第一个分支中操作&lt;code&gt;actualNumber&lt;/code&gt;的值，你可以改成&lt;code&gt;if var actualNumber&lt;/code&gt;，这样可选类型包含的值就会被赋给一个变量而非常量。&lt;/p&gt;
&lt;p&gt;你可以包含多个可选绑定在&lt;code&gt;if&lt;/code&gt;语句中，并使用&lt;code&gt;where&lt;/code&gt;子句做布尔值判断。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; firstNumber = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;), secondNumber = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; firstNumber &amp;lt; secondNumber &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(firstNumber)&lt;/span&gt; &amp;lt; &lt;span class=&quot;subst&quot;&gt;\(secondNumber)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints &quot;4 &amp;lt; 42&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;隐式解析可选类型&quot;&gt;&lt;a href=&quot;#隐式解析可选类型&quot; class=&quot;headerlink&quot; title=&quot;隐式解析可选类型&quot;&gt;&lt;/a&gt;隐式解析可选类型&lt;/h2&gt;&lt;p&gt;如上所述，可选类型暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。&lt;/p&gt;
&lt;p&gt;有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型&lt;em&gt;总会&lt;/em&gt;有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。&lt;/p&gt;
&lt;p&gt;这种类型的可选状态被定义为隐式解析可选类型（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（&lt;code&gt;String?&lt;/code&gt;）改成感叹号（&lt;code&gt;String!&lt;/code&gt;）来声明一个隐式解析可选类型。&lt;/p&gt;
&lt;p&gt;当可选类型被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选类型非常有用。&lt;/p&gt;
&lt;p&gt;一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当做非可选类型来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选类型&lt;code&gt;String&lt;/code&gt;和隐式解析可选类型&lt;code&gt;String&lt;/code&gt;之间的区别：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; possibleString: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;? = &lt;span class=&quot;string&quot;&gt;&quot;An optional string.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; forcedString: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; = possibleString! &lt;span class=&quot;comment&quot;&gt;// 需要惊叹号来获取值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; assumedString: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;! = &lt;span class=&quot;string&quot;&gt;&quot;An implicitly unwrapped optional string.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; implicitString: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; = assumedString  &lt;span class=&quot;comment&quot;&gt;// 不需要感叹号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果你在隐式解析可选类型没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选类型后面加一个惊叹号一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; assumedString != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(assumedString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;An implicitly unwrapped optional string.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; definiteString = assumedString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(definiteString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出 &quot;An implicitly unwrapped optional string.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果一个变量之后可能变成&lt;code&gt;nil&lt;/code&gt;的话请不要使用隐式解析可选类型。如果你需要在变量的生命周期中判断是否是&lt;code&gt;nil&lt;/code&gt;的话，请使用普通可选类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;你可以使用错误处理（error handling）来应对程序执行中可能会遇到的错误条件。相对于可选中运用值的存在与缺失来表达函数的成功与失败，错误处理可以推断失败的原因，并传播至程序的其他部分。当一个函数遇到错误条件，它能报错。调用函数的地方能抛出错误消息并合理处理。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;canThrowAnError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这个函数有可能抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个函数可以通过在声明中添加&lt;code&gt;throws&lt;/code&gt;关键词来抛出错误消息。当你的函数能抛出错误消息时, 你应该在表达式中前置&lt;code&gt;try&lt;/code&gt;关键词。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; canThrowAnError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 没有错误消息抛出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 有一个错误消息抛出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;do&lt;/code&gt;语句创建了一个新的包含作用域,使得错误能被传播到一个或多个&lt;code&gt;catch&lt;/code&gt;从句。&lt;br&gt;这里有一个错误处理如何用来应对不同错误条件的例子。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeASandwich&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; makeASandwich()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eatASandwich()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;OutOfCleanDishes&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    washDishes()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;MissingIngredients&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ingredients) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buyGroceries(ingredients)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在此例中，&lt;code&gt;makeASandwich()&lt;/code&gt;（做一个三明治）函数会抛出一个错误消息如果没有干净的盘子或者某个原料缺失。因为&lt;code&gt;makeASandwich()&lt;/code&gt;抛出错误，函数调用被包裹在&lt;code&gt;try&lt;/code&gt;表达式中。将函数包裹在一个&lt;code&gt;do&lt;/code&gt;语句中,任何被抛出的错误会被传播到提供的&lt;code&gt;catch&lt;/code&gt;从句中。&lt;/p&gt;
&lt;p&gt;如果没有错误被抛出, &lt;code&gt;eatASandwich()&lt;/code&gt;函数会被调用。如果一个匹配&lt;code&gt;Error.OutOfCleanDishes&lt;/code&gt;的错误被抛出,&lt;code&gt;washDishes&lt;/code&gt;函数会被调用。如果一个匹配&lt;code&gt;Error.MissingIngredients&lt;/code&gt;的错误被抛出，&lt;code&gt;buyGroceries(_:)&lt;/code&gt;函数会随着被&lt;code&gt;catch&lt;/code&gt;所捕捉到的关联值[&lt;code&gt;String&lt;/code&gt;]被调用。&lt;/p&gt;
&lt;h2 id=&quot;断言&quot;&gt;&lt;a href=&quot;#断言&quot; class=&quot;headerlink&quot; title=&quot;断言&quot;&gt;&lt;/a&gt;断言&lt;/h2&gt;&lt;p&gt;可选类型可以让你判断值是否存在，你可以在代码中优雅地处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，你的代码可能没办法继续执行。这时，你可以在你的代码中触发一个断言（assertion）来结束代码运行并通过调试来找到值缺失的原因。&lt;/p&gt;
&lt;h2 id=&quot;使用断言进行调试&quot;&gt;&lt;a href=&quot;#使用断言进行调试&quot; class=&quot;headerlink&quot; title=&quot;使用断言进行调试&quot;&gt;&lt;/a&gt;使用断言进行调试&lt;/h2&gt;&lt;p&gt;断言会在运行时判断一个逻辑条件是否为&lt;code&gt;true&lt;/code&gt;。从字面意思来说，断言“断言”一个条件是否为真。你可以使用断言来保证在运行其他代码之前，某些重要的条件已经被满足。如果条件判断为&lt;code&gt;true&lt;/code&gt;，代码运行会继续进行；如果条件判断为&lt;code&gt;false&lt;/code&gt;，代码执行结束，你的应用被终止。&lt;/p&gt;
&lt;p&gt;如果你的代码在调试环境下触发了一个断言，比如你在 Xcode 中构建并运行一个应用，你可以清楚地看到不合法的状态发生在哪里并检查断言被触发时你的应用的状态。此外，断言允许你附加一条调试信息。&lt;/p&gt;
&lt;p&gt;你可以使用全局&lt;code&gt;assert(_:_file:line:)&lt;/code&gt;函数来写一个断言。向这个函数传入一个结果为&lt;code&gt;true&lt;/code&gt;或者&lt;code&gt;false&lt;/code&gt;的表达式以及一条信息，当表达式的结果为&lt;code&gt;false&lt;/code&gt;的时候这条信息会被显示：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; age = -&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;assert&lt;/span&gt;(age &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A person&#39;s age cannot be less than zero&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 因为 age &amp;lt; 0，所以断言会触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，只有&lt;code&gt;age &amp;gt;= 0&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;的时候，即&lt;code&gt;age&lt;/code&gt;的值非负的时候，代码才会继续执行。如果&lt;code&gt;age&lt;/code&gt;的值是负数，就像代码中那样，&lt;code&gt;age &amp;gt;= 0为false&lt;/code&gt;，断言被触发，终止应用。&lt;/p&gt;
&lt;p&gt;如果不需要断言信息，可以省略，就像这样：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;assert&lt;/span&gt;(age &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;何时使用断言&quot;&gt;&lt;a href=&quot;#何时使用断言&quot; class=&quot;headerlink&quot; title=&quot;何时使用断言&quot;&gt;&lt;/a&gt;何时使用断言&lt;/h2&gt;&lt;p&gt;当条件可能为假时使用断言，但是最终一定要&lt;em&gt;保证&lt;/em&gt;条件为真，这样你的代码才能继续运行。断言的适用情景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数类型的下标索引被传入一个自定义下标实现，但是下标索引值可能太小或者太大。&lt;/li&gt;
&lt;li&gt;需要给函数传入一个值，但是非法的值可能导致函数不能正常执行。&lt;/li&gt;
&lt;li&gt;一个可选值现在是&lt;code&gt;nil&lt;/code&gt;，但是后面的代码运行需要一个非&lt;code&gt;nil&lt;/code&gt;值。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：断言可能导致你的应用终止运行，所以你应当仔细设计你的代码来让非法条件不会出现。然而，在你的应用发布之前，有时候非法条件可能出现，这时使用断言可以快速发现问题。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所有知识都来至于网上以及官方的学习资料，本文不做任何商业用途，只是自己的一个学习笔记，如有侵权请及时告知我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Swift 是一门开发 iOS, OS X 和 watchOS 应用的新语言(传说以后还可以用于开始Android应用)。然而，如果你有 C 或者 objc 开发经验的话，你会发现 Swift 的很多内容都是你熟悉的（如果没有 C 或者 objc 相关开发经验也没有关系，大家都说Swift比较通俗易懂更加容易上手）。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift学习笔记" scheme="http://www.jvaeyhcd.cc/categories/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Swift" scheme="http://www.jvaeyhcd.cc/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Mac基础：如何让Finder显示隐藏文件和文件夹</title>
    <link href="http://www.jvaeyhcd.cc/2016/04/28/Mac%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A9Finder%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://www.jvaeyhcd.cc/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/</id>
    <published>2016-04-28T01:43:25.000Z</published>
    <updated>2016-04-28T07:27:34.000Z</updated>
    
    <content type="html">&lt;p&gt;有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？&lt;/p&gt;
&lt;h2 id=&quot;让Finder显示隐藏文件和文件夹&quot;&gt;&lt;a href=&quot;#让Finder显示隐藏文件和文件夹&quot; class=&quot;headerlink&quot; title=&quot;让Finder显示隐藏文件和文件夹&quot;&gt;&lt;/a&gt;让Finder显示隐藏文件和文件夹&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;b&gt;第一步：&lt;/b&gt;打开「终端」应用程序（我推荐使用&lt;a href=&quot;https://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm&lt;/a&gt;,他比Mac自带终端好用很多）。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;第二步：&lt;/b&gt;输入如下命令，如图一所示：&lt;/p&gt;
&lt;img src=&quot;/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/bash.png&quot; alt=&quot;图一&quot; title=&quot;图一&quot;&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -boolean &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; ; killall Finder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//OS X Mountain Lion 和早期版本命令如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;第三步：&lt;/b&gt;按下「Return」键确认。&lt;br&gt;现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。如图二所示：&lt;/p&gt;
&lt;img src=&quot;/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/finder.png&quot; alt=&quot;图二&quot; title=&quot;图二&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;让Finder隐藏隐藏文件和文件夹&quot;&gt;&lt;a href=&quot;#让Finder隐藏隐藏文件和文件夹&quot; class=&quot;headerlink&quot; title=&quot;让Finder隐藏隐藏文件和文件夹&quot;&gt;&lt;/a&gt;让Finder隐藏隐藏文件和文件夹&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只需要一步&lt;br&gt;如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成（图三）即可。&lt;/p&gt;
&lt;img src=&quot;/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/show.png&quot; alt=&quot;图三&quot; title=&quot;图三&quot;&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -boolean &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; ; killall Finder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//OS X Mountain Lion 和早期版本命令如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后看到的效果如图四所示：&lt;/p&gt;
&lt;img src=&quot;/2016/04/28/Mac基础：如何让Finder显示隐藏文件和文件夹/hidefinder.png&quot; alt=&quot;图四&quot; title=&quot;图四&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有些人中喜欢折腾一些奇怪的东西（比如说我），使用git已经很长一段时间了，但是最近才发现在Finder中找不到.git的文件夹。原来这个东西是被隐藏了，那么现在问题来了，我要将隐藏的文件或者文件夹显示出来应该如何做呢？&lt;/p&gt;
&lt;h2 id=&quot;让Finder显示隐藏文件和文件夹&quot;&gt;&lt;a href=&quot;#让Finder显示隐藏文件和文件夹&quot; class=&quot;headerlink&quot; title=&quot;让Finder显示隐藏文件和文件夹&quot;&gt;&lt;/a&gt;让Finder显示隐藏文件和文件夹&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;b&gt;第一步：&lt;/b&gt;打开「终端」应用程序（我推荐使用&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm&lt;/a&gt;,他比Mac自带终端好用很多）。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Mac基础" scheme="http://www.jvaeyhcd.cc/categories/Mac%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Mac" scheme="http://www.jvaeyhcd.cc/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Failed to Locate or Generate Matchin Signing Assets</title>
    <link href="http://www.jvaeyhcd.cc/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/"/>
    <id>http://www.jvaeyhcd.cc/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/</id>
    <published>2016-04-18T08:58:38.000Z</published>
    <updated>2016-04-27T11:33:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h2&gt;&lt;p&gt;刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。&lt;/p&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/problem.png&quot; alt=&quot;问题详情&quot; title=&quot;问题详情&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;如何解决&quot;&gt;&lt;a href=&quot;#如何解决&quot; class=&quot;headerlink&quot; title=&quot;如何解决&quot;&gt;&lt;/a&gt;如何解决&lt;/h2&gt;&lt;p&gt;还是Google大法好，一下就找到了解决办法。&lt;/p&gt;
&lt;p&gt;以下是我在网上找到了解决办法的详细步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先创建一个文件夹，名字就叫Payload，&lt;a style=&quot;color:#4cc190&quot;&gt;一定要是Payload&lt;/a&gt;（如果你不信，可以换一个名字试试）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在Organizer中然后把 archive 出来的那个在 finder 打开。&lt;/p&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/export.png&quot; alt=&quot;Organizer中显示&quot; title=&quot;Organizer中显示&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后点击显示包内容。&lt;/p&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/show_in_finder.png&quot; alt=&quot;在Finder中显示&quot; title=&quot;在Finder中显示&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把app 和 dsym 那两个文件拷贝到 Payload文件夹中。&lt;/p&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/product.png&quot; alt=&quot;product文件目录&quot; title=&quot;product文件目录&quot;&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/dSYMs.png&quot; alt=&quot;dSYMs文件目录&quot; title=&quot;dSYMs文件目录&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后对Payload压缩&lt;/p&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/zip.png&quot; alt=&quot;Payload压缩&quot; title=&quot;Payload压缩&quot;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后将Playload.zip的后缀名改成ipa即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的方法完全可以解决无法导出ipa的问题，但是导出ipa比export出来的包要大一些。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h2&gt;&lt;p&gt;刚开始还是好好的，突然就出现了标题的提示错误，首先签名是正确的，App ID也没有被占用的，但是在导出ipa的时候一直出现“Failed to locate or generate matchin signing assets”的提示信息。我也是醉得不行，有时能成功，有时不行，不知道苹果在搞什么鬼（不管他在搞什么，出现问题，还是不要一味的去抱怨，找解决办法才是真的）。&lt;/p&gt;
&lt;img src=&quot;/2016/04/18/Failed-to-locate-or-generate-matchin-signing-assets/problem.png&quot; alt=&quot;问题详情&quot; title=&quot;问题详情&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift开源项目汇总</title>
    <link href="http://www.jvaeyhcd.cc/2016/04/11/Swift%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
    <id>http://www.jvaeyhcd.cc/2016/04/11/Swift开源项目汇总/</id>
    <published>2016-04-11T07:06:52.000Z</published>
    <updated>2016-05-21T07:32:52.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。&lt;/p&gt;
&lt;h2 id=&quot;界面类&quot;&gt;&lt;a href=&quot;#界面类&quot; class=&quot;headerlink&quot; title=&quot;界面类&quot;&gt;&lt;/a&gt;界面类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/raulriera/TextFieldEffects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextFieldEffects&lt;/a&gt;&lt;br&gt;你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/FahimF/FloatLabelFields&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FloatLabelFields&lt;/a&gt;&lt;br&gt;带浮动标签的输入框&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/MortimerGoro/MGSwipeTableCell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MGSwipeTableCell&lt;/a&gt;&lt;br&gt;另一个UI组件，在很多app里都常见，苹果应该考虑在iOS标准库里加入类似的东西。可滑动的table cell，这是这个pod最好的描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/lexrus/LTMorphingLabel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LTMorphingLabel&lt;/a&gt;&lt;br&gt;有超赞特效效果的Label&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ephread/Instructions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Instructions&lt;/a&gt;&lt;br&gt;操作指引框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mamaral/Onboard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Onboard&lt;/a&gt;&lt;br&gt;启动导航界面，很方便的集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SnapKit/SnapKit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnapKit&lt;/a&gt;&lt;br&gt;Swift布局框架 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具类&quot;&gt;&lt;a href=&quot;#工具类&quot; class=&quot;headerlink&quot; title=&quot;工具类&quot;&gt;&lt;/a&gt;工具类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nickoneill/PermissionScope&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PermissionScope&lt;/a&gt;&lt;br&gt;用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&amp;gt;更多活跃用户-&amp;gt;更高的留存率-&amp;gt;数据更好-&amp;gt;下载率更高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Quick/Quick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick&lt;/a&gt;&lt;br&gt;Swift里的单元测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/saturngod/IAPHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IAPHelper&lt;/a&gt;&lt;br&gt;app内购带给我们很多陈词滥调的代码，用这个库就不需要了，把最有关交易金钱的普遍的任务从iOS用户到你的（或者你的公司的）钱包简单包装起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SwiftyJSON/SwiftyJSON&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwiftyJSON&lt;/a&gt;&lt;br&gt;GitHub上最为开发者认可的JSON解析类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ankurp/Dollar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dollar&lt;/a&gt;&lt;br&gt;Swift版Lo-Dash(或underscore)函数式工具库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/DaveWoodCom/XCGLogger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XCGLogger&lt;/a&gt;&lt;br&gt;功能完整的日志管理类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mattt/Surge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Surge&lt;/a&gt;&lt;br&gt;基于苹果Accelerate高性能计算框架封装库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/duemunk/Async&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Async&lt;/a&gt;&lt;br&gt;简洁的后台执行代码封装库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ArtSabintsev/Siren&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Siren&lt;/a&gt;&lt;br&gt;当应用更新时，通知用户并提供App Store链接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Thomvis/BrightFutures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrightFutures&lt;/a&gt;&lt;br&gt;漫长或复杂计算由独立线程异步来完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tadija/AEXML&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AEXML&lt;/a&gt;&lt;br&gt;简单又易于的XML解析类及示例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/andreamazz/AMScrollingNavbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AMScrollingNavbar&lt;/a&gt;&lt;br&gt;swift语言编写 上下滑动时动态隐藏标题栏&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;存储类&quot;&gt;&lt;a href=&quot;#存储类&quot; class=&quot;headerlink&quot; title=&quot;存储类&quot;&gt;&lt;/a&gt;存储类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stephencelis/SQLite.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLite.swift&lt;/a&gt;&lt;br&gt;swift版本简单、轻量，使用上最SQL的SQLite封装库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网络类&quot;&gt;&lt;a href=&quot;#网络类&quot; class=&quot;headerlink&quot; title=&quot;网络类&quot;&gt;&lt;/a&gt;网络类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alamofire&lt;/a&gt;&lt;br&gt;AFNetworking网络基础库Swift语言版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/RxSwiftCommunity/RxAlamofire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxAlamofire&lt;/a&gt;&lt;br&gt;对 Alamofire的封装，很是强大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基础工具类以及Category&quot;&gt;&lt;a href=&quot;#基础工具类以及Category&quot; class=&quot;headerlink&quot; title=&quot;基础工具类以及Category&quot;&gt;&lt;/a&gt;基础工具类以及Category&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FabrizioBrancati/BFKit-Swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BFKit Swift版本&lt;/a&gt;&lt;br&gt;国外的一个大神写的很好用的分类，比较齐全&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;图片类&quot;&gt;&lt;a href=&quot;#图片类&quot; class=&quot;headerlink&quot; title=&quot;图片类&quot;&gt;&lt;/a&gt;图片类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Alamofire/AlamofireImage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AlamofireImage&lt;/a&gt;&lt;br&gt;swift版本的SDWebImage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kaishin/ImageScout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageScout&lt;/a&gt;&lt;br&gt;最小网络代价获得图片大小及类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/indragiek/DominantColor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DominantColor&lt;/a&gt;&lt;br&gt;提取图片主色示例项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gavinbunney/Toucan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toucan&lt;/a&gt;&lt;br&gt;小而美的图片变换及处理类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kaishin/gifu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gifu&lt;/a&gt;&lt;br&gt;高性能GIF显示类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Haneke/HanekeSwift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HanekeSwift&lt;/a&gt;&lt;br&gt;轻量带缓存高性能图片加载组件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;框架类&quot;&gt;&lt;a href=&quot;#框架类&quot; class=&quot;headerlink&quot; title=&quot;框架类&quot;&gt;&lt;/a&gt;框架类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveCocoa&lt;/a&gt;&lt;br&gt;ReactiveCocoa带给我们一种完全不同的编程方式/结构，基于值的信号和流。这是完全的头脑风暴，首先你需要忘记你曾经学习的来理解它是如何工作的。这不是一个简单的任务，但是是有回报的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/MengTo/Spring&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/robb/Cartography&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cartography&lt;/a&gt;&lt;br&gt;基于代码级的自动布局封装框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mutualmobile/MMWormhole&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MMWormhole&lt;/a&gt;&lt;br&gt;iOS扩展与宿主应用的通讯框架&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;示例项目&quot;&gt;&lt;a href=&quot;#示例项目&quot; class=&quot;headerlink&quot; title=&quot;示例项目&quot;&gt;&lt;/a&gt;示例项目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ochococo/Design-Patterns-In-Swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design-Patterns-In-Swift&lt;/a&gt;&lt;br&gt;如何使用常用设计模式及示例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/robb/hamburger-button&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hamburger-button&lt;/a&gt;&lt;br&gt;无论设计还是代码，都进行了精雕细琢&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;完整项目&quot;&gt;&lt;a href=&quot;#完整项目&quot; class=&quot;headerlink&quot; title=&quot;完整项目&quot;&gt;&lt;/a&gt;完整项目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tnantoka/edhita&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;edhita&lt;/a&gt;&lt;br&gt;支持Markdown, HTML预览的文本编辑器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mozilla/firefox-ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;firefox-ios&lt;/a&gt;&lt;br&gt;来自Mozilla开发团队大型纯Swift项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JakeLin/SwiftWeather&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwiftWeather&lt;/a&gt;&lt;br&gt;清新淡雅持续改进天气预报项目&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;拥有着苹果先天生态优势的Swift自发布以来，各种优秀的开源项目便层出不穷。我站在个人的角度，将Swift开源项目做了一个甄别、筛选，从工具、存储、网络、界面、框架到Demo以及完整应用等，满满的干货。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然现在对Swift还停留在入门水平，但是还是觉得有必要去网上收集一些优秀的Swift开源项目。&lt;/p&gt;
&lt;h2 id=&quot;界面类&quot;&gt;&lt;a href=&quot;#界面类&quot; class=&quot;headerlink&quot; title=&quot;界面类&quot;&gt;&lt;/a&gt;界面类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/raulriera/TextFieldEffects&quot;&gt;TextFieldEffects&lt;/a&gt;&lt;br&gt;你不觉得标准的UITextField有一点无聊吗？我也是——所以对TextFieldEffects说hello吧！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/FahimF/FloatLabelFields&quot;&gt;FloatLabelFields&lt;/a&gt;&lt;br&gt;带浮动标签的输入框&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://www.jvaeyhcd.cc/tags/Swift/"/>
    
      <category term="iOS" scheme="http://www.jvaeyhcd.cc/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS中造成dealloc不调用的原因</title>
    <link href="http://www.jvaeyhcd.cc/2016/04/06/iOS%E4%B8%AD%E9%80%A0%E6%88%90dealloc%E4%B8%8D%E8%B0%83%E7%94%A8%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://www.jvaeyhcd.cc/2016/04/06/iOS中造成dealloc不调用的原因/</id>
    <published>2016-04-06T04:18:32.000Z</published>
    <updated>2016-06-02T04:02:22.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_mapView release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; dealloc];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//并且在界面将要显示的时候设置代理，将要消失的时候取消代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _mapView&lt;span class=&quot;variable&quot;&gt;.delegate&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillDisappear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _mapView&lt;span class=&quot;variable&quot;&gt;.delegate&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以上给出的方法确实是对的，可以解决反复切换地图页面和地图上一级页面内存暴增造成的闪退问题。但是这里要说的不是这个问题，而是一个新的问题，我在dealloc中打了断点，但是dealloc根本就没有执行，所以mapView也就根本就没有释放，内存还是一样在暴增。为什么ViewController已经被pop了，而ViewController的dealloc方法却没有被调用？（按理说ViewController被pop的时候它的dealloc的方法应该被调用才对）。&lt;/p&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;通过Google搜索终于在晚上找到了答案（大家就不要用百度，想要快速准确的找到自己想要的答案推荐大家用google）。造成ViewController不释放的原因可能有很多。遇到dealloc不调用的时候只需要检查您的ViewController中是否存在以下几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;ViewController中存在NSTimer&lt;/b&gt;&lt;/p&gt;
&lt;p&gt; 如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(updateTime:) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 时，这个&lt;a style=&quot;color: #FF00EE&quot;&gt;target:self&lt;/a&gt;就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;ViewController中有关的代理&lt;/b&gt;&lt;/p&gt;
&lt;p&gt; 一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性？比如一个代理的delegate应该是 assign 的现在是retain，(╯‵□′)╯︵┻━┻，就是这个，它会影响你不让你调用dealloc，不信，就试试吧。（这个我还没有遇到过）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;ViewController中有Block&lt;/b&gt;&lt;/p&gt;
&lt;p&gt; 这个就是我我上面不进入dealloc的真正原因，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。&lt;br&gt; 例如你这个类叫OneViewController,有个属性是NSString *name; 如果你在block体中使用了self.name，那样子的话这个类就没法释放。&lt;br&gt; 要解决这个问题，MRC下只需&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block Viewcontroller *weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; ARC下将&lt;strong&gt;block 换为 &lt;/strong&gt;weak&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前我所知道的就以上三种情况，如果有什么错误的地方或者还存在的一些情况，欢迎大家来补充。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;最近在一个项目中用到了地图，发现在地图页面和上一个页面间反复切换回出现内存爆增的情况，就像吃了炫迈一样根本停不下来（直到app内存爆表，app闪退收场）。造成这一结果的根本原因是地图的mapView没有释放，导致每次打开地图界面的时候内存中都重新加载了一个地图mapView。于是在网上搜索了一番找到了解决办法，只需要在地图的ViewController中dealloc方法中释放掉mapView就行了。具体代码如下:&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_mapView release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; dealloc];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//并且在界面将要显示的时候设置代理，将要消失的时候取消代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _mapView&lt;span class=&quot;variable&quot;&gt;.delegate&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillDisappear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _mapView&lt;span class=&quot;variable&quot;&gt;.delegate&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于UItableView的复用</title>
    <link href="http://www.jvaeyhcd.cc/2016/04/05/%E5%85%B3%E4%BA%8EUItableView%E7%9A%84%E5%A4%8D%E7%94%A8/"/>
    <id>http://www.jvaeyhcd.cc/2016/04/05/关于UItableView的复用/</id>
    <published>2016-04-05T01:26:44.000Z</published>
    <updated>2016-06-02T04:03:03.000Z</updated>
    
    <content type="html">&lt;p&gt;UITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;关于UItableView的复用机制大概是这样的：假设一个UItableView要加载10000条数据，但是一个屏幕最大只能展示3条数据（这里屏幕最多能展示的数据条数是根据UItableViewCell的高度来定的）。然后当你向上滑动，想要查看更多的内容，那么肯定需要一个cell放在已经存在的内容下边。这个时候并不会重新去创建一个UItableViewCell放在下面，而是根据cellIdetifier去内存池中拿到与之对应的UItableViewCell。&lt;/p&gt;
&lt;h2 id=&quot;复用方式&quot;&gt;&lt;a href=&quot;#复用方式&quot; class=&quot;headerlink&quot; title=&quot;复用方式&quot;&gt;&lt;/a&gt;复用方式&lt;/h2&gt;&lt;p&gt;UItableView的复用方式有如下四种方式实现&lt;/p&gt;
&lt;p&gt;方式一:&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell=[tableView dequeueReusableCellWithIdentifier:cellIdentifier];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cell) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cell=[[&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; alloc]initWithStyle:&lt;span class=&quot;built_in&quot;&gt;UITableViewCellStyleDefault&lt;/span&gt; reuseIdentifier:cellIdentifier]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方式二:UItableViewCell是xib写的&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XXXTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; == cell) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell = [[[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle]loadNibNamed:&lt;span class=&quot;string&quot;&gt;@&quot;XXXTableViewCell&quot;&lt;/span&gt; owner:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; options:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]lastObject];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell&lt;span class=&quot;variable&quot;&gt;.selectionStyle&lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt;UITableViewCellSelectionStyleNone&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [tableView registerNib:[&lt;span class=&quot;built_in&quot;&gt;UINib&lt;/span&gt; nibWithNibName:&lt;span class=&quot;string&quot;&gt;@&quot;XXXTableViewCell&quot;&lt;/span&gt; bundle:[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle]] forCellReuseIdentifier:cellIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方式三:在xib中identifier属性必须写上cellIdentifier ,对应代码中的cellIdentifier&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XXTableViewCell *cell;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; == cell) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell= [[[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] loadNibNamed:&lt;span class=&quot;string&quot;&gt;@&quot;XXTableViewCell&quot;&lt;/span&gt; owner:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; options:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] lastObject];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方式四：先register cell，然后复用&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#pragma mark - 初始化控件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_tableView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _tableView = [[&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; alloc]initWithFrame:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.frame&lt;/span&gt; style:&lt;span class=&quot;built_in&quot;&gt;UITableViewStylePlain&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _tableView&lt;span class=&quot;variable&quot;&gt;.backgroundColor&lt;/span&gt; = kMainBgColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _tableView&lt;span class=&quot;variable&quot;&gt;.dataSource&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _tableView&lt;span class=&quot;variable&quot;&gt;.delegate&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _tableView&lt;span class=&quot;variable&quot;&gt;.separatorStyle&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;UITableViewCellSeparatorStyleNone&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_tableView registerClass:[XXXCell_iPhone class] forCellReuseIdentifier:kCellIdentifier_XXXCell];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _tableView&lt;span class=&quot;variable&quot;&gt;.tableFooterView&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.loadingFooterView&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _tableView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//复用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XXXCell_iPhone *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentifier_XXXCell forIndexPath:indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell&lt;span class=&quot;variable&quot;&gt;.type&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.type&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [cell setExpressOrder:[_list safeObjectAtIndex:indexPath&lt;span class=&quot;variable&quot;&gt;.row&lt;/span&gt;] needTopView:indexPath&lt;span class=&quot;variable&quot;&gt;.row&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;UITableView是我从开始接触iOS编程到现在最常用的一个控件，没有之一。这篇文章就先不说UITableView的基本用法了，详细有一点iOS基础的人都应该知道，这里主要想理一理UItableView的复用机制。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;为了更清楚明白的描述UItableView的复用机制，我们先假设UItableView如果没有复用机制。如果UItableVIew没有复用机制，我们要展示10000条数据的的话，那就得生成10000条UItableViewCell，这样将会占用大量的内存，并且性能大家可以想象一下（这个UItableView滑动起来一定是相当的卡顿，非常影响用户体验）。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS学习笔记" scheme="http://www.jvaeyhcd.cc/categories/iOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="iOS" scheme="http://www.jvaeyhcd.cc/tags/iOS/"/>
    
      <category term="笔记" scheme="http://www.jvaeyhcd.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
